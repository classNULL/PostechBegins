// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(22891);
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a87() } }, { func: function() { __GLOBAL__I_a125() } }, { func: function() { __GLOBAL__I_a209() } });
  

/* memory initializer */ allocate([236,138,164,237,138,184,235,160,136,236,138,164,32,236,167,128,236,136,152,236,151,144,32,236,157,180,236,131,129,236,157,180,32,236,158,136,236,138,181,235,139,136,235,139,164,46,0,0,49,46,32,234,179,181,235,182,128,237,149,152,234,184,176,0,50,46,32,236,136,160,235,167,136,236,139,156,234,184,176,0,51,46,32,235,143,153,236,149,132,235,166,172,32,237,153,156,235,143,153,237,149,152,234,184,176,0,0,0,0,0,0,0,52,46,32,236,151,176,236,149,160,237,149,152,234,184,176,0,53,46,32,237,156,180,236,139,157,0,0,0,0,0,0,0,54,46,32,236,167,145,234,176,128,234,184,176,0,0,0,0,54,46,32,235,176,165,236,130,172,235,139,172,235,157,188,234,179,160,237,149,152,234,184,176,0,0,0,0,0,0,0,0,51,46,32,236,151,176,236,149,160,237,149,152,234,184,176,0,52,46,32,237,156,180,236,139,157,0,0,0,0,0,0,0,53,46,32,236,167,145,234,176,128,234,184,176,0,0,0,0,54,46,32,236,182,164,32,236,151,176,236,138,181,237,149,152,234,184,176,0,0,0,0,0,49,46,32,236,176,184,234,176,128,237,149,156,235,139,164,0,50,46,32,236,176,184,234,176,128,237,149,152,236,167,128,32,236,149,138,235,138,148,235,139,164,0,0,0,0,0,0,0,0,0,0,0,112,1,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,52,101,120,97,109,0,0,0,52,99,101,108,108,0,0,0,248,80,0,0,96,1,0,0,200,82,0,0,88,1,0,0,104,1,0,0,0,0,0,0,0,0,0,0,168,1,0,0,25,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,56,102,101,115,116,105,118,97,108,0,0,0,0,0,0,0,200,82,0,0,152,1,0,0,104,1,0,0,0,0,0,0,55,115,112,101,99,105,97,108,0,0,0,0,0,0,0,0,200,82,0,0,184,1,0,0,104,1,0,0,0,0,0,0,0,0,0,0,248,1,0,0,28,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,54,110,111,114,109,97,108,0,200,82,0,0,240,1,0,0,104,1,0,0,0,0,0,0,0,0,0,0,48,2,0,0,31,0,0,0,32,0,0,0,33,0,0,0,0,0,0,0,55,119,101,101,107,101,110,100,0,0,0,0,0,0,0,0,200,82,0,0,32,2,0,0,104,1,0,0,0,0,0,0,0,0,0,0,96,2,0,0,34,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,53,109,97,114,99,104,0,0,200,82,0,0,88,2,0,0,104,1,0,0,0,0,0,0,0,0,0,0,152,2,0,0,37,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,49,49,98,101,102,111,114,101,95,101,120,97,109,0,0,0,200,82,0,0,136,2,0,0,104,1,0,0,0,0,0,0,0,0,0,0,208,2,0,0,40,0,0,0,41,0,0,0,42,0,0,0,0,0,0,0,49,48,97,102,116,101,114,95,101,120,97,109,0,0,0,0,200,82,0,0,192,2,0,0,104,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,43,0,0,0,44,0,0,0,45,0,0,0,0,0,0,0,53,100,97,110,99,101,0,0,200,82,0,0,248,2,0,0,104,1,0,0,0,0,0,0,0,0,0,0,48,3,0,0,46,0,0,0,47,0,0,0,27,0,0,0,0,0,0,0,51,112,111,112,0,0,0,0,200,82,0,0,40,3,0,0,168,1,0,0,0,0,0,0,0,0,0,0,96,3,0,0,48,0,0,0,49,0,0,0,27,0,0,0,0,0,0,0,52,112,111,107,97,0,0,0,200,82,0,0,88,3,0,0,168,1,0,0,0,0,0,0,0,0,0,0,152,3,0,0,50,0,0,0,51,0,0,0,52,0,0,0,0,0,0,0,56,118,97,99,97,116,105,111,110,0,0,0,0,0,0,0,200,82,0,0,136,3,0,0,104,1,0,0,0,0,0,0,0,0,0,0,208,3,0,0,53,0,0,0,54,0,0,0,55,0,0,0,0,0,0,0,49,49,108,101,99,101,110,100,112,97,114,116,121,0,0,0,200,82,0,0,192,3,0,0,200,1,0,0,0,0,0,0,0,0,0,0,8,4,0,0,56,0,0,0,57,0,0,0,55,0,0,0,0,0,0,0,57,102,97,99,101,112,97,114,116,121,0,0,0,0,0,0,200,82,0,0,248,3,0,0,200,1,0,0,0,0,0,0,0,0,0,0,56,4,0,0,58,0,0,0,59,0,0,0,55,0,0,0,0,0,0,0,50,109,116,0,0,0,0,0,200,82,0,0,48,4,0,0,200,1,0,0,0,0,0,0,0,0,0,0,112,4,0,0,60,0,0,0,61,0,0,0,55,0,0,0,0,0,0,0,49,51,108,101,99,115,116,97,114,116,112,97,114,116,121,0,200,82,0,0,96,4,0,0,200,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,205,204,140,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,140,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,140,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,140,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,140,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,134,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,134,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,51,51,115,63,0,0,128,63,205,204,140,63,0,0,128,63,51,51,115,63,0,0,128,63,51,51,115,63,0,0,128,63,205,204,140,63,0,0,128,63,51,51,115,63,0,0,128,63,51,51,115,63,0,0,128,63,205,204,140,63,0,0,128,63,51,51,115,63,0,0,128,63,51,51,115,63,0,0,128,63,205,204,140,63,0,0,128,63,51,51,115,63,0,0,128,63,51,51,115,63,0,0,128,63,205,204,140,63,0,0,128,63,51,51,115,63,0,0,128,63,51,51,115,63,0,0,128,63,205,204,140,63,0,0,128,63,51,51,115,63,205,204,140,63,102,102,102,63,0,0,128,63,102,102,102,63,0,0,0,0,102,102,102,63,205,204,140,63,102,102,102,63,0,0,128,63,102,102,102,63,0,0,0,0,102,102,102,63,205,204,140,63,102,102,102,63,0,0,128,63,102,102,102,63,0,0,0,0,102,102,102,63,205,204,140,63,102,102,102,63,0,0,128,63,102,102,102,63,0,0,0,0,102,102,102,63,205,204,140,63,102,102,102,63,0,0,128,63,102,102,102,63,0,0,0,0,102,102,102,63,205,204,140,63,102,102,102,63,0,0,128,63,102,102,102,63,0,0,0,0,102,102,102,63,0,0,128,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,140,63,205,204,140,63,205,204,140,63,205,204,140,63,205,204,140,63,205,204,140,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,111,117,116,115,105,100,101,114,0,0,0,0,0,0,0,0,97,108,99,111,104,111,108,105,99,0,0,0,0,0,0,0,99,105,114,99,108,101,95,114,101,115,105,100,101,110,116,0,110,101,114,100,0,0,0,0,99,111,117,112,108,101,0,0,99,105,114,99,108,101,95,105,110,100,101,112,101,110,100,101,110,116,0,0,0,0,0,0,119,101,97,107,0,0,0,0,115,114,97,110,100,0,0,0,77,111,110,116,104,68,97,121,0,0,0,0,0,0,0,0,105,110,100,101,120,0,0,0,109,111,110,116,104,0,0,0,100,97,121,0,0,0,0,0,102,114,111,109,73,110,100,101,120,0,0,0,0,0,0,0,102,114,111,109,67,97,108,101,110,100,97,114,0,0,0,0,99,111,110,116,97,105,110,105,110,103,68,97,121,115,0,0,77,111,110,116,104,0,0,0,83,101,120,117,97,108,105,116,121,0,0,0,0,0,0,0,77,97,110,0,0,0,0,0,87,111,109,97,110,0,0,0,71,97,109,101,67,101,110,116,101,114,0,0,0,0,0,0,109,97,112,0,0,0,0,0,99,117,114,114,101,110,116,80,111,115,105,116,105,111,110,0,99,104,97,114,97,99,116,101,114,0,0,0,0,0,0,0,100,105,99,101,0,0,0,0,109,111,118,101,0,0,0,0,77,97,112,84,97,98,108,101,0,0,0,0,0,0,0,0,103,101,110,101,114,97,116,101,0,0,0,0,0,0,0,0,103,101,110,101,114,97,116,101,68,101,102,97,117,108,116,0,99,104,101,99,107,83,116,111,112,0,0,0,0,0,0,0,97,116,0,0,0,0,0,0,67,101,108,108,0,0,0,0,105,115,83,116,111,112,0,0,78,111,114,109,97,108,67,101,108,108,0,0,0,0,0,0,87,101,101,107,101,110,100,67,101,108,108,0,0,0,0,0,77,97,114,99,104,67,101,108,108,0,0,0,0,0,0,0,66,101,102,111,114,101,69,120,97,109,67,101,108,108,0,0,69,120,97,109,67,101,108,108,0,0,0,0,0,0,0,0,65,102,116,101,114,69,120,97,109,67,101,108,108,0,0,0,68,97,110,99,101,67,101,108,108,0,0,0,0,0,0,0,86,97,99,97,116,105,111,110,67,101,108,108,0,0,0,0,70,101,115,116,105,118,97,108,67,101,108,108,0,0,0,0,80,111,107,97,67,101,108,108,0,0,0,0,0,0,0,0,80,79,80,67,101,108,108,0,83,112,101,99,105,97,108,67,101,108,108,0,0,0,0,0,76,101,99,116,117,114,101,83,116,97,114,116,80,97,114,116,121,67,101,108,108,0,0,0,76,101,99,116,117,114,101,69,110,100,80,97,114,116,121,67,101,108,108,0,0,0,0,0,77,84,67,101,108,108,0,0,70,97,99,101,80,97,114,116,121,67,101,108,108,0,0,0,72,101,114,111,0,0,0,0,108,111,118,101,0,0,0,0,101,110,101,114,103,121,0,0,114,101,108,97,116,105,111,110,115,104,105,112,0,0,0,0,115,101,108,102,73,109,112,114,111,118,101,109,101,110,116,0,115,116,117,100,121,0,0,0,115,116,114,101,115,115,0,0,77,65,88,95,69,78,69,82,71,89,0,0,0,0,0,0,77,65,88,95,76,79,86,69,0,0,0,0,0,0,0,0,77,65,88,95,82,69,76,65,84,73,79,78,83,72,73,80,0,0,0,0,0,0,0,0,77,65,88,95,83,69,76,70,73,77,80,82,79,86,69,77,69,78,84,0,0,0,0,0,102,105,105,0,0,0,0,0,52,104,101,114,111,0,0,0,248,80,0,0,168,11,0,0,105,105,102,102,102,102,102,102,105,0,0,0,0,0,0,0,240,11,0,0,80,82,0,0,80,82,0,0,80,82,0,0,80,82,0,0,80,82,0,0,80,82,0,0,16,12,0,0,80,52,104,101,114,111,0,0,32,81,0,0,232,11,0,0,0,0,0,0,176,11,0,0,57,115,101,120,117,97,108,105,116,121,0,0,0,0,0,0,112,82,0,0,0,12,0,0,118,105,0,0,0,0,0,0,118,0,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,52,104,101,114,111,0,32,81,0,0,48,12,0,0,1,0,0,0,176,11,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,57,102,97,99,101,112,97,114,116,121,0,0,0,0,32,81,0,0,104,12,0,0,1,0,0,0,8,4,0,0,80,57,102,97,99,101,112,97,114,116,121,0,0,0,0,0,32,81,0,0,136,12,0,0,0,0,0,0,8,4,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,50,109,116,0,0,0,32,81,0,0,200,12,0,0,1,0,0,0,56,4,0,0,80,50,109,116,0,0,0,0,32,81,0,0,224,12,0,0,0,0,0,0,56,4,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,49,49,108,101,99,101,110,100,112,97,114,116,121,0,32,81,0,0,24,13,0,0,1,0,0,0,208,3,0,0,80,49,49,108,101,99,101,110,100,112,97,114,116,121,0,0,32,81,0,0,56,13,0,0,0,0,0,0,208,3,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,49,51,108,101,99,115,116,97,114,116,112,97,114,116,121,0,0,0,0,0,0,0,32,81,0,0,120,13,0,0,1,0,0,0,112,4,0,0,80,49,51,108,101,99,115,116,97,114,116,112,97,114,116,121,0,0,0,0,0,0,0,0,32,81,0,0,160,13,0,0,0,0,0,0,112,4,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,55,115,112,101,99,105,97,108,0,0,0,0,0,0,32,81,0,0,232,13,0,0,1,0,0,0,200,1,0,0,80,55,115,112,101,99,105,97,108,0,0,0,0,0,0,0,32,81,0,0,8,14,0,0,0,0,0,0,200,1,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,51,112,111,112,0,0,32,81,0,0,72,14,0,0,1,0,0,0,48,3,0,0,80,51,112,111,112,0,0,0,32,81,0,0,96,14,0,0,0,0,0,0,48,3,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,52,112,111,107,97,0,32,81,0,0,152,14,0,0,1,0,0,0,96,3,0,0,80,52,112,111,107,97,0,0,32,81,0,0,176,14,0,0,0,0,0,0,96,3,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,56,102,101,115,116,105,118,97,108,0,0,0,0,0,32,81,0,0,232,14,0,0,1,0,0,0,168,1,0,0,80,56,102,101,115,116,105,118,97,108,0,0,0,0,0,0,32,81,0,0,8,15,0,0,0,0,0,0,168,1,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,56,118,97,99,97,116,105,111,110,0,0,0,0,0,32,81,0,0,72,15,0,0,1,0,0,0,152,3,0,0,80,56,118,97,99,97,116,105,111,110,0,0,0,0,0,0,32,81,0,0,104,15,0,0,0,0,0,0,152,3,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,53,100,97,110,99,101,0,0,0,0,0,0,0,0,32,81,0,0,168,15,0,0,1,0,0,0,0,3,0,0,80,53,100,97,110,99,101,0,32,81,0,0,200,15,0,0,0,0,0,0,0,3,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,49,48,97,102,116,101,114,95,101,120,97,109,0,0,32,81,0,0,0,16,0,0,1,0,0,0,208,2,0,0,80,49,48,97,102,116,101,114,95,101,120,97,109,0,0,0,32,81,0,0,32,16,0,0,0,0,0,0,208,2,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,52,101,120,97,109,0,32,81,0,0,96,16,0,0,1,0,0,0,112,1,0,0,80,52,101,120,97,109,0,0,32,81,0,0,120,16,0,0,0,0,0,0,112,1,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,49,49,98,101,102,111,114,101,95,101,120,97,109,0,32,81,0,0,176,16,0,0,1,0,0,0,152,2,0,0,80,49,49,98,101,102,111,114,101,95,101,120,97,109,0,0,32,81,0,0,208,16,0,0,0,0,0,0,152,2,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,53,109,97,114,99,104,0,0,0,0,0,0,0,0,32,81,0,0,16,17,0,0,1,0,0,0,96,2,0,0,80,53,109,97,114,99,104,0,32,81,0,0,48,17,0,0,0,0,0,0,96,2,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,55,119,101,101,107,101,110,100,0,0,0,0,0,0,32,81,0,0,104,17,0,0,1,0,0,0,48,2,0,0,80,55,119,101,101,107,101,110,100,0,0,0,0,0,0,0,32,81,0,0,136,17,0,0,0,0,0,0,48,2,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,54,110,111,114,109,97,108,0,0,0,0,0,0,0,32,81,0,0,200,17,0,0,1,0,0,0,248,1,0,0,80,54,110,111,114,109,97,108,0,0,0,0,0,0,0,0,32,81,0,0,232,17,0,0,0,0,0,0,248,1,0,0,105,105,105,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,52,99,101,108,108,0,32,81,0,0,32,18,0,0,1,0,0,0,104,1,0,0,80,52,99,101,108,108,0,0,32,81,0,0,56,18,0,0,0,0,0,0,104,1,0,0,105,105,105,105,0,0,0,0,64,18,0,0,144,18,0,0,24,82,0,0,0,0,0,0,80,56,77,97,112,84,97,98,108,101,0,0,0,0,0,0,56,77,97,112,84,97,98,108,101,0,0,0,0,0,0,0,248,80,0,0,120,18,0,0,32,81,0,0,104,18,0,0,0,0,0,0,136,18,0,0,105,105,105,105,105,0,0,0,24,82,0,0,144,18,0,0,24,82,0,0,24,82,0,0,105,105,0,0,0,0,0,0,136,18,0,0,0,0,0,0,105,105,105,0,0,0,0,0,136,18,0,0,136,19,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,80,52,99,101,108,108,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,80,52,99,101,108,108,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,0,248,80,0,0,64,19,0,0,40,83,0,0,8,19,0,0,0,0,0,0,1,0,0,0,104,19,0,0,0,0,0,0,40,83,0,0,216,18,0,0,0,0,0,0,1,0,0,0,112,19,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,56,77,97,112,84,97,98,108,101,0,0,0,0,0,32,81,0,0,176,19,0,0,1,0,0,0,136,18,0,0,105,105,105,105,0,0,0,0,24,82,0,0,16,20,0,0,24,82,0,0,0,0,0,0,80,49,48,71,97,109,101,67,101,110,116,101,114,0,0,0,49,48,71,97,109,101,67,101,110,116,101,114,0,0,0,0,248,80,0,0,248,19,0,0,32,81,0,0,232,19,0,0,0,0,0,0,8,20,0,0,105,105,105,0,0,0,0,0,24,82,0,0,16,20,0,0,105,105,105,0,0,0,0,0,105,105,105,0,0,0,0,0,105,105,105,0,0,0,0,0,105,105,105,0,0,0,0,0,16,20,0,0,16,12,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,49,48,71,97,109,101,67,101,110,116,101,114,0,0,32,81,0,0,104,20,0,0,1,0,0,0,8,20,0,0,53,77,111,110,116,104,0,0,112,82,0,0,136,20,0,0,105,105,105,0,0,0,0,0,24,82,0,0,144,20,0,0,56,77,111,110,116,104,68,97,121,0,0,0,0,0,0,0,248,80,0,0,168,20,0,0,105,105,105,105,0,0,0,0,184,20,0,0,144,20,0,0,24,82,0,0,0,0,0,0,105,105,105,0,0,0,0,0,184,20,0,0,24,82,0,0,105,105,105,0,0,0,0,0,105,105,105,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,56,77,111,110,116,104,68,97,121,0,0,0,0,0,32,81,0,0,8,21,0,0,1,0,0,0,184,20,0,0,80,56,77,111,110,116,104,68,97,121,0,0,0,0,0,0,32,81,0,0,40,21,0,0,0,0,0,0,184,20,0,0,118,105,105,0,0,0,0,0,152,81,0,0,40,82,0,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,99,104,97,114,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,105,110,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,108,111,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,102,108,111,97,116,0,0,0,100,111,117,98,108,101,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,0,248,80,0,0,216,24,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,0,248,80,0,0,0,25,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,0,248,80,0,0,40,25,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,0,248,80,0,0,80,25,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,0,248,80,0,0,120,25,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,0,248,80,0,0,160,25,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,0,248,80,0,0,200,25,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,0,248,80,0,0,240,25,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,0,248,80,0,0,24,26,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,0,248,80,0,0,64,26,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,0,248,80,0,0,104,26,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,0,248,80,0,0,144,26,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,248,80,0,0,184,26,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,248,80,0,0,24,27,0,0,40,83,0,0,216,26,0,0,0,0,0,0,1,0,0,0,64,27,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,40,83,0,0,96,27,0,0,0,0,0,0,1,0,0,0,64,27,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,40,83,0,0,184,27,0,0,0,0,0,0,1,0,0,0,64,27], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([152,32,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,200,82,0,0,120,32,0,0,16,38,0,0,0,0,0,0,0,0,0,0,0,33,0,0,76,0,0,0,77,0,0,0,78,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,79,0,0,0,69,0,0,0,70,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,200,82,0,0,232,32,0,0,16,38,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,152,33,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,200,82,0,0,120,33,0,0,208,37,0,0,0,0,0,0,0,0,0,0,0,34,0,0,99,0,0,0,100,0,0,0,101,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,102,0,0,0,92,0,0,0,93,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,200,82,0,0,232,33,0,0,208,37,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,248,80,0,0,16,34,0,0,58,32,0,0,0,0,0,0,0,0,0,0,112,34,0,0,108,0,0,0,109,0,0,0,110,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,200,82,0,0,88,34,0,0,160,79,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,248,80,0,0,128,34,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,200,82,0,0,168,34,0,0,160,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,208,37,0,0,111,0,0,0,112,0,0,0,113,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,102,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,106,0,0,0,107,0,0,0,0,0,0,0,16,38,0,0,114,0,0,0,115,0,0,0,116,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,79,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,83,0,0,0,84,0,0,0,8,0,0,0,0,0,0,0,72,38,0,0,117,0,0,0,118,0,0,0,248,255,255,255,248,255,255,255,72,38,0,0,119,0,0,0,120,0,0,0,8,0,0,0,0,0,0,0,144,38,0,0,121,0,0,0,122,0,0,0,248,255,255,255,248,255,255,255,144,38,0,0,123,0,0,0,124,0,0,0,4,0,0,0,0,0,0,0,216,38,0,0,125,0,0,0,126,0,0,0,252,255,255,255,252,255,255,255,216,38,0,0,127,0,0,0,128,0,0,0,4,0,0,0,0,0,0,0,32,39,0,0,129,0,0,0,130,0,0,0,252,255,255,255,252,255,255,255,32,39,0,0,131,0,0,0,132,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,36,0,0,133,0,0,0,134,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,16,37,0,0,135,0,0,0,136,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,200,82,0,0,200,36,0,0,112,34,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,248,80,0,0,248,36,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,200,82,0,0,24,37,0,0,16,37,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,200,82,0,0,88,37,0,0,16,37,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,248,80,0,0,152,37,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,248,80,0,0,216,37,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,40,83,0,0,24,38,0,0,0,0,0,0,1,0,0,0,72,37,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,40,83,0,0,96,38,0,0,0,0,0,0,1,0,0,0,136,37,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,40,83,0,0,168,38,0,0,0,0,0,0,1,0,0,0,72,37,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,40,83,0,0,240,38,0,0,0,0,0,0,1,0,0,0,136,37,0,0,3,244,255,255,0,0,0,0,128,39,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,200,82,0,0,96,39,0,0,192,34,0,0,0,0,0,0,0,0,0,0,144,53,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,53,0,0,150,0,0,0,151,0,0,0,146,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,58,0,0,155,0,0,0,156,0,0,0,146,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,0,59,0,0,168,0,0,0,169,0,0,0,146,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,59,0,0,181,0,0,0,182,0,0,0,146,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,88,60,0,0,191,0,0,0,192,0,0,0,146,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,128,55,0,0,201,0,0,0,202,0,0,0,146,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,248,255,255,255,128,55,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,32,56,0,0,217,0,0,0,218,0,0,0,146,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,248,255,255,255,32,56,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,176,56,0,0,233,0,0,0,234,0,0,0,146,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,57,0,0,236,0,0,0,237,0,0,0,146,0,0,0,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,54,0,0,239,0,0,0,240,0,0,0,146,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,54,0,0,250,0,0,0,251,0,0,0,146,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,54,0,0,5,1,0,0,6,1,0,0,146,0,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,54,0,0,16,1,0,0,17,1,0,0,146,0,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,60,0,0,27,1,0,0,28,1,0,0,146,0,0,0,29,1,0,0,30,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,120,61,0,0,31,1,0,0,32,1,0,0,146,0,0,0,33,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,8,62,0,0,35,1,0,0,36,1,0,0,146,0,0,0,37,1,0,0,38,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,152,62,0,0,39,1,0,0,40,1,0,0,146,0,0,0,41,1,0,0,42,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,57,0,0,43,1,0,0,44,1,0,0,146,0,0,0,45,1,0,0,46,1,0,0,47,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,57,0,0,48,1,0,0,49,1,0,0,146,0,0,0,50,1,0,0,51,1,0,0,52,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,104,53,0,0,53,1,0,0,54,1,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,50,0,0,55,1,0,0,56,1,0,0,146,0,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,51,0,0,65,1,0,0,66,1,0,0,146,0,0,0,67,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,53,0,0,74,1,0,0,75,1,0,0,146,0,0,0,76,1,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,0,0,0,0,64,53,0,0,81,1,0,0,82,1,0,0,146,0,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,120,49,0,0,88,1,0,0,89,1,0,0,146,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,200,82,0,0,96,49,0,0,48,34,0,0,0,0,0,0,0,0,0,0,8,50,0,0,88,1,0,0,90,1,0,0,146,0,0,0,91,1,0,0,92,1,0,0,93,1,0,0,94,1,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,248,80,0,0,232,49,0,0,40,83,0,0,208,49,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,0,50,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,40,83,0,0,40,50,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,0,50,0,0,2,0,0,0,0,0,0,0,216,50,0,0,88,1,0,0,103,1,0,0,146,0,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,248,80,0,0,184,50,0,0,40,83,0,0,144,50,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,208,50,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,40,83,0,0,248,50,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,208,50,0,0,2,0,0,0,0,0,0,0,152,51,0,0,88,1,0,0,111,1,0,0,146,0,0,0,112,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,116,1,0,0,117,1,0,0,118,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,40,83,0,0,112,51,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,208,50,0,0,2,0,0,0,0,0,0,0,16,52,0,0,88,1,0,0,119,1,0,0,146,0,0,0,120,1,0,0,121,1,0,0,122,1,0,0,123,1,0,0,124,1,0,0,125,1,0,0,126,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,40,83,0,0,232,51,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,208,50,0,0,2,0,0,0,0,0,0,0,136,52,0,0,88,1,0,0,127,1,0,0,146,0,0,0,120,1,0,0,121,1,0,0,122,1,0,0,123,1,0,0,124,1,0,0,125,1,0,0,126,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,200,82,0,0,96,52,0,0,16,52,0,0,0,0,0,0,0,0,0,0,240,52,0,0,88,1,0,0,128,1,0,0,146,0,0,0,120,1,0,0,121,1,0,0,122,1,0,0,123,1,0,0,124,1,0,0,125,1,0,0,126,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,200,82,0,0,200,52,0,0,16,52,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,200,82,0,0,0,53,0,0,120,49,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,200,82,0,0,40,53,0,0,120,49,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,200,82,0,0,80,53,0,0,120,49,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,200,82,0,0,120,53,0,0,120,49,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,200,82,0,0,160,53,0,0,120,49,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,248,80,0,0,232,53,0,0,40,83,0,0,200,53,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,0,54,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,40,83,0,0,40,54,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,0,54,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,40,83,0,0,104,54,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,0,54,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,40,83,0,0,168,54,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,0,54,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,248,80,0,0,48,55,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,248,80,0,0,80,55,0,0,40,83,0,0,232,54,0,0,0,0,0,0,3,0,0,0,120,49,0,0,2,0,0,0,72,55,0,0,2,0,0,0,120,55,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,248,80,0,0,240,55,0,0,40,83,0,0,168,55,0,0,0,0,0,0,3,0,0,0,120,49,0,0,2,0,0,0,72,55,0,0,2,0,0,0,24,56,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,248,80,0,0,144,56,0,0,40,83,0,0,72,56,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,168,56,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,40,83,0,0,208,56,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,168,56,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,248,80,0,0,80,57,0,0,40,83,0,0,56,57,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,104,57,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,40,83,0,0,144,57,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,104,57,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,248,80,0,0,40,58,0,0,40,83,0,0,16,58,0,0,0,0,0,0,1,0,0,0,72,58,0,0,0,0,0,0,40,83,0,0,200,57,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,80,58,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,40,83,0,0,208,58,0,0,0,0,0,0,1,0,0,0,72,58,0,0,0,0,0,0,40,83,0,0,136,58,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,232,58,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,248,80,0,0,128,59,0,0,40,83,0,0,104,59,0,0,0,0,0,0,1,0,0,0,160,59,0,0,0,0,0,0,40,83,0,0,32,59,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,168,59,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,40,83,0,0,40,60,0,0,0,0,0,0,1,0,0,0,160,59,0,0,0,0,0,0,40,83,0,0,224,59,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,64,60,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,248,80,0,0,192,60,0,0,40,83,0,0,120,60,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,224,60,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,248,80,0,0,80,61,0,0,40,83,0,0,8,61,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,112,61,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,248,80,0,0,224,61,0,0,40,83,0,0,152,61,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,0,62,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,248,80,0,0,112,62,0,0,40,83,0,0,40,62,0,0,0,0,0,0,2,0,0,0,120,49,0,0,2,0,0,0,144,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+8244);
/* memory initializer */ allocate([79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,1,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,40,78,0,0,130,1,0,0,131,1,0,0,132,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,200,82,0,0,24,78,0,0,176,78,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,248,80,0,0,160,78,0,0,0,0,0,0,248,78,0,0,133,1,0,0,134,1,0,0,135,1,0,0,0,0,0,0,0,0,0,0,160,79,0,0,136,1,0,0,137,1,0,0,110,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,200,82,0,0,232,78,0,0,176,78,0,0,0,0,0,0,0,0,0,0,56,79,0,0,133,1,0,0,138,1,0,0,135,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,200,82,0,0,32,79,0,0,248,78,0,0,0,0,0,0,0,0,0,0,120,79,0,0,133,1,0,0,139,1,0,0,135,1,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,200,82,0,0,96,79,0,0,248,78,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,200,82,0,0,136,79,0,0,176,78,0,0,0,0,0,0,0,0,0,0,0,80,0,0,140,1,0,0,141,1,0,0,142,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,248,80,0,0,216,79,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,200,82,0,0,240,79,0,0,176,78,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,200,82,0,0,16,80,0,0,232,79,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,200,82,0,0,72,80,0,0,56,80,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,200,82,0,0,168,80,0,0,56,80,0,0,0,0,0,0,200,82,0,0,128,80,0,0,208,80,0,0,0,0,0,0,0,0,0,0,112,80,0,0,143,1,0,0,144,1,0,0,145,1,0,0,146,1,0,0,147,1,0,0,148,1,0,0,149,1,0,0,150,1,0,0,0,0,0,0,224,80,0,0,143,1,0,0,151,1,0,0,145,1,0,0,146,1,0,0,152,1,0,0,0,0,0,0,0,0,0,0,128,81,0,0,143,1,0,0,153,1,0,0,145,1,0,0,146,1,0,0,154,1,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,200,82,0,0,88,81,0,0,56,80,0,0,0,0,0,0,118,0,0,0,0,0,0,0,64,81,0,0,144,81,0,0,68,110,0,0,0,0,0,0,64,81,0,0,160,81,0,0,98,0,0,0,0,0,0,0,64,81,0,0,176,81,0,0,99,0,0,0,0,0,0,0,64,81,0,0,192,81,0,0,104,0,0,0,0,0,0,0,64,81,0,0,208,81,0,0,97,0,0,0,0,0,0,0,64,81,0,0,224,81,0,0,115,0,0,0,0,0,0,0,64,81,0,0,240,81,0,0,116,0,0,0,0,0,0,0,64,81,0,0,0,82,0,0,105,0,0,0,0,0,0,0,64,81,0,0,16,82,0,0,106,0,0,0,0,0,0,0,64,81,0,0,32,82,0,0,64,81,0,0,224,40,0,0,109,0,0,0,0,0,0,0,64,81,0,0,56,82,0,0,102,0,0,0,0,0,0,0,64,81,0,0,72,82,0,0,100,0,0,0,0,0,0,0,64,81,0,0,88,82,0,0,0,0,0,0,176,82,0,0,143,1,0,0,155,1,0,0,145,1,0,0,146,1,0,0,156,1,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,101,110,117,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,200,82,0,0,136,82,0,0,56,80,0,0,0,0,0,0,0,0,0,0,16,83,0,0,143,1,0,0,157,1,0,0,145,1,0,0,146,1,0,0,147,1,0,0,158,1,0,0,159,1,0,0,160,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,200,82,0,0,232,82,0,0,112,80,0,0,0,0,0,0,0,0,0,0,112,83,0,0,143,1,0,0,161,1,0,0,145,1,0,0,146,1,0,0,147,1,0,0,162,1,0,0,163,1,0,0,164,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,200,82,0,0,72,83,0,0,112,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+18488);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _emscripten_landingpad=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _emscripten_postinvoke=true;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{}];function __emval_decref(handle) {
      if (handle && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 1; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 1; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
      var handle = emval_free_list.length ?
          emval_free_list.pop() :
          emval_handle_array.length;
  
      emval_handle_array[handle] = {refcount: 1, value: value};
      return handle;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name, function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "return retType.fromWireType(rv);\n";
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
      var fp;
      // asm.js does not define FUNCTION_TABLE
      if (typeof FUNCTION_TABLE === "undefined") {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          // - Function.prototype.bind generally benchmarks poorly relative to
          //   function objects, but using 'arguments' would confound JITs and
          //   possibly allocate.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = dc.bind(undefined, rawFunction);
      } else {
          fp = FUNCTION_TABLE[rawFunction];
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  var _emscripten_resume=true;

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __embind_register_enum_value(
      rawEnumType,
      name,
      enumValue
    ) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
          value: {value: enumValue},
          constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function ___cxa_guard_abort() {}

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_enum(
      rawType,
      name,
      size,
      isSigned
    ) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function constructor() {
      }
      constructor.values = {};
  
      registerType(rawType, {
          name: name,
          constructor: constructor,
          'fromWireType': function(c) {
              return this.constructor.values[c];
          },
          'toWireType': function(destructors, c) {
              return c.value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
          destructorFunction: null,
      });
      exposePublicSymbol(name, constructor);
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  var _throwInternalError=undefined;function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var HEAP, shift;
      if (charSize === 2) {
          HEAP = HEAPU16;
          shift = 1;
      } else if (charSize === 4) {
          HEAP = HEAPU32;
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
init_emval();
init_ClassHandle()
init_RegisteredPointer()
init_embind();
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiddddddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiddddddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiddddddi(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiddddddi"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);

  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_iiddddddi=env.nullFunc_iiddddddi;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_iiddddddi=env.invoke_iiddddddi;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var __addDays=env.__addDays;
  var _sbrk=env._sbrk;
  var __embind_register_class_class_function=env.__embind_register_class_class_function;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var _sysconf=env._sysconf;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var genericPointerToWireType=env.genericPointerToWireType;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var _fileno=env._fileno;
  var flushPendingDeletes=env.flushPendingDeletes;
  var _fread=env._fread;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var init_ClassHandle=env.init_ClassHandle;
  var _catclose=env._catclose;
  var _llvm_trap=env._llvm_trap;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var _fmodl=env._fmodl;
  var _send=env._send;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var __embind_register_emval=env.__embind_register_emval;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var ___setErrNo=env.___setErrNo;
  var readLatin1String=env.readLatin1String;
  var _newlocale=env._newlocale;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_class_property=env.__embind_register_class_property;
  var embind_init_charCodes=env.embind_init_charCodes;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var init_embind=env.init_embind;
  var ClassHandle_clone=env.ClassHandle_clone;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var _mkport=env._mkport;
  var _read=env._read;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ensureOverloadTable=env.ensureOverloadTable;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var _catopen=env._catopen;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var __embind_register_class=env.__embind_register_class;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var _vfprintf=env._vfprintf;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var enumReadValueFromPointer=env.enumReadValueFromPointer;
  var _embind_repr=env._embind_repr;
  var _strftime=env._strftime;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _recv=env._recv;
  var _copysign=env._copysign;
  var registerType=env.registerType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var getTypeName=env.getTypeName;
  var validateThis=env.validateThis;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var __embind_register_enum=env.__embind_register_enum;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var _ungetc=env._ungetc;
  var _fwrite=env._fwrite;
  var __embind_register_void=env.__embind_register_void;
  var __embind_register_function=env.__embind_register_function;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var _catgets=env._catgets;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_class_function=env.__embind_register_class_function;
  var RegisteredPointer=env.RegisteredPointer;
  var __arraySum=env.__arraySum;
  var _calloc=env._calloc;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var getBasestPointer=env.getBasestPointer;
  var _pread=env._pread;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var _getc=env._getc;
  var __embind_register_enum_value=env.__embind_register_enum_value;
  var _fflush=env._fflush;
  var ___errno_location=env.___errno_location;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _copysignl=env._copysignl;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function __ZN10GameCenter4moveEi($this,$step) {
 $this = $this|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge$i = 0, $storemerge$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = (($this) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($step))|0;
 $storemerge$in$i = $2;
 while(1) {
  $storemerge$i = (($storemerge$in$i) + 1)|0;
  $4 = ($storemerge$in$i|0)<($3|0);
  if (!($4)) {
   $10 = $3;
   label = 4;
   break;
  }
  $5 = (__ZN8MapTable2atEi($0,$storemerge$i)|0);
  $6 = (($5) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 & 1;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $storemerge$in$i = $storemerge$i;
  } else {
   $10 = $storemerge$i;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$1>>2] = $10;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function __ZN4heroC2Effffff9sexuality($this,$max_love,$max_energy,$max_relationship,$max_selfdevelop,$max_study,$max_stress,$sex) {
 $this = $this|0;
 $max_love = +$max_love;
 $max_energy = +$max_energy;
 $max_relationship = +$max_relationship;
 $max_selfdevelop = +$max_selfdevelop;
 $max_study = +$max_study;
 $max_stress = +$max_stress;
 $sex = $sex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$this>>2] = $max_energy;
 $0 = (($this) + 4|0);
 HEAPF32[$0>>2] = $max_love;
 $1 = (($this) + 8|0);
 HEAPF32[$1>>2] = $max_relationship;
 $2 = (($this) + 12|0);
 HEAPF32[$2>>2] = $max_selfdevelop;
 $3 = (($this) + 16|0);
 HEAPF32[$3>>2] = $max_study;
 $4 = (($this) + 20|0);
 HEAPF32[$4>>2] = $max_stress;
 $5 = (($this) + 32|0);
 HEAPF32[$5>>2] = 30.0;
 $6 = (($this) + 36|0);
 HEAPF32[$6>>2] = 30.0;
 $7 = (($this) + 40|0);
 HEAPF32[$7>>2] = 100.0;
 $8 = (($this) + 44|0);
 $9 = (($this) + 68|0);
 HEAP32[$9>>2] = 0;
 $10 = (($this) + 72|0);
 HEAP32[$10>>2] = 0;
 $11 = (($this) + 68|0);
 $12 = (($this) + 64|0);
 ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
 HEAP32[$12>>2] = $11;
 $13 = (($this) + 220|0);
 HEAP32[$13>>2] = 0;
 if ((($sex|0) == 2)) {
  $17 = (($this) + 60|0);
  HEAP32[$17>>2] = 2;
  $18 = (($this) + 28|0);
  HEAPF32[$18>>2] = 100.0;
  $19 = (($this) + 24|0);
  HEAPF32[$19>>2] = 80.0;
  STACKTOP = sp;return;
 } else if ((($sex|0) == 1)) {
  $14 = (($this) + 60|0);
  HEAP32[$14>>2] = 1;
  $15 = (($this) + 28|0);
  HEAPF32[$15>>2] = 10.0;
  $16 = (($this) + 24|0);
  HEAPF32[$16>>2] = 100.0;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4hero25get_energy_consuming_rateEv($this$0$11$val) {
 $this$0$11$val = +$this$0$11$val;
 var $$0 = 0.0, $$lcssa$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this$0$11$val < 30.0;
 if ($0) {
  $$0 = -3.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = $this$0$11$val >= 30.0;
 $2 = $this$0$11$val < 70.0;
 $or$cond = $1 & $2;
 if ($or$cond) {
  $$0 = -4.0;
  STACKTOP = sp;return (+$$0);
 }
 $3 = !($this$0$11$val >= 70.0);
 if (!($3)) {
  $$0 = -5.0;
  STACKTOP = sp;return (+$$0);
 }
 $4 = (___cxa_allocate_exception(8)|0);
 HEAP32[$4>>2] = ((20176 + 8|0));
 $5 = (($4) + 4|0);
 $6 = (_strlen((8|0))|0);
 $7 = (($6) + 1)|0;
 $8 = (($6) + 13)|0;
 $9 = ($8|0)==(0);
 $$size$i = $9 ? 1 : $8;
 $10 = (_malloc($$size$i)|0);
 $11 = ($10|0)==(0|0);
 L10: do {
  if ($11) {
   while(1) {
    $12 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($12+0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     break;
    }
    $14 = $12;
    __THREW__ = 0;
    invoke_v($14|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     label = 12;
     break;
    }
    $17 = (_malloc($$size$i)|0);
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     $$lcssa$i = $17;
     break L10;
    }
   }
   if ((label|0) == 12) {
    $25 = ___cxa_find_matching_catch()|0;
    $26 = tempRet0;
    $lpad$phi$index = $25;$lpad$phi$index3 = $26;
    ___cxa_free_exception(($4|0));
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $19 = (___cxa_allocate_exception(4)|0);
   HEAP32[$19>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($19|0),(20008|0),(386|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    // unreachable;
   }
   $27 = ___cxa_find_matching_catch()|0;
   $28 = tempRet0;
   $lpad$phi$index = $27;$lpad$phi$index3 = $28;
   ___cxa_free_exception(($4|0));
   ___resumeException($lpad$phi$index|0);
   // unreachable;
  } else {
   $$lcssa$i = $10;
  }
 } while(0);
 $22 = (($$lcssa$i) + 4|0);
 HEAP32[$22>>2] = $6;
 HEAP32[$$lcssa$i>>2] = $6;
 $23 = (($$lcssa$i) + 12|0);
 HEAP32[$5>>2] = $23;
 $24 = (($$lcssa$i) + 8|0);
 HEAP32[$24>>2] = 0;
 _memcpy(($23|0),(8|0),($7|0))|0;
 ___cxa_throw(($4|0),(20384|0),(392|0));
 // unreachable;
 return +0;
}
function __ZNK4hero9get_studyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero16get_self_developEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 36|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero16get_relationshipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero10get_energyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero8get_loveEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero10get_stressEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero14get_MAX_ENERGYEv($this) {
 $this = $this|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$this>>2];
 STACKTOP = sp;return (+$0);
}
function __ZNK4hero12get_MAX_LOVEEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero20get_MAX_RELATIONSHIPEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function __ZNK4hero20get_MAX_SELF_DEVELOPEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$1);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$status_change,$day) {
 $_hero = $_hero|0;
 $status_change = $status_change|0;
 $day = $day|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$status_change>>2];
 $1 = (+($day|0));
 $2 = $1 * $0;
 $3 = +HEAPF32[$_hero>>2];
 $4 = $2 < $3;
 $5 = $4 ? $2 : $3;
 $6 = $5 > 0.0;
 $7 = $6 ? $5 : 0.0;
 $8 = (($_hero) + 24|0);
 HEAPF32[$8>>2] = $7;
 $9 = (($status_change) + 12|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1 * $10;
 $12 = (($_hero) + 40|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13 + $11;
 HEAPF32[$12>>2] = $14;
 $15 = (($_hero) + 16|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 > $16;
 if ($17) {
  HEAPF32[$12>>2] = $16;
 } else {
  $18 = $14 < 0.0;
  if ($18) {
   HEAPF32[$12>>2] = 0.0;
  }
 }
 $19 = (($status_change) + 4|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1 * $20;
 $22 = (($_hero) + 32|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 + $21;
 HEAPF32[$22>>2] = $24;
 $25 = (($_hero) + 8|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $24 > $26;
 if ($27) {
  HEAPF32[$22>>2] = $26;
 } else {
  $28 = $24 < 0.0;
  if ($28) {
   HEAPF32[$22>>2] = 0.0;
  }
 }
 $29 = (($status_change) + 16|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $1 * $30;
 $32 = (($_hero) + 36|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $33 + $31;
 HEAPF32[$32>>2] = $34;
 $35 = (($_hero) + 12|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $34 > $36;
 if ($37) {
  HEAPF32[$32>>2] = $36;
 } else {
  $38 = $34 < 0.0;
  if ($38) {
   HEAPF32[$32>>2] = 0.0;
  }
 }
 $39 = (($status_change) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $1 * $40;
 $42 = (($_hero) + 28|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $43 + $41;
 HEAPF32[$42>>2] = $44;
 $45 = (($_hero) + 4|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $44 > $46;
 if ($47) {
  HEAPF32[$42>>2] = $46;
 } else {
  $48 = $44 < 0.0;
  if ($48) {
   HEAPF32[$42>>2] = 0.0;
  }
 }
 $49 = (($status_change) + 20|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $1 * $50;
 $52 = (($_hero) + 44|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $53 + $51;
 HEAPF32[$52>>2] = $54;
 $55 = (($_hero) + 20|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $54 > $56;
 if ($57) {
  HEAPF32[$52>>2] = $56;
  STACKTOP = sp;return;
 }
 $58 = $54 < 0.0;
 if (!($58)) {
  STACKTOP = sp;return;
 }
 HEAPF32[$52>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$status_change,$title_effect,$day) {
 $_hero = $_hero|0;
 $status_change = $status_change|0;
 $title_effect = $title_effect|0;
 $day = $day|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$status_change>>2];
 $1 = $0 > 0.0;
 if ($1) {
  $2 = +HEAPF32[$title_effect>>2];
  $3 = $0 * $2;
  $4 = (+($day|0));
  $5 = $4 * $3;
  $6 = +HEAPF32[$_hero>>2];
  $7 = $5 < $6;
  $8 = $7 ? $5 : $6;
  $9 = $8 > 0.0;
  $10 = $9 ? $8 : 0.0;
  $11 = (($_hero) + 24|0);
  HEAPF32[$11>>2] = $10;
 } else {
  $12 = (+($day|0));
  $13 = $12 * $0;
  $14 = +HEAPF32[$_hero>>2];
  $15 = $13 < $14;
  $16 = $15 ? $13 : $14;
  $17 = $16 > 0.0;
  $18 = $17 ? $16 : 0.0;
  $19 = (($_hero) + 24|0);
  HEAPF32[$19>>2] = $18;
 }
 $20 = (($status_change) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (($title_effect) + 12|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $21 * $23;
 $25 = (+($day|0));
 $26 = $25 * $24;
 $27 = (($_hero) + 40|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $28 + $26;
 HEAPF32[$27>>2] = $29;
 $30 = (($_hero) + 16|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $29 > $31;
 if ($32) {
  HEAPF32[$27>>2] = $31;
 } else {
  $33 = $29 < 0.0;
  if ($33) {
   HEAPF32[$27>>2] = 0.0;
  }
 }
 $34 = (($status_change) + 4|0);
 $35 = +HEAPF32[$34>>2];
 $36 = (($title_effect) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $35 * $37;
 $39 = $25 * $38;
 $40 = (($_hero) + 32|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $41 + $39;
 HEAPF32[$40>>2] = $42;
 $43 = (($_hero) + 8|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $42 > $44;
 if ($45) {
  HEAPF32[$40>>2] = $44;
 } else {
  $46 = $42 < 0.0;
  if ($46) {
   HEAPF32[$40>>2] = 0.0;
  }
 }
 $47 = (($status_change) + 16|0);
 $48 = +HEAPF32[$47>>2];
 $49 = (($title_effect) + 16|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $48 * $50;
 $52 = $25 * $51;
 $53 = (($_hero) + 36|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $54 + $52;
 HEAPF32[$53>>2] = $55;
 $56 = (($_hero) + 12|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $55 > $57;
 if ($58) {
  HEAPF32[$53>>2] = $57;
 } else {
  $59 = $55 < 0.0;
  if ($59) {
   HEAPF32[$53>>2] = 0.0;
  }
 }
 $60 = (($status_change) + 8|0);
 $61 = +HEAPF32[$60>>2];
 $62 = (($title_effect) + 8|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $61 * $63;
 $65 = $25 * $64;
 $66 = (($_hero) + 28|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $67 + $65;
 HEAPF32[$66>>2] = $68;
 $69 = (($_hero) + 4|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $68 > $70;
 if ($71) {
  HEAPF32[$66>>2] = $70;
 } else {
  $72 = $68 < 0.0;
  if ($72) {
   HEAPF32[$66>>2] = 0.0;
  }
 }
 $73 = (($status_change) + 20|0);
 $74 = +HEAPF32[$73>>2];
 $75 = (($title_effect) + 20|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $74 * $76;
 $78 = $25 * $77;
 $79 = (($_hero) + 44|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $80 + $78;
 HEAPF32[$79>>2] = $81;
 $82 = (($_hero) + 20|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $81 > $83;
 if ($84) {
  HEAPF32[$79>>2] = $83;
  STACKTOP = sp;return;
 }
 $85 = $81 < 0.0;
 if (!($85)) {
  STACKTOP = sp;return;
 }
 HEAPF32[$79>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN6normal11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i112 = 0, $$0$i$i25 = 0, $$0$i$i54 = 0, $$0$i$i83 = 0, $$byval_copy = 0, $$byval_copy151 = 0, $$byval_copy152 = 0, $$byval_copy153 = 0, $$byval_copy154 = 0, $$byval_copy155 = 0, $$byval_copy156 = 0, $$byval_copy157 = 0, $$byval_copy158 = 0, $$idx = 0, $$idx$val = 0.0, $$idx117 = 0, $$idx117$val = 0.0, $$idx118 = 0, $$idx118$val = 0.0;
 var $$idx119 = 0, $$idx119$val = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert139 = 0, $$phi$trans$insert142 = 0, $$phi$trans$insert145 = 0, $$phi$trans$insert148 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i104 = 0, $$pre$i$i17 = 0, $$pre$i$i46 = 0, $$pre$i$i75 = 0, $$pre141 = 0, $$pre144 = 0, $$pre147 = 0, $$pre150 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0;
 var $$sum$i$i$i$i100 = 0, $$sum$i$i$i$i13 = 0, $$sum$i$i$i$i42 = 0, $$sum$i$i$i$i71 = 0, $$sum$i$i106 = 0, $$sum$i$i19 = 0, $$sum$i$i48 = 0, $$sum$i$i77 = 0, $$sum$i3$i = 0, $$sum$i3$i37 = 0, $$sum$i3$i66 = 0, $$sum$i3$i8 = 0, $$sum$i3$i95 = 0, $$sum1$i$i = 0, $$sum1$i$i10 = 0, $$sum1$i$i39 = 0, $$sum1$i$i68 = 0, $$sum1$i$i97 = 0, $$sum120 = 0, $$sum121 = 0;
 var $$sum122 = 0, $$sum123 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum128 = 0, $$sum129 = 0, $$sum130 = 0, $$sum131 = 0, $$sum132 = 0, $$sum133 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__s$i$i = 0, $__s$i$i1 = 0, $__s$i$i30 = 0, $__s$i$i59 = 0, $__s$i$i88 = 0, $option = 0, $tmpcast = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy158 = sp + 960|0;
 $$byval_copy157 = sp + 936|0;
 $$byval_copy156 = sp + 912|0;
 $$byval_copy155 = sp + 888|0;
 $$byval_copy154 = sp + 864|0;
 $$byval_copy153 = sp + 840|0;
 $tmpcast$byval_copy = sp + 816|0;
 $$byval_copy152 = sp + 792|0;
 $$byval_copy151 = sp + 768|0;
 $$byval_copy = sp + 744|0;
 $__s$i$i88 = sp + 736|0;
 $__s$i$i59 = sp + 728|0;
 $__s$i$i30 = sp + 720|0;
 $__s$i$i1 = sp + 184|0;
 $__s$i$i = sp;
 $option = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp + 40|0;
 $2 = sp + 192|0;
 $3 = sp + 216|0;
 $4 = sp + 240|0;
 $5 = sp + 384|0;
 $6 = sp + 408|0;
 $7 = sp + 552|0;
 $8 = sp + 576|0;
 $9 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(56)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum = (($12) + 28)|0;
 $13 = (($9) + ($$sum)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_ii(423,(11752|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 do {
  if (!($19)) {
   $20 = (($14) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($14) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $21;
   $25 = $23;
   $26 = (($24) - ($25))|0;
   $27 = $26 >> 2;
   $28 = ($27>>>0)>($17>>>0);
   if ($28) {
    $29 = (($23) + ($17<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0|0);
    if (!($31)) {
     $35 = HEAP32[$30>>2]|0;
     $36 = (($35) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     __THREW__ = 0;
     $38 = (invoke_iii($37|0,($30|0),10)|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break;
     }
     $48 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($48+-1)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      $50 = HEAP32[$14>>2]|0;
      $51 = (($50) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      FUNCTION_TABLE_vi[$52 & 1023]($14);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $53 = (($__s$i$i) + 4|0);
     HEAP32[$53>>2] = $9;
     $54 = HEAP32[$9>>2]|0;
     $55 = (($54) + -12|0);
     $56 = HEAP32[$55>>2]|0;
     $$sum$i3$i = (($56) + 16)|0;
     $57 = (($9) + ($$sum$i3$i)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0);
     do {
      if ($59) {
       $$sum1$i$i = (($56) + 72)|0;
       $60 = (($9) + ($$sum1$i$i)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0|0);
       if ($62) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($61|0));
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $92 = ___cxa_find_matching_catch(0|0)|0;
         $93 = tempRet0;
         $$0$i$i = $92;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $65 = HEAP32[$9>>2]|0;
        $66 = (($65) + -12|0);
        $67 = HEAP32[$66>>2]|0;
        $$sum$i$i$i$i = (($67) + 24)|0;
        $68 = (($9) + ($$sum$i$i$i$i)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         $86 = $67;
         label = 21;
        } else {
         $71 = (($69) + 24|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($69) + 28|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($72|0)==($74|0);
         if (!($75)) {
          $76 = (($72) + 1|0);
          HEAP32[$71>>2] = $76;
          HEAP8[$72>>0] = $38;
          label = 28;
          break;
         }
         $77 = HEAP32[$69>>2]|0;
         $78 = (($77) + 52|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = $38&255;
         __THREW__ = 0;
         $81 = (invoke_iii($79|0,($69|0),($80|0))|0);
         $82 = __THREW__; __THREW__ = 0;
         $83 = $82&1;
         if (!($83)) {
          $84 = ($81|0)==(-1);
          if (!($84)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$9>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $86 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $85 = (($9) + ($86)|0);
         $$sum$i$i = (($86) + 16)|0;
         $87 = (($9) + ($$sum$i$i)|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $88 | 1;
         __THREW__ = 0;
         invoke_vii(425,($85|0),($89|0));
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if (!($91)) {
          label = 28;
          break;
         }
        }
        $94 = ___cxa_find_matching_catch(0|0)|0;
        $95 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $94;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $96 = HEAP32[$9>>2]|0;
       $97 = (($96) + -12|0);
       $98 = HEAP32[$97>>2]|0;
       $$sum132 = (($98) + 16)|0;
       $99 = (($9) + ($$sum132)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $100 | 1;
       HEAP32[$99>>2] = $101;
       $$sum133 = (($98) + 20)|0;
       $102 = (($9) + ($$sum133)|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = $103 & 1;
       $105 = ($104|0)==(0);
       if ($105) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if (!($107)) {
        // unreachable;
       }
       $108 = ___cxa_find_matching_catch()|0;
       $109 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        $112 = ___cxa_find_matching_catch(0|0)|0;
        $113 = tempRet0;
        ___clang_call_terminate($112);
        // unreachable;
       } else {
        ___resumeException($108|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9);
     $114 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(72)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + -12|0);
     $117 = HEAP32[$116>>2]|0;
     $$sum120 = (($117) + 28)|0;
     $118 = (($114) + ($$sum120)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + 4|0);
     $121 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($121+1)|0);
     __THREW__ = 0;
     $122 = (invoke_ii(423,(11752|0))|0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     do {
      if (!($124)) {
       $125 = (($119) + 12|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($119) + 8|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $126;
       $130 = $128;
       $131 = (($129) - ($130))|0;
       $132 = $131 >> 2;
       $133 = ($132>>>0)>($122>>>0);
       if ($133) {
        $134 = (($128) + ($122<<2)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if (!($136)) {
         $140 = HEAP32[$135>>2]|0;
         $141 = (($140) + 28|0);
         $142 = HEAP32[$141>>2]|0;
         __THREW__ = 0;
         $143 = (invoke_iii($142|0,($135|0),10)|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          break;
         }
         $153 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($153+-1)|0);
         $154 = ($153|0)==(0);
         if ($154) {
          $155 = HEAP32[$119>>2]|0;
          $156 = (($155) + 8|0);
          $157 = HEAP32[$156>>2]|0;
          FUNCTION_TABLE_vi[$157 & 1023]($119);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $158 = (($__s$i$i1) + 4|0);
         HEAP32[$158>>2] = $114;
         $159 = HEAP32[$114>>2]|0;
         $160 = (($159) + -12|0);
         $161 = HEAP32[$160>>2]|0;
         $$sum$i3$i8 = (($161) + 16)|0;
         $162 = (($114) + ($$sum$i3$i8)|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0);
         L49: do {
          if ($164) {
           $$sum1$i$i10 = (($161) + 72)|0;
           $165 = (($114) + ($$sum1$i$i10)|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = ($166|0)==(0|0);
           if ($167) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($166|0));
            $168 = __THREW__; __THREW__ = 0;
            $169 = $168&1;
            if ($169) {
             $197 = ___cxa_find_matching_catch(0|0)|0;
             $198 = tempRet0;
             $$0$i$i25 = $197;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $170 = HEAP32[$114>>2]|0;
            $171 = (($170) + -12|0);
            $172 = HEAP32[$171>>2]|0;
            $$sum$i$i$i$i13 = (($172) + 24)|0;
            $173 = (($114) + ($$sum$i$i$i$i13)|0);
            $174 = HEAP32[$173>>2]|0;
            $175 = ($174|0)==(0|0);
            do {
             if ($175) {
              $191 = $172;
              label = 52;
             } else {
              $176 = (($174) + 24|0);
              $177 = HEAP32[$176>>2]|0;
              $178 = (($174) + 28|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = ($177|0)==($179|0);
              if (!($180)) {
               $181 = (($177) + 1|0);
               HEAP32[$176>>2] = $181;
               HEAP8[$177>>0] = $143;
               label = 59;
               break L49;
              }
              $182 = HEAP32[$174>>2]|0;
              $183 = (($182) + 52|0);
              $184 = HEAP32[$183>>2]|0;
              $185 = $143&255;
              __THREW__ = 0;
              $186 = (invoke_iii($184|0,($174|0),($185|0))|0);
              $187 = __THREW__; __THREW__ = 0;
              $188 = $187&1;
              if ($188) {
               break;
              }
              $189 = ($186|0)==(-1);
              if (!($189)) {
               label = 59;
               break L49;
              }
              $$pre$i$i17 = HEAP32[$114>>2]|0;
              $$phi$trans$insert139 = (($$pre$i$i17) + -12|0);
              $$pre141 = HEAP32[$$phi$trans$insert139>>2]|0;
              $191 = $$pre141;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $190 = (($114) + ($191)|0);
             $$sum$i$i19 = (($191) + 16)|0;
             $192 = (($114) + ($$sum$i$i19)|0);
             $193 = HEAP32[$192>>2]|0;
             $194 = $193 | 1;
             __THREW__ = 0;
             invoke_vii(425,($190|0),($194|0));
             $195 = __THREW__; __THREW__ = 0;
             $196 = $195&1;
             if (!($196)) {
              label = 59;
              break;
             }
            }
            $199 = ___cxa_find_matching_catch(0|0)|0;
            $200 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $199;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $201 = HEAP32[$114>>2]|0;
           $202 = (($201) + -12|0);
           $203 = HEAP32[$202>>2]|0;
           $$sum130 = (($203) + 16)|0;
           $204 = (($114) + ($$sum130)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = $205 | 1;
           HEAP32[$204>>2] = $206;
           $$sum131 = (($203) + 20)|0;
           $207 = (($114) + ($$sum131)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = $208 & 1;
           $210 = ($209|0)==(0);
           if ($210) {
            ___cxa_end_catch();
            break;
           }
           __THREW__ = 0;
           invoke_v(426);
           $211 = __THREW__; __THREW__ = 0;
           $212 = $211&1;
           if (!($212)) {
            // unreachable;
           }
           $213 = ___cxa_find_matching_catch()|0;
           $214 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $215 = __THREW__; __THREW__ = 0;
           $216 = $215&1;
           if ($216) {
            $217 = ___cxa_find_matching_catch(0|0)|0;
            $218 = tempRet0;
            ___clang_call_terminate($217);
            // unreachable;
           } else {
            ___resumeException($213|0);
            // unreachable;
           }
          } else {
           label = 59;
          }
         } while(0);
         if ((label|0) == 59) {
          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         }
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($114);
         $219 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(88)|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = (($220) + -12|0);
         $222 = HEAP32[$221>>2]|0;
         $$sum121 = (($222) + 28)|0;
         $223 = (($219) + ($$sum121)|0);
         $224 = HEAP32[$223>>2]|0;
         $225 = (($224) + 4|0);
         $226 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($226+1)|0);
         __THREW__ = 0;
         $227 = (invoke_ii(423,(11752|0))|0);
         $228 = __THREW__; __THREW__ = 0;
         $229 = $228&1;
         L79: do {
          if (!($229)) {
           $230 = (($224) + 12|0);
           $231 = HEAP32[$230>>2]|0;
           $232 = (($224) + 8|0);
           $233 = HEAP32[$232>>2]|0;
           $234 = $231;
           $235 = $233;
           $236 = (($234) - ($235))|0;
           $237 = $236 >> 2;
           $238 = ($237>>>0)>($227>>>0);
           do {
            if ($238) {
             $239 = (($233) + ($227<<2)|0);
             $240 = HEAP32[$239>>2]|0;
             $241 = ($240|0)==(0|0);
             if ($241) {
              break;
             }
             $245 = HEAP32[$240>>2]|0;
             $246 = (($245) + 28|0);
             $247 = HEAP32[$246>>2]|0;
             __THREW__ = 0;
             $248 = (invoke_iii($247|0,($240|0),10)|0);
             $249 = __THREW__; __THREW__ = 0;
             $250 = $249&1;
             if ($250) {
              break L79;
             }
             $258 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($258+-1)|0);
             $259 = ($258|0)==(0);
             if ($259) {
              $260 = HEAP32[$224>>2]|0;
              $261 = (($260) + 8|0);
              $262 = HEAP32[$261>>2]|0;
              FUNCTION_TABLE_vi[$262 & 1023]($224);
             }
             HEAP8[$__s$i$i30>>0] = 0;
             $263 = (($__s$i$i30) + 4|0);
             HEAP32[$263>>2] = $219;
             $264 = HEAP32[$219>>2]|0;
             $265 = (($264) + -12|0);
             $266 = HEAP32[$265>>2]|0;
             $$sum$i3$i37 = (($266) + 16)|0;
             $267 = (($219) + ($$sum$i3$i37)|0);
             $268 = HEAP32[$267>>2]|0;
             $269 = ($268|0)==(0);
             L88: do {
              if ($269) {
               $$sum1$i$i39 = (($266) + 72)|0;
               $270 = (($219) + ($$sum1$i$i39)|0);
               $271 = HEAP32[$270>>2]|0;
               $272 = ($271|0)==(0|0);
               do {
                if ($272) {
                 label = 77;
                } else {
                 __THREW__ = 0;
                 invoke_vi(424,($271|0));
                 $273 = __THREW__; __THREW__ = 0;
                 $274 = $273&1;
                 if (!($274)) {
                  label = 77;
                  break;
                 }
                 $302 = ___cxa_find_matching_catch(0|0)|0;
                 $303 = tempRet0;
                 $$0$i$i54 = $302;
                }
               } while(0);
               if ((label|0) == 77) {
                HEAP8[$__s$i$i30>>0] = 1;
                $275 = HEAP32[$219>>2]|0;
                $276 = (($275) + -12|0);
                $277 = HEAP32[$276>>2]|0;
                $$sum$i$i$i$i42 = (($277) + 24)|0;
                $278 = (($219) + ($$sum$i$i$i$i42)|0);
                $279 = HEAP32[$278>>2]|0;
                $280 = ($279|0)==(0|0);
                do {
                 if ($280) {
                  $296 = $277;
                  label = 83;
                 } else {
                  $281 = (($279) + 24|0);
                  $282 = HEAP32[$281>>2]|0;
                  $283 = (($279) + 28|0);
                  $284 = HEAP32[$283>>2]|0;
                  $285 = ($282|0)==($284|0);
                  if (!($285)) {
                   $286 = (($282) + 1|0);
                   HEAP32[$281>>2] = $286;
                   HEAP8[$282>>0] = $248;
                   label = 90;
                   break L88;
                  }
                  $287 = HEAP32[$279>>2]|0;
                  $288 = (($287) + 52|0);
                  $289 = HEAP32[$288>>2]|0;
                  $290 = $248&255;
                  __THREW__ = 0;
                  $291 = (invoke_iii($289|0,($279|0),($290|0))|0);
                  $292 = __THREW__; __THREW__ = 0;
                  $293 = $292&1;
                  if ($293) {
                   break;
                  }
                  $294 = ($291|0)==(-1);
                  if (!($294)) {
                   label = 90;
                   break L88;
                  }
                  $$pre$i$i46 = HEAP32[$219>>2]|0;
                  $$phi$trans$insert142 = (($$pre$i$i46) + -12|0);
                  $$pre144 = HEAP32[$$phi$trans$insert142>>2]|0;
                  $296 = $$pre144;
                  label = 83;
                 }
                } while(0);
                if ((label|0) == 83) {
                 $295 = (($219) + ($296)|0);
                 $$sum$i$i48 = (($296) + 16)|0;
                 $297 = (($219) + ($$sum$i$i48)|0);
                 $298 = HEAP32[$297>>2]|0;
                 $299 = $298 | 1;
                 __THREW__ = 0;
                 invoke_vii(425,($295|0),($299|0));
                 $300 = __THREW__; __THREW__ = 0;
                 $301 = $300&1;
                 if (!($301)) {
                  label = 90;
                  break;
                 }
                }
                $304 = ___cxa_find_matching_catch(0|0)|0;
                $305 = tempRet0;
                __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
                $$0$i$i54 = $304;
               }
               (___cxa_begin_catch(($$0$i$i54|0))|0);
               $306 = HEAP32[$219>>2]|0;
               $307 = (($306) + -12|0);
               $308 = HEAP32[$307>>2]|0;
               $$sum128 = (($308) + 16)|0;
               $309 = (($219) + ($$sum128)|0);
               $310 = HEAP32[$309>>2]|0;
               $311 = $310 | 1;
               HEAP32[$309>>2] = $311;
               $$sum129 = (($308) + 20)|0;
               $312 = (($219) + ($$sum129)|0);
               $313 = HEAP32[$312>>2]|0;
               $314 = $313 & 1;
               $315 = ($314|0)==(0);
               if ($315) {
                ___cxa_end_catch();
                break;
               }
               __THREW__ = 0;
               invoke_v(426);
               $316 = __THREW__; __THREW__ = 0;
               $317 = $316&1;
               if (!($317)) {
                // unreachable;
               }
               $318 = ___cxa_find_matching_catch()|0;
               $319 = tempRet0;
               __THREW__ = 0;
               invoke_v(427);
               $320 = __THREW__; __THREW__ = 0;
               $321 = $320&1;
               if ($321) {
                $322 = ___cxa_find_matching_catch(0|0)|0;
                $323 = tempRet0;
                ___clang_call_terminate($322);
                // unreachable;
               } else {
                ___resumeException($318|0);
                // unreachable;
               }
              } else {
               label = 90;
              }
             } while(0);
             if ((label|0) == 90) {
              __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
             }
             __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($219);
             $324 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(120)|0);
             $325 = HEAP32[$324>>2]|0;
             $326 = (($325) + -12|0);
             $327 = HEAP32[$326>>2]|0;
             $$sum122 = (($327) + 28)|0;
             $328 = (($324) + ($$sum122)|0);
             $329 = HEAP32[$328>>2]|0;
             $330 = (($329) + 4|0);
             $331 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($331+1)|0);
             __THREW__ = 0;
             $332 = (invoke_ii(423,(11752|0))|0);
             $333 = __THREW__; __THREW__ = 0;
             $334 = $333&1;
             L118: do {
              if (!($334)) {
               $335 = (($329) + 12|0);
               $336 = HEAP32[$335>>2]|0;
               $337 = (($329) + 8|0);
               $338 = HEAP32[$337>>2]|0;
               $339 = $336;
               $340 = $338;
               $341 = (($339) - ($340))|0;
               $342 = $341 >> 2;
               $343 = ($342>>>0)>($332>>>0);
               do {
                if ($343) {
                 $344 = (($338) + ($332<<2)|0);
                 $345 = HEAP32[$344>>2]|0;
                 $346 = ($345|0)==(0|0);
                 if ($346) {
                  break;
                 }
                 $350 = HEAP32[$345>>2]|0;
                 $351 = (($350) + 28|0);
                 $352 = HEAP32[$351>>2]|0;
                 __THREW__ = 0;
                 $353 = (invoke_iii($352|0,($345|0),10)|0);
                 $354 = __THREW__; __THREW__ = 0;
                 $355 = $354&1;
                 if ($355) {
                  break L118;
                 }
                 $363 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($363+-1)|0);
                 $364 = ($363|0)==(0);
                 if ($364) {
                  $365 = HEAP32[$329>>2]|0;
                  $366 = (($365) + 8|0);
                  $367 = HEAP32[$366>>2]|0;
                  FUNCTION_TABLE_vi[$367 & 1023]($329);
                 }
                 HEAP8[$__s$i$i59>>0] = 0;
                 $368 = (($__s$i$i59) + 4|0);
                 HEAP32[$368>>2] = $324;
                 $369 = HEAP32[$324>>2]|0;
                 $370 = (($369) + -12|0);
                 $371 = HEAP32[$370>>2]|0;
                 $$sum$i3$i66 = (($371) + 16)|0;
                 $372 = (($324) + ($$sum$i3$i66)|0);
                 $373 = HEAP32[$372>>2]|0;
                 $374 = ($373|0)==(0);
                 L127: do {
                  if ($374) {
                   $$sum1$i$i68 = (($371) + 72)|0;
                   $375 = (($324) + ($$sum1$i$i68)|0);
                   $376 = HEAP32[$375>>2]|0;
                   $377 = ($376|0)==(0|0);
                   do {
                    if ($377) {
                     label = 108;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(424,($376|0));
                     $378 = __THREW__; __THREW__ = 0;
                     $379 = $378&1;
                     if (!($379)) {
                      label = 108;
                      break;
                     }
                     $407 = ___cxa_find_matching_catch(0|0)|0;
                     $408 = tempRet0;
                     $$0$i$i83 = $407;
                    }
                   } while(0);
                   if ((label|0) == 108) {
                    HEAP8[$__s$i$i59>>0] = 1;
                    $380 = HEAP32[$324>>2]|0;
                    $381 = (($380) + -12|0);
                    $382 = HEAP32[$381>>2]|0;
                    $$sum$i$i$i$i71 = (($382) + 24)|0;
                    $383 = (($324) + ($$sum$i$i$i$i71)|0);
                    $384 = HEAP32[$383>>2]|0;
                    $385 = ($384|0)==(0|0);
                    do {
                     if ($385) {
                      $401 = $382;
                      label = 114;
                     } else {
                      $386 = (($384) + 24|0);
                      $387 = HEAP32[$386>>2]|0;
                      $388 = (($384) + 28|0);
                      $389 = HEAP32[$388>>2]|0;
                      $390 = ($387|0)==($389|0);
                      if (!($390)) {
                       $391 = (($387) + 1|0);
                       HEAP32[$386>>2] = $391;
                       HEAP8[$387>>0] = $353;
                       label = 121;
                       break L127;
                      }
                      $392 = HEAP32[$384>>2]|0;
                      $393 = (($392) + 52|0);
                      $394 = HEAP32[$393>>2]|0;
                      $395 = $353&255;
                      __THREW__ = 0;
                      $396 = (invoke_iii($394|0,($384|0),($395|0))|0);
                      $397 = __THREW__; __THREW__ = 0;
                      $398 = $397&1;
                      if ($398) {
                       break;
                      }
                      $399 = ($396|0)==(-1);
                      if (!($399)) {
                       label = 121;
                       break L127;
                      }
                      $$pre$i$i75 = HEAP32[$324>>2]|0;
                      $$phi$trans$insert145 = (($$pre$i$i75) + -12|0);
                      $$pre147 = HEAP32[$$phi$trans$insert145>>2]|0;
                      $401 = $$pre147;
                      label = 114;
                     }
                    } while(0);
                    if ((label|0) == 114) {
                     $400 = (($324) + ($401)|0);
                     $$sum$i$i77 = (($401) + 16)|0;
                     $402 = (($324) + ($$sum$i$i77)|0);
                     $403 = HEAP32[$402>>2]|0;
                     $404 = $403 | 1;
                     __THREW__ = 0;
                     invoke_vii(425,($400|0),($404|0));
                     $405 = __THREW__; __THREW__ = 0;
                     $406 = $405&1;
                     if (!($406)) {
                      label = 121;
                      break;
                     }
                    }
                    $409 = ___cxa_find_matching_catch(0|0)|0;
                    $410 = tempRet0;
                    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                    $$0$i$i83 = $409;
                   }
                   (___cxa_begin_catch(($$0$i$i83|0))|0);
                   $411 = HEAP32[$324>>2]|0;
                   $412 = (($411) + -12|0);
                   $413 = HEAP32[$412>>2]|0;
                   $$sum126 = (($413) + 16)|0;
                   $414 = (($324) + ($$sum126)|0);
                   $415 = HEAP32[$414>>2]|0;
                   $416 = $415 | 1;
                   HEAP32[$414>>2] = $416;
                   $$sum127 = (($413) + 20)|0;
                   $417 = (($324) + ($$sum127)|0);
                   $418 = HEAP32[$417>>2]|0;
                   $419 = $418 & 1;
                   $420 = ($419|0)==(0);
                   if ($420) {
                    ___cxa_end_catch();
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(426);
                   $421 = __THREW__; __THREW__ = 0;
                   $422 = $421&1;
                   if (!($422)) {
                    // unreachable;
                   }
                   $423 = ___cxa_find_matching_catch()|0;
                   $424 = tempRet0;
                   __THREW__ = 0;
                   invoke_v(427);
                   $425 = __THREW__; __THREW__ = 0;
                   $426 = $425&1;
                   if ($426) {
                    $427 = ___cxa_find_matching_catch(0|0)|0;
                    $428 = tempRet0;
                    ___clang_call_terminate($427);
                    // unreachable;
                   } else {
                    ___resumeException($423|0);
                    // unreachable;
                   }
                  } else {
                   label = 121;
                  }
                 } while(0);
                 if ((label|0) == 121) {
                  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                 }
                 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($324);
                 $429 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(136)|0);
                 $430 = HEAP32[$429>>2]|0;
                 $431 = (($430) + -12|0);
                 $432 = HEAP32[$431>>2]|0;
                 $$sum123 = (($432) + 28)|0;
                 $433 = (($429) + ($$sum123)|0);
                 $434 = HEAP32[$433>>2]|0;
                 $435 = (($434) + 4|0);
                 $436 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($436+1)|0);
                 __THREW__ = 0;
                 $437 = (invoke_ii(423,(11752|0))|0);
                 $438 = __THREW__; __THREW__ = 0;
                 $439 = $438&1;
                 L157: do {
                  if (!($439)) {
                   $440 = (($434) + 12|0);
                   $441 = HEAP32[$440>>2]|0;
                   $442 = (($434) + 8|0);
                   $443 = HEAP32[$442>>2]|0;
                   $444 = $441;
                   $445 = $443;
                   $446 = (($444) - ($445))|0;
                   $447 = $446 >> 2;
                   $448 = ($447>>>0)>($437>>>0);
                   do {
                    if ($448) {
                     $449 = (($443) + ($437<<2)|0);
                     $450 = HEAP32[$449>>2]|0;
                     $451 = ($450|0)==(0|0);
                     if ($451) {
                      break;
                     }
                     $455 = HEAP32[$450>>2]|0;
                     $456 = (($455) + 28|0);
                     $457 = HEAP32[$456>>2]|0;
                     __THREW__ = 0;
                     $458 = (invoke_iii($457|0,($450|0),10)|0);
                     $459 = __THREW__; __THREW__ = 0;
                     $460 = $459&1;
                     if ($460) {
                      break L157;
                     }
                     $468 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($468+-1)|0);
                     $469 = ($468|0)==(0);
                     if ($469) {
                      $470 = HEAP32[$434>>2]|0;
                      $471 = (($470) + 8|0);
                      $472 = HEAP32[$471>>2]|0;
                      FUNCTION_TABLE_vi[$472 & 1023]($434);
                     }
                     HEAP8[$__s$i$i88>>0] = 0;
                     $473 = (($__s$i$i88) + 4|0);
                     HEAP32[$473>>2] = $429;
                     $474 = HEAP32[$429>>2]|0;
                     $475 = (($474) + -12|0);
                     $476 = HEAP32[$475>>2]|0;
                     $$sum$i3$i95 = (($476) + 16)|0;
                     $477 = (($429) + ($$sum$i3$i95)|0);
                     $478 = HEAP32[$477>>2]|0;
                     $479 = ($478|0)==(0);
                     L166: do {
                      if ($479) {
                       $$sum1$i$i97 = (($476) + 72)|0;
                       $480 = (($429) + ($$sum1$i$i97)|0);
                       $481 = HEAP32[$480>>2]|0;
                       $482 = ($481|0)==(0|0);
                       do {
                        if ($482) {
                         label = 139;
                        } else {
                         __THREW__ = 0;
                         invoke_vi(424,($481|0));
                         $483 = __THREW__; __THREW__ = 0;
                         $484 = $483&1;
                         if (!($484)) {
                          label = 139;
                          break;
                         }
                         $512 = ___cxa_find_matching_catch(0|0)|0;
                         $513 = tempRet0;
                         $$0$i$i112 = $512;
                        }
                       } while(0);
                       if ((label|0) == 139) {
                        HEAP8[$__s$i$i88>>0] = 1;
                        $485 = HEAP32[$429>>2]|0;
                        $486 = (($485) + -12|0);
                        $487 = HEAP32[$486>>2]|0;
                        $$sum$i$i$i$i100 = (($487) + 24)|0;
                        $488 = (($429) + ($$sum$i$i$i$i100)|0);
                        $489 = HEAP32[$488>>2]|0;
                        $490 = ($489|0)==(0|0);
                        do {
                         if ($490) {
                          $506 = $487;
                          label = 145;
                         } else {
                          $491 = (($489) + 24|0);
                          $492 = HEAP32[$491>>2]|0;
                          $493 = (($489) + 28|0);
                          $494 = HEAP32[$493>>2]|0;
                          $495 = ($492|0)==($494|0);
                          if (!($495)) {
                           $496 = (($492) + 1|0);
                           HEAP32[$491>>2] = $496;
                           HEAP8[$492>>0] = $458;
                           label = 152;
                           break L166;
                          }
                          $497 = HEAP32[$489>>2]|0;
                          $498 = (($497) + 52|0);
                          $499 = HEAP32[$498>>2]|0;
                          $500 = $458&255;
                          __THREW__ = 0;
                          $501 = (invoke_iii($499|0,($489|0),($500|0))|0);
                          $502 = __THREW__; __THREW__ = 0;
                          $503 = $502&1;
                          if ($503) {
                           break;
                          }
                          $504 = ($501|0)==(-1);
                          if (!($504)) {
                           label = 152;
                           break L166;
                          }
                          $$pre$i$i104 = HEAP32[$429>>2]|0;
                          $$phi$trans$insert148 = (($$pre$i$i104) + -12|0);
                          $$pre150 = HEAP32[$$phi$trans$insert148>>2]|0;
                          $506 = $$pre150;
                          label = 145;
                         }
                        } while(0);
                        if ((label|0) == 145) {
                         $505 = (($429) + ($506)|0);
                         $$sum$i$i106 = (($506) + 16)|0;
                         $507 = (($429) + ($$sum$i$i106)|0);
                         $508 = HEAP32[$507>>2]|0;
                         $509 = $508 | 1;
                         __THREW__ = 0;
                         invoke_vii(425,($505|0),($509|0));
                         $510 = __THREW__; __THREW__ = 0;
                         $511 = $510&1;
                         if (!($511)) {
                          label = 152;
                          break;
                         }
                        }
                        $514 = ___cxa_find_matching_catch(0|0)|0;
                        $515 = tempRet0;
                        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                        $$0$i$i112 = $514;
                       }
                       (___cxa_begin_catch(($$0$i$i112|0))|0);
                       $516 = HEAP32[$429>>2]|0;
                       $517 = (($516) + -12|0);
                       $518 = HEAP32[$517>>2]|0;
                       $$sum124 = (($518) + 16)|0;
                       $519 = (($429) + ($$sum124)|0);
                       $520 = HEAP32[$519>>2]|0;
                       $521 = $520 | 1;
                       HEAP32[$519>>2] = $521;
                       $$sum125 = (($518) + 20)|0;
                       $522 = (($429) + ($$sum125)|0);
                       $523 = HEAP32[$522>>2]|0;
                       $524 = $523 & 1;
                       $525 = ($524|0)==(0);
                       if ($525) {
                        ___cxa_end_catch();
                        break;
                       }
                       __THREW__ = 0;
                       invoke_v(426);
                       $526 = __THREW__; __THREW__ = 0;
                       $527 = $526&1;
                       if (!($527)) {
                        // unreachable;
                       }
                       $528 = ___cxa_find_matching_catch()|0;
                       $529 = tempRet0;
                       __THREW__ = 0;
                       invoke_v(427);
                       $530 = __THREW__; __THREW__ = 0;
                       $531 = $530&1;
                       if ($531) {
                        $532 = ___cxa_find_matching_catch(0|0)|0;
                        $533 = tempRet0;
                        ___clang_call_terminate($532);
                        // unreachable;
                       } else {
                        ___resumeException($528|0);
                        // unreachable;
                       }
                      } else {
                       label = 152;
                      }
                     } while(0);
                     if ((label|0) == 152) {
                      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                     }
                     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($429);
                     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($option);
                     $534 = HEAP32[$option>>2]|0;
                     switch ($534|0) {
                     case 1:  {
                      $$idx119 = (($_hero) + 44|0);
                      $$idx119$val = +HEAPF32[$$idx119>>2];
                      $535 = (+__ZN4hero25get_energy_consuming_rateEv($$idx119$val));
                      HEAPF32[$0>>2] = $535;
                      $536 = (($0) + 4|0);
                      HEAPF32[$536>>2] = -2.0;
                      $537 = (($0) + 8|0);
                      HEAPF32[$537>>2] = 0.0;
                      $538 = (($0) + 12|0);
                      HEAPF32[$538>>2] = 2.0;
                      $539 = (($0) + 16|0);
                      HEAPF32[$539>>2] = 0.0;
                      $540 = (($0) + 20|0);
                      HEAPF32[$540>>2] = 8.0;
                      $541 = (($_hero) + 76|0);
                      _memcpy(($1|0),($541|0),144)|0;
                      $542 = (($1) + 24|0);
                      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
                      ;HEAP32[$$byval_copy151+0>>2]=HEAP32[$542+0>>2]|0;HEAP32[$$byval_copy151+4>>2]=HEAP32[$542+4>>2]|0;HEAP32[$$byval_copy151+8>>2]=HEAP32[$542+8>>2]|0;HEAP32[$$byval_copy151+12>>2]=HEAP32[$542+12>>2]|0;HEAP32[$$byval_copy151+16>>2]=HEAP32[$542+16>>2]|0;HEAP32[$$byval_copy151+20>>2]=HEAP32[$542+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy,$$byval_copy151,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 5:  {
                      HEAPF32[$7>>2] = 8.0;
                      $565 = (($7) + 4|0);
                      $566 = (($7) + 20|0);
                      ;HEAP32[$565+0>>2]=0|0;HEAP32[$565+4>>2]=0|0;HEAP32[$565+8>>2]=0|0;HEAP32[$565+12>>2]=0|0;
                      HEAPF32[$566>>2] = -5.0;
                      $567 = (($_hero) + 76|0);
                      _memcpy(($8|0),($567|0),144)|0;
                      $568 = (($8) + 96|0);
                      ;HEAP32[$$byval_copy157+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy157+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy157+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy157+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy157+20>>2]=HEAP32[$7+20>>2]|0;
                      ;HEAP32[$$byval_copy158+0>>2]=HEAP32[$568+0>>2]|0;HEAP32[$$byval_copy158+4>>2]=HEAP32[$568+4>>2]|0;HEAP32[$$byval_copy158+8>>2]=HEAP32[$568+8>>2]|0;HEAP32[$$byval_copy158+12>>2]=HEAP32[$568+12>>2]|0;HEAP32[$$byval_copy158+16>>2]=HEAP32[$568+16>>2]|0;HEAP32[$$byval_copy158+20>>2]=HEAP32[$568+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy157,$$byval_copy158,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 4:  {
                      $$idx = (($_hero) + 44|0);
                      $$idx$val = +HEAPF32[$$idx>>2];
                      $557 = (+__ZN4hero25get_energy_consuming_rateEv($$idx$val));
                      HEAPF32[$5>>2] = $557;
                      $558 = (($5) + 4|0);
                      HEAPF32[$558>>2] = -2.0;
                      $559 = (($5) + 8|0);
                      HEAPF32[$559>>2] = 5.0;
                      $560 = (($5) + 12|0);
                      HEAPF32[$560>>2] = -4.0;
                      $561 = (($5) + 16|0);
                      HEAPF32[$561>>2] = 0.0;
                      $562 = (($5) + 20|0);
                      HEAPF32[$562>>2] = 0.0;
                      $563 = (($_hero) + 76|0);
                      _memcpy(($6|0),($563|0),144)|0;
                      $564 = (($6) + 72|0);
                      ;HEAP32[$$byval_copy155+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy155+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy155+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy155+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy155+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$$byval_copy155+20>>2]=HEAP32[$5+20>>2]|0;
                      ;HEAP32[$$byval_copy156+0>>2]=HEAP32[$564+0>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$564+4>>2]|0;HEAP32[$$byval_copy156+8>>2]=HEAP32[$564+8>>2]|0;HEAP32[$$byval_copy156+12>>2]=HEAP32[$564+12>>2]|0;HEAP32[$$byval_copy156+16>>2]=HEAP32[$564+16>>2]|0;HEAP32[$$byval_copy156+20>>2]=HEAP32[$564+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy155,$$byval_copy156,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 2:  {
                      $$idx118 = (($_hero) + 44|0);
                      $$idx118$val = +HEAPF32[$$idx118>>2];
                      $543 = (+__ZN4hero25get_energy_consuming_rateEv($$idx118$val));
                      HEAPF32[$2>>2] = $543;
                      $544 = (($2) + 4|0);
                      HEAPF32[$544>>2] = 5.0;
                      $545 = (($2) + 8|0);
                      HEAPF32[$545>>2] = 1.0;
                      $546 = (($2) + 12|0);
                      HEAPF32[$546>>2] = -4.0;
                      $547 = (($2) + 16|0);
                      HEAPF32[$547>>2] = 0.0;
                      $548 = (($2) + 20|0);
                      HEAPF32[$548>>2] = 5.0;
                      $tmpcast = (($_hero) + 76|0);
                      ;HEAP32[$$byval_copy152+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$$byval_copy152+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy152+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy152+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy152+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy152+20>>2]=HEAP32[$2+20>>2]|0;
                      ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$tmpcast+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$tmpcast+4>>2]|0;HEAP32[$tmpcast$byval_copy+8>>2]=HEAP32[$tmpcast+8>>2]|0;HEAP32[$tmpcast$byval_copy+12>>2]=HEAP32[$tmpcast+12>>2]|0;HEAP32[$tmpcast$byval_copy+16>>2]=HEAP32[$tmpcast+16>>2]|0;HEAP32[$tmpcast$byval_copy+20>>2]=HEAP32[$tmpcast+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy152,$tmpcast$byval_copy,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 3:  {
                      $$idx117 = (($_hero) + 44|0);
                      $$idx117$val = +HEAPF32[$$idx117>>2];
                      $549 = (+__ZN4hero25get_energy_consuming_rateEv($$idx117$val));
                      HEAPF32[$3>>2] = $549;
                      $550 = (($3) + 4|0);
                      HEAPF32[$550>>2] = 5.0;
                      $551 = (($3) + 8|0);
                      HEAPF32[$551>>2] = 1.0;
                      $552 = (($3) + 12|0);
                      HEAPF32[$552>>2] = -4.0;
                      $553 = (($3) + 16|0);
                      HEAPF32[$553>>2] = 1.0;
                      $554 = (($3) + 20|0);
                      HEAPF32[$554>>2] = -3.0;
                      $555 = (($_hero) + 76|0);
                      _memcpy(($4|0),($555|0),144)|0;
                      $556 = (($4) + 48|0);
                      ;HEAP32[$$byval_copy153+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy153+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy153+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy153+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy153+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy153+20>>2]=HEAP32[$3+20>>2]|0;
                      ;HEAP32[$$byval_copy154+0>>2]=HEAP32[$556+0>>2]|0;HEAP32[$$byval_copy154+4>>2]=HEAP32[$556+4>>2]|0;HEAP32[$$byval_copy154+8>>2]=HEAP32[$556+8>>2]|0;HEAP32[$$byval_copy154+12>>2]=HEAP32[$556+12>>2]|0;HEAP32[$$byval_copy154+16>>2]=HEAP32[$556+16>>2]|0;HEAP32[$$byval_copy154+20>>2]=HEAP32[$556+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy153,$$byval_copy154,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     default: {
                      STACKTOP = sp;return;
                     }
                     }
                    }
                   } while(0);
                   $452 = (___cxa_allocate_exception(4)|0);
                   HEAP32[$452>>2] = ((20400 + 8|0));
                   __THREW__ = 0;
                   invoke_viii(422,($452|0),(20480|0),(396|0));
                   $453 = __THREW__; __THREW__ = 0;
                   $454 = $453&1;
                   if ($454) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $461 = ___cxa_find_matching_catch()|0;
                 $462 = tempRet0;
                 $463 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($463+-1)|0);
                 $464 = ($463|0)==(0);
                 if (!($464)) {
                  ___resumeException($461|0);
                  // unreachable;
                 }
                 $465 = HEAP32[$434>>2]|0;
                 $466 = (($465) + 8|0);
                 $467 = HEAP32[$466>>2]|0;
                 FUNCTION_TABLE_vi[$467 & 1023]($434);
                 ___resumeException($461|0);
                 // unreachable;
                }
               } while(0);
               $347 = (___cxa_allocate_exception(4)|0);
               HEAP32[$347>>2] = ((20400 + 8|0));
               __THREW__ = 0;
               invoke_viii(422,($347|0),(20480|0),(396|0));
               $348 = __THREW__; __THREW__ = 0;
               $349 = $348&1;
               if ($349) {
                break;
               }
               // unreachable;
              }
             } while(0);
             $356 = ___cxa_find_matching_catch()|0;
             $357 = tempRet0;
             $358 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($358+-1)|0);
             $359 = ($358|0)==(0);
             if (!($359)) {
              ___resumeException($356|0);
              // unreachable;
             }
             $360 = HEAP32[$329>>2]|0;
             $361 = (($360) + 8|0);
             $362 = HEAP32[$361>>2]|0;
             FUNCTION_TABLE_vi[$362 & 1023]($329);
             ___resumeException($356|0);
             // unreachable;
            }
           } while(0);
           $242 = (___cxa_allocate_exception(4)|0);
           HEAP32[$242>>2] = ((20400 + 8|0));
           __THREW__ = 0;
           invoke_viii(422,($242|0),(20480|0),(396|0));
           $243 = __THREW__; __THREW__ = 0;
           $244 = $243&1;
           if (!($244)) {
            // unreachable;
           }
          }
         } while(0);
         $251 = ___cxa_find_matching_catch()|0;
         $252 = tempRet0;
         $253 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($253+-1)|0);
         $254 = ($253|0)==(0);
         if (!($254)) {
          ___resumeException($251|0);
          // unreachable;
         }
         $255 = HEAP32[$224>>2]|0;
         $256 = (($255) + 8|0);
         $257 = HEAP32[$256>>2]|0;
         FUNCTION_TABLE_vi[$257 & 1023]($224);
         ___resumeException($251|0);
         // unreachable;
        }
       }
       $137 = (___cxa_allocate_exception(4)|0);
       HEAP32[$137>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($137|0),(20480|0),(396|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if (!($139)) {
        // unreachable;
       }
      }
     } while(0);
     $146 = ___cxa_find_matching_catch()|0;
     $147 = tempRet0;
     $148 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($148+-1)|0);
     $149 = ($148|0)==(0);
     if (!($149)) {
      ___resumeException($146|0);
      // unreachable;
     }
     $150 = HEAP32[$119>>2]|0;
     $151 = (($150) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     FUNCTION_TABLE_vi[$152 & 1023]($119);
     ___resumeException($146|0);
     // unreachable;
    }
   }
   $32 = (___cxa_allocate_exception(4)|0);
   HEAP32[$32>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($32|0),(20480|0),(396|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    // unreachable;
   }
  }
 } while(0);
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $43 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($43+-1)|0);
 $44 = ($43|0)==(0);
 if (!($44)) {
  ___resumeException($41|0);
  // unreachable;
 }
 $45 = HEAP32[$14>>2]|0;
 $46 = (($45) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vi[$47 & 1023]($14);
 ___resumeException($41|0);
 // unreachable;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__str) {
 $__str = $__str|0;
 var $$0 = 0, $$__str = 0, $$sum = 0, $$sum$i = 0, $$sum1 = 0, $$sum1$i = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum2 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp + 8|0;
 $0 = sp;
 HEAP8[$__s>>0] = 0;
 $1 = (($__s) + 4|0);
 HEAP32[$1>>2] = 7272;
 $2 = HEAP32[7272>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum$i = (($4) + 16)|0;
 $5 = (7272 + ($$sum$i)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $$sum1$i = (($4) + 72)|0;
   $8 = (7272 + ($$sum1$i)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    label = 4;
   } else {
    __THREW__ = 0;
    invoke_vi(424,($9|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $84 = ___cxa_find_matching_catch(0|0)|0;
     $85 = tempRet0;
     $$0 = $84;
    } else {
     label = 4;
    }
   }
   if ((label|0) == 4) {
    HEAP8[$__s>>0] = 1;
    $13 = (_strlen(($__str|0))|0);
    $14 = HEAP32[7272>>2]|0;
    $15 = (($14) + -12|0);
    $16 = HEAP32[$15>>2]|0;
    $$sum = (($16) + 24)|0;
    $17 = (7272 + ($$sum)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum1 = (($16) + 4)|0;
    $19 = (7272 + ($$sum1)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & 176;
    $22 = ($21|0)==(32);
    $23 = (($__str) + ($13)|0);
    $$__str = $22 ? $23 : $__str;
    $24 = (7272 + ($16)|0);
    $$sum2 = (($16) + 76)|0;
    $25 = (7272 + ($$sum2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(-1);
    L8: do {
     if ($27) {
      $$sum14 = (($16) + 28)|0;
      $28 = (7272 + ($$sum14)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 4|0);
      $31 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($31+1)|0);
      __THREW__ = 0;
      $32 = (invoke_ii(423,(11752|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      do {
       if (!($34)) {
        $35 = (($29) + 12|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = (($29) + 8|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = $36;
        $40 = $38;
        $41 = (($39) - ($40))|0;
        $42 = $41 >> 2;
        $43 = ($42>>>0)>($32>>>0);
        if ($43) {
         $44 = (($38) + ($32<<2)|0);
         $45 = HEAP32[$44>>2]|0;
         $46 = ($45|0)==(0|0);
         if (!($46)) {
          $50 = HEAP32[$45>>2]|0;
          $51 = (($50) + 28|0);
          $52 = HEAP32[$51>>2]|0;
          __THREW__ = 0;
          $53 = (invoke_iii($52|0,($45|0),32)|0);
          $54 = __THREW__; __THREW__ = 0;
          $55 = $54&1;
          if ($55) {
           break;
          }
          $63 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($63+-1)|0);
          $64 = ($63|0)==(0);
          if ($64) {
           $65 = HEAP32[$29>>2]|0;
           $66 = (($65) + 8|0);
           $67 = HEAP32[$66>>2]|0;
           FUNCTION_TABLE_vi[$67 & 1023]($29);
          }
          $68 = $53 << 24 >> 24;
          HEAP32[$25>>2] = $68;
          $70 = $68;
          label = 16;
          break L8;
         }
        }
        $47 = (___cxa_allocate_exception(4)|0);
        HEAP32[$47>>2] = ((20400 + 8|0));
        __THREW__ = 0;
        invoke_viii(422,($47|0),(20480|0),(396|0));
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if (!($49)) {
         // unreachable;
        }
       }
      } while(0);
      $56 = ___cxa_find_matching_catch(0|0)|0;
      $57 = tempRet0;
      $58 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($58+-1)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       $60 = HEAP32[$29>>2]|0;
       $61 = (($60) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       FUNCTION_TABLE_vi[$62 & 1023]($29);
       $eh$lpad$body$indexZ2D = $56;
      } else {
       $eh$lpad$body$indexZ2D = $56;
      }
     } else {
      $70 = $26;
      label = 16;
     }
    } while(0);
    if ((label|0) == 16) {
     $69 = $70&255;
     __THREW__ = 0;
     invoke_viiiiiii(428,($0|0),($18|0),($__str|0),($$__str|0),($23|0),($24|0),($69|0));
     $71 = __THREW__; __THREW__ = 0;
     $72 = $71&1;
     if (!($72)) {
      $73 = HEAP32[$0>>2]|0;
      $74 = ($73|0)==(0|0);
      if (!($74)) {
       break;
      }
      $75 = HEAP32[7272>>2]|0;
      $76 = (($75) + -12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (7272 + ($77)|0);
      $$sum4 = (($77) + 16)|0;
      $79 = (7272 + ($$sum4)|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $80 | 5;
      __THREW__ = 0;
      invoke_vii(425,($78|0),($81|0));
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if (!($83)) {
       break;
      }
     }
     $86 = ___cxa_find_matching_catch(0|0)|0;
     $87 = tempRet0;
     $eh$lpad$body$indexZ2D = $86;
    }
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $eh$lpad$body$indexZ2D;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $88 = HEAP32[7272>>2]|0;
   $89 = (($88) + -12|0);
   $90 = HEAP32[$89>>2]|0;
   $$sum12 = (($90) + 16)|0;
   $91 = (7272 + ($$sum12)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92 | 1;
   HEAP32[$91>>2] = $93;
   $$sum13 = (($90) + 20)|0;
   $94 = (7272 + ($$sum13)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & 1;
   $97 = ($96|0)==(0);
   if ($97) {
    ___cxa_end_catch();
    STACKTOP = sp;return (7272|0);
   }
   __THREW__ = 0;
   invoke_v(426);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   if (!($99)) {
    // unreachable;
   }
   $100 = ___cxa_find_matching_catch()|0;
   $101 = tempRet0;
   __THREW__ = 0;
   invoke_v(427);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    $104 = ___cxa_find_matching_catch(0|0)|0;
    $105 = tempRet0;
    ___clang_call_terminate($104);
    // unreachable;
   } else {
    ___resumeException($100|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return (7272|0);
}
function __ZN7weekend11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i112 = 0, $$0$i$i141 = 0, $$0$i$i25 = 0, $$0$i$i54 = 0, $$0$i$i83 = 0, $$byval_copy = 0, $$byval_copy187 = 0, $$byval_copy188 = 0, $$byval_copy189 = 0, $$byval_copy190 = 0, $$byval_copy191 = 0, $$byval_copy192 = 0, $$byval_copy193 = 0, $$byval_copy194 = 0, $$byval_copy195 = 0, $$byval_copy196 = 0, $$idx = 0, $$idx$val = 0.0, $$idx146 = 0;
 var $$idx146$val = 0.0, $$idx147 = 0, $$idx147$val = 0.0, $$idx148 = 0, $$idx148$val = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert172 = 0, $$phi$trans$insert175 = 0, $$phi$trans$insert178 = 0, $$phi$trans$insert181 = 0, $$phi$trans$insert184 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i104 = 0, $$pre$i$i133 = 0, $$pre$i$i17 = 0, $$pre$i$i46 = 0, $$pre$i$i75 = 0, $$pre174 = 0, $$pre177 = 0;
 var $$pre180 = 0, $$pre183 = 0, $$pre186 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i$i100 = 0, $$sum$i$i$i$i129 = 0, $$sum$i$i$i$i13 = 0, $$sum$i$i$i$i42 = 0, $$sum$i$i$i$i71 = 0, $$sum$i$i106 = 0, $$sum$i$i135 = 0, $$sum$i$i19 = 0, $$sum$i$i48 = 0, $$sum$i$i77 = 0, $$sum$i3$i = 0, $$sum$i3$i124 = 0, $$sum$i3$i37 = 0, $$sum$i3$i66 = 0;
 var $$sum$i3$i8 = 0, $$sum$i3$i95 = 0, $$sum1$i$i = 0, $$sum1$i$i10 = 0, $$sum1$i$i126 = 0, $$sum1$i$i39 = 0, $$sum1$i$i68 = 0, $$sum1$i$i97 = 0, $$sum149 = 0, $$sum150 = 0, $$sum151 = 0, $$sum152 = 0, $$sum153 = 0, $$sum154 = 0, $$sum155 = 0, $$sum156 = 0, $$sum157 = 0, $$sum158 = 0, $$sum159 = 0, $$sum160 = 0;
 var $$sum161 = 0, $$sum162 = 0, $$sum163 = 0, $$sum164 = 0, $$sum165 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s$i$i = 0, $__s$i$i1 = 0, $__s$i$i117 = 0, $__s$i$i30 = 0, $__s$i$i59 = 0, $__s$i$i88 = 0, $option = 0, $tmpcast = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy196 = sp + 1184|0;
 $$byval_copy195 = sp + 1160|0;
 $$byval_copy194 = sp + 1136|0;
 $$byval_copy193 = sp + 1112|0;
 $$byval_copy192 = sp + 1088|0;
 $$byval_copy191 = sp + 1064|0;
 $$byval_copy190 = sp + 1040|0;
 $$byval_copy189 = sp + 1016|0;
 $tmpcast$byval_copy = sp + 992|0;
 $$byval_copy188 = sp + 968|0;
 $$byval_copy187 = sp + 944|0;
 $$byval_copy = sp + 920|0;
 $__s$i$i117 = sp + 912|0;
 $__s$i$i88 = sp + 904|0;
 $__s$i$i59 = sp + 896|0;
 $__s$i$i30 = sp + 888|0;
 $__s$i$i1 = sp + 208|0;
 $__s$i$i = sp;
 $option = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp + 40|0;
 $2 = sp + 184|0;
 $3 = sp + 216|0;
 $4 = sp + 240|0;
 $5 = sp + 384|0;
 $6 = sp + 408|0;
 $7 = sp + 552|0;
 $8 = sp + 576|0;
 $9 = sp + 720|0;
 $10 = sp + 744|0;
 $11 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(56)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -12|0);
 $14 = HEAP32[$13>>2]|0;
 $$sum = (($14) + 28)|0;
 $15 = (($11) + ($$sum)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+1)|0);
 __THREW__ = 0;
 $19 = (invoke_ii(423,(11752|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 do {
  if (!($21)) {
   $22 = (($16) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($16) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $23;
   $27 = $25;
   $28 = (($26) - ($27))|0;
   $29 = $28 >> 2;
   $30 = ($29>>>0)>($19>>>0);
   if ($30) {
    $31 = (($25) + ($19<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $37 = HEAP32[$32>>2]|0;
     $38 = (($37) + 28|0);
     $39 = HEAP32[$38>>2]|0;
     __THREW__ = 0;
     $40 = (invoke_iii($39|0,($32|0),10)|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if ($42) {
      break;
     }
     $50 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($50+-1)|0);
     $51 = ($50|0)==(0);
     if ($51) {
      $52 = HEAP32[$16>>2]|0;
      $53 = (($52) + 8|0);
      $54 = HEAP32[$53>>2]|0;
      FUNCTION_TABLE_vi[$54 & 1023]($16);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $55 = (($__s$i$i) + 4|0);
     HEAP32[$55>>2] = $11;
     $56 = HEAP32[$11>>2]|0;
     $57 = (($56) + -12|0);
     $58 = HEAP32[$57>>2]|0;
     $$sum$i3$i = (($58) + 16)|0;
     $59 = (($11) + ($$sum$i3$i)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0);
     do {
      if ($61) {
       $$sum1$i$i = (($58) + 72)|0;
       $62 = (($11) + ($$sum1$i$i)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($63|0));
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if ($66) {
         $94 = ___cxa_find_matching_catch(0|0)|0;
         $95 = tempRet0;
         $$0$i$i = $94;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $67 = HEAP32[$11>>2]|0;
        $68 = (($67) + -12|0);
        $69 = HEAP32[$68>>2]|0;
        $$sum$i$i$i$i = (($69) + 24)|0;
        $70 = (($11) + ($$sum$i$i$i$i)|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ($71|0)==(0|0);
        if ($72) {
         $88 = $69;
         label = 21;
        } else {
         $73 = (($71) + 24|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (($71) + 28|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = ($74|0)==($76|0);
         if (!($77)) {
          $78 = (($74) + 1|0);
          HEAP32[$73>>2] = $78;
          HEAP8[$74>>0] = $40;
          label = 28;
          break;
         }
         $79 = HEAP32[$71>>2]|0;
         $80 = (($79) + 52|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = $40&255;
         __THREW__ = 0;
         $83 = (invoke_iii($81|0,($71|0),($82|0))|0);
         $84 = __THREW__; __THREW__ = 0;
         $85 = $84&1;
         if (!($85)) {
          $86 = ($83|0)==(-1);
          if (!($86)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$11>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $88 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $87 = (($11) + ($88)|0);
         $$sum$i$i = (($88) + 16)|0;
         $89 = (($11) + ($$sum$i$i)|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = $90 | 1;
         __THREW__ = 0;
         invoke_vii(425,($87|0),($91|0));
         $92 = __THREW__; __THREW__ = 0;
         $93 = $92&1;
         if (!($93)) {
          label = 28;
          break;
         }
        }
        $96 = ___cxa_find_matching_catch(0|0)|0;
        $97 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $96;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $98 = HEAP32[$11>>2]|0;
       $99 = (($98) + -12|0);
       $100 = HEAP32[$99>>2]|0;
       $$sum164 = (($100) + 16)|0;
       $101 = (($11) + ($$sum164)|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $102 | 1;
       HEAP32[$101>>2] = $103;
       $$sum165 = (($100) + 20)|0;
       $104 = (($11) + ($$sum165)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = $105 & 1;
       $107 = ($106|0)==(0);
       if ($107) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if (!($109)) {
        // unreachable;
       }
       $110 = ___cxa_find_matching_catch()|0;
       $111 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $114 = ___cxa_find_matching_catch(0|0)|0;
        $115 = tempRet0;
        ___clang_call_terminate($114);
        // unreachable;
       } else {
        ___resumeException($110|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11);
     $116 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(72)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) + -12|0);
     $119 = HEAP32[$118>>2]|0;
     $$sum149 = (($119) + 28)|0;
     $120 = (($116) + ($$sum149)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($121) + 4|0);
     $123 = HEAP32[$122>>2]|0;HEAP32[$122>>2] = (($123+1)|0);
     __THREW__ = 0;
     $124 = (invoke_ii(423,(11752|0))|0);
     $125 = __THREW__; __THREW__ = 0;
     $126 = $125&1;
     do {
      if (!($126)) {
       $127 = (($121) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = (($121) + 8|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = $128;
       $132 = $130;
       $133 = (($131) - ($132))|0;
       $134 = $133 >> 2;
       $135 = ($134>>>0)>($124>>>0);
       if ($135) {
        $136 = (($130) + ($124<<2)|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($137|0)==(0|0);
        if (!($138)) {
         $142 = HEAP32[$137>>2]|0;
         $143 = (($142) + 28|0);
         $144 = HEAP32[$143>>2]|0;
         __THREW__ = 0;
         $145 = (invoke_iii($144|0,($137|0),10)|0);
         $146 = __THREW__; __THREW__ = 0;
         $147 = $146&1;
         if ($147) {
          break;
         }
         $155 = HEAP32[$122>>2]|0;HEAP32[$122>>2] = (($155+-1)|0);
         $156 = ($155|0)==(0);
         if ($156) {
          $157 = HEAP32[$121>>2]|0;
          $158 = (($157) + 8|0);
          $159 = HEAP32[$158>>2]|0;
          FUNCTION_TABLE_vi[$159 & 1023]($121);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $160 = (($__s$i$i1) + 4|0);
         HEAP32[$160>>2] = $116;
         $161 = HEAP32[$116>>2]|0;
         $162 = (($161) + -12|0);
         $163 = HEAP32[$162>>2]|0;
         $$sum$i3$i8 = (($163) + 16)|0;
         $164 = (($116) + ($$sum$i3$i8)|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0);
         L49: do {
          if ($166) {
           $$sum1$i$i10 = (($163) + 72)|0;
           $167 = (($116) + ($$sum1$i$i10)|0);
           $168 = HEAP32[$167>>2]|0;
           $169 = ($168|0)==(0|0);
           if ($169) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($168|0));
            $170 = __THREW__; __THREW__ = 0;
            $171 = $170&1;
            if ($171) {
             $199 = ___cxa_find_matching_catch(0|0)|0;
             $200 = tempRet0;
             $$0$i$i25 = $199;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $172 = HEAP32[$116>>2]|0;
            $173 = (($172) + -12|0);
            $174 = HEAP32[$173>>2]|0;
            $$sum$i$i$i$i13 = (($174) + 24)|0;
            $175 = (($116) + ($$sum$i$i$i$i13)|0);
            $176 = HEAP32[$175>>2]|0;
            $177 = ($176|0)==(0|0);
            do {
             if ($177) {
              $193 = $174;
              label = 52;
             } else {
              $178 = (($176) + 24|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = (($176) + 28|0);
              $181 = HEAP32[$180>>2]|0;
              $182 = ($179|0)==($181|0);
              if (!($182)) {
               $183 = (($179) + 1|0);
               HEAP32[$178>>2] = $183;
               HEAP8[$179>>0] = $145;
               label = 59;
               break L49;
              }
              $184 = HEAP32[$176>>2]|0;
              $185 = (($184) + 52|0);
              $186 = HEAP32[$185>>2]|0;
              $187 = $145&255;
              __THREW__ = 0;
              $188 = (invoke_iii($186|0,($176|0),($187|0))|0);
              $189 = __THREW__; __THREW__ = 0;
              $190 = $189&1;
              if ($190) {
               break;
              }
              $191 = ($188|0)==(-1);
              if (!($191)) {
               label = 59;
               break L49;
              }
              $$pre$i$i17 = HEAP32[$116>>2]|0;
              $$phi$trans$insert172 = (($$pre$i$i17) + -12|0);
              $$pre174 = HEAP32[$$phi$trans$insert172>>2]|0;
              $193 = $$pre174;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $192 = (($116) + ($193)|0);
             $$sum$i$i19 = (($193) + 16)|0;
             $194 = (($116) + ($$sum$i$i19)|0);
             $195 = HEAP32[$194>>2]|0;
             $196 = $195 | 1;
             __THREW__ = 0;
             invoke_vii(425,($192|0),($196|0));
             $197 = __THREW__; __THREW__ = 0;
             $198 = $197&1;
             if (!($198)) {
              label = 59;
              break;
             }
            }
            $201 = ___cxa_find_matching_catch(0|0)|0;
            $202 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $201;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $203 = HEAP32[$116>>2]|0;
           $204 = (($203) + -12|0);
           $205 = HEAP32[$204>>2]|0;
           $$sum162 = (($205) + 16)|0;
           $206 = (($116) + ($$sum162)|0);
           $207 = HEAP32[$206>>2]|0;
           $208 = $207 | 1;
           HEAP32[$206>>2] = $208;
           $$sum163 = (($205) + 20)|0;
           $209 = (($116) + ($$sum163)|0);
           $210 = HEAP32[$209>>2]|0;
           $211 = $210 & 1;
           $212 = ($211|0)==(0);
           if ($212) {
            ___cxa_end_catch();
            break;
           }
           __THREW__ = 0;
           invoke_v(426);
           $213 = __THREW__; __THREW__ = 0;
           $214 = $213&1;
           if (!($214)) {
            // unreachable;
           }
           $215 = ___cxa_find_matching_catch()|0;
           $216 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $217 = __THREW__; __THREW__ = 0;
           $218 = $217&1;
           if ($218) {
            $219 = ___cxa_find_matching_catch(0|0)|0;
            $220 = tempRet0;
            ___clang_call_terminate($219);
            // unreachable;
           } else {
            ___resumeException($215|0);
            // unreachable;
           }
          } else {
           label = 59;
          }
         } while(0);
         if ((label|0) == 59) {
          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         }
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($116);
         $221 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(88)|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = (($222) + -12|0);
         $224 = HEAP32[$223>>2]|0;
         $$sum150 = (($224) + 28)|0;
         $225 = (($221) + ($$sum150)|0);
         $226 = HEAP32[$225>>2]|0;
         $227 = (($226) + 4|0);
         $228 = HEAP32[$227>>2]|0;HEAP32[$227>>2] = (($228+1)|0);
         __THREW__ = 0;
         $229 = (invoke_ii(423,(11752|0))|0);
         $230 = __THREW__; __THREW__ = 0;
         $231 = $230&1;
         L79: do {
          if (!($231)) {
           $232 = (($226) + 12|0);
           $233 = HEAP32[$232>>2]|0;
           $234 = (($226) + 8|0);
           $235 = HEAP32[$234>>2]|0;
           $236 = $233;
           $237 = $235;
           $238 = (($236) - ($237))|0;
           $239 = $238 >> 2;
           $240 = ($239>>>0)>($229>>>0);
           do {
            if ($240) {
             $241 = (($235) + ($229<<2)|0);
             $242 = HEAP32[$241>>2]|0;
             $243 = ($242|0)==(0|0);
             if ($243) {
              break;
             }
             $247 = HEAP32[$242>>2]|0;
             $248 = (($247) + 28|0);
             $249 = HEAP32[$248>>2]|0;
             __THREW__ = 0;
             $250 = (invoke_iii($249|0,($242|0),10)|0);
             $251 = __THREW__; __THREW__ = 0;
             $252 = $251&1;
             if ($252) {
              break L79;
             }
             $260 = HEAP32[$227>>2]|0;HEAP32[$227>>2] = (($260+-1)|0);
             $261 = ($260|0)==(0);
             if ($261) {
              $262 = HEAP32[$226>>2]|0;
              $263 = (($262) + 8|0);
              $264 = HEAP32[$263>>2]|0;
              FUNCTION_TABLE_vi[$264 & 1023]($226);
             }
             HEAP8[$__s$i$i30>>0] = 0;
             $265 = (($__s$i$i30) + 4|0);
             HEAP32[$265>>2] = $221;
             $266 = HEAP32[$221>>2]|0;
             $267 = (($266) + -12|0);
             $268 = HEAP32[$267>>2]|0;
             $$sum$i3$i37 = (($268) + 16)|0;
             $269 = (($221) + ($$sum$i3$i37)|0);
             $270 = HEAP32[$269>>2]|0;
             $271 = ($270|0)==(0);
             L88: do {
              if ($271) {
               $$sum1$i$i39 = (($268) + 72)|0;
               $272 = (($221) + ($$sum1$i$i39)|0);
               $273 = HEAP32[$272>>2]|0;
               $274 = ($273|0)==(0|0);
               do {
                if ($274) {
                 label = 77;
                } else {
                 __THREW__ = 0;
                 invoke_vi(424,($273|0));
                 $275 = __THREW__; __THREW__ = 0;
                 $276 = $275&1;
                 if (!($276)) {
                  label = 77;
                  break;
                 }
                 $304 = ___cxa_find_matching_catch(0|0)|0;
                 $305 = tempRet0;
                 $$0$i$i54 = $304;
                }
               } while(0);
               if ((label|0) == 77) {
                HEAP8[$__s$i$i30>>0] = 1;
                $277 = HEAP32[$221>>2]|0;
                $278 = (($277) + -12|0);
                $279 = HEAP32[$278>>2]|0;
                $$sum$i$i$i$i42 = (($279) + 24)|0;
                $280 = (($221) + ($$sum$i$i$i$i42)|0);
                $281 = HEAP32[$280>>2]|0;
                $282 = ($281|0)==(0|0);
                do {
                 if ($282) {
                  $298 = $279;
                  label = 83;
                 } else {
                  $283 = (($281) + 24|0);
                  $284 = HEAP32[$283>>2]|0;
                  $285 = (($281) + 28|0);
                  $286 = HEAP32[$285>>2]|0;
                  $287 = ($284|0)==($286|0);
                  if (!($287)) {
                   $288 = (($284) + 1|0);
                   HEAP32[$283>>2] = $288;
                   HEAP8[$284>>0] = $250;
                   label = 90;
                   break L88;
                  }
                  $289 = HEAP32[$281>>2]|0;
                  $290 = (($289) + 52|0);
                  $291 = HEAP32[$290>>2]|0;
                  $292 = $250&255;
                  __THREW__ = 0;
                  $293 = (invoke_iii($291|0,($281|0),($292|0))|0);
                  $294 = __THREW__; __THREW__ = 0;
                  $295 = $294&1;
                  if ($295) {
                   break;
                  }
                  $296 = ($293|0)==(-1);
                  if (!($296)) {
                   label = 90;
                   break L88;
                  }
                  $$pre$i$i46 = HEAP32[$221>>2]|0;
                  $$phi$trans$insert175 = (($$pre$i$i46) + -12|0);
                  $$pre177 = HEAP32[$$phi$trans$insert175>>2]|0;
                  $298 = $$pre177;
                  label = 83;
                 }
                } while(0);
                if ((label|0) == 83) {
                 $297 = (($221) + ($298)|0);
                 $$sum$i$i48 = (($298) + 16)|0;
                 $299 = (($221) + ($$sum$i$i48)|0);
                 $300 = HEAP32[$299>>2]|0;
                 $301 = $300 | 1;
                 __THREW__ = 0;
                 invoke_vii(425,($297|0),($301|0));
                 $302 = __THREW__; __THREW__ = 0;
                 $303 = $302&1;
                 if (!($303)) {
                  label = 90;
                  break;
                 }
                }
                $306 = ___cxa_find_matching_catch(0|0)|0;
                $307 = tempRet0;
                __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
                $$0$i$i54 = $306;
               }
               (___cxa_begin_catch(($$0$i$i54|0))|0);
               $308 = HEAP32[$221>>2]|0;
               $309 = (($308) + -12|0);
               $310 = HEAP32[$309>>2]|0;
               $$sum160 = (($310) + 16)|0;
               $311 = (($221) + ($$sum160)|0);
               $312 = HEAP32[$311>>2]|0;
               $313 = $312 | 1;
               HEAP32[$311>>2] = $313;
               $$sum161 = (($310) + 20)|0;
               $314 = (($221) + ($$sum161)|0);
               $315 = HEAP32[$314>>2]|0;
               $316 = $315 & 1;
               $317 = ($316|0)==(0);
               if ($317) {
                ___cxa_end_catch();
                break;
               }
               __THREW__ = 0;
               invoke_v(426);
               $318 = __THREW__; __THREW__ = 0;
               $319 = $318&1;
               if (!($319)) {
                // unreachable;
               }
               $320 = ___cxa_find_matching_catch()|0;
               $321 = tempRet0;
               __THREW__ = 0;
               invoke_v(427);
               $322 = __THREW__; __THREW__ = 0;
               $323 = $322&1;
               if ($323) {
                $324 = ___cxa_find_matching_catch(0|0)|0;
                $325 = tempRet0;
                ___clang_call_terminate($324);
                // unreachable;
               } else {
                ___resumeException($320|0);
                // unreachable;
               }
              } else {
               label = 90;
              }
             } while(0);
             if ((label|0) == 90) {
              __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
             }
             __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($221);
             $326 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(120)|0);
             $327 = HEAP32[$326>>2]|0;
             $328 = (($327) + -12|0);
             $329 = HEAP32[$328>>2]|0;
             $$sum151 = (($329) + 28)|0;
             $330 = (($326) + ($$sum151)|0);
             $331 = HEAP32[$330>>2]|0;
             $332 = (($331) + 4|0);
             $333 = HEAP32[$332>>2]|0;HEAP32[$332>>2] = (($333+1)|0);
             __THREW__ = 0;
             $334 = (invoke_ii(423,(11752|0))|0);
             $335 = __THREW__; __THREW__ = 0;
             $336 = $335&1;
             L118: do {
              if (!($336)) {
               $337 = (($331) + 12|0);
               $338 = HEAP32[$337>>2]|0;
               $339 = (($331) + 8|0);
               $340 = HEAP32[$339>>2]|0;
               $341 = $338;
               $342 = $340;
               $343 = (($341) - ($342))|0;
               $344 = $343 >> 2;
               $345 = ($344>>>0)>($334>>>0);
               do {
                if ($345) {
                 $346 = (($340) + ($334<<2)|0);
                 $347 = HEAP32[$346>>2]|0;
                 $348 = ($347|0)==(0|0);
                 if ($348) {
                  break;
                 }
                 $352 = HEAP32[$347>>2]|0;
                 $353 = (($352) + 28|0);
                 $354 = HEAP32[$353>>2]|0;
                 __THREW__ = 0;
                 $355 = (invoke_iii($354|0,($347|0),10)|0);
                 $356 = __THREW__; __THREW__ = 0;
                 $357 = $356&1;
                 if ($357) {
                  break L118;
                 }
                 $365 = HEAP32[$332>>2]|0;HEAP32[$332>>2] = (($365+-1)|0);
                 $366 = ($365|0)==(0);
                 if ($366) {
                  $367 = HEAP32[$331>>2]|0;
                  $368 = (($367) + 8|0);
                  $369 = HEAP32[$368>>2]|0;
                  FUNCTION_TABLE_vi[$369 & 1023]($331);
                 }
                 HEAP8[$__s$i$i59>>0] = 0;
                 $370 = (($__s$i$i59) + 4|0);
                 HEAP32[$370>>2] = $326;
                 $371 = HEAP32[$326>>2]|0;
                 $372 = (($371) + -12|0);
                 $373 = HEAP32[$372>>2]|0;
                 $$sum$i3$i66 = (($373) + 16)|0;
                 $374 = (($326) + ($$sum$i3$i66)|0);
                 $375 = HEAP32[$374>>2]|0;
                 $376 = ($375|0)==(0);
                 L127: do {
                  if ($376) {
                   $$sum1$i$i68 = (($373) + 72)|0;
                   $377 = (($326) + ($$sum1$i$i68)|0);
                   $378 = HEAP32[$377>>2]|0;
                   $379 = ($378|0)==(0|0);
                   do {
                    if ($379) {
                     label = 108;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(424,($378|0));
                     $380 = __THREW__; __THREW__ = 0;
                     $381 = $380&1;
                     if (!($381)) {
                      label = 108;
                      break;
                     }
                     $409 = ___cxa_find_matching_catch(0|0)|0;
                     $410 = tempRet0;
                     $$0$i$i83 = $409;
                    }
                   } while(0);
                   if ((label|0) == 108) {
                    HEAP8[$__s$i$i59>>0] = 1;
                    $382 = HEAP32[$326>>2]|0;
                    $383 = (($382) + -12|0);
                    $384 = HEAP32[$383>>2]|0;
                    $$sum$i$i$i$i71 = (($384) + 24)|0;
                    $385 = (($326) + ($$sum$i$i$i$i71)|0);
                    $386 = HEAP32[$385>>2]|0;
                    $387 = ($386|0)==(0|0);
                    do {
                     if ($387) {
                      $403 = $384;
                      label = 114;
                     } else {
                      $388 = (($386) + 24|0);
                      $389 = HEAP32[$388>>2]|0;
                      $390 = (($386) + 28|0);
                      $391 = HEAP32[$390>>2]|0;
                      $392 = ($389|0)==($391|0);
                      if (!($392)) {
                       $393 = (($389) + 1|0);
                       HEAP32[$388>>2] = $393;
                       HEAP8[$389>>0] = $355;
                       label = 121;
                       break L127;
                      }
                      $394 = HEAP32[$386>>2]|0;
                      $395 = (($394) + 52|0);
                      $396 = HEAP32[$395>>2]|0;
                      $397 = $355&255;
                      __THREW__ = 0;
                      $398 = (invoke_iii($396|0,($386|0),($397|0))|0);
                      $399 = __THREW__; __THREW__ = 0;
                      $400 = $399&1;
                      if ($400) {
                       break;
                      }
                      $401 = ($398|0)==(-1);
                      if (!($401)) {
                       label = 121;
                       break L127;
                      }
                      $$pre$i$i75 = HEAP32[$326>>2]|0;
                      $$phi$trans$insert178 = (($$pre$i$i75) + -12|0);
                      $$pre180 = HEAP32[$$phi$trans$insert178>>2]|0;
                      $403 = $$pre180;
                      label = 114;
                     }
                    } while(0);
                    if ((label|0) == 114) {
                     $402 = (($326) + ($403)|0);
                     $$sum$i$i77 = (($403) + 16)|0;
                     $404 = (($326) + ($$sum$i$i77)|0);
                     $405 = HEAP32[$404>>2]|0;
                     $406 = $405 | 1;
                     __THREW__ = 0;
                     invoke_vii(425,($402|0),($406|0));
                     $407 = __THREW__; __THREW__ = 0;
                     $408 = $407&1;
                     if (!($408)) {
                      label = 121;
                      break;
                     }
                    }
                    $411 = ___cxa_find_matching_catch(0|0)|0;
                    $412 = tempRet0;
                    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                    $$0$i$i83 = $411;
                   }
                   (___cxa_begin_catch(($$0$i$i83|0))|0);
                   $413 = HEAP32[$326>>2]|0;
                   $414 = (($413) + -12|0);
                   $415 = HEAP32[$414>>2]|0;
                   $$sum158 = (($415) + 16)|0;
                   $416 = (($326) + ($$sum158)|0);
                   $417 = HEAP32[$416>>2]|0;
                   $418 = $417 | 1;
                   HEAP32[$416>>2] = $418;
                   $$sum159 = (($415) + 20)|0;
                   $419 = (($326) + ($$sum159)|0);
                   $420 = HEAP32[$419>>2]|0;
                   $421 = $420 & 1;
                   $422 = ($421|0)==(0);
                   if ($422) {
                    ___cxa_end_catch();
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(426);
                   $423 = __THREW__; __THREW__ = 0;
                   $424 = $423&1;
                   if (!($424)) {
                    // unreachable;
                   }
                   $425 = ___cxa_find_matching_catch()|0;
                   $426 = tempRet0;
                   __THREW__ = 0;
                   invoke_v(427);
                   $427 = __THREW__; __THREW__ = 0;
                   $428 = $427&1;
                   if ($428) {
                    $429 = ___cxa_find_matching_catch(0|0)|0;
                    $430 = tempRet0;
                    ___clang_call_terminate($429);
                    // unreachable;
                   } else {
                    ___resumeException($425|0);
                    // unreachable;
                   }
                  } else {
                   label = 121;
                  }
                 } while(0);
                 if ((label|0) == 121) {
                  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                 }
                 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($326);
                 $431 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(136)|0);
                 $432 = HEAP32[$431>>2]|0;
                 $433 = (($432) + -12|0);
                 $434 = HEAP32[$433>>2]|0;
                 $$sum152 = (($434) + 28)|0;
                 $435 = (($431) + ($$sum152)|0);
                 $436 = HEAP32[$435>>2]|0;
                 $437 = (($436) + 4|0);
                 $438 = HEAP32[$437>>2]|0;HEAP32[$437>>2] = (($438+1)|0);
                 __THREW__ = 0;
                 $439 = (invoke_ii(423,(11752|0))|0);
                 $440 = __THREW__; __THREW__ = 0;
                 $441 = $440&1;
                 L157: do {
                  if (!($441)) {
                   $442 = (($436) + 12|0);
                   $443 = HEAP32[$442>>2]|0;
                   $444 = (($436) + 8|0);
                   $445 = HEAP32[$444>>2]|0;
                   $446 = $443;
                   $447 = $445;
                   $448 = (($446) - ($447))|0;
                   $449 = $448 >> 2;
                   $450 = ($449>>>0)>($439>>>0);
                   do {
                    if ($450) {
                     $451 = (($445) + ($439<<2)|0);
                     $452 = HEAP32[$451>>2]|0;
                     $453 = ($452|0)==(0|0);
                     if ($453) {
                      break;
                     }
                     $457 = HEAP32[$452>>2]|0;
                     $458 = (($457) + 28|0);
                     $459 = HEAP32[$458>>2]|0;
                     __THREW__ = 0;
                     $460 = (invoke_iii($459|0,($452|0),10)|0);
                     $461 = __THREW__; __THREW__ = 0;
                     $462 = $461&1;
                     if ($462) {
                      break L157;
                     }
                     $470 = HEAP32[$437>>2]|0;HEAP32[$437>>2] = (($470+-1)|0);
                     $471 = ($470|0)==(0);
                     if ($471) {
                      $472 = HEAP32[$436>>2]|0;
                      $473 = (($472) + 8|0);
                      $474 = HEAP32[$473>>2]|0;
                      FUNCTION_TABLE_vi[$474 & 1023]($436);
                     }
                     HEAP8[$__s$i$i88>>0] = 0;
                     $475 = (($__s$i$i88) + 4|0);
                     HEAP32[$475>>2] = $431;
                     $476 = HEAP32[$431>>2]|0;
                     $477 = (($476) + -12|0);
                     $478 = HEAP32[$477>>2]|0;
                     $$sum$i3$i95 = (($478) + 16)|0;
                     $479 = (($431) + ($$sum$i3$i95)|0);
                     $480 = HEAP32[$479>>2]|0;
                     $481 = ($480|0)==(0);
                     L166: do {
                      if ($481) {
                       $$sum1$i$i97 = (($478) + 72)|0;
                       $482 = (($431) + ($$sum1$i$i97)|0);
                       $483 = HEAP32[$482>>2]|0;
                       $484 = ($483|0)==(0|0);
                       do {
                        if ($484) {
                         label = 139;
                        } else {
                         __THREW__ = 0;
                         invoke_vi(424,($483|0));
                         $485 = __THREW__; __THREW__ = 0;
                         $486 = $485&1;
                         if (!($486)) {
                          label = 139;
                          break;
                         }
                         $514 = ___cxa_find_matching_catch(0|0)|0;
                         $515 = tempRet0;
                         $$0$i$i112 = $514;
                        }
                       } while(0);
                       if ((label|0) == 139) {
                        HEAP8[$__s$i$i88>>0] = 1;
                        $487 = HEAP32[$431>>2]|0;
                        $488 = (($487) + -12|0);
                        $489 = HEAP32[$488>>2]|0;
                        $$sum$i$i$i$i100 = (($489) + 24)|0;
                        $490 = (($431) + ($$sum$i$i$i$i100)|0);
                        $491 = HEAP32[$490>>2]|0;
                        $492 = ($491|0)==(0|0);
                        do {
                         if ($492) {
                          $508 = $489;
                          label = 145;
                         } else {
                          $493 = (($491) + 24|0);
                          $494 = HEAP32[$493>>2]|0;
                          $495 = (($491) + 28|0);
                          $496 = HEAP32[$495>>2]|0;
                          $497 = ($494|0)==($496|0);
                          if (!($497)) {
                           $498 = (($494) + 1|0);
                           HEAP32[$493>>2] = $498;
                           HEAP8[$494>>0] = $460;
                           label = 152;
                           break L166;
                          }
                          $499 = HEAP32[$491>>2]|0;
                          $500 = (($499) + 52|0);
                          $501 = HEAP32[$500>>2]|0;
                          $502 = $460&255;
                          __THREW__ = 0;
                          $503 = (invoke_iii($501|0,($491|0),($502|0))|0);
                          $504 = __THREW__; __THREW__ = 0;
                          $505 = $504&1;
                          if ($505) {
                           break;
                          }
                          $506 = ($503|0)==(-1);
                          if (!($506)) {
                           label = 152;
                           break L166;
                          }
                          $$pre$i$i104 = HEAP32[$431>>2]|0;
                          $$phi$trans$insert181 = (($$pre$i$i104) + -12|0);
                          $$pre183 = HEAP32[$$phi$trans$insert181>>2]|0;
                          $508 = $$pre183;
                          label = 145;
                         }
                        } while(0);
                        if ((label|0) == 145) {
                         $507 = (($431) + ($508)|0);
                         $$sum$i$i106 = (($508) + 16)|0;
                         $509 = (($431) + ($$sum$i$i106)|0);
                         $510 = HEAP32[$509>>2]|0;
                         $511 = $510 | 1;
                         __THREW__ = 0;
                         invoke_vii(425,($507|0),($511|0));
                         $512 = __THREW__; __THREW__ = 0;
                         $513 = $512&1;
                         if (!($513)) {
                          label = 152;
                          break;
                         }
                        }
                        $516 = ___cxa_find_matching_catch(0|0)|0;
                        $517 = tempRet0;
                        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                        $$0$i$i112 = $516;
                       }
                       (___cxa_begin_catch(($$0$i$i112|0))|0);
                       $518 = HEAP32[$431>>2]|0;
                       $519 = (($518) + -12|0);
                       $520 = HEAP32[$519>>2]|0;
                       $$sum156 = (($520) + 16)|0;
                       $521 = (($431) + ($$sum156)|0);
                       $522 = HEAP32[$521>>2]|0;
                       $523 = $522 | 1;
                       HEAP32[$521>>2] = $523;
                       $$sum157 = (($520) + 20)|0;
                       $524 = (($431) + ($$sum157)|0);
                       $525 = HEAP32[$524>>2]|0;
                       $526 = $525 & 1;
                       $527 = ($526|0)==(0);
                       if ($527) {
                        ___cxa_end_catch();
                        break;
                       }
                       __THREW__ = 0;
                       invoke_v(426);
                       $528 = __THREW__; __THREW__ = 0;
                       $529 = $528&1;
                       if (!($529)) {
                        // unreachable;
                       }
                       $530 = ___cxa_find_matching_catch()|0;
                       $531 = tempRet0;
                       __THREW__ = 0;
                       invoke_v(427);
                       $532 = __THREW__; __THREW__ = 0;
                       $533 = $532&1;
                       if ($533) {
                        $534 = ___cxa_find_matching_catch(0|0)|0;
                        $535 = tempRet0;
                        ___clang_call_terminate($534);
                        // unreachable;
                       } else {
                        ___resumeException($530|0);
                        // unreachable;
                       }
                      } else {
                       label = 152;
                      }
                     } while(0);
                     if ((label|0) == 152) {
                      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                     }
                     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($431);
                     $536 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(152)|0);
                     $537 = HEAP32[$536>>2]|0;
                     $538 = (($537) + -12|0);
                     $539 = HEAP32[$538>>2]|0;
                     $$sum153 = (($539) + 28)|0;
                     $540 = (($536) + ($$sum153)|0);
                     $541 = HEAP32[$540>>2]|0;
                     $542 = (($541) + 4|0);
                     $543 = HEAP32[$542>>2]|0;HEAP32[$542>>2] = (($543+1)|0);
                     __THREW__ = 0;
                     $544 = (invoke_ii(423,(11752|0))|0);
                     $545 = __THREW__; __THREW__ = 0;
                     $546 = $545&1;
                     L196: do {
                      if (!($546)) {
                       $547 = (($541) + 12|0);
                       $548 = HEAP32[$547>>2]|0;
                       $549 = (($541) + 8|0);
                       $550 = HEAP32[$549>>2]|0;
                       $551 = $548;
                       $552 = $550;
                       $553 = (($551) - ($552))|0;
                       $554 = $553 >> 2;
                       $555 = ($554>>>0)>($544>>>0);
                       do {
                        if ($555) {
                         $556 = (($550) + ($544<<2)|0);
                         $557 = HEAP32[$556>>2]|0;
                         $558 = ($557|0)==(0|0);
                         if ($558) {
                          break;
                         }
                         $562 = HEAP32[$557>>2]|0;
                         $563 = (($562) + 28|0);
                         $564 = HEAP32[$563>>2]|0;
                         __THREW__ = 0;
                         $565 = (invoke_iii($564|0,($557|0),10)|0);
                         $566 = __THREW__; __THREW__ = 0;
                         $567 = $566&1;
                         if ($567) {
                          break L196;
                         }
                         $575 = HEAP32[$542>>2]|0;HEAP32[$542>>2] = (($575+-1)|0);
                         $576 = ($575|0)==(0);
                         if ($576) {
                          $577 = HEAP32[$541>>2]|0;
                          $578 = (($577) + 8|0);
                          $579 = HEAP32[$578>>2]|0;
                          FUNCTION_TABLE_vi[$579 & 1023]($541);
                         }
                         HEAP8[$__s$i$i117>>0] = 0;
                         $580 = (($__s$i$i117) + 4|0);
                         HEAP32[$580>>2] = $536;
                         $581 = HEAP32[$536>>2]|0;
                         $582 = (($581) + -12|0);
                         $583 = HEAP32[$582>>2]|0;
                         $$sum$i3$i124 = (($583) + 16)|0;
                         $584 = (($536) + ($$sum$i3$i124)|0);
                         $585 = HEAP32[$584>>2]|0;
                         $586 = ($585|0)==(0);
                         L205: do {
                          if ($586) {
                           $$sum1$i$i126 = (($583) + 72)|0;
                           $587 = (($536) + ($$sum1$i$i126)|0);
                           $588 = HEAP32[$587>>2]|0;
                           $589 = ($588|0)==(0|0);
                           do {
                            if ($589) {
                             label = 170;
                            } else {
                             __THREW__ = 0;
                             invoke_vi(424,($588|0));
                             $590 = __THREW__; __THREW__ = 0;
                             $591 = $590&1;
                             if (!($591)) {
                              label = 170;
                              break;
                             }
                             $619 = ___cxa_find_matching_catch(0|0)|0;
                             $620 = tempRet0;
                             $$0$i$i141 = $619;
                            }
                           } while(0);
                           if ((label|0) == 170) {
                            HEAP8[$__s$i$i117>>0] = 1;
                            $592 = HEAP32[$536>>2]|0;
                            $593 = (($592) + -12|0);
                            $594 = HEAP32[$593>>2]|0;
                            $$sum$i$i$i$i129 = (($594) + 24)|0;
                            $595 = (($536) + ($$sum$i$i$i$i129)|0);
                            $596 = HEAP32[$595>>2]|0;
                            $597 = ($596|0)==(0|0);
                            do {
                             if ($597) {
                              $613 = $594;
                              label = 176;
                             } else {
                              $598 = (($596) + 24|0);
                              $599 = HEAP32[$598>>2]|0;
                              $600 = (($596) + 28|0);
                              $601 = HEAP32[$600>>2]|0;
                              $602 = ($599|0)==($601|0);
                              if (!($602)) {
                               $603 = (($599) + 1|0);
                               HEAP32[$598>>2] = $603;
                               HEAP8[$599>>0] = $565;
                               label = 183;
                               break L205;
                              }
                              $604 = HEAP32[$596>>2]|0;
                              $605 = (($604) + 52|0);
                              $606 = HEAP32[$605>>2]|0;
                              $607 = $565&255;
                              __THREW__ = 0;
                              $608 = (invoke_iii($606|0,($596|0),($607|0))|0);
                              $609 = __THREW__; __THREW__ = 0;
                              $610 = $609&1;
                              if ($610) {
                               break;
                              }
                              $611 = ($608|0)==(-1);
                              if (!($611)) {
                               label = 183;
                               break L205;
                              }
                              $$pre$i$i133 = HEAP32[$536>>2]|0;
                              $$phi$trans$insert184 = (($$pre$i$i133) + -12|0);
                              $$pre186 = HEAP32[$$phi$trans$insert184>>2]|0;
                              $613 = $$pre186;
                              label = 176;
                             }
                            } while(0);
                            if ((label|0) == 176) {
                             $612 = (($536) + ($613)|0);
                             $$sum$i$i135 = (($613) + 16)|0;
                             $614 = (($536) + ($$sum$i$i135)|0);
                             $615 = HEAP32[$614>>2]|0;
                             $616 = $615 | 1;
                             __THREW__ = 0;
                             invoke_vii(425,($612|0),($616|0));
                             $617 = __THREW__; __THREW__ = 0;
                             $618 = $617&1;
                             if (!($618)) {
                              label = 183;
                              break;
                             }
                            }
                            $621 = ___cxa_find_matching_catch(0|0)|0;
                            $622 = tempRet0;
                            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i117);
                            $$0$i$i141 = $621;
                           }
                           (___cxa_begin_catch(($$0$i$i141|0))|0);
                           $623 = HEAP32[$536>>2]|0;
                           $624 = (($623) + -12|0);
                           $625 = HEAP32[$624>>2]|0;
                           $$sum154 = (($625) + 16)|0;
                           $626 = (($536) + ($$sum154)|0);
                           $627 = HEAP32[$626>>2]|0;
                           $628 = $627 | 1;
                           HEAP32[$626>>2] = $628;
                           $$sum155 = (($625) + 20)|0;
                           $629 = (($536) + ($$sum155)|0);
                           $630 = HEAP32[$629>>2]|0;
                           $631 = $630 & 1;
                           $632 = ($631|0)==(0);
                           if ($632) {
                            ___cxa_end_catch();
                            break;
                           }
                           __THREW__ = 0;
                           invoke_v(426);
                           $633 = __THREW__; __THREW__ = 0;
                           $634 = $633&1;
                           if (!($634)) {
                            // unreachable;
                           }
                           $635 = ___cxa_find_matching_catch()|0;
                           $636 = tempRet0;
                           __THREW__ = 0;
                           invoke_v(427);
                           $637 = __THREW__; __THREW__ = 0;
                           $638 = $637&1;
                           if ($638) {
                            $639 = ___cxa_find_matching_catch(0|0)|0;
                            $640 = tempRet0;
                            ___clang_call_terminate($639);
                            // unreachable;
                           } else {
                            ___resumeException($635|0);
                            // unreachable;
                           }
                          } else {
                           label = 183;
                          }
                         } while(0);
                         if ((label|0) == 183) {
                          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i117);
                         }
                         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($536);
                         __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($option);
                         $641 = HEAP32[$option>>2]|0;
                         switch ($641|0) {
                         case 1:  {
                          $$idx148 = (($_hero) + 44|0);
                          $$idx148$val = +HEAPF32[$$idx148>>2];
                          $642 = (+__ZN4hero25get_energy_consuming_rateEv($$idx148$val));
                          HEAPF32[$0>>2] = $642;
                          $643 = (($0) + 4|0);
                          HEAPF32[$643>>2] = -2.0;
                          $644 = (($0) + 8|0);
                          HEAPF32[$644>>2] = 0.0;
                          $645 = (($0) + 12|0);
                          HEAPF32[$645>>2] = 2.0;
                          $646 = (($0) + 16|0);
                          HEAPF32[$646>>2] = 0.0;
                          $647 = (($0) + 20|0);
                          HEAPF32[$647>>2] = 8.0;
                          $648 = (($_hero) + 76|0);
                          _memcpy(($1|0),($648|0),144)|0;
                          $649 = (($1) + 24|0);
                          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
                          ;HEAP32[$$byval_copy187+0>>2]=HEAP32[$649+0>>2]|0;HEAP32[$$byval_copy187+4>>2]=HEAP32[$649+4>>2]|0;HEAP32[$$byval_copy187+8>>2]=HEAP32[$649+8>>2]|0;HEAP32[$$byval_copy187+12>>2]=HEAP32[$649+12>>2]|0;HEAP32[$$byval_copy187+16>>2]=HEAP32[$649+16>>2]|0;HEAP32[$$byval_copy187+20>>2]=HEAP32[$649+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy,$$byval_copy187,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 2:  {
                          $$idx147 = (($_hero) + 44|0);
                          $$idx147$val = +HEAPF32[$$idx147>>2];
                          $650 = (+__ZN4hero25get_energy_consuming_rateEv($$idx147$val));
                          HEAPF32[$2>>2] = $650;
                          $651 = (($2) + 4|0);
                          HEAPF32[$651>>2] = 5.0;
                          $652 = (($2) + 8|0);
                          HEAPF32[$652>>2] = 1.0;
                          $653 = (($2) + 12|0);
                          HEAPF32[$653>>2] = -4.0;
                          $654 = (($2) + 16|0);
                          HEAPF32[$654>>2] = 0.0;
                          $655 = (($2) + 20|0);
                          HEAPF32[$655>>2] = 5.0;
                          $tmpcast = (($_hero) + 76|0);
                          ;HEAP32[$$byval_copy188+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$$byval_copy188+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy188+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy188+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy188+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy188+20>>2]=HEAP32[$2+20>>2]|0;
                          ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$tmpcast+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$tmpcast+4>>2]|0;HEAP32[$tmpcast$byval_copy+8>>2]=HEAP32[$tmpcast+8>>2]|0;HEAP32[$tmpcast$byval_copy+12>>2]=HEAP32[$tmpcast+12>>2]|0;HEAP32[$tmpcast$byval_copy+16>>2]=HEAP32[$tmpcast+16>>2]|0;HEAP32[$tmpcast$byval_copy+20>>2]=HEAP32[$tmpcast+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy188,$tmpcast$byval_copy,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 3:  {
                          $$idx146 = (($_hero) + 44|0);
                          $$idx146$val = +HEAPF32[$$idx146>>2];
                          $656 = (+__ZN4hero25get_energy_consuming_rateEv($$idx146$val));
                          HEAPF32[$3>>2] = $656;
                          $657 = (($3) + 4|0);
                          HEAPF32[$657>>2] = 5.0;
                          $658 = (($3) + 8|0);
                          HEAPF32[$658>>2] = 1.0;
                          $659 = (($3) + 12|0);
                          HEAPF32[$659>>2] = -4.0;
                          $660 = (($3) + 16|0);
                          HEAPF32[$660>>2] = 1.0;
                          $661 = (($3) + 20|0);
                          HEAPF32[$661>>2] = -3.0;
                          $662 = (($_hero) + 76|0);
                          _memcpy(($4|0),($662|0),144)|0;
                          $663 = (($4) + 48|0);
                          ;HEAP32[$$byval_copy189+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy189+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy189+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy189+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy189+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy189+20>>2]=HEAP32[$3+20>>2]|0;
                          ;HEAP32[$$byval_copy190+0>>2]=HEAP32[$663+0>>2]|0;HEAP32[$$byval_copy190+4>>2]=HEAP32[$663+4>>2]|0;HEAP32[$$byval_copy190+8>>2]=HEAP32[$663+8>>2]|0;HEAP32[$$byval_copy190+12>>2]=HEAP32[$663+12>>2]|0;HEAP32[$$byval_copy190+16>>2]=HEAP32[$663+16>>2]|0;HEAP32[$$byval_copy190+20>>2]=HEAP32[$663+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy189,$$byval_copy190,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 4:  {
                          $$idx = (($_hero) + 44|0);
                          $$idx$val = +HEAPF32[$$idx>>2];
                          $664 = (+__ZN4hero25get_energy_consuming_rateEv($$idx$val));
                          HEAPF32[$5>>2] = $664;
                          $665 = (($5) + 4|0);
                          HEAPF32[$665>>2] = -2.0;
                          $666 = (($5) + 8|0);
                          HEAPF32[$666>>2] = 5.0;
                          $667 = (($5) + 12|0);
                          HEAPF32[$667>>2] = -4.0;
                          $668 = (($5) + 16|0);
                          HEAPF32[$668>>2] = 0.0;
                          $669 = (($5) + 20|0);
                          HEAPF32[$669>>2] = 0.0;
                          $670 = (($_hero) + 76|0);
                          _memcpy(($6|0),($670|0),144)|0;
                          $671 = (($6) + 72|0);
                          ;HEAP32[$$byval_copy191+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy191+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy191+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy191+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy191+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$$byval_copy191+20>>2]=HEAP32[$5+20>>2]|0;
                          ;HEAP32[$$byval_copy192+0>>2]=HEAP32[$671+0>>2]|0;HEAP32[$$byval_copy192+4>>2]=HEAP32[$671+4>>2]|0;HEAP32[$$byval_copy192+8>>2]=HEAP32[$671+8>>2]|0;HEAP32[$$byval_copy192+12>>2]=HEAP32[$671+12>>2]|0;HEAP32[$$byval_copy192+16>>2]=HEAP32[$671+16>>2]|0;HEAP32[$$byval_copy192+20>>2]=HEAP32[$671+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy191,$$byval_copy192,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 5:  {
                          HEAPF32[$7>>2] = 8.0;
                          $672 = (($7) + 4|0);
                          $673 = (($7) + 20|0);
                          ;HEAP32[$672+0>>2]=0|0;HEAP32[$672+4>>2]=0|0;HEAP32[$672+8>>2]=0|0;HEAP32[$672+12>>2]=0|0;
                          HEAPF32[$673>>2] = -5.0;
                          $674 = (($_hero) + 76|0);
                          _memcpy(($8|0),($674|0),144)|0;
                          $675 = (($8) + 96|0);
                          ;HEAP32[$$byval_copy193+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy193+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy193+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy193+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy193+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy193+20>>2]=HEAP32[$7+20>>2]|0;
                          ;HEAP32[$$byval_copy194+0>>2]=HEAP32[$675+0>>2]|0;HEAP32[$$byval_copy194+4>>2]=HEAP32[$675+4>>2]|0;HEAP32[$$byval_copy194+8>>2]=HEAP32[$675+8>>2]|0;HEAP32[$$byval_copy194+12>>2]=HEAP32[$675+12>>2]|0;HEAP32[$$byval_copy194+16>>2]=HEAP32[$675+16>>2]|0;HEAP32[$$byval_copy194+20>>2]=HEAP32[$675+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy193,$$byval_copy194,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         default: {
                          $676 = (($_hero) + 76|0);
                          ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;HEAP32[$9+20>>2]=0|0;
                          _memcpy(($10|0),($676|0),144)|0;
                          $677 = (($10) + 120|0);
                          ;HEAP32[$$byval_copy195+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$$byval_copy195+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy195+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy195+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$$byval_copy195+16>>2]=HEAP32[$9+16>>2]|0;HEAP32[$$byval_copy195+20>>2]=HEAP32[$9+20>>2]|0;
                          ;HEAP32[$$byval_copy196+0>>2]=HEAP32[$677+0>>2]|0;HEAP32[$$byval_copy196+4>>2]=HEAP32[$677+4>>2]|0;HEAP32[$$byval_copy196+8>>2]=HEAP32[$677+8>>2]|0;HEAP32[$$byval_copy196+12>>2]=HEAP32[$677+12>>2]|0;HEAP32[$$byval_copy196+16>>2]=HEAP32[$677+16>>2]|0;HEAP32[$$byval_copy196+20>>2]=HEAP32[$677+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy195,$$byval_copy196,$day);
                          $678 = +HEAPF32[$_hero>>2];
                          $679 = (($_hero) + 24|0);
                          HEAPF32[$679>>2] = $678;
                          STACKTOP = sp;return;
                         }
                         }
                        }
                       } while(0);
                       $559 = (___cxa_allocate_exception(4)|0);
                       HEAP32[$559>>2] = ((20400 + 8|0));
                       __THREW__ = 0;
                       invoke_viii(422,($559|0),(20480|0),(396|0));
                       $560 = __THREW__; __THREW__ = 0;
                       $561 = $560&1;
                       if ($561) {
                        break;
                       }
                       // unreachable;
                      }
                     } while(0);
                     $568 = ___cxa_find_matching_catch()|0;
                     $569 = tempRet0;
                     $570 = HEAP32[$542>>2]|0;HEAP32[$542>>2] = (($570+-1)|0);
                     $571 = ($570|0)==(0);
                     if (!($571)) {
                      ___resumeException($568|0);
                      // unreachable;
                     }
                     $572 = HEAP32[$541>>2]|0;
                     $573 = (($572) + 8|0);
                     $574 = HEAP32[$573>>2]|0;
                     FUNCTION_TABLE_vi[$574 & 1023]($541);
                     ___resumeException($568|0);
                     // unreachable;
                    }
                   } while(0);
                   $454 = (___cxa_allocate_exception(4)|0);
                   HEAP32[$454>>2] = ((20400 + 8|0));
                   __THREW__ = 0;
                   invoke_viii(422,($454|0),(20480|0),(396|0));
                   $455 = __THREW__; __THREW__ = 0;
                   $456 = $455&1;
                   if ($456) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $463 = ___cxa_find_matching_catch()|0;
                 $464 = tempRet0;
                 $465 = HEAP32[$437>>2]|0;HEAP32[$437>>2] = (($465+-1)|0);
                 $466 = ($465|0)==(0);
                 if (!($466)) {
                  ___resumeException($463|0);
                  // unreachable;
                 }
                 $467 = HEAP32[$436>>2]|0;
                 $468 = (($467) + 8|0);
                 $469 = HEAP32[$468>>2]|0;
                 FUNCTION_TABLE_vi[$469 & 1023]($436);
                 ___resumeException($463|0);
                 // unreachable;
                }
               } while(0);
               $349 = (___cxa_allocate_exception(4)|0);
               HEAP32[$349>>2] = ((20400 + 8|0));
               __THREW__ = 0;
               invoke_viii(422,($349|0),(20480|0),(396|0));
               $350 = __THREW__; __THREW__ = 0;
               $351 = $350&1;
               if ($351) {
                break;
               }
               // unreachable;
              }
             } while(0);
             $358 = ___cxa_find_matching_catch()|0;
             $359 = tempRet0;
             $360 = HEAP32[$332>>2]|0;HEAP32[$332>>2] = (($360+-1)|0);
             $361 = ($360|0)==(0);
             if (!($361)) {
              ___resumeException($358|0);
              // unreachable;
             }
             $362 = HEAP32[$331>>2]|0;
             $363 = (($362) + 8|0);
             $364 = HEAP32[$363>>2]|0;
             FUNCTION_TABLE_vi[$364 & 1023]($331);
             ___resumeException($358|0);
             // unreachable;
            }
           } while(0);
           $244 = (___cxa_allocate_exception(4)|0);
           HEAP32[$244>>2] = ((20400 + 8|0));
           __THREW__ = 0;
           invoke_viii(422,($244|0),(20480|0),(396|0));
           $245 = __THREW__; __THREW__ = 0;
           $246 = $245&1;
           if (!($246)) {
            // unreachable;
           }
          }
         } while(0);
         $253 = ___cxa_find_matching_catch()|0;
         $254 = tempRet0;
         $255 = HEAP32[$227>>2]|0;HEAP32[$227>>2] = (($255+-1)|0);
         $256 = ($255|0)==(0);
         if (!($256)) {
          ___resumeException($253|0);
          // unreachable;
         }
         $257 = HEAP32[$226>>2]|0;
         $258 = (($257) + 8|0);
         $259 = HEAP32[$258>>2]|0;
         FUNCTION_TABLE_vi[$259 & 1023]($226);
         ___resumeException($253|0);
         // unreachable;
        }
       }
       $139 = (___cxa_allocate_exception(4)|0);
       HEAP32[$139>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($139|0),(20480|0),(396|0));
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if (!($141)) {
        // unreachable;
       }
      }
     } while(0);
     $148 = ___cxa_find_matching_catch()|0;
     $149 = tempRet0;
     $150 = HEAP32[$122>>2]|0;HEAP32[$122>>2] = (($150+-1)|0);
     $151 = ($150|0)==(0);
     if (!($151)) {
      ___resumeException($148|0);
      // unreachable;
     }
     $152 = HEAP32[$121>>2]|0;
     $153 = (($152) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     FUNCTION_TABLE_vi[$154 & 1023]($121);
     ___resumeException($148|0);
     // unreachable;
    }
   }
   $34 = (___cxa_allocate_exception(4)|0);
   HEAP32[$34>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($34|0),(20480|0),(396|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if (!($36)) {
    // unreachable;
   }
  }
 } while(0);
 $43 = ___cxa_find_matching_catch()|0;
 $44 = tempRet0;
 $45 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($45+-1)|0);
 $46 = ($45|0)==(0);
 if (!($46)) {
  ___resumeException($43|0);
  // unreachable;
 }
 $47 = HEAP32[$16>>2]|0;
 $48 = (($47) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 FUNCTION_TABLE_vi[$49 & 1023]($16);
 ___resumeException($43|0);
 // unreachable;
}
function __ZN5march11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i112 = 0, $$0$i$i141 = 0, $$0$i$i25 = 0, $$0$i$i54 = 0, $$0$i$i83 = 0, $$byval_copy = 0, $$byval_copy188 = 0, $$byval_copy189 = 0, $$byval_copy190 = 0, $$byval_copy191 = 0, $$byval_copy192 = 0, $$idx = 0, $$idx$val = 0.0, $$idx146 = 0, $$idx146$val = 0.0, $$idx147 = 0, $$idx147$val = 0.0, $$idx148 = 0, $$idx148$val = 0.0;
 var $$idx149 = 0, $$idx149$val = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert173 = 0, $$phi$trans$insert176 = 0, $$phi$trans$insert179 = 0, $$phi$trans$insert182 = 0, $$phi$trans$insert185 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i104 = 0, $$pre$i$i133 = 0, $$pre$i$i17 = 0, $$pre$i$i46 = 0, $$pre$i$i75 = 0, $$pre175 = 0, $$pre178 = 0, $$pre181 = 0, $$pre184 = 0, $$pre187 = 0;
 var $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i$i100 = 0, $$sum$i$i$i$i129 = 0, $$sum$i$i$i$i13 = 0, $$sum$i$i$i$i42 = 0, $$sum$i$i$i$i71 = 0, $$sum$i$i106 = 0, $$sum$i$i135 = 0, $$sum$i$i19 = 0, $$sum$i$i48 = 0, $$sum$i$i77 = 0, $$sum$i3$i = 0, $$sum$i3$i124 = 0, $$sum$i3$i37 = 0, $$sum$i3$i66 = 0, $$sum$i3$i8 = 0, $$sum$i3$i95 = 0, $$sum1$i$i = 0;
 var $$sum1$i$i10 = 0, $$sum1$i$i126 = 0, $$sum1$i$i39 = 0, $$sum1$i$i68 = 0, $$sum1$i$i97 = 0, $$sum150 = 0, $$sum151 = 0, $$sum152 = 0, $$sum153 = 0, $$sum154 = 0, $$sum155 = 0, $$sum156 = 0, $$sum157 = 0, $$sum158 = 0, $$sum159 = 0, $$sum160 = 0, $$sum161 = 0, $$sum162 = 0, $$sum163 = 0, $$sum164 = 0;
 var $$sum165 = 0, $$sum166 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s$i$i = 0, $__s$i$i1 = 0, $__s$i$i117 = 0, $__s$i$i30 = 0, $__s$i$i59 = 0, $__s$i$i88 = 0, $option = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy192 = sp + 320|0;
 $$byval_copy191 = sp + 296|0;
 $$byval_copy190 = sp + 272|0;
 $$byval_copy189 = sp + 248|0;
 $$byval_copy188 = sp + 224|0;
 $$byval_copy = sp + 200|0;
 $__s$i$i117 = sp + 192|0;
 $__s$i$i88 = sp + 184|0;
 $__s$i$i59 = sp + 176|0;
 $__s$i$i30 = sp + 168|0;
 $__s$i$i1 = sp + 40|0;
 $__s$i$i = sp;
 $option = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp + 48|0;
 $2 = sp + 72|0;
 $3 = sp + 96|0;
 $4 = sp + 120|0;
 $5 = sp + 144|0;
 $6 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(56)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $$sum = (($9) + 28)|0;
 $10 = (($6) + ($$sum)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_ii(423,(11752|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if (!($16)) {
   $17 = (($11) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($11) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $18;
   $22 = $20;
   $23 = (($21) - ($22))|0;
   $24 = $23 >> 2;
   $25 = ($24>>>0)>($14>>>0);
   if ($25) {
    $26 = (($20) + ($14<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if (!($28)) {
     $32 = HEAP32[$27>>2]|0;
     $33 = (($32) + 28|0);
     $34 = HEAP32[$33>>2]|0;
     __THREW__ = 0;
     $35 = (invoke_iii($34|0,($27|0),10)|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      break;
     }
     $45 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($45+-1)|0);
     $46 = ($45|0)==(0);
     if ($46) {
      $47 = HEAP32[$11>>2]|0;
      $48 = (($47) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      FUNCTION_TABLE_vi[$49 & 1023]($11);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $50 = (($__s$i$i) + 4|0);
     HEAP32[$50>>2] = $6;
     $51 = HEAP32[$6>>2]|0;
     $52 = (($51) + -12|0);
     $53 = HEAP32[$52>>2]|0;
     $$sum$i3$i = (($53) + 16)|0;
     $54 = (($6) + ($$sum$i3$i)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0);
     do {
      if ($56) {
       $$sum1$i$i = (($53) + 72)|0;
       $57 = (($6) + ($$sum1$i$i)|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($58|0)==(0|0);
       if ($59) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($58|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         $89 = ___cxa_find_matching_catch(0|0)|0;
         $90 = tempRet0;
         $$0$i$i = $89;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $62 = HEAP32[$6>>2]|0;
        $63 = (($62) + -12|0);
        $64 = HEAP32[$63>>2]|0;
        $$sum$i$i$i$i = (($64) + 24)|0;
        $65 = (($6) + ($$sum$i$i$i$i)|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = ($66|0)==(0|0);
        if ($67) {
         $83 = $64;
         label = 21;
        } else {
         $68 = (($66) + 24|0);
         $69 = HEAP32[$68>>2]|0;
         $70 = (($66) + 28|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = ($69|0)==($71|0);
         if (!($72)) {
          $73 = (($69) + 1|0);
          HEAP32[$68>>2] = $73;
          HEAP8[$69>>0] = $35;
          label = 28;
          break;
         }
         $74 = HEAP32[$66>>2]|0;
         $75 = (($74) + 52|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = $35&255;
         __THREW__ = 0;
         $78 = (invoke_iii($76|0,($66|0),($77|0))|0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         if (!($80)) {
          $81 = ($78|0)==(-1);
          if (!($81)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$6>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $83 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $82 = (($6) + ($83)|0);
         $$sum$i$i = (($83) + 16)|0;
         $84 = (($6) + ($$sum$i$i)|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = $85 | 1;
         __THREW__ = 0;
         invoke_vii(425,($82|0),($86|0));
         $87 = __THREW__; __THREW__ = 0;
         $88 = $87&1;
         if (!($88)) {
          label = 28;
          break;
         }
        }
        $91 = ___cxa_find_matching_catch(0|0)|0;
        $92 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $91;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $93 = HEAP32[$6>>2]|0;
       $94 = (($93) + -12|0);
       $95 = HEAP32[$94>>2]|0;
       $$sum165 = (($95) + 16)|0;
       $96 = (($6) + ($$sum165)|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = $97 | 1;
       HEAP32[$96>>2] = $98;
       $$sum166 = (($95) + 20)|0;
       $99 = (($6) + ($$sum166)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $100 & 1;
       $102 = ($101|0)==(0);
       if ($102) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if (!($104)) {
        // unreachable;
       }
       $105 = ___cxa_find_matching_catch()|0;
       $106 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $107 = __THREW__; __THREW__ = 0;
       $108 = $107&1;
       if ($108) {
        $109 = ___cxa_find_matching_catch(0|0)|0;
        $110 = tempRet0;
        ___clang_call_terminate($109);
        // unreachable;
       } else {
        ___resumeException($105|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($6);
     $111 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(72)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + -12|0);
     $114 = HEAP32[$113>>2]|0;
     $$sum150 = (($114) + 28)|0;
     $115 = (($111) + ($$sum150)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 4|0);
     $118 = HEAP32[$117>>2]|0;HEAP32[$117>>2] = (($118+1)|0);
     __THREW__ = 0;
     $119 = (invoke_ii(423,(11752|0))|0);
     $120 = __THREW__; __THREW__ = 0;
     $121 = $120&1;
     do {
      if (!($121)) {
       $122 = (($116) + 12|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($116) + 8|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = $123;
       $127 = $125;
       $128 = (($126) - ($127))|0;
       $129 = $128 >> 2;
       $130 = ($129>>>0)>($119>>>0);
       if ($130) {
        $131 = (($125) + ($119<<2)|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = ($132|0)==(0|0);
        if (!($133)) {
         $137 = HEAP32[$132>>2]|0;
         $138 = (($137) + 28|0);
         $139 = HEAP32[$138>>2]|0;
         __THREW__ = 0;
         $140 = (invoke_iii($139|0,($132|0),10)|0);
         $141 = __THREW__; __THREW__ = 0;
         $142 = $141&1;
         if ($142) {
          break;
         }
         $150 = HEAP32[$117>>2]|0;HEAP32[$117>>2] = (($150+-1)|0);
         $151 = ($150|0)==(0);
         if ($151) {
          $152 = HEAP32[$116>>2]|0;
          $153 = (($152) + 8|0);
          $154 = HEAP32[$153>>2]|0;
          FUNCTION_TABLE_vi[$154 & 1023]($116);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $155 = (($__s$i$i1) + 4|0);
         HEAP32[$155>>2] = $111;
         $156 = HEAP32[$111>>2]|0;
         $157 = (($156) + -12|0);
         $158 = HEAP32[$157>>2]|0;
         $$sum$i3$i8 = (($158) + 16)|0;
         $159 = (($111) + ($$sum$i3$i8)|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0);
         L49: do {
          if ($161) {
           $$sum1$i$i10 = (($158) + 72)|0;
           $162 = (($111) + ($$sum1$i$i10)|0);
           $163 = HEAP32[$162>>2]|0;
           $164 = ($163|0)==(0|0);
           if ($164) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($163|0));
            $165 = __THREW__; __THREW__ = 0;
            $166 = $165&1;
            if ($166) {
             $194 = ___cxa_find_matching_catch(0|0)|0;
             $195 = tempRet0;
             $$0$i$i25 = $194;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $167 = HEAP32[$111>>2]|0;
            $168 = (($167) + -12|0);
            $169 = HEAP32[$168>>2]|0;
            $$sum$i$i$i$i13 = (($169) + 24)|0;
            $170 = (($111) + ($$sum$i$i$i$i13)|0);
            $171 = HEAP32[$170>>2]|0;
            $172 = ($171|0)==(0|0);
            do {
             if ($172) {
              $188 = $169;
              label = 52;
             } else {
              $173 = (($171) + 24|0);
              $174 = HEAP32[$173>>2]|0;
              $175 = (($171) + 28|0);
              $176 = HEAP32[$175>>2]|0;
              $177 = ($174|0)==($176|0);
              if (!($177)) {
               $178 = (($174) + 1|0);
               HEAP32[$173>>2] = $178;
               HEAP8[$174>>0] = $140;
               label = 59;
               break L49;
              }
              $179 = HEAP32[$171>>2]|0;
              $180 = (($179) + 52|0);
              $181 = HEAP32[$180>>2]|0;
              $182 = $140&255;
              __THREW__ = 0;
              $183 = (invoke_iii($181|0,($171|0),($182|0))|0);
              $184 = __THREW__; __THREW__ = 0;
              $185 = $184&1;
              if ($185) {
               break;
              }
              $186 = ($183|0)==(-1);
              if (!($186)) {
               label = 59;
               break L49;
              }
              $$pre$i$i17 = HEAP32[$111>>2]|0;
              $$phi$trans$insert173 = (($$pre$i$i17) + -12|0);
              $$pre175 = HEAP32[$$phi$trans$insert173>>2]|0;
              $188 = $$pre175;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $187 = (($111) + ($188)|0);
             $$sum$i$i19 = (($188) + 16)|0;
             $189 = (($111) + ($$sum$i$i19)|0);
             $190 = HEAP32[$189>>2]|0;
             $191 = $190 | 1;
             __THREW__ = 0;
             invoke_vii(425,($187|0),($191|0));
             $192 = __THREW__; __THREW__ = 0;
             $193 = $192&1;
             if (!($193)) {
              label = 59;
              break;
             }
            }
            $196 = ___cxa_find_matching_catch(0|0)|0;
            $197 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $196;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $198 = HEAP32[$111>>2]|0;
           $199 = (($198) + -12|0);
           $200 = HEAP32[$199>>2]|0;
           $$sum163 = (($200) + 16)|0;
           $201 = (($111) + ($$sum163)|0);
           $202 = HEAP32[$201>>2]|0;
           $203 = $202 | 1;
           HEAP32[$201>>2] = $203;
           $$sum164 = (($200) + 20)|0;
           $204 = (($111) + ($$sum164)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = $205 & 1;
           $207 = ($206|0)==(0);
           if ($207) {
            ___cxa_end_catch();
            break;
           }
           __THREW__ = 0;
           invoke_v(426);
           $208 = __THREW__; __THREW__ = 0;
           $209 = $208&1;
           if (!($209)) {
            // unreachable;
           }
           $210 = ___cxa_find_matching_catch()|0;
           $211 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $212 = __THREW__; __THREW__ = 0;
           $213 = $212&1;
           if ($213) {
            $214 = ___cxa_find_matching_catch(0|0)|0;
            $215 = tempRet0;
            ___clang_call_terminate($214);
            // unreachable;
           } else {
            ___resumeException($210|0);
            // unreachable;
           }
          } else {
           label = 59;
          }
         } while(0);
         if ((label|0) == 59) {
          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         }
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($111);
         $216 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(88)|0);
         $217 = HEAP32[$216>>2]|0;
         $218 = (($217) + -12|0);
         $219 = HEAP32[$218>>2]|0;
         $$sum151 = (($219) + 28)|0;
         $220 = (($216) + ($$sum151)|0);
         $221 = HEAP32[$220>>2]|0;
         $222 = (($221) + 4|0);
         $223 = HEAP32[$222>>2]|0;HEAP32[$222>>2] = (($223+1)|0);
         __THREW__ = 0;
         $224 = (invoke_ii(423,(11752|0))|0);
         $225 = __THREW__; __THREW__ = 0;
         $226 = $225&1;
         L79: do {
          if (!($226)) {
           $227 = (($221) + 12|0);
           $228 = HEAP32[$227>>2]|0;
           $229 = (($221) + 8|0);
           $230 = HEAP32[$229>>2]|0;
           $231 = $228;
           $232 = $230;
           $233 = (($231) - ($232))|0;
           $234 = $233 >> 2;
           $235 = ($234>>>0)>($224>>>0);
           do {
            if ($235) {
             $236 = (($230) + ($224<<2)|0);
             $237 = HEAP32[$236>>2]|0;
             $238 = ($237|0)==(0|0);
             if ($238) {
              break;
             }
             $242 = HEAP32[$237>>2]|0;
             $243 = (($242) + 28|0);
             $244 = HEAP32[$243>>2]|0;
             __THREW__ = 0;
             $245 = (invoke_iii($244|0,($237|0),10)|0);
             $246 = __THREW__; __THREW__ = 0;
             $247 = $246&1;
             if ($247) {
              break L79;
             }
             $255 = HEAP32[$222>>2]|0;HEAP32[$222>>2] = (($255+-1)|0);
             $256 = ($255|0)==(0);
             if ($256) {
              $257 = HEAP32[$221>>2]|0;
              $258 = (($257) + 8|0);
              $259 = HEAP32[$258>>2]|0;
              FUNCTION_TABLE_vi[$259 & 1023]($221);
             }
             HEAP8[$__s$i$i30>>0] = 0;
             $260 = (($__s$i$i30) + 4|0);
             HEAP32[$260>>2] = $216;
             $261 = HEAP32[$216>>2]|0;
             $262 = (($261) + -12|0);
             $263 = HEAP32[$262>>2]|0;
             $$sum$i3$i37 = (($263) + 16)|0;
             $264 = (($216) + ($$sum$i3$i37)|0);
             $265 = HEAP32[$264>>2]|0;
             $266 = ($265|0)==(0);
             L88: do {
              if ($266) {
               $$sum1$i$i39 = (($263) + 72)|0;
               $267 = (($216) + ($$sum1$i$i39)|0);
               $268 = HEAP32[$267>>2]|0;
               $269 = ($268|0)==(0|0);
               do {
                if ($269) {
                 label = 77;
                } else {
                 __THREW__ = 0;
                 invoke_vi(424,($268|0));
                 $270 = __THREW__; __THREW__ = 0;
                 $271 = $270&1;
                 if (!($271)) {
                  label = 77;
                  break;
                 }
                 $299 = ___cxa_find_matching_catch(0|0)|0;
                 $300 = tempRet0;
                 $$0$i$i54 = $299;
                }
               } while(0);
               if ((label|0) == 77) {
                HEAP8[$__s$i$i30>>0] = 1;
                $272 = HEAP32[$216>>2]|0;
                $273 = (($272) + -12|0);
                $274 = HEAP32[$273>>2]|0;
                $$sum$i$i$i$i42 = (($274) + 24)|0;
                $275 = (($216) + ($$sum$i$i$i$i42)|0);
                $276 = HEAP32[$275>>2]|0;
                $277 = ($276|0)==(0|0);
                do {
                 if ($277) {
                  $293 = $274;
                  label = 83;
                 } else {
                  $278 = (($276) + 24|0);
                  $279 = HEAP32[$278>>2]|0;
                  $280 = (($276) + 28|0);
                  $281 = HEAP32[$280>>2]|0;
                  $282 = ($279|0)==($281|0);
                  if (!($282)) {
                   $283 = (($279) + 1|0);
                   HEAP32[$278>>2] = $283;
                   HEAP8[$279>>0] = $245;
                   label = 90;
                   break L88;
                  }
                  $284 = HEAP32[$276>>2]|0;
                  $285 = (($284) + 52|0);
                  $286 = HEAP32[$285>>2]|0;
                  $287 = $245&255;
                  __THREW__ = 0;
                  $288 = (invoke_iii($286|0,($276|0),($287|0))|0);
                  $289 = __THREW__; __THREW__ = 0;
                  $290 = $289&1;
                  if ($290) {
                   break;
                  }
                  $291 = ($288|0)==(-1);
                  if (!($291)) {
                   label = 90;
                   break L88;
                  }
                  $$pre$i$i46 = HEAP32[$216>>2]|0;
                  $$phi$trans$insert176 = (($$pre$i$i46) + -12|0);
                  $$pre178 = HEAP32[$$phi$trans$insert176>>2]|0;
                  $293 = $$pre178;
                  label = 83;
                 }
                } while(0);
                if ((label|0) == 83) {
                 $292 = (($216) + ($293)|0);
                 $$sum$i$i48 = (($293) + 16)|0;
                 $294 = (($216) + ($$sum$i$i48)|0);
                 $295 = HEAP32[$294>>2]|0;
                 $296 = $295 | 1;
                 __THREW__ = 0;
                 invoke_vii(425,($292|0),($296|0));
                 $297 = __THREW__; __THREW__ = 0;
                 $298 = $297&1;
                 if (!($298)) {
                  label = 90;
                  break;
                 }
                }
                $301 = ___cxa_find_matching_catch(0|0)|0;
                $302 = tempRet0;
                __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
                $$0$i$i54 = $301;
               }
               (___cxa_begin_catch(($$0$i$i54|0))|0);
               $303 = HEAP32[$216>>2]|0;
               $304 = (($303) + -12|0);
               $305 = HEAP32[$304>>2]|0;
               $$sum161 = (($305) + 16)|0;
               $306 = (($216) + ($$sum161)|0);
               $307 = HEAP32[$306>>2]|0;
               $308 = $307 | 1;
               HEAP32[$306>>2] = $308;
               $$sum162 = (($305) + 20)|0;
               $309 = (($216) + ($$sum162)|0);
               $310 = HEAP32[$309>>2]|0;
               $311 = $310 & 1;
               $312 = ($311|0)==(0);
               if ($312) {
                ___cxa_end_catch();
                break;
               }
               __THREW__ = 0;
               invoke_v(426);
               $313 = __THREW__; __THREW__ = 0;
               $314 = $313&1;
               if (!($314)) {
                // unreachable;
               }
               $315 = ___cxa_find_matching_catch()|0;
               $316 = tempRet0;
               __THREW__ = 0;
               invoke_v(427);
               $317 = __THREW__; __THREW__ = 0;
               $318 = $317&1;
               if ($318) {
                $319 = ___cxa_find_matching_catch(0|0)|0;
                $320 = tempRet0;
                ___clang_call_terminate($319);
                // unreachable;
               } else {
                ___resumeException($315|0);
                // unreachable;
               }
              } else {
               label = 90;
              }
             } while(0);
             if ((label|0) == 90) {
              __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
             }
             __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($216);
             $321 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(120)|0);
             $322 = HEAP32[$321>>2]|0;
             $323 = (($322) + -12|0);
             $324 = HEAP32[$323>>2]|0;
             $$sum152 = (($324) + 28)|0;
             $325 = (($321) + ($$sum152)|0);
             $326 = HEAP32[$325>>2]|0;
             $327 = (($326) + 4|0);
             $328 = HEAP32[$327>>2]|0;HEAP32[$327>>2] = (($328+1)|0);
             __THREW__ = 0;
             $329 = (invoke_ii(423,(11752|0))|0);
             $330 = __THREW__; __THREW__ = 0;
             $331 = $330&1;
             L118: do {
              if (!($331)) {
               $332 = (($326) + 12|0);
               $333 = HEAP32[$332>>2]|0;
               $334 = (($326) + 8|0);
               $335 = HEAP32[$334>>2]|0;
               $336 = $333;
               $337 = $335;
               $338 = (($336) - ($337))|0;
               $339 = $338 >> 2;
               $340 = ($339>>>0)>($329>>>0);
               do {
                if ($340) {
                 $341 = (($335) + ($329<<2)|0);
                 $342 = HEAP32[$341>>2]|0;
                 $343 = ($342|0)==(0|0);
                 if ($343) {
                  break;
                 }
                 $347 = HEAP32[$342>>2]|0;
                 $348 = (($347) + 28|0);
                 $349 = HEAP32[$348>>2]|0;
                 __THREW__ = 0;
                 $350 = (invoke_iii($349|0,($342|0),10)|0);
                 $351 = __THREW__; __THREW__ = 0;
                 $352 = $351&1;
                 if ($352) {
                  break L118;
                 }
                 $360 = HEAP32[$327>>2]|0;HEAP32[$327>>2] = (($360+-1)|0);
                 $361 = ($360|0)==(0);
                 if ($361) {
                  $362 = HEAP32[$326>>2]|0;
                  $363 = (($362) + 8|0);
                  $364 = HEAP32[$363>>2]|0;
                  FUNCTION_TABLE_vi[$364 & 1023]($326);
                 }
                 HEAP8[$__s$i$i59>>0] = 0;
                 $365 = (($__s$i$i59) + 4|0);
                 HEAP32[$365>>2] = $321;
                 $366 = HEAP32[$321>>2]|0;
                 $367 = (($366) + -12|0);
                 $368 = HEAP32[$367>>2]|0;
                 $$sum$i3$i66 = (($368) + 16)|0;
                 $369 = (($321) + ($$sum$i3$i66)|0);
                 $370 = HEAP32[$369>>2]|0;
                 $371 = ($370|0)==(0);
                 L127: do {
                  if ($371) {
                   $$sum1$i$i68 = (($368) + 72)|0;
                   $372 = (($321) + ($$sum1$i$i68)|0);
                   $373 = HEAP32[$372>>2]|0;
                   $374 = ($373|0)==(0|0);
                   do {
                    if ($374) {
                     label = 108;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(424,($373|0));
                     $375 = __THREW__; __THREW__ = 0;
                     $376 = $375&1;
                     if (!($376)) {
                      label = 108;
                      break;
                     }
                     $404 = ___cxa_find_matching_catch(0|0)|0;
                     $405 = tempRet0;
                     $$0$i$i83 = $404;
                    }
                   } while(0);
                   if ((label|0) == 108) {
                    HEAP8[$__s$i$i59>>0] = 1;
                    $377 = HEAP32[$321>>2]|0;
                    $378 = (($377) + -12|0);
                    $379 = HEAP32[$378>>2]|0;
                    $$sum$i$i$i$i71 = (($379) + 24)|0;
                    $380 = (($321) + ($$sum$i$i$i$i71)|0);
                    $381 = HEAP32[$380>>2]|0;
                    $382 = ($381|0)==(0|0);
                    do {
                     if ($382) {
                      $398 = $379;
                      label = 114;
                     } else {
                      $383 = (($381) + 24|0);
                      $384 = HEAP32[$383>>2]|0;
                      $385 = (($381) + 28|0);
                      $386 = HEAP32[$385>>2]|0;
                      $387 = ($384|0)==($386|0);
                      if (!($387)) {
                       $388 = (($384) + 1|0);
                       HEAP32[$383>>2] = $388;
                       HEAP8[$384>>0] = $350;
                       label = 121;
                       break L127;
                      }
                      $389 = HEAP32[$381>>2]|0;
                      $390 = (($389) + 52|0);
                      $391 = HEAP32[$390>>2]|0;
                      $392 = $350&255;
                      __THREW__ = 0;
                      $393 = (invoke_iii($391|0,($381|0),($392|0))|0);
                      $394 = __THREW__; __THREW__ = 0;
                      $395 = $394&1;
                      if ($395) {
                       break;
                      }
                      $396 = ($393|0)==(-1);
                      if (!($396)) {
                       label = 121;
                       break L127;
                      }
                      $$pre$i$i75 = HEAP32[$321>>2]|0;
                      $$phi$trans$insert179 = (($$pre$i$i75) + -12|0);
                      $$pre181 = HEAP32[$$phi$trans$insert179>>2]|0;
                      $398 = $$pre181;
                      label = 114;
                     }
                    } while(0);
                    if ((label|0) == 114) {
                     $397 = (($321) + ($398)|0);
                     $$sum$i$i77 = (($398) + 16)|0;
                     $399 = (($321) + ($$sum$i$i77)|0);
                     $400 = HEAP32[$399>>2]|0;
                     $401 = $400 | 1;
                     __THREW__ = 0;
                     invoke_vii(425,($397|0),($401|0));
                     $402 = __THREW__; __THREW__ = 0;
                     $403 = $402&1;
                     if (!($403)) {
                      label = 121;
                      break;
                     }
                    }
                    $406 = ___cxa_find_matching_catch(0|0)|0;
                    $407 = tempRet0;
                    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                    $$0$i$i83 = $406;
                   }
                   (___cxa_begin_catch(($$0$i$i83|0))|0);
                   $408 = HEAP32[$321>>2]|0;
                   $409 = (($408) + -12|0);
                   $410 = HEAP32[$409>>2]|0;
                   $$sum159 = (($410) + 16)|0;
                   $411 = (($321) + ($$sum159)|0);
                   $412 = HEAP32[$411>>2]|0;
                   $413 = $412 | 1;
                   HEAP32[$411>>2] = $413;
                   $$sum160 = (($410) + 20)|0;
                   $414 = (($321) + ($$sum160)|0);
                   $415 = HEAP32[$414>>2]|0;
                   $416 = $415 & 1;
                   $417 = ($416|0)==(0);
                   if ($417) {
                    ___cxa_end_catch();
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(426);
                   $418 = __THREW__; __THREW__ = 0;
                   $419 = $418&1;
                   if (!($419)) {
                    // unreachable;
                   }
                   $420 = ___cxa_find_matching_catch()|0;
                   $421 = tempRet0;
                   __THREW__ = 0;
                   invoke_v(427);
                   $422 = __THREW__; __THREW__ = 0;
                   $423 = $422&1;
                   if ($423) {
                    $424 = ___cxa_find_matching_catch(0|0)|0;
                    $425 = tempRet0;
                    ___clang_call_terminate($424);
                    // unreachable;
                   } else {
                    ___resumeException($420|0);
                    // unreachable;
                   }
                  } else {
                   label = 121;
                  }
                 } while(0);
                 if ((label|0) == 121) {
                  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                 }
                 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($321);
                 $426 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(136)|0);
                 $427 = HEAP32[$426>>2]|0;
                 $428 = (($427) + -12|0);
                 $429 = HEAP32[$428>>2]|0;
                 $$sum153 = (($429) + 28)|0;
                 $430 = (($426) + ($$sum153)|0);
                 $431 = HEAP32[$430>>2]|0;
                 $432 = (($431) + 4|0);
                 $433 = HEAP32[$432>>2]|0;HEAP32[$432>>2] = (($433+1)|0);
                 __THREW__ = 0;
                 $434 = (invoke_ii(423,(11752|0))|0);
                 $435 = __THREW__; __THREW__ = 0;
                 $436 = $435&1;
                 L157: do {
                  if (!($436)) {
                   $437 = (($431) + 12|0);
                   $438 = HEAP32[$437>>2]|0;
                   $439 = (($431) + 8|0);
                   $440 = HEAP32[$439>>2]|0;
                   $441 = $438;
                   $442 = $440;
                   $443 = (($441) - ($442))|0;
                   $444 = $443 >> 2;
                   $445 = ($444>>>0)>($434>>>0);
                   do {
                    if ($445) {
                     $446 = (($440) + ($434<<2)|0);
                     $447 = HEAP32[$446>>2]|0;
                     $448 = ($447|0)==(0|0);
                     if ($448) {
                      break;
                     }
                     $452 = HEAP32[$447>>2]|0;
                     $453 = (($452) + 28|0);
                     $454 = HEAP32[$453>>2]|0;
                     __THREW__ = 0;
                     $455 = (invoke_iii($454|0,($447|0),10)|0);
                     $456 = __THREW__; __THREW__ = 0;
                     $457 = $456&1;
                     if ($457) {
                      break L157;
                     }
                     $465 = HEAP32[$432>>2]|0;HEAP32[$432>>2] = (($465+-1)|0);
                     $466 = ($465|0)==(0);
                     if ($466) {
                      $467 = HEAP32[$431>>2]|0;
                      $468 = (($467) + 8|0);
                      $469 = HEAP32[$468>>2]|0;
                      FUNCTION_TABLE_vi[$469 & 1023]($431);
                     }
                     HEAP8[$__s$i$i88>>0] = 0;
                     $470 = (($__s$i$i88) + 4|0);
                     HEAP32[$470>>2] = $426;
                     $471 = HEAP32[$426>>2]|0;
                     $472 = (($471) + -12|0);
                     $473 = HEAP32[$472>>2]|0;
                     $$sum$i3$i95 = (($473) + 16)|0;
                     $474 = (($426) + ($$sum$i3$i95)|0);
                     $475 = HEAP32[$474>>2]|0;
                     $476 = ($475|0)==(0);
                     L166: do {
                      if ($476) {
                       $$sum1$i$i97 = (($473) + 72)|0;
                       $477 = (($426) + ($$sum1$i$i97)|0);
                       $478 = HEAP32[$477>>2]|0;
                       $479 = ($478|0)==(0|0);
                       do {
                        if ($479) {
                         label = 139;
                        } else {
                         __THREW__ = 0;
                         invoke_vi(424,($478|0));
                         $480 = __THREW__; __THREW__ = 0;
                         $481 = $480&1;
                         if (!($481)) {
                          label = 139;
                          break;
                         }
                         $509 = ___cxa_find_matching_catch(0|0)|0;
                         $510 = tempRet0;
                         $$0$i$i112 = $509;
                        }
                       } while(0);
                       if ((label|0) == 139) {
                        HEAP8[$__s$i$i88>>0] = 1;
                        $482 = HEAP32[$426>>2]|0;
                        $483 = (($482) + -12|0);
                        $484 = HEAP32[$483>>2]|0;
                        $$sum$i$i$i$i100 = (($484) + 24)|0;
                        $485 = (($426) + ($$sum$i$i$i$i100)|0);
                        $486 = HEAP32[$485>>2]|0;
                        $487 = ($486|0)==(0|0);
                        do {
                         if ($487) {
                          $503 = $484;
                          label = 145;
                         } else {
                          $488 = (($486) + 24|0);
                          $489 = HEAP32[$488>>2]|0;
                          $490 = (($486) + 28|0);
                          $491 = HEAP32[$490>>2]|0;
                          $492 = ($489|0)==($491|0);
                          if (!($492)) {
                           $493 = (($489) + 1|0);
                           HEAP32[$488>>2] = $493;
                           HEAP8[$489>>0] = $455;
                           label = 152;
                           break L166;
                          }
                          $494 = HEAP32[$486>>2]|0;
                          $495 = (($494) + 52|0);
                          $496 = HEAP32[$495>>2]|0;
                          $497 = $455&255;
                          __THREW__ = 0;
                          $498 = (invoke_iii($496|0,($486|0),($497|0))|0);
                          $499 = __THREW__; __THREW__ = 0;
                          $500 = $499&1;
                          if ($500) {
                           break;
                          }
                          $501 = ($498|0)==(-1);
                          if (!($501)) {
                           label = 152;
                           break L166;
                          }
                          $$pre$i$i104 = HEAP32[$426>>2]|0;
                          $$phi$trans$insert182 = (($$pre$i$i104) + -12|0);
                          $$pre184 = HEAP32[$$phi$trans$insert182>>2]|0;
                          $503 = $$pre184;
                          label = 145;
                         }
                        } while(0);
                        if ((label|0) == 145) {
                         $502 = (($426) + ($503)|0);
                         $$sum$i$i106 = (($503) + 16)|0;
                         $504 = (($426) + ($$sum$i$i106)|0);
                         $505 = HEAP32[$504>>2]|0;
                         $506 = $505 | 1;
                         __THREW__ = 0;
                         invoke_vii(425,($502|0),($506|0));
                         $507 = __THREW__; __THREW__ = 0;
                         $508 = $507&1;
                         if (!($508)) {
                          label = 152;
                          break;
                         }
                        }
                        $511 = ___cxa_find_matching_catch(0|0)|0;
                        $512 = tempRet0;
                        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                        $$0$i$i112 = $511;
                       }
                       (___cxa_begin_catch(($$0$i$i112|0))|0);
                       $513 = HEAP32[$426>>2]|0;
                       $514 = (($513) + -12|0);
                       $515 = HEAP32[$514>>2]|0;
                       $$sum157 = (($515) + 16)|0;
                       $516 = (($426) + ($$sum157)|0);
                       $517 = HEAP32[$516>>2]|0;
                       $518 = $517 | 1;
                       HEAP32[$516>>2] = $518;
                       $$sum158 = (($515) + 20)|0;
                       $519 = (($426) + ($$sum158)|0);
                       $520 = HEAP32[$519>>2]|0;
                       $521 = $520 & 1;
                       $522 = ($521|0)==(0);
                       if ($522) {
                        ___cxa_end_catch();
                        break;
                       }
                       __THREW__ = 0;
                       invoke_v(426);
                       $523 = __THREW__; __THREW__ = 0;
                       $524 = $523&1;
                       if (!($524)) {
                        // unreachable;
                       }
                       $525 = ___cxa_find_matching_catch()|0;
                       $526 = tempRet0;
                       __THREW__ = 0;
                       invoke_v(427);
                       $527 = __THREW__; __THREW__ = 0;
                       $528 = $527&1;
                       if ($528) {
                        $529 = ___cxa_find_matching_catch(0|0)|0;
                        $530 = tempRet0;
                        ___clang_call_terminate($529);
                        // unreachable;
                       } else {
                        ___resumeException($525|0);
                        // unreachable;
                       }
                      } else {
                       label = 152;
                      }
                     } while(0);
                     if ((label|0) == 152) {
                      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                     }
                     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($426);
                     $531 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(168)|0);
                     $532 = HEAP32[$531>>2]|0;
                     $533 = (($532) + -12|0);
                     $534 = HEAP32[$533>>2]|0;
                     $$sum154 = (($534) + 28)|0;
                     $535 = (($531) + ($$sum154)|0);
                     $536 = HEAP32[$535>>2]|0;
                     $537 = (($536) + 4|0);
                     $538 = HEAP32[$537>>2]|0;HEAP32[$537>>2] = (($538+1)|0);
                     __THREW__ = 0;
                     $539 = (invoke_ii(423,(11752|0))|0);
                     $540 = __THREW__; __THREW__ = 0;
                     $541 = $540&1;
                     L196: do {
                      if (!($541)) {
                       $542 = (($536) + 12|0);
                       $543 = HEAP32[$542>>2]|0;
                       $544 = (($536) + 8|0);
                       $545 = HEAP32[$544>>2]|0;
                       $546 = $543;
                       $547 = $545;
                       $548 = (($546) - ($547))|0;
                       $549 = $548 >> 2;
                       $550 = ($549>>>0)>($539>>>0);
                       do {
                        if ($550) {
                         $551 = (($545) + ($539<<2)|0);
                         $552 = HEAP32[$551>>2]|0;
                         $553 = ($552|0)==(0|0);
                         if ($553) {
                          break;
                         }
                         $557 = HEAP32[$552>>2]|0;
                         $558 = (($557) + 28|0);
                         $559 = HEAP32[$558>>2]|0;
                         __THREW__ = 0;
                         $560 = (invoke_iii($559|0,($552|0),10)|0);
                         $561 = __THREW__; __THREW__ = 0;
                         $562 = $561&1;
                         if ($562) {
                          break L196;
                         }
                         $570 = HEAP32[$537>>2]|0;HEAP32[$537>>2] = (($570+-1)|0);
                         $571 = ($570|0)==(0);
                         if ($571) {
                          $572 = HEAP32[$536>>2]|0;
                          $573 = (($572) + 8|0);
                          $574 = HEAP32[$573>>2]|0;
                          FUNCTION_TABLE_vi[$574 & 1023]($536);
                         }
                         HEAP8[$__s$i$i117>>0] = 0;
                         $575 = (($__s$i$i117) + 4|0);
                         HEAP32[$575>>2] = $531;
                         $576 = HEAP32[$531>>2]|0;
                         $577 = (($576) + -12|0);
                         $578 = HEAP32[$577>>2]|0;
                         $$sum$i3$i124 = (($578) + 16)|0;
                         $579 = (($531) + ($$sum$i3$i124)|0);
                         $580 = HEAP32[$579>>2]|0;
                         $581 = ($580|0)==(0);
                         L205: do {
                          if ($581) {
                           $$sum1$i$i126 = (($578) + 72)|0;
                           $582 = (($531) + ($$sum1$i$i126)|0);
                           $583 = HEAP32[$582>>2]|0;
                           $584 = ($583|0)==(0|0);
                           do {
                            if ($584) {
                             label = 170;
                            } else {
                             __THREW__ = 0;
                             invoke_vi(424,($583|0));
                             $585 = __THREW__; __THREW__ = 0;
                             $586 = $585&1;
                             if (!($586)) {
                              label = 170;
                              break;
                             }
                             $614 = ___cxa_find_matching_catch(0|0)|0;
                             $615 = tempRet0;
                             $$0$i$i141 = $614;
                            }
                           } while(0);
                           if ((label|0) == 170) {
                            HEAP8[$__s$i$i117>>0] = 1;
                            $587 = HEAP32[$531>>2]|0;
                            $588 = (($587) + -12|0);
                            $589 = HEAP32[$588>>2]|0;
                            $$sum$i$i$i$i129 = (($589) + 24)|0;
                            $590 = (($531) + ($$sum$i$i$i$i129)|0);
                            $591 = HEAP32[$590>>2]|0;
                            $592 = ($591|0)==(0|0);
                            do {
                             if ($592) {
                              $608 = $589;
                              label = 176;
                             } else {
                              $593 = (($591) + 24|0);
                              $594 = HEAP32[$593>>2]|0;
                              $595 = (($591) + 28|0);
                              $596 = HEAP32[$595>>2]|0;
                              $597 = ($594|0)==($596|0);
                              if (!($597)) {
                               $598 = (($594) + 1|0);
                               HEAP32[$593>>2] = $598;
                               HEAP8[$594>>0] = $560;
                               label = 183;
                               break L205;
                              }
                              $599 = HEAP32[$591>>2]|0;
                              $600 = (($599) + 52|0);
                              $601 = HEAP32[$600>>2]|0;
                              $602 = $560&255;
                              __THREW__ = 0;
                              $603 = (invoke_iii($601|0,($591|0),($602|0))|0);
                              $604 = __THREW__; __THREW__ = 0;
                              $605 = $604&1;
                              if ($605) {
                               break;
                              }
                              $606 = ($603|0)==(-1);
                              if (!($606)) {
                               label = 183;
                               break L205;
                              }
                              $$pre$i$i133 = HEAP32[$531>>2]|0;
                              $$phi$trans$insert185 = (($$pre$i$i133) + -12|0);
                              $$pre187 = HEAP32[$$phi$trans$insert185>>2]|0;
                              $608 = $$pre187;
                              label = 176;
                             }
                            } while(0);
                            if ((label|0) == 176) {
                             $607 = (($531) + ($608)|0);
                             $$sum$i$i135 = (($608) + 16)|0;
                             $609 = (($531) + ($$sum$i$i135)|0);
                             $610 = HEAP32[$609>>2]|0;
                             $611 = $610 | 1;
                             __THREW__ = 0;
                             invoke_vii(425,($607|0),($611|0));
                             $612 = __THREW__; __THREW__ = 0;
                             $613 = $612&1;
                             if (!($613)) {
                              label = 183;
                              break;
                             }
                            }
                            $616 = ___cxa_find_matching_catch(0|0)|0;
                            $617 = tempRet0;
                            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i117);
                            $$0$i$i141 = $616;
                           }
                           (___cxa_begin_catch(($$0$i$i141|0))|0);
                           $618 = HEAP32[$531>>2]|0;
                           $619 = (($618) + -12|0);
                           $620 = HEAP32[$619>>2]|0;
                           $$sum155 = (($620) + 16)|0;
                           $621 = (($531) + ($$sum155)|0);
                           $622 = HEAP32[$621>>2]|0;
                           $623 = $622 | 1;
                           HEAP32[$621>>2] = $623;
                           $$sum156 = (($620) + 20)|0;
                           $624 = (($531) + ($$sum156)|0);
                           $625 = HEAP32[$624>>2]|0;
                           $626 = $625 & 1;
                           $627 = ($626|0)==(0);
                           if ($627) {
                            ___cxa_end_catch();
                            break;
                           }
                           __THREW__ = 0;
                           invoke_v(426);
                           $628 = __THREW__; __THREW__ = 0;
                           $629 = $628&1;
                           if (!($629)) {
                            // unreachable;
                           }
                           $630 = ___cxa_find_matching_catch()|0;
                           $631 = tempRet0;
                           __THREW__ = 0;
                           invoke_v(427);
                           $632 = __THREW__; __THREW__ = 0;
                           $633 = $632&1;
                           if ($633) {
                            $634 = ___cxa_find_matching_catch(0|0)|0;
                            $635 = tempRet0;
                            ___clang_call_terminate($634);
                            // unreachable;
                           } else {
                            ___resumeException($630|0);
                            // unreachable;
                           }
                          } else {
                           label = 183;
                          }
                         } while(0);
                         if ((label|0) == 183) {
                          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i117);
                         }
                         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($531);
                         __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($option);
                         $636 = HEAP32[$option>>2]|0;
                         switch ($636|0) {
                         case 1:  {
                          $$idx149 = (($_hero) + 44|0);
                          $$idx149$val = +HEAPF32[$$idx149>>2];
                          $637 = (+__ZN4hero25get_energy_consuming_rateEv($$idx149$val));
                          HEAPF32[$0>>2] = $637;
                          $638 = (($0) + 4|0);
                          HEAPF32[$638>>2] = -2.0;
                          $639 = (($0) + 8|0);
                          HEAPF32[$639>>2] = 0.0;
                          $640 = (($0) + 12|0);
                          HEAPF32[$640>>2] = 2.0;
                          $641 = (($0) + 16|0);
                          HEAPF32[$641>>2] = 0.0;
                          $642 = (($0) + 20|0);
                          HEAPF32[$642>>2] = 8.0;
                          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 2:  {
                          $$idx148 = (($_hero) + 44|0);
                          $$idx148$val = +HEAPF32[$$idx148>>2];
                          $643 = (+__ZN4hero25get_energy_consuming_rateEv($$idx148$val));
                          HEAPF32[$1>>2] = $643;
                          $644 = (($1) + 4|0);
                          HEAPF32[$644>>2] = 5.0;
                          $645 = (($1) + 8|0);
                          HEAPF32[$645>>2] = 1.0;
                          $646 = (($1) + 12|0);
                          HEAPF32[$646>>2] = -4.0;
                          $647 = (($1) + 16|0);
                          HEAPF32[$647>>2] = 0.0;
                          $648 = (($1) + 20|0);
                          HEAPF32[$648>>2] = 5.0;
                          ;HEAP32[$$byval_copy188+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$$byval_copy188+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy188+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy188+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$$byval_copy188+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$$byval_copy188+20>>2]=HEAP32[$1+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy188,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 3:  {
                          $$idx147 = (($_hero) + 44|0);
                          $$idx147$val = +HEAPF32[$$idx147>>2];
                          $649 = (+__ZN4hero25get_energy_consuming_rateEv($$idx147$val));
                          HEAPF32[$2>>2] = $649;
                          $650 = (($2) + 4|0);
                          HEAPF32[$650>>2] = 5.0;
                          $651 = (($2) + 8|0);
                          HEAPF32[$651>>2] = 1.0;
                          $652 = (($2) + 12|0);
                          HEAPF32[$652>>2] = -4.0;
                          $653 = (($2) + 16|0);
                          HEAPF32[$653>>2] = 1.0;
                          $654 = (($2) + 20|0);
                          HEAPF32[$654>>2] = -3.0;
                          ;HEAP32[$$byval_copy189+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$$byval_copy189+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy189+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy189+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy189+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy189+20>>2]=HEAP32[$2+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy189,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 4:  {
                          $$idx146 = (($_hero) + 44|0);
                          $$idx146$val = +HEAPF32[$$idx146>>2];
                          $655 = (+__ZN4hero25get_energy_consuming_rateEv($$idx146$val));
                          HEAPF32[$3>>2] = $655;
                          $656 = (($3) + 4|0);
                          HEAPF32[$656>>2] = -2.0;
                          $657 = (($3) + 8|0);
                          HEAPF32[$657>>2] = 5.0;
                          $658 = (($3) + 12|0);
                          HEAPF32[$658>>2] = -4.0;
                          $659 = (($3) + 16|0);
                          HEAPF32[$659>>2] = 0.0;
                          $660 = (($3) + 20|0);
                          HEAPF32[$660>>2] = 0.0;
                          ;HEAP32[$$byval_copy190+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy190+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy190+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy190+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy190+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy190+20>>2]=HEAP32[$3+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy190,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 5:  {
                          HEAPF32[$4>>2] = 8.0;
                          $661 = (($4) + 4|0);
                          $662 = (($4) + 20|0);
                          ;HEAP32[$661+0>>2]=0|0;HEAP32[$661+4>>2]=0|0;HEAP32[$661+8>>2]=0|0;HEAP32[$661+12>>2]=0|0;
                          HEAPF32[$662>>2] = -5.0;
                          ;HEAP32[$$byval_copy191+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$$byval_copy191+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy191+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy191+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$$byval_copy191+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$$byval_copy191+20>>2]=HEAP32[$4+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy191,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 6:  {
                          $$idx = (($_hero) + 44|0);
                          $$idx$val = +HEAPF32[$$idx>>2];
                          $663 = (+__ZN4hero25get_energy_consuming_rateEv($$idx$val));
                          HEAPF32[$5>>2] = $663;
                          $664 = (($5) + 4|0);
                          HEAPF32[$664>>2] = 5.0;
                          $665 = (($5) + 8|0);
                          HEAPF32[$665>>2] = 1.0;
                          $666 = (($5) + 12|0);
                          HEAPF32[$666>>2] = -2.0;
                          $667 = (($5) + 16|0);
                          HEAPF32[$667>>2] = 0.0;
                          $668 = (($5) + 20|0);
                          HEAPF32[$668>>2] = -3.0;
                          ;HEAP32[$$byval_copy192+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy192+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy192+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy192+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy192+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$$byval_copy192+20>>2]=HEAP32[$5+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy192,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         default: {
                          STACKTOP = sp;return;
                         }
                         }
                        }
                       } while(0);
                       $554 = (___cxa_allocate_exception(4)|0);
                       HEAP32[$554>>2] = ((20400 + 8|0));
                       __THREW__ = 0;
                       invoke_viii(422,($554|0),(20480|0),(396|0));
                       $555 = __THREW__; __THREW__ = 0;
                       $556 = $555&1;
                       if ($556) {
                        break;
                       }
                       // unreachable;
                      }
                     } while(0);
                     $563 = ___cxa_find_matching_catch()|0;
                     $564 = tempRet0;
                     $565 = HEAP32[$537>>2]|0;HEAP32[$537>>2] = (($565+-1)|0);
                     $566 = ($565|0)==(0);
                     if (!($566)) {
                      ___resumeException($563|0);
                      // unreachable;
                     }
                     $567 = HEAP32[$536>>2]|0;
                     $568 = (($567) + 8|0);
                     $569 = HEAP32[$568>>2]|0;
                     FUNCTION_TABLE_vi[$569 & 1023]($536);
                     ___resumeException($563|0);
                     // unreachable;
                    }
                   } while(0);
                   $449 = (___cxa_allocate_exception(4)|0);
                   HEAP32[$449>>2] = ((20400 + 8|0));
                   __THREW__ = 0;
                   invoke_viii(422,($449|0),(20480|0),(396|0));
                   $450 = __THREW__; __THREW__ = 0;
                   $451 = $450&1;
                   if ($451) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $458 = ___cxa_find_matching_catch()|0;
                 $459 = tempRet0;
                 $460 = HEAP32[$432>>2]|0;HEAP32[$432>>2] = (($460+-1)|0);
                 $461 = ($460|0)==(0);
                 if (!($461)) {
                  ___resumeException($458|0);
                  // unreachable;
                 }
                 $462 = HEAP32[$431>>2]|0;
                 $463 = (($462) + 8|0);
                 $464 = HEAP32[$463>>2]|0;
                 FUNCTION_TABLE_vi[$464 & 1023]($431);
                 ___resumeException($458|0);
                 // unreachable;
                }
               } while(0);
               $344 = (___cxa_allocate_exception(4)|0);
               HEAP32[$344>>2] = ((20400 + 8|0));
               __THREW__ = 0;
               invoke_viii(422,($344|0),(20480|0),(396|0));
               $345 = __THREW__; __THREW__ = 0;
               $346 = $345&1;
               if ($346) {
                break;
               }
               // unreachable;
              }
             } while(0);
             $353 = ___cxa_find_matching_catch()|0;
             $354 = tempRet0;
             $355 = HEAP32[$327>>2]|0;HEAP32[$327>>2] = (($355+-1)|0);
             $356 = ($355|0)==(0);
             if (!($356)) {
              ___resumeException($353|0);
              // unreachable;
             }
             $357 = HEAP32[$326>>2]|0;
             $358 = (($357) + 8|0);
             $359 = HEAP32[$358>>2]|0;
             FUNCTION_TABLE_vi[$359 & 1023]($326);
             ___resumeException($353|0);
             // unreachable;
            }
           } while(0);
           $239 = (___cxa_allocate_exception(4)|0);
           HEAP32[$239>>2] = ((20400 + 8|0));
           __THREW__ = 0;
           invoke_viii(422,($239|0),(20480|0),(396|0));
           $240 = __THREW__; __THREW__ = 0;
           $241 = $240&1;
           if (!($241)) {
            // unreachable;
           }
          }
         } while(0);
         $248 = ___cxa_find_matching_catch()|0;
         $249 = tempRet0;
         $250 = HEAP32[$222>>2]|0;HEAP32[$222>>2] = (($250+-1)|0);
         $251 = ($250|0)==(0);
         if (!($251)) {
          ___resumeException($248|0);
          // unreachable;
         }
         $252 = HEAP32[$221>>2]|0;
         $253 = (($252) + 8|0);
         $254 = HEAP32[$253>>2]|0;
         FUNCTION_TABLE_vi[$254 & 1023]($221);
         ___resumeException($248|0);
         // unreachable;
        }
       }
       $134 = (___cxa_allocate_exception(4)|0);
       HEAP32[$134>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($134|0),(20480|0),(396|0));
       $135 = __THREW__; __THREW__ = 0;
       $136 = $135&1;
       if (!($136)) {
        // unreachable;
       }
      }
     } while(0);
     $143 = ___cxa_find_matching_catch()|0;
     $144 = tempRet0;
     $145 = HEAP32[$117>>2]|0;HEAP32[$117>>2] = (($145+-1)|0);
     $146 = ($145|0)==(0);
     if (!($146)) {
      ___resumeException($143|0);
      // unreachable;
     }
     $147 = HEAP32[$116>>2]|0;
     $148 = (($147) + 8|0);
     $149 = HEAP32[$148>>2]|0;
     FUNCTION_TABLE_vi[$149 & 1023]($116);
     ___resumeException($143|0);
     // unreachable;
    }
   }
   $29 = (___cxa_allocate_exception(4)|0);
   HEAP32[$29>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($29|0),(20480|0),(396|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if (!($31)) {
    // unreachable;
   }
  }
 } while(0);
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $40 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($40+-1)|0);
 $41 = ($40|0)==(0);
 if (!($41)) {
  ___resumeException($38|0);
  // unreachable;
 }
 $42 = HEAP32[$11>>2]|0;
 $43 = (($42) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 FUNCTION_TABLE_vi[$44 & 1023]($11);
 ___resumeException($38|0);
 // unreachable;
}
function __ZN11before_exam11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i112 = 0, $$0$i$i25 = 0, $$0$i$i54 = 0, $$0$i$i83 = 0, $$byval_copy = 0, $$byval_copy151 = 0, $$byval_copy152 = 0, $$byval_copy153 = 0, $$byval_copy154 = 0, $$byval_copy155 = 0, $$byval_copy156 = 0, $$byval_copy157 = 0, $$byval_copy158 = 0, $$idx = 0, $$idx$val = 0.0, $$idx117 = 0, $$idx117$val = 0.0, $$idx118 = 0, $$idx118$val = 0.0;
 var $$idx119 = 0, $$idx119$val = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert139 = 0, $$phi$trans$insert142 = 0, $$phi$trans$insert145 = 0, $$phi$trans$insert148 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i104 = 0, $$pre$i$i17 = 0, $$pre$i$i46 = 0, $$pre$i$i75 = 0, $$pre141 = 0, $$pre144 = 0, $$pre147 = 0, $$pre150 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0;
 var $$sum$i$i$i$i100 = 0, $$sum$i$i$i$i13 = 0, $$sum$i$i$i$i42 = 0, $$sum$i$i$i$i71 = 0, $$sum$i$i106 = 0, $$sum$i$i19 = 0, $$sum$i$i48 = 0, $$sum$i$i77 = 0, $$sum$i3$i = 0, $$sum$i3$i37 = 0, $$sum$i3$i66 = 0, $$sum$i3$i8 = 0, $$sum$i3$i95 = 0, $$sum1$i$i = 0, $$sum1$i$i10 = 0, $$sum1$i$i39 = 0, $$sum1$i$i68 = 0, $$sum1$i$i97 = 0, $$sum120 = 0, $$sum121 = 0;
 var $$sum122 = 0, $$sum123 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum128 = 0, $$sum129 = 0, $$sum130 = 0, $$sum131 = 0, $$sum132 = 0, $$sum133 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s$i$i = 0, $__s$i$i1 = 0, $__s$i$i30 = 0, $__s$i$i59 = 0, $__s$i$i88 = 0, $option = 0, $tmpcast = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy158 = sp + 960|0;
 $$byval_copy157 = sp + 936|0;
 $$byval_copy156 = sp + 912|0;
 $$byval_copy155 = sp + 888|0;
 $$byval_copy154 = sp + 864|0;
 $$byval_copy153 = sp + 840|0;
 $tmpcast$byval_copy = sp + 816|0;
 $$byval_copy152 = sp + 792|0;
 $$byval_copy151 = sp + 768|0;
 $$byval_copy = sp + 744|0;
 $__s$i$i88 = sp + 736|0;
 $__s$i$i59 = sp + 728|0;
 $__s$i$i30 = sp + 720|0;
 $__s$i$i1 = sp + 184|0;
 $__s$i$i = sp;
 $option = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp + 40|0;
 $2 = sp + 192|0;
 $3 = sp + 216|0;
 $4 = sp + 240|0;
 $5 = sp + 384|0;
 $6 = sp + 408|0;
 $7 = sp + 552|0;
 $8 = sp + 576|0;
 $9 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(56)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum = (($12) + 28)|0;
 $13 = (($9) + ($$sum)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_ii(423,(11752|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 do {
  if (!($19)) {
   $20 = (($14) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($14) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $21;
   $25 = $23;
   $26 = (($24) - ($25))|0;
   $27 = $26 >> 2;
   $28 = ($27>>>0)>($17>>>0);
   if ($28) {
    $29 = (($23) + ($17<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0|0);
    if (!($31)) {
     $35 = HEAP32[$30>>2]|0;
     $36 = (($35) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     __THREW__ = 0;
     $38 = (invoke_iii($37|0,($30|0),10)|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break;
     }
     $48 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($48+-1)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      $50 = HEAP32[$14>>2]|0;
      $51 = (($50) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      FUNCTION_TABLE_vi[$52 & 1023]($14);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $53 = (($__s$i$i) + 4|0);
     HEAP32[$53>>2] = $9;
     $54 = HEAP32[$9>>2]|0;
     $55 = (($54) + -12|0);
     $56 = HEAP32[$55>>2]|0;
     $$sum$i3$i = (($56) + 16)|0;
     $57 = (($9) + ($$sum$i3$i)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0);
     do {
      if ($59) {
       $$sum1$i$i = (($56) + 72)|0;
       $60 = (($9) + ($$sum1$i$i)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0|0);
       if ($62) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($61|0));
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $92 = ___cxa_find_matching_catch(0|0)|0;
         $93 = tempRet0;
         $$0$i$i = $92;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $65 = HEAP32[$9>>2]|0;
        $66 = (($65) + -12|0);
        $67 = HEAP32[$66>>2]|0;
        $$sum$i$i$i$i = (($67) + 24)|0;
        $68 = (($9) + ($$sum$i$i$i$i)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         $86 = $67;
         label = 21;
        } else {
         $71 = (($69) + 24|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($69) + 28|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($72|0)==($74|0);
         if (!($75)) {
          $76 = (($72) + 1|0);
          HEAP32[$71>>2] = $76;
          HEAP8[$72>>0] = $38;
          label = 28;
          break;
         }
         $77 = HEAP32[$69>>2]|0;
         $78 = (($77) + 52|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = $38&255;
         __THREW__ = 0;
         $81 = (invoke_iii($79|0,($69|0),($80|0))|0);
         $82 = __THREW__; __THREW__ = 0;
         $83 = $82&1;
         if (!($83)) {
          $84 = ($81|0)==(-1);
          if (!($84)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$9>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $86 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $85 = (($9) + ($86)|0);
         $$sum$i$i = (($86) + 16)|0;
         $87 = (($9) + ($$sum$i$i)|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $88 | 1;
         __THREW__ = 0;
         invoke_vii(425,($85|0),($89|0));
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if (!($91)) {
          label = 28;
          break;
         }
        }
        $94 = ___cxa_find_matching_catch(0|0)|0;
        $95 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $94;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $96 = HEAP32[$9>>2]|0;
       $97 = (($96) + -12|0);
       $98 = HEAP32[$97>>2]|0;
       $$sum132 = (($98) + 16)|0;
       $99 = (($9) + ($$sum132)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $100 | 1;
       HEAP32[$99>>2] = $101;
       $$sum133 = (($98) + 20)|0;
       $102 = (($9) + ($$sum133)|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = $103 & 1;
       $105 = ($104|0)==(0);
       if ($105) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if (!($107)) {
        // unreachable;
       }
       $108 = ___cxa_find_matching_catch()|0;
       $109 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        $112 = ___cxa_find_matching_catch(0|0)|0;
        $113 = tempRet0;
        ___clang_call_terminate($112);
        // unreachable;
       } else {
        ___resumeException($108|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9);
     $114 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(72)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + -12|0);
     $117 = HEAP32[$116>>2]|0;
     $$sum120 = (($117) + 28)|0;
     $118 = (($114) + ($$sum120)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + 4|0);
     $121 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($121+1)|0);
     __THREW__ = 0;
     $122 = (invoke_ii(423,(11752|0))|0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     do {
      if (!($124)) {
       $125 = (($119) + 12|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($119) + 8|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $126;
       $130 = $128;
       $131 = (($129) - ($130))|0;
       $132 = $131 >> 2;
       $133 = ($132>>>0)>($122>>>0);
       if ($133) {
        $134 = (($128) + ($122<<2)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if (!($136)) {
         $140 = HEAP32[$135>>2]|0;
         $141 = (($140) + 28|0);
         $142 = HEAP32[$141>>2]|0;
         __THREW__ = 0;
         $143 = (invoke_iii($142|0,($135|0),10)|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          break;
         }
         $153 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($153+-1)|0);
         $154 = ($153|0)==(0);
         if ($154) {
          $155 = HEAP32[$119>>2]|0;
          $156 = (($155) + 8|0);
          $157 = HEAP32[$156>>2]|0;
          FUNCTION_TABLE_vi[$157 & 1023]($119);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $158 = (($__s$i$i1) + 4|0);
         HEAP32[$158>>2] = $114;
         $159 = HEAP32[$114>>2]|0;
         $160 = (($159) + -12|0);
         $161 = HEAP32[$160>>2]|0;
         $$sum$i3$i8 = (($161) + 16)|0;
         $162 = (($114) + ($$sum$i3$i8)|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0);
         L49: do {
          if ($164) {
           $$sum1$i$i10 = (($161) + 72)|0;
           $165 = (($114) + ($$sum1$i$i10)|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = ($166|0)==(0|0);
           if ($167) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($166|0));
            $168 = __THREW__; __THREW__ = 0;
            $169 = $168&1;
            if ($169) {
             $197 = ___cxa_find_matching_catch(0|0)|0;
             $198 = tempRet0;
             $$0$i$i25 = $197;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $170 = HEAP32[$114>>2]|0;
            $171 = (($170) + -12|0);
            $172 = HEAP32[$171>>2]|0;
            $$sum$i$i$i$i13 = (($172) + 24)|0;
            $173 = (($114) + ($$sum$i$i$i$i13)|0);
            $174 = HEAP32[$173>>2]|0;
            $175 = ($174|0)==(0|0);
            do {
             if ($175) {
              $191 = $172;
              label = 52;
             } else {
              $176 = (($174) + 24|0);
              $177 = HEAP32[$176>>2]|0;
              $178 = (($174) + 28|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = ($177|0)==($179|0);
              if (!($180)) {
               $181 = (($177) + 1|0);
               HEAP32[$176>>2] = $181;
               HEAP8[$177>>0] = $143;
               label = 59;
               break L49;
              }
              $182 = HEAP32[$174>>2]|0;
              $183 = (($182) + 52|0);
              $184 = HEAP32[$183>>2]|0;
              $185 = $143&255;
              __THREW__ = 0;
              $186 = (invoke_iii($184|0,($174|0),($185|0))|0);
              $187 = __THREW__; __THREW__ = 0;
              $188 = $187&1;
              if ($188) {
               break;
              }
              $189 = ($186|0)==(-1);
              if (!($189)) {
               label = 59;
               break L49;
              }
              $$pre$i$i17 = HEAP32[$114>>2]|0;
              $$phi$trans$insert139 = (($$pre$i$i17) + -12|0);
              $$pre141 = HEAP32[$$phi$trans$insert139>>2]|0;
              $191 = $$pre141;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $190 = (($114) + ($191)|0);
             $$sum$i$i19 = (($191) + 16)|0;
             $192 = (($114) + ($$sum$i$i19)|0);
             $193 = HEAP32[$192>>2]|0;
             $194 = $193 | 1;
             __THREW__ = 0;
             invoke_vii(425,($190|0),($194|0));
             $195 = __THREW__; __THREW__ = 0;
             $196 = $195&1;
             if (!($196)) {
              label = 59;
              break;
             }
            }
            $199 = ___cxa_find_matching_catch(0|0)|0;
            $200 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $199;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $201 = HEAP32[$114>>2]|0;
           $202 = (($201) + -12|0);
           $203 = HEAP32[$202>>2]|0;
           $$sum130 = (($203) + 16)|0;
           $204 = (($114) + ($$sum130)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = $205 | 1;
           HEAP32[$204>>2] = $206;
           $$sum131 = (($203) + 20)|0;
           $207 = (($114) + ($$sum131)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = $208 & 1;
           $210 = ($209|0)==(0);
           if ($210) {
            ___cxa_end_catch();
            break;
           }
           __THREW__ = 0;
           invoke_v(426);
           $211 = __THREW__; __THREW__ = 0;
           $212 = $211&1;
           if (!($212)) {
            // unreachable;
           }
           $213 = ___cxa_find_matching_catch()|0;
           $214 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $215 = __THREW__; __THREW__ = 0;
           $216 = $215&1;
           if ($216) {
            $217 = ___cxa_find_matching_catch(0|0)|0;
            $218 = tempRet0;
            ___clang_call_terminate($217);
            // unreachable;
           } else {
            ___resumeException($213|0);
            // unreachable;
           }
          } else {
           label = 59;
          }
         } while(0);
         if ((label|0) == 59) {
          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         }
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($114);
         $219 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(88)|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = (($220) + -12|0);
         $222 = HEAP32[$221>>2]|0;
         $$sum121 = (($222) + 28)|0;
         $223 = (($219) + ($$sum121)|0);
         $224 = HEAP32[$223>>2]|0;
         $225 = (($224) + 4|0);
         $226 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($226+1)|0);
         __THREW__ = 0;
         $227 = (invoke_ii(423,(11752|0))|0);
         $228 = __THREW__; __THREW__ = 0;
         $229 = $228&1;
         L79: do {
          if (!($229)) {
           $230 = (($224) + 12|0);
           $231 = HEAP32[$230>>2]|0;
           $232 = (($224) + 8|0);
           $233 = HEAP32[$232>>2]|0;
           $234 = $231;
           $235 = $233;
           $236 = (($234) - ($235))|0;
           $237 = $236 >> 2;
           $238 = ($237>>>0)>($227>>>0);
           do {
            if ($238) {
             $239 = (($233) + ($227<<2)|0);
             $240 = HEAP32[$239>>2]|0;
             $241 = ($240|0)==(0|0);
             if ($241) {
              break;
             }
             $245 = HEAP32[$240>>2]|0;
             $246 = (($245) + 28|0);
             $247 = HEAP32[$246>>2]|0;
             __THREW__ = 0;
             $248 = (invoke_iii($247|0,($240|0),10)|0);
             $249 = __THREW__; __THREW__ = 0;
             $250 = $249&1;
             if ($250) {
              break L79;
             }
             $258 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($258+-1)|0);
             $259 = ($258|0)==(0);
             if ($259) {
              $260 = HEAP32[$224>>2]|0;
              $261 = (($260) + 8|0);
              $262 = HEAP32[$261>>2]|0;
              FUNCTION_TABLE_vi[$262 & 1023]($224);
             }
             HEAP8[$__s$i$i30>>0] = 0;
             $263 = (($__s$i$i30) + 4|0);
             HEAP32[$263>>2] = $219;
             $264 = HEAP32[$219>>2]|0;
             $265 = (($264) + -12|0);
             $266 = HEAP32[$265>>2]|0;
             $$sum$i3$i37 = (($266) + 16)|0;
             $267 = (($219) + ($$sum$i3$i37)|0);
             $268 = HEAP32[$267>>2]|0;
             $269 = ($268|0)==(0);
             L88: do {
              if ($269) {
               $$sum1$i$i39 = (($266) + 72)|0;
               $270 = (($219) + ($$sum1$i$i39)|0);
               $271 = HEAP32[$270>>2]|0;
               $272 = ($271|0)==(0|0);
               do {
                if ($272) {
                 label = 77;
                } else {
                 __THREW__ = 0;
                 invoke_vi(424,($271|0));
                 $273 = __THREW__; __THREW__ = 0;
                 $274 = $273&1;
                 if (!($274)) {
                  label = 77;
                  break;
                 }
                 $302 = ___cxa_find_matching_catch(0|0)|0;
                 $303 = tempRet0;
                 $$0$i$i54 = $302;
                }
               } while(0);
               if ((label|0) == 77) {
                HEAP8[$__s$i$i30>>0] = 1;
                $275 = HEAP32[$219>>2]|0;
                $276 = (($275) + -12|0);
                $277 = HEAP32[$276>>2]|0;
                $$sum$i$i$i$i42 = (($277) + 24)|0;
                $278 = (($219) + ($$sum$i$i$i$i42)|0);
                $279 = HEAP32[$278>>2]|0;
                $280 = ($279|0)==(0|0);
                do {
                 if ($280) {
                  $296 = $277;
                  label = 83;
                 } else {
                  $281 = (($279) + 24|0);
                  $282 = HEAP32[$281>>2]|0;
                  $283 = (($279) + 28|0);
                  $284 = HEAP32[$283>>2]|0;
                  $285 = ($282|0)==($284|0);
                  if (!($285)) {
                   $286 = (($282) + 1|0);
                   HEAP32[$281>>2] = $286;
                   HEAP8[$282>>0] = $248;
                   label = 90;
                   break L88;
                  }
                  $287 = HEAP32[$279>>2]|0;
                  $288 = (($287) + 52|0);
                  $289 = HEAP32[$288>>2]|0;
                  $290 = $248&255;
                  __THREW__ = 0;
                  $291 = (invoke_iii($289|0,($279|0),($290|0))|0);
                  $292 = __THREW__; __THREW__ = 0;
                  $293 = $292&1;
                  if ($293) {
                   break;
                  }
                  $294 = ($291|0)==(-1);
                  if (!($294)) {
                   label = 90;
                   break L88;
                  }
                  $$pre$i$i46 = HEAP32[$219>>2]|0;
                  $$phi$trans$insert142 = (($$pre$i$i46) + -12|0);
                  $$pre144 = HEAP32[$$phi$trans$insert142>>2]|0;
                  $296 = $$pre144;
                  label = 83;
                 }
                } while(0);
                if ((label|0) == 83) {
                 $295 = (($219) + ($296)|0);
                 $$sum$i$i48 = (($296) + 16)|0;
                 $297 = (($219) + ($$sum$i$i48)|0);
                 $298 = HEAP32[$297>>2]|0;
                 $299 = $298 | 1;
                 __THREW__ = 0;
                 invoke_vii(425,($295|0),($299|0));
                 $300 = __THREW__; __THREW__ = 0;
                 $301 = $300&1;
                 if (!($301)) {
                  label = 90;
                  break;
                 }
                }
                $304 = ___cxa_find_matching_catch(0|0)|0;
                $305 = tempRet0;
                __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
                $$0$i$i54 = $304;
               }
               (___cxa_begin_catch(($$0$i$i54|0))|0);
               $306 = HEAP32[$219>>2]|0;
               $307 = (($306) + -12|0);
               $308 = HEAP32[$307>>2]|0;
               $$sum128 = (($308) + 16)|0;
               $309 = (($219) + ($$sum128)|0);
               $310 = HEAP32[$309>>2]|0;
               $311 = $310 | 1;
               HEAP32[$309>>2] = $311;
               $$sum129 = (($308) + 20)|0;
               $312 = (($219) + ($$sum129)|0);
               $313 = HEAP32[$312>>2]|0;
               $314 = $313 & 1;
               $315 = ($314|0)==(0);
               if ($315) {
                ___cxa_end_catch();
                break;
               }
               __THREW__ = 0;
               invoke_v(426);
               $316 = __THREW__; __THREW__ = 0;
               $317 = $316&1;
               if (!($317)) {
                // unreachable;
               }
               $318 = ___cxa_find_matching_catch()|0;
               $319 = tempRet0;
               __THREW__ = 0;
               invoke_v(427);
               $320 = __THREW__; __THREW__ = 0;
               $321 = $320&1;
               if ($321) {
                $322 = ___cxa_find_matching_catch(0|0)|0;
                $323 = tempRet0;
                ___clang_call_terminate($322);
                // unreachable;
               } else {
                ___resumeException($318|0);
                // unreachable;
               }
              } else {
               label = 90;
              }
             } while(0);
             if ((label|0) == 90) {
              __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
             }
             __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($219);
             $324 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(120)|0);
             $325 = HEAP32[$324>>2]|0;
             $326 = (($325) + -12|0);
             $327 = HEAP32[$326>>2]|0;
             $$sum122 = (($327) + 28)|0;
             $328 = (($324) + ($$sum122)|0);
             $329 = HEAP32[$328>>2]|0;
             $330 = (($329) + 4|0);
             $331 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($331+1)|0);
             __THREW__ = 0;
             $332 = (invoke_ii(423,(11752|0))|0);
             $333 = __THREW__; __THREW__ = 0;
             $334 = $333&1;
             L118: do {
              if (!($334)) {
               $335 = (($329) + 12|0);
               $336 = HEAP32[$335>>2]|0;
               $337 = (($329) + 8|0);
               $338 = HEAP32[$337>>2]|0;
               $339 = $336;
               $340 = $338;
               $341 = (($339) - ($340))|0;
               $342 = $341 >> 2;
               $343 = ($342>>>0)>($332>>>0);
               do {
                if ($343) {
                 $344 = (($338) + ($332<<2)|0);
                 $345 = HEAP32[$344>>2]|0;
                 $346 = ($345|0)==(0|0);
                 if ($346) {
                  break;
                 }
                 $350 = HEAP32[$345>>2]|0;
                 $351 = (($350) + 28|0);
                 $352 = HEAP32[$351>>2]|0;
                 __THREW__ = 0;
                 $353 = (invoke_iii($352|0,($345|0),10)|0);
                 $354 = __THREW__; __THREW__ = 0;
                 $355 = $354&1;
                 if ($355) {
                  break L118;
                 }
                 $363 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($363+-1)|0);
                 $364 = ($363|0)==(0);
                 if ($364) {
                  $365 = HEAP32[$329>>2]|0;
                  $366 = (($365) + 8|0);
                  $367 = HEAP32[$366>>2]|0;
                  FUNCTION_TABLE_vi[$367 & 1023]($329);
                 }
                 HEAP8[$__s$i$i59>>0] = 0;
                 $368 = (($__s$i$i59) + 4|0);
                 HEAP32[$368>>2] = $324;
                 $369 = HEAP32[$324>>2]|0;
                 $370 = (($369) + -12|0);
                 $371 = HEAP32[$370>>2]|0;
                 $$sum$i3$i66 = (($371) + 16)|0;
                 $372 = (($324) + ($$sum$i3$i66)|0);
                 $373 = HEAP32[$372>>2]|0;
                 $374 = ($373|0)==(0);
                 L127: do {
                  if ($374) {
                   $$sum1$i$i68 = (($371) + 72)|0;
                   $375 = (($324) + ($$sum1$i$i68)|0);
                   $376 = HEAP32[$375>>2]|0;
                   $377 = ($376|0)==(0|0);
                   do {
                    if ($377) {
                     label = 108;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(424,($376|0));
                     $378 = __THREW__; __THREW__ = 0;
                     $379 = $378&1;
                     if (!($379)) {
                      label = 108;
                      break;
                     }
                     $407 = ___cxa_find_matching_catch(0|0)|0;
                     $408 = tempRet0;
                     $$0$i$i83 = $407;
                    }
                   } while(0);
                   if ((label|0) == 108) {
                    HEAP8[$__s$i$i59>>0] = 1;
                    $380 = HEAP32[$324>>2]|0;
                    $381 = (($380) + -12|0);
                    $382 = HEAP32[$381>>2]|0;
                    $$sum$i$i$i$i71 = (($382) + 24)|0;
                    $383 = (($324) + ($$sum$i$i$i$i71)|0);
                    $384 = HEAP32[$383>>2]|0;
                    $385 = ($384|0)==(0|0);
                    do {
                     if ($385) {
                      $401 = $382;
                      label = 114;
                     } else {
                      $386 = (($384) + 24|0);
                      $387 = HEAP32[$386>>2]|0;
                      $388 = (($384) + 28|0);
                      $389 = HEAP32[$388>>2]|0;
                      $390 = ($387|0)==($389|0);
                      if (!($390)) {
                       $391 = (($387) + 1|0);
                       HEAP32[$386>>2] = $391;
                       HEAP8[$387>>0] = $353;
                       label = 121;
                       break L127;
                      }
                      $392 = HEAP32[$384>>2]|0;
                      $393 = (($392) + 52|0);
                      $394 = HEAP32[$393>>2]|0;
                      $395 = $353&255;
                      __THREW__ = 0;
                      $396 = (invoke_iii($394|0,($384|0),($395|0))|0);
                      $397 = __THREW__; __THREW__ = 0;
                      $398 = $397&1;
                      if ($398) {
                       break;
                      }
                      $399 = ($396|0)==(-1);
                      if (!($399)) {
                       label = 121;
                       break L127;
                      }
                      $$pre$i$i75 = HEAP32[$324>>2]|0;
                      $$phi$trans$insert145 = (($$pre$i$i75) + -12|0);
                      $$pre147 = HEAP32[$$phi$trans$insert145>>2]|0;
                      $401 = $$pre147;
                      label = 114;
                     }
                    } while(0);
                    if ((label|0) == 114) {
                     $400 = (($324) + ($401)|0);
                     $$sum$i$i77 = (($401) + 16)|0;
                     $402 = (($324) + ($$sum$i$i77)|0);
                     $403 = HEAP32[$402>>2]|0;
                     $404 = $403 | 1;
                     __THREW__ = 0;
                     invoke_vii(425,($400|0),($404|0));
                     $405 = __THREW__; __THREW__ = 0;
                     $406 = $405&1;
                     if (!($406)) {
                      label = 121;
                      break;
                     }
                    }
                    $409 = ___cxa_find_matching_catch(0|0)|0;
                    $410 = tempRet0;
                    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                    $$0$i$i83 = $409;
                   }
                   (___cxa_begin_catch(($$0$i$i83|0))|0);
                   $411 = HEAP32[$324>>2]|0;
                   $412 = (($411) + -12|0);
                   $413 = HEAP32[$412>>2]|0;
                   $$sum126 = (($413) + 16)|0;
                   $414 = (($324) + ($$sum126)|0);
                   $415 = HEAP32[$414>>2]|0;
                   $416 = $415 | 1;
                   HEAP32[$414>>2] = $416;
                   $$sum127 = (($413) + 20)|0;
                   $417 = (($324) + ($$sum127)|0);
                   $418 = HEAP32[$417>>2]|0;
                   $419 = $418 & 1;
                   $420 = ($419|0)==(0);
                   if ($420) {
                    ___cxa_end_catch();
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(426);
                   $421 = __THREW__; __THREW__ = 0;
                   $422 = $421&1;
                   if (!($422)) {
                    // unreachable;
                   }
                   $423 = ___cxa_find_matching_catch()|0;
                   $424 = tempRet0;
                   __THREW__ = 0;
                   invoke_v(427);
                   $425 = __THREW__; __THREW__ = 0;
                   $426 = $425&1;
                   if ($426) {
                    $427 = ___cxa_find_matching_catch(0|0)|0;
                    $428 = tempRet0;
                    ___clang_call_terminate($427);
                    // unreachable;
                   } else {
                    ___resumeException($423|0);
                    // unreachable;
                   }
                  } else {
                   label = 121;
                  }
                 } while(0);
                 if ((label|0) == 121) {
                  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                 }
                 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($324);
                 $429 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(136)|0);
                 $430 = HEAP32[$429>>2]|0;
                 $431 = (($430) + -12|0);
                 $432 = HEAP32[$431>>2]|0;
                 $$sum123 = (($432) + 28)|0;
                 $433 = (($429) + ($$sum123)|0);
                 $434 = HEAP32[$433>>2]|0;
                 $435 = (($434) + 4|0);
                 $436 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($436+1)|0);
                 __THREW__ = 0;
                 $437 = (invoke_ii(423,(11752|0))|0);
                 $438 = __THREW__; __THREW__ = 0;
                 $439 = $438&1;
                 L157: do {
                  if (!($439)) {
                   $440 = (($434) + 12|0);
                   $441 = HEAP32[$440>>2]|0;
                   $442 = (($434) + 8|0);
                   $443 = HEAP32[$442>>2]|0;
                   $444 = $441;
                   $445 = $443;
                   $446 = (($444) - ($445))|0;
                   $447 = $446 >> 2;
                   $448 = ($447>>>0)>($437>>>0);
                   do {
                    if ($448) {
                     $449 = (($443) + ($437<<2)|0);
                     $450 = HEAP32[$449>>2]|0;
                     $451 = ($450|0)==(0|0);
                     if ($451) {
                      break;
                     }
                     $455 = HEAP32[$450>>2]|0;
                     $456 = (($455) + 28|0);
                     $457 = HEAP32[$456>>2]|0;
                     __THREW__ = 0;
                     $458 = (invoke_iii($457|0,($450|0),10)|0);
                     $459 = __THREW__; __THREW__ = 0;
                     $460 = $459&1;
                     if ($460) {
                      break L157;
                     }
                     $468 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($468+-1)|0);
                     $469 = ($468|0)==(0);
                     if ($469) {
                      $470 = HEAP32[$434>>2]|0;
                      $471 = (($470) + 8|0);
                      $472 = HEAP32[$471>>2]|0;
                      FUNCTION_TABLE_vi[$472 & 1023]($434);
                     }
                     HEAP8[$__s$i$i88>>0] = 0;
                     $473 = (($__s$i$i88) + 4|0);
                     HEAP32[$473>>2] = $429;
                     $474 = HEAP32[$429>>2]|0;
                     $475 = (($474) + -12|0);
                     $476 = HEAP32[$475>>2]|0;
                     $$sum$i3$i95 = (($476) + 16)|0;
                     $477 = (($429) + ($$sum$i3$i95)|0);
                     $478 = HEAP32[$477>>2]|0;
                     $479 = ($478|0)==(0);
                     L166: do {
                      if ($479) {
                       $$sum1$i$i97 = (($476) + 72)|0;
                       $480 = (($429) + ($$sum1$i$i97)|0);
                       $481 = HEAP32[$480>>2]|0;
                       $482 = ($481|0)==(0|0);
                       do {
                        if ($482) {
                         label = 139;
                        } else {
                         __THREW__ = 0;
                         invoke_vi(424,($481|0));
                         $483 = __THREW__; __THREW__ = 0;
                         $484 = $483&1;
                         if (!($484)) {
                          label = 139;
                          break;
                         }
                         $512 = ___cxa_find_matching_catch(0|0)|0;
                         $513 = tempRet0;
                         $$0$i$i112 = $512;
                        }
                       } while(0);
                       if ((label|0) == 139) {
                        HEAP8[$__s$i$i88>>0] = 1;
                        $485 = HEAP32[$429>>2]|0;
                        $486 = (($485) + -12|0);
                        $487 = HEAP32[$486>>2]|0;
                        $$sum$i$i$i$i100 = (($487) + 24)|0;
                        $488 = (($429) + ($$sum$i$i$i$i100)|0);
                        $489 = HEAP32[$488>>2]|0;
                        $490 = ($489|0)==(0|0);
                        do {
                         if ($490) {
                          $506 = $487;
                          label = 145;
                         } else {
                          $491 = (($489) + 24|0);
                          $492 = HEAP32[$491>>2]|0;
                          $493 = (($489) + 28|0);
                          $494 = HEAP32[$493>>2]|0;
                          $495 = ($492|0)==($494|0);
                          if (!($495)) {
                           $496 = (($492) + 1|0);
                           HEAP32[$491>>2] = $496;
                           HEAP8[$492>>0] = $458;
                           label = 152;
                           break L166;
                          }
                          $497 = HEAP32[$489>>2]|0;
                          $498 = (($497) + 52|0);
                          $499 = HEAP32[$498>>2]|0;
                          $500 = $458&255;
                          __THREW__ = 0;
                          $501 = (invoke_iii($499|0,($489|0),($500|0))|0);
                          $502 = __THREW__; __THREW__ = 0;
                          $503 = $502&1;
                          if ($503) {
                           break;
                          }
                          $504 = ($501|0)==(-1);
                          if (!($504)) {
                           label = 152;
                           break L166;
                          }
                          $$pre$i$i104 = HEAP32[$429>>2]|0;
                          $$phi$trans$insert148 = (($$pre$i$i104) + -12|0);
                          $$pre150 = HEAP32[$$phi$trans$insert148>>2]|0;
                          $506 = $$pre150;
                          label = 145;
                         }
                        } while(0);
                        if ((label|0) == 145) {
                         $505 = (($429) + ($506)|0);
                         $$sum$i$i106 = (($506) + 16)|0;
                         $507 = (($429) + ($$sum$i$i106)|0);
                         $508 = HEAP32[$507>>2]|0;
                         $509 = $508 | 1;
                         __THREW__ = 0;
                         invoke_vii(425,($505|0),($509|0));
                         $510 = __THREW__; __THREW__ = 0;
                         $511 = $510&1;
                         if (!($511)) {
                          label = 152;
                          break;
                         }
                        }
                        $514 = ___cxa_find_matching_catch(0|0)|0;
                        $515 = tempRet0;
                        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                        $$0$i$i112 = $514;
                       }
                       (___cxa_begin_catch(($$0$i$i112|0))|0);
                       $516 = HEAP32[$429>>2]|0;
                       $517 = (($516) + -12|0);
                       $518 = HEAP32[$517>>2]|0;
                       $$sum124 = (($518) + 16)|0;
                       $519 = (($429) + ($$sum124)|0);
                       $520 = HEAP32[$519>>2]|0;
                       $521 = $520 | 1;
                       HEAP32[$519>>2] = $521;
                       $$sum125 = (($518) + 20)|0;
                       $522 = (($429) + ($$sum125)|0);
                       $523 = HEAP32[$522>>2]|0;
                       $524 = $523 & 1;
                       $525 = ($524|0)==(0);
                       if ($525) {
                        ___cxa_end_catch();
                        break;
                       }
                       __THREW__ = 0;
                       invoke_v(426);
                       $526 = __THREW__; __THREW__ = 0;
                       $527 = $526&1;
                       if (!($527)) {
                        // unreachable;
                       }
                       $528 = ___cxa_find_matching_catch()|0;
                       $529 = tempRet0;
                       __THREW__ = 0;
                       invoke_v(427);
                       $530 = __THREW__; __THREW__ = 0;
                       $531 = $530&1;
                       if ($531) {
                        $532 = ___cxa_find_matching_catch(0|0)|0;
                        $533 = tempRet0;
                        ___clang_call_terminate($532);
                        // unreachable;
                       } else {
                        ___resumeException($528|0);
                        // unreachable;
                       }
                      } else {
                       label = 152;
                      }
                     } while(0);
                     if ((label|0) == 152) {
                      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                     }
                     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($429);
                     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($option);
                     $534 = HEAP32[$option>>2]|0;
                     switch ($534|0) {
                     case 4:  {
                      $$idx = (($_hero) + 44|0);
                      $$idx$val = +HEAPF32[$$idx>>2];
                      $557 = (+__ZN4hero25get_energy_consuming_rateEv($$idx$val));
                      HEAPF32[$5>>2] = $557;
                      $558 = (($5) + 4|0);
                      HEAPF32[$558>>2] = -2.0;
                      $559 = (($5) + 8|0);
                      HEAPF32[$559>>2] = 5.0;
                      $560 = (($5) + 12|0);
                      HEAPF32[$560>>2] = -4.0;
                      $561 = (($5) + 16|0);
                      HEAPF32[$561>>2] = 0.0;
                      $562 = (($5) + 20|0);
                      HEAPF32[$562>>2] = 0.0;
                      $563 = (($_hero) + 76|0);
                      _memcpy(($6|0),($563|0),144)|0;
                      $564 = (($6) + 72|0);
                      ;HEAP32[$$byval_copy155+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy155+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy155+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy155+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy155+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$$byval_copy155+20>>2]=HEAP32[$5+20>>2]|0;
                      ;HEAP32[$$byval_copy156+0>>2]=HEAP32[$564+0>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$564+4>>2]|0;HEAP32[$$byval_copy156+8>>2]=HEAP32[$564+8>>2]|0;HEAP32[$$byval_copy156+12>>2]=HEAP32[$564+12>>2]|0;HEAP32[$$byval_copy156+16>>2]=HEAP32[$564+16>>2]|0;HEAP32[$$byval_copy156+20>>2]=HEAP32[$564+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy155,$$byval_copy156,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 3:  {
                      $$idx117 = (($_hero) + 44|0);
                      $$idx117$val = +HEAPF32[$$idx117>>2];
                      $549 = (+__ZN4hero25get_energy_consuming_rateEv($$idx117$val));
                      HEAPF32[$3>>2] = $549;
                      $550 = (($3) + 4|0);
                      HEAPF32[$550>>2] = 6.0;
                      $551 = (($3) + 8|0);
                      HEAPF32[$551>>2] = 1.0;
                      $552 = (($3) + 12|0);
                      HEAPF32[$552>>2] = -6.0;
                      $553 = (($3) + 16|0);
                      HEAPF32[$553>>2] = 0.800000011920928955078;
                      $554 = (($3) + 20|0);
                      HEAPF32[$554>>2] = -3.59999990463256835938;
                      $555 = (($_hero) + 76|0);
                      _memcpy(($4|0),($555|0),144)|0;
                      $556 = (($4) + 48|0);
                      ;HEAP32[$$byval_copy153+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy153+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy153+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy153+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy153+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy153+20>>2]=HEAP32[$3+20>>2]|0;
                      ;HEAP32[$$byval_copy154+0>>2]=HEAP32[$556+0>>2]|0;HEAP32[$$byval_copy154+4>>2]=HEAP32[$556+4>>2]|0;HEAP32[$$byval_copy154+8>>2]=HEAP32[$556+8>>2]|0;HEAP32[$$byval_copy154+12>>2]=HEAP32[$556+12>>2]|0;HEAP32[$$byval_copy154+16>>2]=HEAP32[$556+16>>2]|0;HEAP32[$$byval_copy154+20>>2]=HEAP32[$556+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy153,$$byval_copy154,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 1:  {
                      $$idx119 = (($_hero) + 44|0);
                      $$idx119$val = +HEAPF32[$$idx119>>2];
                      $535 = (+__ZN4hero25get_energy_consuming_rateEv($$idx119$val));
                      HEAPF32[$0>>2] = $535;
                      $536 = (($0) + 4|0);
                      HEAPF32[$536>>2] = -1.60000002384185791016;
                      $537 = (($0) + 8|0);
                      HEAPF32[$537>>2] = 0.0;
                      $538 = (($0) + 12|0);
                      HEAPF32[$538>>2] = 3.0;
                      $539 = (($0) + 16|0);
                      HEAPF32[$539>>2] = 0.0;
                      $540 = (($0) + 20|0);
                      HEAPF32[$540>>2] = 9.6000003814697265625;
                      $541 = (($_hero) + 76|0);
                      _memcpy(($1|0),($541|0),144)|0;
                      $542 = (($1) + 24|0);
                      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
                      ;HEAP32[$$byval_copy151+0>>2]=HEAP32[$542+0>>2]|0;HEAP32[$$byval_copy151+4>>2]=HEAP32[$542+4>>2]|0;HEAP32[$$byval_copy151+8>>2]=HEAP32[$542+8>>2]|0;HEAP32[$$byval_copy151+12>>2]=HEAP32[$542+12>>2]|0;HEAP32[$$byval_copy151+16>>2]=HEAP32[$542+16>>2]|0;HEAP32[$$byval_copy151+20>>2]=HEAP32[$542+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy,$$byval_copy151,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 5:  {
                      HEAPF32[$7>>2] = 8.0;
                      $565 = (($7) + 4|0);
                      HEAPF32[$565>>2] = 0.0;
                      $566 = (($7) + 8|0);
                      HEAPF32[$566>>2] = 0.0;
                      $567 = (($7) + 12|0);
                      HEAPF32[$567>>2] = -3.0;
                      $568 = (($7) + 16|0);
                      HEAPF32[$568>>2] = 0.0;
                      $569 = (($7) + 20|0);
                      HEAPF32[$569>>2] = -2.5;
                      $570 = (($_hero) + 76|0);
                      _memcpy(($8|0),($570|0),144)|0;
                      $571 = (($8) + 96|0);
                      ;HEAP32[$$byval_copy157+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy157+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy157+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy157+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy157+20>>2]=HEAP32[$7+20>>2]|0;
                      ;HEAP32[$$byval_copy158+0>>2]=HEAP32[$571+0>>2]|0;HEAP32[$$byval_copy158+4>>2]=HEAP32[$571+4>>2]|0;HEAP32[$$byval_copy158+8>>2]=HEAP32[$571+8>>2]|0;HEAP32[$$byval_copy158+12>>2]=HEAP32[$571+12>>2]|0;HEAP32[$$byval_copy158+16>>2]=HEAP32[$571+16>>2]|0;HEAP32[$$byval_copy158+20>>2]=HEAP32[$571+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy157,$$byval_copy158,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 2:  {
                      $$idx118 = (($_hero) + 44|0);
                      $$idx118$val = +HEAPF32[$$idx118>>2];
                      $543 = (+__ZN4hero25get_energy_consuming_rateEv($$idx118$val));
                      HEAPF32[$2>>2] = $543;
                      $544 = (($2) + 4|0);
                      HEAPF32[$544>>2] = 6.0;
                      $545 = (($2) + 8|0);
                      HEAPF32[$545>>2] = 1.0;
                      $546 = (($2) + 12|0);
                      HEAPF32[$546>>2] = -8.0;
                      $547 = (($2) + 16|0);
                      HEAPF32[$547>>2] = 0.0;
                      $548 = (($2) + 20|0);
                      HEAPF32[$548>>2] = 7.5;
                      $tmpcast = (($_hero) + 76|0);
                      ;HEAP32[$$byval_copy152+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$$byval_copy152+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy152+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy152+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy152+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy152+20>>2]=HEAP32[$2+20>>2]|0;
                      ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$tmpcast+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$tmpcast+4>>2]|0;HEAP32[$tmpcast$byval_copy+8>>2]=HEAP32[$tmpcast+8>>2]|0;HEAP32[$tmpcast$byval_copy+12>>2]=HEAP32[$tmpcast+12>>2]|0;HEAP32[$tmpcast$byval_copy+16>>2]=HEAP32[$tmpcast+16>>2]|0;HEAP32[$tmpcast$byval_copy+20>>2]=HEAP32[$tmpcast+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy152,$tmpcast$byval_copy,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     default: {
                      STACKTOP = sp;return;
                     }
                     }
                    }
                   } while(0);
                   $452 = (___cxa_allocate_exception(4)|0);
                   HEAP32[$452>>2] = ((20400 + 8|0));
                   __THREW__ = 0;
                   invoke_viii(422,($452|0),(20480|0),(396|0));
                   $453 = __THREW__; __THREW__ = 0;
                   $454 = $453&1;
                   if ($454) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $461 = ___cxa_find_matching_catch()|0;
                 $462 = tempRet0;
                 $463 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($463+-1)|0);
                 $464 = ($463|0)==(0);
                 if (!($464)) {
                  ___resumeException($461|0);
                  // unreachable;
                 }
                 $465 = HEAP32[$434>>2]|0;
                 $466 = (($465) + 8|0);
                 $467 = HEAP32[$466>>2]|0;
                 FUNCTION_TABLE_vi[$467 & 1023]($434);
                 ___resumeException($461|0);
                 // unreachable;
                }
               } while(0);
               $347 = (___cxa_allocate_exception(4)|0);
               HEAP32[$347>>2] = ((20400 + 8|0));
               __THREW__ = 0;
               invoke_viii(422,($347|0),(20480|0),(396|0));
               $348 = __THREW__; __THREW__ = 0;
               $349 = $348&1;
               if ($349) {
                break;
               }
               // unreachable;
              }
             } while(0);
             $356 = ___cxa_find_matching_catch()|0;
             $357 = tempRet0;
             $358 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($358+-1)|0);
             $359 = ($358|0)==(0);
             if (!($359)) {
              ___resumeException($356|0);
              // unreachable;
             }
             $360 = HEAP32[$329>>2]|0;
             $361 = (($360) + 8|0);
             $362 = HEAP32[$361>>2]|0;
             FUNCTION_TABLE_vi[$362 & 1023]($329);
             ___resumeException($356|0);
             // unreachable;
            }
           } while(0);
           $242 = (___cxa_allocate_exception(4)|0);
           HEAP32[$242>>2] = ((20400 + 8|0));
           __THREW__ = 0;
           invoke_viii(422,($242|0),(20480|0),(396|0));
           $243 = __THREW__; __THREW__ = 0;
           $244 = $243&1;
           if (!($244)) {
            // unreachable;
           }
          }
         } while(0);
         $251 = ___cxa_find_matching_catch()|0;
         $252 = tempRet0;
         $253 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($253+-1)|0);
         $254 = ($253|0)==(0);
         if (!($254)) {
          ___resumeException($251|0);
          // unreachable;
         }
         $255 = HEAP32[$224>>2]|0;
         $256 = (($255) + 8|0);
         $257 = HEAP32[$256>>2]|0;
         FUNCTION_TABLE_vi[$257 & 1023]($224);
         ___resumeException($251|0);
         // unreachable;
        }
       }
       $137 = (___cxa_allocate_exception(4)|0);
       HEAP32[$137>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($137|0),(20480|0),(396|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if (!($139)) {
        // unreachable;
       }
      }
     } while(0);
     $146 = ___cxa_find_matching_catch()|0;
     $147 = tempRet0;
     $148 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($148+-1)|0);
     $149 = ($148|0)==(0);
     if (!($149)) {
      ___resumeException($146|0);
      // unreachable;
     }
     $150 = HEAP32[$119>>2]|0;
     $151 = (($150) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     FUNCTION_TABLE_vi[$152 & 1023]($119);
     ___resumeException($146|0);
     // unreachable;
    }
   }
   $32 = (___cxa_allocate_exception(4)|0);
   HEAP32[$32>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($32|0),(20480|0),(396|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    // unreachable;
   }
  }
 } while(0);
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $43 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($43+-1)|0);
 $44 = ($43|0)==(0);
 if (!($44)) {
  ___resumeException($41|0);
  // unreachable;
 }
 $45 = HEAP32[$14>>2]|0;
 $46 = (($45) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vi[$47 & 1023]($14);
 ___resumeException($41|0);
 // unreachable;
}
function __ZN4exam11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10after_exam11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i112 = 0, $$0$i$i25 = 0, $$0$i$i54 = 0, $$0$i$i83 = 0, $$byval_copy = 0, $$byval_copy151 = 0, $$byval_copy152 = 0, $$byval_copy153 = 0, $$byval_copy154 = 0, $$byval_copy155 = 0, $$byval_copy156 = 0, $$byval_copy157 = 0, $$byval_copy158 = 0, $$idx = 0, $$idx$val = 0.0, $$idx117 = 0, $$idx117$val = 0.0, $$idx118 = 0, $$idx118$val = 0.0;
 var $$idx119 = 0, $$idx119$val = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert139 = 0, $$phi$trans$insert142 = 0, $$phi$trans$insert145 = 0, $$phi$trans$insert148 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i104 = 0, $$pre$i$i17 = 0, $$pre$i$i46 = 0, $$pre$i$i75 = 0, $$pre141 = 0, $$pre144 = 0, $$pre147 = 0, $$pre150 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0;
 var $$sum$i$i$i$i100 = 0, $$sum$i$i$i$i13 = 0, $$sum$i$i$i$i42 = 0, $$sum$i$i$i$i71 = 0, $$sum$i$i106 = 0, $$sum$i$i19 = 0, $$sum$i$i48 = 0, $$sum$i$i77 = 0, $$sum$i3$i = 0, $$sum$i3$i37 = 0, $$sum$i3$i66 = 0, $$sum$i3$i8 = 0, $$sum$i3$i95 = 0, $$sum1$i$i = 0, $$sum1$i$i10 = 0, $$sum1$i$i39 = 0, $$sum1$i$i68 = 0, $$sum1$i$i97 = 0, $$sum120 = 0, $$sum121 = 0;
 var $$sum122 = 0, $$sum123 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum128 = 0, $$sum129 = 0, $$sum130 = 0, $$sum131 = 0, $$sum132 = 0, $$sum133 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__s$i$i = 0, $__s$i$i1 = 0, $__s$i$i30 = 0, $__s$i$i59 = 0, $__s$i$i88 = 0, $option = 0, $tmpcast = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy158 = sp + 960|0;
 $$byval_copy157 = sp + 936|0;
 $$byval_copy156 = sp + 912|0;
 $$byval_copy155 = sp + 888|0;
 $$byval_copy154 = sp + 864|0;
 $$byval_copy153 = sp + 840|0;
 $tmpcast$byval_copy = sp + 816|0;
 $$byval_copy152 = sp + 792|0;
 $$byval_copy151 = sp + 768|0;
 $$byval_copy = sp + 744|0;
 $__s$i$i88 = sp + 736|0;
 $__s$i$i59 = sp + 728|0;
 $__s$i$i30 = sp + 720|0;
 $__s$i$i1 = sp + 184|0;
 $__s$i$i = sp;
 $option = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp + 40|0;
 $2 = sp + 192|0;
 $3 = sp + 216|0;
 $4 = sp + 240|0;
 $5 = sp + 384|0;
 $6 = sp + 408|0;
 $7 = sp + 552|0;
 $8 = sp + 576|0;
 $9 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(56)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum = (($12) + 28)|0;
 $13 = (($9) + ($$sum)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_ii(423,(11752|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 do {
  if (!($19)) {
   $20 = (($14) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($14) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $21;
   $25 = $23;
   $26 = (($24) - ($25))|0;
   $27 = $26 >> 2;
   $28 = ($27>>>0)>($17>>>0);
   if ($28) {
    $29 = (($23) + ($17<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0|0);
    if (!($31)) {
     $35 = HEAP32[$30>>2]|0;
     $36 = (($35) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     __THREW__ = 0;
     $38 = (invoke_iii($37|0,($30|0),10)|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break;
     }
     $48 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($48+-1)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      $50 = HEAP32[$14>>2]|0;
      $51 = (($50) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      FUNCTION_TABLE_vi[$52 & 1023]($14);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $53 = (($__s$i$i) + 4|0);
     HEAP32[$53>>2] = $9;
     $54 = HEAP32[$9>>2]|0;
     $55 = (($54) + -12|0);
     $56 = HEAP32[$55>>2]|0;
     $$sum$i3$i = (($56) + 16)|0;
     $57 = (($9) + ($$sum$i3$i)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0);
     do {
      if ($59) {
       $$sum1$i$i = (($56) + 72)|0;
       $60 = (($9) + ($$sum1$i$i)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0|0);
       if ($62) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($61|0));
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $92 = ___cxa_find_matching_catch(0|0)|0;
         $93 = tempRet0;
         $$0$i$i = $92;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $65 = HEAP32[$9>>2]|0;
        $66 = (($65) + -12|0);
        $67 = HEAP32[$66>>2]|0;
        $$sum$i$i$i$i = (($67) + 24)|0;
        $68 = (($9) + ($$sum$i$i$i$i)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         $86 = $67;
         label = 21;
        } else {
         $71 = (($69) + 24|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($69) + 28|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($72|0)==($74|0);
         if (!($75)) {
          $76 = (($72) + 1|0);
          HEAP32[$71>>2] = $76;
          HEAP8[$72>>0] = $38;
          label = 28;
          break;
         }
         $77 = HEAP32[$69>>2]|0;
         $78 = (($77) + 52|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = $38&255;
         __THREW__ = 0;
         $81 = (invoke_iii($79|0,($69|0),($80|0))|0);
         $82 = __THREW__; __THREW__ = 0;
         $83 = $82&1;
         if (!($83)) {
          $84 = ($81|0)==(-1);
          if (!($84)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$9>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $86 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $85 = (($9) + ($86)|0);
         $$sum$i$i = (($86) + 16)|0;
         $87 = (($9) + ($$sum$i$i)|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $88 | 1;
         __THREW__ = 0;
         invoke_vii(425,($85|0),($89|0));
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if (!($91)) {
          label = 28;
          break;
         }
        }
        $94 = ___cxa_find_matching_catch(0|0)|0;
        $95 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $94;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $96 = HEAP32[$9>>2]|0;
       $97 = (($96) + -12|0);
       $98 = HEAP32[$97>>2]|0;
       $$sum132 = (($98) + 16)|0;
       $99 = (($9) + ($$sum132)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $100 | 1;
       HEAP32[$99>>2] = $101;
       $$sum133 = (($98) + 20)|0;
       $102 = (($9) + ($$sum133)|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = $103 & 1;
       $105 = ($104|0)==(0);
       if ($105) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if (!($107)) {
        // unreachable;
       }
       $108 = ___cxa_find_matching_catch()|0;
       $109 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        $112 = ___cxa_find_matching_catch(0|0)|0;
        $113 = tempRet0;
        ___clang_call_terminate($112);
        // unreachable;
       } else {
        ___resumeException($108|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9);
     $114 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(72)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + -12|0);
     $117 = HEAP32[$116>>2]|0;
     $$sum120 = (($117) + 28)|0;
     $118 = (($114) + ($$sum120)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + 4|0);
     $121 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($121+1)|0);
     __THREW__ = 0;
     $122 = (invoke_ii(423,(11752|0))|0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     do {
      if (!($124)) {
       $125 = (($119) + 12|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($119) + 8|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $126;
       $130 = $128;
       $131 = (($129) - ($130))|0;
       $132 = $131 >> 2;
       $133 = ($132>>>0)>($122>>>0);
       if ($133) {
        $134 = (($128) + ($122<<2)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if (!($136)) {
         $140 = HEAP32[$135>>2]|0;
         $141 = (($140) + 28|0);
         $142 = HEAP32[$141>>2]|0;
         __THREW__ = 0;
         $143 = (invoke_iii($142|0,($135|0),10)|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          break;
         }
         $153 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($153+-1)|0);
         $154 = ($153|0)==(0);
         if ($154) {
          $155 = HEAP32[$119>>2]|0;
          $156 = (($155) + 8|0);
          $157 = HEAP32[$156>>2]|0;
          FUNCTION_TABLE_vi[$157 & 1023]($119);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $158 = (($__s$i$i1) + 4|0);
         HEAP32[$158>>2] = $114;
         $159 = HEAP32[$114>>2]|0;
         $160 = (($159) + -12|0);
         $161 = HEAP32[$160>>2]|0;
         $$sum$i3$i8 = (($161) + 16)|0;
         $162 = (($114) + ($$sum$i3$i8)|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0);
         L49: do {
          if ($164) {
           $$sum1$i$i10 = (($161) + 72)|0;
           $165 = (($114) + ($$sum1$i$i10)|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = ($166|0)==(0|0);
           if ($167) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($166|0));
            $168 = __THREW__; __THREW__ = 0;
            $169 = $168&1;
            if ($169) {
             $197 = ___cxa_find_matching_catch(0|0)|0;
             $198 = tempRet0;
             $$0$i$i25 = $197;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $170 = HEAP32[$114>>2]|0;
            $171 = (($170) + -12|0);
            $172 = HEAP32[$171>>2]|0;
            $$sum$i$i$i$i13 = (($172) + 24)|0;
            $173 = (($114) + ($$sum$i$i$i$i13)|0);
            $174 = HEAP32[$173>>2]|0;
            $175 = ($174|0)==(0|0);
            do {
             if ($175) {
              $191 = $172;
              label = 52;
             } else {
              $176 = (($174) + 24|0);
              $177 = HEAP32[$176>>2]|0;
              $178 = (($174) + 28|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = ($177|0)==($179|0);
              if (!($180)) {
               $181 = (($177) + 1|0);
               HEAP32[$176>>2] = $181;
               HEAP8[$177>>0] = $143;
               label = 59;
               break L49;
              }
              $182 = HEAP32[$174>>2]|0;
              $183 = (($182) + 52|0);
              $184 = HEAP32[$183>>2]|0;
              $185 = $143&255;
              __THREW__ = 0;
              $186 = (invoke_iii($184|0,($174|0),($185|0))|0);
              $187 = __THREW__; __THREW__ = 0;
              $188 = $187&1;
              if ($188) {
               break;
              }
              $189 = ($186|0)==(-1);
              if (!($189)) {
               label = 59;
               break L49;
              }
              $$pre$i$i17 = HEAP32[$114>>2]|0;
              $$phi$trans$insert139 = (($$pre$i$i17) + -12|0);
              $$pre141 = HEAP32[$$phi$trans$insert139>>2]|0;
              $191 = $$pre141;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $190 = (($114) + ($191)|0);
             $$sum$i$i19 = (($191) + 16)|0;
             $192 = (($114) + ($$sum$i$i19)|0);
             $193 = HEAP32[$192>>2]|0;
             $194 = $193 | 1;
             __THREW__ = 0;
             invoke_vii(425,($190|0),($194|0));
             $195 = __THREW__; __THREW__ = 0;
             $196 = $195&1;
             if (!($196)) {
              label = 59;
              break;
             }
            }
            $199 = ___cxa_find_matching_catch(0|0)|0;
            $200 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $199;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $201 = HEAP32[$114>>2]|0;
           $202 = (($201) + -12|0);
           $203 = HEAP32[$202>>2]|0;
           $$sum130 = (($203) + 16)|0;
           $204 = (($114) + ($$sum130)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = $205 | 1;
           HEAP32[$204>>2] = $206;
           $$sum131 = (($203) + 20)|0;
           $207 = (($114) + ($$sum131)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = $208 & 1;
           $210 = ($209|0)==(0);
           if ($210) {
            ___cxa_end_catch();
            break;
           }
           __THREW__ = 0;
           invoke_v(426);
           $211 = __THREW__; __THREW__ = 0;
           $212 = $211&1;
           if (!($212)) {
            // unreachable;
           }
           $213 = ___cxa_find_matching_catch()|0;
           $214 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $215 = __THREW__; __THREW__ = 0;
           $216 = $215&1;
           if ($216) {
            $217 = ___cxa_find_matching_catch(0|0)|0;
            $218 = tempRet0;
            ___clang_call_terminate($217);
            // unreachable;
           } else {
            ___resumeException($213|0);
            // unreachable;
           }
          } else {
           label = 59;
          }
         } while(0);
         if ((label|0) == 59) {
          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         }
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($114);
         $219 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(88)|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = (($220) + -12|0);
         $222 = HEAP32[$221>>2]|0;
         $$sum121 = (($222) + 28)|0;
         $223 = (($219) + ($$sum121)|0);
         $224 = HEAP32[$223>>2]|0;
         $225 = (($224) + 4|0);
         $226 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($226+1)|0);
         __THREW__ = 0;
         $227 = (invoke_ii(423,(11752|0))|0);
         $228 = __THREW__; __THREW__ = 0;
         $229 = $228&1;
         L79: do {
          if (!($229)) {
           $230 = (($224) + 12|0);
           $231 = HEAP32[$230>>2]|0;
           $232 = (($224) + 8|0);
           $233 = HEAP32[$232>>2]|0;
           $234 = $231;
           $235 = $233;
           $236 = (($234) - ($235))|0;
           $237 = $236 >> 2;
           $238 = ($237>>>0)>($227>>>0);
           do {
            if ($238) {
             $239 = (($233) + ($227<<2)|0);
             $240 = HEAP32[$239>>2]|0;
             $241 = ($240|0)==(0|0);
             if ($241) {
              break;
             }
             $245 = HEAP32[$240>>2]|0;
             $246 = (($245) + 28|0);
             $247 = HEAP32[$246>>2]|0;
             __THREW__ = 0;
             $248 = (invoke_iii($247|0,($240|0),10)|0);
             $249 = __THREW__; __THREW__ = 0;
             $250 = $249&1;
             if ($250) {
              break L79;
             }
             $258 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($258+-1)|0);
             $259 = ($258|0)==(0);
             if ($259) {
              $260 = HEAP32[$224>>2]|0;
              $261 = (($260) + 8|0);
              $262 = HEAP32[$261>>2]|0;
              FUNCTION_TABLE_vi[$262 & 1023]($224);
             }
             HEAP8[$__s$i$i30>>0] = 0;
             $263 = (($__s$i$i30) + 4|0);
             HEAP32[$263>>2] = $219;
             $264 = HEAP32[$219>>2]|0;
             $265 = (($264) + -12|0);
             $266 = HEAP32[$265>>2]|0;
             $$sum$i3$i37 = (($266) + 16)|0;
             $267 = (($219) + ($$sum$i3$i37)|0);
             $268 = HEAP32[$267>>2]|0;
             $269 = ($268|0)==(0);
             L88: do {
              if ($269) {
               $$sum1$i$i39 = (($266) + 72)|0;
               $270 = (($219) + ($$sum1$i$i39)|0);
               $271 = HEAP32[$270>>2]|0;
               $272 = ($271|0)==(0|0);
               do {
                if ($272) {
                 label = 77;
                } else {
                 __THREW__ = 0;
                 invoke_vi(424,($271|0));
                 $273 = __THREW__; __THREW__ = 0;
                 $274 = $273&1;
                 if (!($274)) {
                  label = 77;
                  break;
                 }
                 $302 = ___cxa_find_matching_catch(0|0)|0;
                 $303 = tempRet0;
                 $$0$i$i54 = $302;
                }
               } while(0);
               if ((label|0) == 77) {
                HEAP8[$__s$i$i30>>0] = 1;
                $275 = HEAP32[$219>>2]|0;
                $276 = (($275) + -12|0);
                $277 = HEAP32[$276>>2]|0;
                $$sum$i$i$i$i42 = (($277) + 24)|0;
                $278 = (($219) + ($$sum$i$i$i$i42)|0);
                $279 = HEAP32[$278>>2]|0;
                $280 = ($279|0)==(0|0);
                do {
                 if ($280) {
                  $296 = $277;
                  label = 83;
                 } else {
                  $281 = (($279) + 24|0);
                  $282 = HEAP32[$281>>2]|0;
                  $283 = (($279) + 28|0);
                  $284 = HEAP32[$283>>2]|0;
                  $285 = ($282|0)==($284|0);
                  if (!($285)) {
                   $286 = (($282) + 1|0);
                   HEAP32[$281>>2] = $286;
                   HEAP8[$282>>0] = $248;
                   label = 90;
                   break L88;
                  }
                  $287 = HEAP32[$279>>2]|0;
                  $288 = (($287) + 52|0);
                  $289 = HEAP32[$288>>2]|0;
                  $290 = $248&255;
                  __THREW__ = 0;
                  $291 = (invoke_iii($289|0,($279|0),($290|0))|0);
                  $292 = __THREW__; __THREW__ = 0;
                  $293 = $292&1;
                  if ($293) {
                   break;
                  }
                  $294 = ($291|0)==(-1);
                  if (!($294)) {
                   label = 90;
                   break L88;
                  }
                  $$pre$i$i46 = HEAP32[$219>>2]|0;
                  $$phi$trans$insert142 = (($$pre$i$i46) + -12|0);
                  $$pre144 = HEAP32[$$phi$trans$insert142>>2]|0;
                  $296 = $$pre144;
                  label = 83;
                 }
                } while(0);
                if ((label|0) == 83) {
                 $295 = (($219) + ($296)|0);
                 $$sum$i$i48 = (($296) + 16)|0;
                 $297 = (($219) + ($$sum$i$i48)|0);
                 $298 = HEAP32[$297>>2]|0;
                 $299 = $298 | 1;
                 __THREW__ = 0;
                 invoke_vii(425,($295|0),($299|0));
                 $300 = __THREW__; __THREW__ = 0;
                 $301 = $300&1;
                 if (!($301)) {
                  label = 90;
                  break;
                 }
                }
                $304 = ___cxa_find_matching_catch(0|0)|0;
                $305 = tempRet0;
                __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
                $$0$i$i54 = $304;
               }
               (___cxa_begin_catch(($$0$i$i54|0))|0);
               $306 = HEAP32[$219>>2]|0;
               $307 = (($306) + -12|0);
               $308 = HEAP32[$307>>2]|0;
               $$sum128 = (($308) + 16)|0;
               $309 = (($219) + ($$sum128)|0);
               $310 = HEAP32[$309>>2]|0;
               $311 = $310 | 1;
               HEAP32[$309>>2] = $311;
               $$sum129 = (($308) + 20)|0;
               $312 = (($219) + ($$sum129)|0);
               $313 = HEAP32[$312>>2]|0;
               $314 = $313 & 1;
               $315 = ($314|0)==(0);
               if ($315) {
                ___cxa_end_catch();
                break;
               }
               __THREW__ = 0;
               invoke_v(426);
               $316 = __THREW__; __THREW__ = 0;
               $317 = $316&1;
               if (!($317)) {
                // unreachable;
               }
               $318 = ___cxa_find_matching_catch()|0;
               $319 = tempRet0;
               __THREW__ = 0;
               invoke_v(427);
               $320 = __THREW__; __THREW__ = 0;
               $321 = $320&1;
               if ($321) {
                $322 = ___cxa_find_matching_catch(0|0)|0;
                $323 = tempRet0;
                ___clang_call_terminate($322);
                // unreachable;
               } else {
                ___resumeException($318|0);
                // unreachable;
               }
              } else {
               label = 90;
              }
             } while(0);
             if ((label|0) == 90) {
              __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
             }
             __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($219);
             $324 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(120)|0);
             $325 = HEAP32[$324>>2]|0;
             $326 = (($325) + -12|0);
             $327 = HEAP32[$326>>2]|0;
             $$sum122 = (($327) + 28)|0;
             $328 = (($324) + ($$sum122)|0);
             $329 = HEAP32[$328>>2]|0;
             $330 = (($329) + 4|0);
             $331 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($331+1)|0);
             __THREW__ = 0;
             $332 = (invoke_ii(423,(11752|0))|0);
             $333 = __THREW__; __THREW__ = 0;
             $334 = $333&1;
             L118: do {
              if (!($334)) {
               $335 = (($329) + 12|0);
               $336 = HEAP32[$335>>2]|0;
               $337 = (($329) + 8|0);
               $338 = HEAP32[$337>>2]|0;
               $339 = $336;
               $340 = $338;
               $341 = (($339) - ($340))|0;
               $342 = $341 >> 2;
               $343 = ($342>>>0)>($332>>>0);
               do {
                if ($343) {
                 $344 = (($338) + ($332<<2)|0);
                 $345 = HEAP32[$344>>2]|0;
                 $346 = ($345|0)==(0|0);
                 if ($346) {
                  break;
                 }
                 $350 = HEAP32[$345>>2]|0;
                 $351 = (($350) + 28|0);
                 $352 = HEAP32[$351>>2]|0;
                 __THREW__ = 0;
                 $353 = (invoke_iii($352|0,($345|0),10)|0);
                 $354 = __THREW__; __THREW__ = 0;
                 $355 = $354&1;
                 if ($355) {
                  break L118;
                 }
                 $363 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($363+-1)|0);
                 $364 = ($363|0)==(0);
                 if ($364) {
                  $365 = HEAP32[$329>>2]|0;
                  $366 = (($365) + 8|0);
                  $367 = HEAP32[$366>>2]|0;
                  FUNCTION_TABLE_vi[$367 & 1023]($329);
                 }
                 HEAP8[$__s$i$i59>>0] = 0;
                 $368 = (($__s$i$i59) + 4|0);
                 HEAP32[$368>>2] = $324;
                 $369 = HEAP32[$324>>2]|0;
                 $370 = (($369) + -12|0);
                 $371 = HEAP32[$370>>2]|0;
                 $$sum$i3$i66 = (($371) + 16)|0;
                 $372 = (($324) + ($$sum$i3$i66)|0);
                 $373 = HEAP32[$372>>2]|0;
                 $374 = ($373|0)==(0);
                 L127: do {
                  if ($374) {
                   $$sum1$i$i68 = (($371) + 72)|0;
                   $375 = (($324) + ($$sum1$i$i68)|0);
                   $376 = HEAP32[$375>>2]|0;
                   $377 = ($376|0)==(0|0);
                   do {
                    if ($377) {
                     label = 108;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(424,($376|0));
                     $378 = __THREW__; __THREW__ = 0;
                     $379 = $378&1;
                     if (!($379)) {
                      label = 108;
                      break;
                     }
                     $407 = ___cxa_find_matching_catch(0|0)|0;
                     $408 = tempRet0;
                     $$0$i$i83 = $407;
                    }
                   } while(0);
                   if ((label|0) == 108) {
                    HEAP8[$__s$i$i59>>0] = 1;
                    $380 = HEAP32[$324>>2]|0;
                    $381 = (($380) + -12|0);
                    $382 = HEAP32[$381>>2]|0;
                    $$sum$i$i$i$i71 = (($382) + 24)|0;
                    $383 = (($324) + ($$sum$i$i$i$i71)|0);
                    $384 = HEAP32[$383>>2]|0;
                    $385 = ($384|0)==(0|0);
                    do {
                     if ($385) {
                      $401 = $382;
                      label = 114;
                     } else {
                      $386 = (($384) + 24|0);
                      $387 = HEAP32[$386>>2]|0;
                      $388 = (($384) + 28|0);
                      $389 = HEAP32[$388>>2]|0;
                      $390 = ($387|0)==($389|0);
                      if (!($390)) {
                       $391 = (($387) + 1|0);
                       HEAP32[$386>>2] = $391;
                       HEAP8[$387>>0] = $353;
                       label = 121;
                       break L127;
                      }
                      $392 = HEAP32[$384>>2]|0;
                      $393 = (($392) + 52|0);
                      $394 = HEAP32[$393>>2]|0;
                      $395 = $353&255;
                      __THREW__ = 0;
                      $396 = (invoke_iii($394|0,($384|0),($395|0))|0);
                      $397 = __THREW__; __THREW__ = 0;
                      $398 = $397&1;
                      if ($398) {
                       break;
                      }
                      $399 = ($396|0)==(-1);
                      if (!($399)) {
                       label = 121;
                       break L127;
                      }
                      $$pre$i$i75 = HEAP32[$324>>2]|0;
                      $$phi$trans$insert145 = (($$pre$i$i75) + -12|0);
                      $$pre147 = HEAP32[$$phi$trans$insert145>>2]|0;
                      $401 = $$pre147;
                      label = 114;
                     }
                    } while(0);
                    if ((label|0) == 114) {
                     $400 = (($324) + ($401)|0);
                     $$sum$i$i77 = (($401) + 16)|0;
                     $402 = (($324) + ($$sum$i$i77)|0);
                     $403 = HEAP32[$402>>2]|0;
                     $404 = $403 | 1;
                     __THREW__ = 0;
                     invoke_vii(425,($400|0),($404|0));
                     $405 = __THREW__; __THREW__ = 0;
                     $406 = $405&1;
                     if (!($406)) {
                      label = 121;
                      break;
                     }
                    }
                    $409 = ___cxa_find_matching_catch(0|0)|0;
                    $410 = tempRet0;
                    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                    $$0$i$i83 = $409;
                   }
                   (___cxa_begin_catch(($$0$i$i83|0))|0);
                   $411 = HEAP32[$324>>2]|0;
                   $412 = (($411) + -12|0);
                   $413 = HEAP32[$412>>2]|0;
                   $$sum126 = (($413) + 16)|0;
                   $414 = (($324) + ($$sum126)|0);
                   $415 = HEAP32[$414>>2]|0;
                   $416 = $415 | 1;
                   HEAP32[$414>>2] = $416;
                   $$sum127 = (($413) + 20)|0;
                   $417 = (($324) + ($$sum127)|0);
                   $418 = HEAP32[$417>>2]|0;
                   $419 = $418 & 1;
                   $420 = ($419|0)==(0);
                   if ($420) {
                    ___cxa_end_catch();
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(426);
                   $421 = __THREW__; __THREW__ = 0;
                   $422 = $421&1;
                   if (!($422)) {
                    // unreachable;
                   }
                   $423 = ___cxa_find_matching_catch()|0;
                   $424 = tempRet0;
                   __THREW__ = 0;
                   invoke_v(427);
                   $425 = __THREW__; __THREW__ = 0;
                   $426 = $425&1;
                   if ($426) {
                    $427 = ___cxa_find_matching_catch(0|0)|0;
                    $428 = tempRet0;
                    ___clang_call_terminate($427);
                    // unreachable;
                   } else {
                    ___resumeException($423|0);
                    // unreachable;
                   }
                  } else {
                   label = 121;
                  }
                 } while(0);
                 if ((label|0) == 121) {
                  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                 }
                 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($324);
                 $429 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(136)|0);
                 $430 = HEAP32[$429>>2]|0;
                 $431 = (($430) + -12|0);
                 $432 = HEAP32[$431>>2]|0;
                 $$sum123 = (($432) + 28)|0;
                 $433 = (($429) + ($$sum123)|0);
                 $434 = HEAP32[$433>>2]|0;
                 $435 = (($434) + 4|0);
                 $436 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($436+1)|0);
                 __THREW__ = 0;
                 $437 = (invoke_ii(423,(11752|0))|0);
                 $438 = __THREW__; __THREW__ = 0;
                 $439 = $438&1;
                 L157: do {
                  if (!($439)) {
                   $440 = (($434) + 12|0);
                   $441 = HEAP32[$440>>2]|0;
                   $442 = (($434) + 8|0);
                   $443 = HEAP32[$442>>2]|0;
                   $444 = $441;
                   $445 = $443;
                   $446 = (($444) - ($445))|0;
                   $447 = $446 >> 2;
                   $448 = ($447>>>0)>($437>>>0);
                   do {
                    if ($448) {
                     $449 = (($443) + ($437<<2)|0);
                     $450 = HEAP32[$449>>2]|0;
                     $451 = ($450|0)==(0|0);
                     if ($451) {
                      break;
                     }
                     $455 = HEAP32[$450>>2]|0;
                     $456 = (($455) + 28|0);
                     $457 = HEAP32[$456>>2]|0;
                     __THREW__ = 0;
                     $458 = (invoke_iii($457|0,($450|0),10)|0);
                     $459 = __THREW__; __THREW__ = 0;
                     $460 = $459&1;
                     if ($460) {
                      break L157;
                     }
                     $468 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($468+-1)|0);
                     $469 = ($468|0)==(0);
                     if ($469) {
                      $470 = HEAP32[$434>>2]|0;
                      $471 = (($470) + 8|0);
                      $472 = HEAP32[$471>>2]|0;
                      FUNCTION_TABLE_vi[$472 & 1023]($434);
                     }
                     HEAP8[$__s$i$i88>>0] = 0;
                     $473 = (($__s$i$i88) + 4|0);
                     HEAP32[$473>>2] = $429;
                     $474 = HEAP32[$429>>2]|0;
                     $475 = (($474) + -12|0);
                     $476 = HEAP32[$475>>2]|0;
                     $$sum$i3$i95 = (($476) + 16)|0;
                     $477 = (($429) + ($$sum$i3$i95)|0);
                     $478 = HEAP32[$477>>2]|0;
                     $479 = ($478|0)==(0);
                     L166: do {
                      if ($479) {
                       $$sum1$i$i97 = (($476) + 72)|0;
                       $480 = (($429) + ($$sum1$i$i97)|0);
                       $481 = HEAP32[$480>>2]|0;
                       $482 = ($481|0)==(0|0);
                       do {
                        if ($482) {
                         label = 139;
                        } else {
                         __THREW__ = 0;
                         invoke_vi(424,($481|0));
                         $483 = __THREW__; __THREW__ = 0;
                         $484 = $483&1;
                         if (!($484)) {
                          label = 139;
                          break;
                         }
                         $512 = ___cxa_find_matching_catch(0|0)|0;
                         $513 = tempRet0;
                         $$0$i$i112 = $512;
                        }
                       } while(0);
                       if ((label|0) == 139) {
                        HEAP8[$__s$i$i88>>0] = 1;
                        $485 = HEAP32[$429>>2]|0;
                        $486 = (($485) + -12|0);
                        $487 = HEAP32[$486>>2]|0;
                        $$sum$i$i$i$i100 = (($487) + 24)|0;
                        $488 = (($429) + ($$sum$i$i$i$i100)|0);
                        $489 = HEAP32[$488>>2]|0;
                        $490 = ($489|0)==(0|0);
                        do {
                         if ($490) {
                          $506 = $487;
                          label = 145;
                         } else {
                          $491 = (($489) + 24|0);
                          $492 = HEAP32[$491>>2]|0;
                          $493 = (($489) + 28|0);
                          $494 = HEAP32[$493>>2]|0;
                          $495 = ($492|0)==($494|0);
                          if (!($495)) {
                           $496 = (($492) + 1|0);
                           HEAP32[$491>>2] = $496;
                           HEAP8[$492>>0] = $458;
                           label = 152;
                           break L166;
                          }
                          $497 = HEAP32[$489>>2]|0;
                          $498 = (($497) + 52|0);
                          $499 = HEAP32[$498>>2]|0;
                          $500 = $458&255;
                          __THREW__ = 0;
                          $501 = (invoke_iii($499|0,($489|0),($500|0))|0);
                          $502 = __THREW__; __THREW__ = 0;
                          $503 = $502&1;
                          if ($503) {
                           break;
                          }
                          $504 = ($501|0)==(-1);
                          if (!($504)) {
                           label = 152;
                           break L166;
                          }
                          $$pre$i$i104 = HEAP32[$429>>2]|0;
                          $$phi$trans$insert148 = (($$pre$i$i104) + -12|0);
                          $$pre150 = HEAP32[$$phi$trans$insert148>>2]|0;
                          $506 = $$pre150;
                          label = 145;
                         }
                        } while(0);
                        if ((label|0) == 145) {
                         $505 = (($429) + ($506)|0);
                         $$sum$i$i106 = (($506) + 16)|0;
                         $507 = (($429) + ($$sum$i$i106)|0);
                         $508 = HEAP32[$507>>2]|0;
                         $509 = $508 | 1;
                         __THREW__ = 0;
                         invoke_vii(425,($505|0),($509|0));
                         $510 = __THREW__; __THREW__ = 0;
                         $511 = $510&1;
                         if (!($511)) {
                          label = 152;
                          break;
                         }
                        }
                        $514 = ___cxa_find_matching_catch(0|0)|0;
                        $515 = tempRet0;
                        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                        $$0$i$i112 = $514;
                       }
                       (___cxa_begin_catch(($$0$i$i112|0))|0);
                       $516 = HEAP32[$429>>2]|0;
                       $517 = (($516) + -12|0);
                       $518 = HEAP32[$517>>2]|0;
                       $$sum124 = (($518) + 16)|0;
                       $519 = (($429) + ($$sum124)|0);
                       $520 = HEAP32[$519>>2]|0;
                       $521 = $520 | 1;
                       HEAP32[$519>>2] = $521;
                       $$sum125 = (($518) + 20)|0;
                       $522 = (($429) + ($$sum125)|0);
                       $523 = HEAP32[$522>>2]|0;
                       $524 = $523 & 1;
                       $525 = ($524|0)==(0);
                       if ($525) {
                        ___cxa_end_catch();
                        break;
                       }
                       __THREW__ = 0;
                       invoke_v(426);
                       $526 = __THREW__; __THREW__ = 0;
                       $527 = $526&1;
                       if (!($527)) {
                        // unreachable;
                       }
                       $528 = ___cxa_find_matching_catch()|0;
                       $529 = tempRet0;
                       __THREW__ = 0;
                       invoke_v(427);
                       $530 = __THREW__; __THREW__ = 0;
                       $531 = $530&1;
                       if ($531) {
                        $532 = ___cxa_find_matching_catch(0|0)|0;
                        $533 = tempRet0;
                        ___clang_call_terminate($532);
                        // unreachable;
                       } else {
                        ___resumeException($528|0);
                        // unreachable;
                       }
                      } else {
                       label = 152;
                      }
                     } while(0);
                     if ((label|0) == 152) {
                      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                     }
                     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($429);
                     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($option);
                     $534 = HEAP32[$option>>2]|0;
                     switch ($534|0) {
                     case 1:  {
                      $$idx119 = (($_hero) + 44|0);
                      $$idx119$val = +HEAPF32[$$idx119>>2];
                      $535 = (+__ZN4hero25get_energy_consuming_rateEv($$idx119$val));
                      HEAPF32[$0>>2] = $535;
                      $536 = (($0) + 4|0);
                      HEAPF32[$536>>2] = -4.0;
                      $537 = (($0) + 8|0);
                      HEAPF32[$537>>2] = 0.0;
                      $538 = (($0) + 12|0);
                      HEAPF32[$538>>2] = 1.39999997615814208984;
                      $539 = (($0) + 16|0);
                      HEAPF32[$539>>2] = 0.0;
                      $540 = (($0) + 20|0);
                      HEAPF32[$540>>2] = 8.0;
                      $541 = (($_hero) + 76|0);
                      _memcpy(($1|0),($541|0),144)|0;
                      $542 = (($1) + 24|0);
                      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
                      ;HEAP32[$$byval_copy151+0>>2]=HEAP32[$542+0>>2]|0;HEAP32[$$byval_copy151+4>>2]=HEAP32[$542+4>>2]|0;HEAP32[$$byval_copy151+8>>2]=HEAP32[$542+8>>2]|0;HEAP32[$$byval_copy151+12>>2]=HEAP32[$542+12>>2]|0;HEAP32[$$byval_copy151+16>>2]=HEAP32[$542+16>>2]|0;HEAP32[$$byval_copy151+20>>2]=HEAP32[$542+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy,$$byval_copy151,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 4:  {
                      $$idx = (($_hero) + 44|0);
                      $$idx$val = +HEAPF32[$$idx>>2];
                      $557 = (+__ZN4hero25get_energy_consuming_rateEv($$idx$val));
                      HEAPF32[$5>>2] = $557;
                      $558 = (($5) + 4|0);
                      HEAPF32[$558>>2] = -3.0;
                      $559 = (($5) + 8|0);
                      HEAPF32[$559>>2] = 5.0;
                      $560 = (($5) + 12|0);
                      HEAPF32[$560>>2] = -2.0;
                      $561 = (($5) + 16|0);
                      HEAPF32[$561>>2] = 0.0;
                      $562 = (($5) + 20|0);
                      HEAPF32[$562>>2] = 0.0;
                      $563 = (($_hero) + 76|0);
                      _memcpy(($6|0),($563|0),144)|0;
                      $564 = (($6) + 72|0);
                      ;HEAP32[$$byval_copy155+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy155+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy155+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy155+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy155+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$$byval_copy155+20>>2]=HEAP32[$5+20>>2]|0;
                      ;HEAP32[$$byval_copy156+0>>2]=HEAP32[$564+0>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$564+4>>2]|0;HEAP32[$$byval_copy156+8>>2]=HEAP32[$564+8>>2]|0;HEAP32[$$byval_copy156+12>>2]=HEAP32[$564+12>>2]|0;HEAP32[$$byval_copy156+16>>2]=HEAP32[$564+16>>2]|0;HEAP32[$$byval_copy156+20>>2]=HEAP32[$564+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy155,$$byval_copy156,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 3:  {
                      $$idx117 = (($_hero) + 44|0);
                      $$idx117$val = +HEAPF32[$$idx117>>2];
                      $549 = (+__ZN4hero25get_energy_consuming_rateEv($$idx117$val));
                      HEAPF32[$3>>2] = $549;
                      $550 = (($3) + 4|0);
                      HEAPF32[$550>>2] = 6.0;
                      $551 = (($3) + 8|0);
                      HEAPF32[$551>>2] = 1.0;
                      $552 = (($3) + 12|0);
                      HEAPF32[$552>>2] = -2.0;
                      $553 = (($3) + 16|0);
                      HEAPF32[$553>>2] = 1.0;
                      $554 = (($3) + 20|0);
                      HEAPF32[$554>>2] = -3.0;
                      $555 = (($_hero) + 76|0);
                      _memcpy(($4|0),($555|0),144)|0;
                      $556 = (($4) + 48|0);
                      ;HEAP32[$$byval_copy153+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy153+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy153+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy153+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy153+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy153+20>>2]=HEAP32[$3+20>>2]|0;
                      ;HEAP32[$$byval_copy154+0>>2]=HEAP32[$556+0>>2]|0;HEAP32[$$byval_copy154+4>>2]=HEAP32[$556+4>>2]|0;HEAP32[$$byval_copy154+8>>2]=HEAP32[$556+8>>2]|0;HEAP32[$$byval_copy154+12>>2]=HEAP32[$556+12>>2]|0;HEAP32[$$byval_copy154+16>>2]=HEAP32[$556+16>>2]|0;HEAP32[$$byval_copy154+20>>2]=HEAP32[$556+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy153,$$byval_copy154,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 2:  {
                      $$idx118 = (($_hero) + 44|0);
                      $$idx118$val = +HEAPF32[$$idx118>>2];
                      $543 = (+__ZN4hero25get_energy_consuming_rateEv($$idx118$val));
                      HEAPF32[$2>>2] = $543;
                      $544 = (($2) + 4|0);
                      HEAPF32[$544>>2] = 7.5;
                      $545 = (($2) + 8|0);
                      HEAPF32[$545>>2] = 1.0;
                      $546 = (($2) + 12|0);
                      HEAPF32[$546>>2] = -2.0;
                      $547 = (($2) + 16|0);
                      HEAPF32[$547>>2] = 0.0;
                      $548 = (($2) + 20|0);
                      HEAPF32[$548>>2] = 4.0;
                      $tmpcast = (($_hero) + 76|0);
                      ;HEAP32[$$byval_copy152+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$$byval_copy152+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy152+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy152+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy152+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy152+20>>2]=HEAP32[$2+20>>2]|0;
                      ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$tmpcast+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$tmpcast+4>>2]|0;HEAP32[$tmpcast$byval_copy+8>>2]=HEAP32[$tmpcast+8>>2]|0;HEAP32[$tmpcast$byval_copy+12>>2]=HEAP32[$tmpcast+12>>2]|0;HEAP32[$tmpcast$byval_copy+16>>2]=HEAP32[$tmpcast+16>>2]|0;HEAP32[$tmpcast$byval_copy+20>>2]=HEAP32[$tmpcast+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy152,$tmpcast$byval_copy,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 5:  {
                      HEAPF32[$7>>2] = 8.0;
                      $565 = (($7) + 4|0);
                      $566 = (($7) + 20|0);
                      ;HEAP32[$565+0>>2]=0|0;HEAP32[$565+4>>2]=0|0;HEAP32[$565+8>>2]=0|0;HEAP32[$565+12>>2]=0|0;
                      HEAPF32[$566>>2] = -5.0;
                      $567 = (($_hero) + 76|0);
                      _memcpy(($8|0),($567|0),144)|0;
                      $568 = (($8) + 96|0);
                      ;HEAP32[$$byval_copy157+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy157+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy157+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy157+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy157+20>>2]=HEAP32[$7+20>>2]|0;
                      ;HEAP32[$$byval_copy158+0>>2]=HEAP32[$568+0>>2]|0;HEAP32[$$byval_copy158+4>>2]=HEAP32[$568+4>>2]|0;HEAP32[$$byval_copy158+8>>2]=HEAP32[$568+8>>2]|0;HEAP32[$$byval_copy158+12>>2]=HEAP32[$568+12>>2]|0;HEAP32[$$byval_copy158+16>>2]=HEAP32[$568+16>>2]|0;HEAP32[$$byval_copy158+20>>2]=HEAP32[$568+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy157,$$byval_copy158,$day);
                      STACKTOP = sp;return;
                      break;
                     }
                     default: {
                      STACKTOP = sp;return;
                     }
                     }
                    }
                   } while(0);
                   $452 = (___cxa_allocate_exception(4)|0);
                   HEAP32[$452>>2] = ((20400 + 8|0));
                   __THREW__ = 0;
                   invoke_viii(422,($452|0),(20480|0),(396|0));
                   $453 = __THREW__; __THREW__ = 0;
                   $454 = $453&1;
                   if ($454) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $461 = ___cxa_find_matching_catch()|0;
                 $462 = tempRet0;
                 $463 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($463+-1)|0);
                 $464 = ($463|0)==(0);
                 if (!($464)) {
                  ___resumeException($461|0);
                  // unreachable;
                 }
                 $465 = HEAP32[$434>>2]|0;
                 $466 = (($465) + 8|0);
                 $467 = HEAP32[$466>>2]|0;
                 FUNCTION_TABLE_vi[$467 & 1023]($434);
                 ___resumeException($461|0);
                 // unreachable;
                }
               } while(0);
               $347 = (___cxa_allocate_exception(4)|0);
               HEAP32[$347>>2] = ((20400 + 8|0));
               __THREW__ = 0;
               invoke_viii(422,($347|0),(20480|0),(396|0));
               $348 = __THREW__; __THREW__ = 0;
               $349 = $348&1;
               if ($349) {
                break;
               }
               // unreachable;
              }
             } while(0);
             $356 = ___cxa_find_matching_catch()|0;
             $357 = tempRet0;
             $358 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($358+-1)|0);
             $359 = ($358|0)==(0);
             if (!($359)) {
              ___resumeException($356|0);
              // unreachable;
             }
             $360 = HEAP32[$329>>2]|0;
             $361 = (($360) + 8|0);
             $362 = HEAP32[$361>>2]|0;
             FUNCTION_TABLE_vi[$362 & 1023]($329);
             ___resumeException($356|0);
             // unreachable;
            }
           } while(0);
           $242 = (___cxa_allocate_exception(4)|0);
           HEAP32[$242>>2] = ((20400 + 8|0));
           __THREW__ = 0;
           invoke_viii(422,($242|0),(20480|0),(396|0));
           $243 = __THREW__; __THREW__ = 0;
           $244 = $243&1;
           if (!($244)) {
            // unreachable;
           }
          }
         } while(0);
         $251 = ___cxa_find_matching_catch()|0;
         $252 = tempRet0;
         $253 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($253+-1)|0);
         $254 = ($253|0)==(0);
         if (!($254)) {
          ___resumeException($251|0);
          // unreachable;
         }
         $255 = HEAP32[$224>>2]|0;
         $256 = (($255) + 8|0);
         $257 = HEAP32[$256>>2]|0;
         FUNCTION_TABLE_vi[$257 & 1023]($224);
         ___resumeException($251|0);
         // unreachable;
        }
       }
       $137 = (___cxa_allocate_exception(4)|0);
       HEAP32[$137>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($137|0),(20480|0),(396|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if (!($139)) {
        // unreachable;
       }
      }
     } while(0);
     $146 = ___cxa_find_matching_catch()|0;
     $147 = tempRet0;
     $148 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($148+-1)|0);
     $149 = ($148|0)==(0);
     if (!($149)) {
      ___resumeException($146|0);
      // unreachable;
     }
     $150 = HEAP32[$119>>2]|0;
     $151 = (($150) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     FUNCTION_TABLE_vi[$152 & 1023]($119);
     ___resumeException($146|0);
     // unreachable;
    }
   }
   $32 = (___cxa_allocate_exception(4)|0);
   HEAP32[$32>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($32|0),(20480|0),(396|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    // unreachable;
   }
  }
 } while(0);
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $43 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($43+-1)|0);
 $44 = ($43|0)==(0);
 if (!($44)) {
  ___resumeException($41|0);
  // unreachable;
 }
 $45 = HEAP32[$14>>2]|0;
 $46 = (($45) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vi[$47 & 1023]($14);
 ___resumeException($41|0);
 // unreachable;
}
function __ZN8festival11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i112 = 0, $$0$i$i25 = 0, $$0$i$i54 = 0, $$0$i$i83 = 0, $$byval_copy = 0, $$byval_copy150 = 0, $$byval_copy151 = 0, $$byval_copy152 = 0, $$byval_copy153 = 0, $$byval_copy154 = 0, $$byval_copy155 = 0, $$byval_copy156 = 0, $$byval_copy157 = 0, $$idx = 0, $$idx$val = 0.0, $$idx117 = 0, $$idx117$val = 0.0, $$idx118 = 0, $$idx118$val = 0.0;
 var $$phi$trans$insert = 0, $$phi$trans$insert138 = 0, $$phi$trans$insert141 = 0, $$phi$trans$insert144 = 0, $$phi$trans$insert147 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i104 = 0, $$pre$i$i17 = 0, $$pre$i$i46 = 0, $$pre$i$i75 = 0, $$pre140 = 0, $$pre143 = 0, $$pre146 = 0, $$pre149 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i$i100 = 0, $$sum$i$i$i$i13 = 0;
 var $$sum$i$i$i$i42 = 0, $$sum$i$i$i$i71 = 0, $$sum$i$i106 = 0, $$sum$i$i19 = 0, $$sum$i$i48 = 0, $$sum$i$i77 = 0, $$sum$i3$i = 0, $$sum$i3$i37 = 0, $$sum$i3$i66 = 0, $$sum$i3$i8 = 0, $$sum$i3$i95 = 0, $$sum1$i$i = 0, $$sum1$i$i10 = 0, $$sum1$i$i39 = 0, $$sum1$i$i68 = 0, $$sum1$i$i97 = 0, $$sum119 = 0, $$sum120 = 0, $$sum121 = 0, $$sum122 = 0;
 var $$sum123 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum128 = 0, $$sum129 = 0, $$sum130 = 0, $$sum131 = 0, $$sum132 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__s$i$i = 0, $__s$i$i1 = 0, $__s$i$i30 = 0, $__s$i$i59 = 0, $__s$i$i88 = 0, $option = 0, $tmpcast = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy157 = sp + 960|0;
 $$byval_copy156 = sp + 936|0;
 $$byval_copy155 = sp + 912|0;
 $$byval_copy154 = sp + 888|0;
 $$byval_copy153 = sp + 864|0;
 $$byval_copy152 = sp + 840|0;
 $tmpcast$byval_copy = sp + 816|0;
 $$byval_copy151 = sp + 792|0;
 $$byval_copy150 = sp + 768|0;
 $$byval_copy = sp + 744|0;
 $__s$i$i88 = sp + 736|0;
 $__s$i$i59 = sp + 728|0;
 $__s$i$i30 = sp + 720|0;
 $__s$i$i1 = sp + 184|0;
 $__s$i$i = sp;
 $option = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp + 40|0;
 $2 = sp + 192|0;
 $3 = sp + 216|0;
 $4 = sp + 240|0;
 $5 = sp + 384|0;
 $6 = sp + 408|0;
 $7 = sp + 552|0;
 $8 = sp + 576|0;
 $9 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(56)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $$sum = (($12) + 28)|0;
 $13 = (($9) + ($$sum)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_ii(423,(11752|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 do {
  if (!($19)) {
   $20 = (($14) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($14) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $21;
   $25 = $23;
   $26 = (($24) - ($25))|0;
   $27 = $26 >> 2;
   $28 = ($27>>>0)>($17>>>0);
   if ($28) {
    $29 = (($23) + ($17<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0|0);
    if (!($31)) {
     $35 = HEAP32[$30>>2]|0;
     $36 = (($35) + 28|0);
     $37 = HEAP32[$36>>2]|0;
     __THREW__ = 0;
     $38 = (invoke_iii($37|0,($30|0),10)|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break;
     }
     $48 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($48+-1)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      $50 = HEAP32[$14>>2]|0;
      $51 = (($50) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      FUNCTION_TABLE_vi[$52 & 1023]($14);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $53 = (($__s$i$i) + 4|0);
     HEAP32[$53>>2] = $9;
     $54 = HEAP32[$9>>2]|0;
     $55 = (($54) + -12|0);
     $56 = HEAP32[$55>>2]|0;
     $$sum$i3$i = (($56) + 16)|0;
     $57 = (($9) + ($$sum$i3$i)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0);
     do {
      if ($59) {
       $$sum1$i$i = (($56) + 72)|0;
       $60 = (($9) + ($$sum1$i$i)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0|0);
       if ($62) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($61|0));
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $92 = ___cxa_find_matching_catch(0|0)|0;
         $93 = tempRet0;
         $$0$i$i = $92;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $65 = HEAP32[$9>>2]|0;
        $66 = (($65) + -12|0);
        $67 = HEAP32[$66>>2]|0;
        $$sum$i$i$i$i = (($67) + 24)|0;
        $68 = (($9) + ($$sum$i$i$i$i)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         $86 = $67;
         label = 21;
        } else {
         $71 = (($69) + 24|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($69) + 28|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($72|0)==($74|0);
         if (!($75)) {
          $76 = (($72) + 1|0);
          HEAP32[$71>>2] = $76;
          HEAP8[$72>>0] = $38;
          label = 28;
          break;
         }
         $77 = HEAP32[$69>>2]|0;
         $78 = (($77) + 52|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = $38&255;
         __THREW__ = 0;
         $81 = (invoke_iii($79|0,($69|0),($80|0))|0);
         $82 = __THREW__; __THREW__ = 0;
         $83 = $82&1;
         if (!($83)) {
          $84 = ($81|0)==(-1);
          if (!($84)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$9>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $86 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $85 = (($9) + ($86)|0);
         $$sum$i$i = (($86) + 16)|0;
         $87 = (($9) + ($$sum$i$i)|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $88 | 1;
         __THREW__ = 0;
         invoke_vii(425,($85|0),($89|0));
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if (!($91)) {
          label = 28;
          break;
         }
        }
        $94 = ___cxa_find_matching_catch(0|0)|0;
        $95 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $94;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $96 = HEAP32[$9>>2]|0;
       $97 = (($96) + -12|0);
       $98 = HEAP32[$97>>2]|0;
       $$sum131 = (($98) + 16)|0;
       $99 = (($9) + ($$sum131)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $100 | 1;
       HEAP32[$99>>2] = $101;
       $$sum132 = (($98) + 20)|0;
       $102 = (($9) + ($$sum132)|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = $103 & 1;
       $105 = ($104|0)==(0);
       if ($105) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if (!($107)) {
        // unreachable;
       }
       $108 = ___cxa_find_matching_catch()|0;
       $109 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        $112 = ___cxa_find_matching_catch(0|0)|0;
        $113 = tempRet0;
        ___clang_call_terminate($112);
        // unreachable;
       } else {
        ___resumeException($108|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9);
     $114 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(72)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + -12|0);
     $117 = HEAP32[$116>>2]|0;
     $$sum119 = (($117) + 28)|0;
     $118 = (($114) + ($$sum119)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + 4|0);
     $121 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($121+1)|0);
     __THREW__ = 0;
     $122 = (invoke_ii(423,(11752|0))|0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     do {
      if (!($124)) {
       $125 = (($119) + 12|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($119) + 8|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $126;
       $130 = $128;
       $131 = (($129) - ($130))|0;
       $132 = $131 >> 2;
       $133 = ($132>>>0)>($122>>>0);
       if ($133) {
        $134 = (($128) + ($122<<2)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if (!($136)) {
         $140 = HEAP32[$135>>2]|0;
         $141 = (($140) + 28|0);
         $142 = HEAP32[$141>>2]|0;
         __THREW__ = 0;
         $143 = (invoke_iii($142|0,($135|0),10)|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          break;
         }
         $153 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($153+-1)|0);
         $154 = ($153|0)==(0);
         if ($154) {
          $155 = HEAP32[$119>>2]|0;
          $156 = (($155) + 8|0);
          $157 = HEAP32[$156>>2]|0;
          FUNCTION_TABLE_vi[$157 & 1023]($119);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $158 = (($__s$i$i1) + 4|0);
         HEAP32[$158>>2] = $114;
         $159 = HEAP32[$114>>2]|0;
         $160 = (($159) + -12|0);
         $161 = HEAP32[$160>>2]|0;
         $$sum$i3$i8 = (($161) + 16)|0;
         $162 = (($114) + ($$sum$i3$i8)|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0);
         L49: do {
          if ($164) {
           $$sum1$i$i10 = (($161) + 72)|0;
           $165 = (($114) + ($$sum1$i$i10)|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = ($166|0)==(0|0);
           if ($167) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($166|0));
            $168 = __THREW__; __THREW__ = 0;
            $169 = $168&1;
            if ($169) {
             $197 = ___cxa_find_matching_catch(0|0)|0;
             $198 = tempRet0;
             $$0$i$i25 = $197;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $170 = HEAP32[$114>>2]|0;
            $171 = (($170) + -12|0);
            $172 = HEAP32[$171>>2]|0;
            $$sum$i$i$i$i13 = (($172) + 24)|0;
            $173 = (($114) + ($$sum$i$i$i$i13)|0);
            $174 = HEAP32[$173>>2]|0;
            $175 = ($174|0)==(0|0);
            do {
             if ($175) {
              $191 = $172;
              label = 52;
             } else {
              $176 = (($174) + 24|0);
              $177 = HEAP32[$176>>2]|0;
              $178 = (($174) + 28|0);
              $179 = HEAP32[$178>>2]|0;
              $180 = ($177|0)==($179|0);
              if (!($180)) {
               $181 = (($177) + 1|0);
               HEAP32[$176>>2] = $181;
               HEAP8[$177>>0] = $143;
               label = 59;
               break L49;
              }
              $182 = HEAP32[$174>>2]|0;
              $183 = (($182) + 52|0);
              $184 = HEAP32[$183>>2]|0;
              $185 = $143&255;
              __THREW__ = 0;
              $186 = (invoke_iii($184|0,($174|0),($185|0))|0);
              $187 = __THREW__; __THREW__ = 0;
              $188 = $187&1;
              if ($188) {
               break;
              }
              $189 = ($186|0)==(-1);
              if (!($189)) {
               label = 59;
               break L49;
              }
              $$pre$i$i17 = HEAP32[$114>>2]|0;
              $$phi$trans$insert138 = (($$pre$i$i17) + -12|0);
              $$pre140 = HEAP32[$$phi$trans$insert138>>2]|0;
              $191 = $$pre140;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $190 = (($114) + ($191)|0);
             $$sum$i$i19 = (($191) + 16)|0;
             $192 = (($114) + ($$sum$i$i19)|0);
             $193 = HEAP32[$192>>2]|0;
             $194 = $193 | 1;
             __THREW__ = 0;
             invoke_vii(425,($190|0),($194|0));
             $195 = __THREW__; __THREW__ = 0;
             $196 = $195&1;
             if (!($196)) {
              label = 59;
              break;
             }
            }
            $199 = ___cxa_find_matching_catch(0|0)|0;
            $200 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $199;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $201 = HEAP32[$114>>2]|0;
           $202 = (($201) + -12|0);
           $203 = HEAP32[$202>>2]|0;
           $$sum129 = (($203) + 16)|0;
           $204 = (($114) + ($$sum129)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = $205 | 1;
           HEAP32[$204>>2] = $206;
           $$sum130 = (($203) + 20)|0;
           $207 = (($114) + ($$sum130)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = $208 & 1;
           $210 = ($209|0)==(0);
           if ($210) {
            ___cxa_end_catch();
            break;
           }
           __THREW__ = 0;
           invoke_v(426);
           $211 = __THREW__; __THREW__ = 0;
           $212 = $211&1;
           if (!($212)) {
            // unreachable;
           }
           $213 = ___cxa_find_matching_catch()|0;
           $214 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $215 = __THREW__; __THREW__ = 0;
           $216 = $215&1;
           if ($216) {
            $217 = ___cxa_find_matching_catch(0|0)|0;
            $218 = tempRet0;
            ___clang_call_terminate($217);
            // unreachable;
           } else {
            ___resumeException($213|0);
            // unreachable;
           }
          } else {
           label = 59;
          }
         } while(0);
         if ((label|0) == 59) {
          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         }
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($114);
         $219 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(200)|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = (($220) + -12|0);
         $222 = HEAP32[$221>>2]|0;
         $$sum120 = (($222) + 28)|0;
         $223 = (($219) + ($$sum120)|0);
         $224 = HEAP32[$223>>2]|0;
         $225 = (($224) + 4|0);
         $226 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($226+1)|0);
         __THREW__ = 0;
         $227 = (invoke_ii(423,(11752|0))|0);
         $228 = __THREW__; __THREW__ = 0;
         $229 = $228&1;
         L79: do {
          if (!($229)) {
           $230 = (($224) + 12|0);
           $231 = HEAP32[$230>>2]|0;
           $232 = (($224) + 8|0);
           $233 = HEAP32[$232>>2]|0;
           $234 = $231;
           $235 = $233;
           $236 = (($234) - ($235))|0;
           $237 = $236 >> 2;
           $238 = ($237>>>0)>($227>>>0);
           do {
            if ($238) {
             $239 = (($233) + ($227<<2)|0);
             $240 = HEAP32[$239>>2]|0;
             $241 = ($240|0)==(0|0);
             if ($241) {
              break;
             }
             $245 = HEAP32[$240>>2]|0;
             $246 = (($245) + 28|0);
             $247 = HEAP32[$246>>2]|0;
             __THREW__ = 0;
             $248 = (invoke_iii($247|0,($240|0),10)|0);
             $249 = __THREW__; __THREW__ = 0;
             $250 = $249&1;
             if ($250) {
              break L79;
             }
             $258 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($258+-1)|0);
             $259 = ($258|0)==(0);
             if ($259) {
              $260 = HEAP32[$224>>2]|0;
              $261 = (($260) + 8|0);
              $262 = HEAP32[$261>>2]|0;
              FUNCTION_TABLE_vi[$262 & 1023]($224);
             }
             HEAP8[$__s$i$i30>>0] = 0;
             $263 = (($__s$i$i30) + 4|0);
             HEAP32[$263>>2] = $219;
             $264 = HEAP32[$219>>2]|0;
             $265 = (($264) + -12|0);
             $266 = HEAP32[$265>>2]|0;
             $$sum$i3$i37 = (($266) + 16)|0;
             $267 = (($219) + ($$sum$i3$i37)|0);
             $268 = HEAP32[$267>>2]|0;
             $269 = ($268|0)==(0);
             L88: do {
              if ($269) {
               $$sum1$i$i39 = (($266) + 72)|0;
               $270 = (($219) + ($$sum1$i$i39)|0);
               $271 = HEAP32[$270>>2]|0;
               $272 = ($271|0)==(0|0);
               do {
                if ($272) {
                 label = 77;
                } else {
                 __THREW__ = 0;
                 invoke_vi(424,($271|0));
                 $273 = __THREW__; __THREW__ = 0;
                 $274 = $273&1;
                 if (!($274)) {
                  label = 77;
                  break;
                 }
                 $302 = ___cxa_find_matching_catch(0|0)|0;
                 $303 = tempRet0;
                 $$0$i$i54 = $302;
                }
               } while(0);
               if ((label|0) == 77) {
                HEAP8[$__s$i$i30>>0] = 1;
                $275 = HEAP32[$219>>2]|0;
                $276 = (($275) + -12|0);
                $277 = HEAP32[$276>>2]|0;
                $$sum$i$i$i$i42 = (($277) + 24)|0;
                $278 = (($219) + ($$sum$i$i$i$i42)|0);
                $279 = HEAP32[$278>>2]|0;
                $280 = ($279|0)==(0|0);
                do {
                 if ($280) {
                  $296 = $277;
                  label = 83;
                 } else {
                  $281 = (($279) + 24|0);
                  $282 = HEAP32[$281>>2]|0;
                  $283 = (($279) + 28|0);
                  $284 = HEAP32[$283>>2]|0;
                  $285 = ($282|0)==($284|0);
                  if (!($285)) {
                   $286 = (($282) + 1|0);
                   HEAP32[$281>>2] = $286;
                   HEAP8[$282>>0] = $248;
                   label = 90;
                   break L88;
                  }
                  $287 = HEAP32[$279>>2]|0;
                  $288 = (($287) + 52|0);
                  $289 = HEAP32[$288>>2]|0;
                  $290 = $248&255;
                  __THREW__ = 0;
                  $291 = (invoke_iii($289|0,($279|0),($290|0))|0);
                  $292 = __THREW__; __THREW__ = 0;
                  $293 = $292&1;
                  if ($293) {
                   break;
                  }
                  $294 = ($291|0)==(-1);
                  if (!($294)) {
                   label = 90;
                   break L88;
                  }
                  $$pre$i$i46 = HEAP32[$219>>2]|0;
                  $$phi$trans$insert141 = (($$pre$i$i46) + -12|0);
                  $$pre143 = HEAP32[$$phi$trans$insert141>>2]|0;
                  $296 = $$pre143;
                  label = 83;
                 }
                } while(0);
                if ((label|0) == 83) {
                 $295 = (($219) + ($296)|0);
                 $$sum$i$i48 = (($296) + 16)|0;
                 $297 = (($219) + ($$sum$i$i48)|0);
                 $298 = HEAP32[$297>>2]|0;
                 $299 = $298 | 1;
                 __THREW__ = 0;
                 invoke_vii(425,($295|0),($299|0));
                 $300 = __THREW__; __THREW__ = 0;
                 $301 = $300&1;
                 if (!($301)) {
                  label = 90;
                  break;
                 }
                }
                $304 = ___cxa_find_matching_catch(0|0)|0;
                $305 = tempRet0;
                __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
                $$0$i$i54 = $304;
               }
               (___cxa_begin_catch(($$0$i$i54|0))|0);
               $306 = HEAP32[$219>>2]|0;
               $307 = (($306) + -12|0);
               $308 = HEAP32[$307>>2]|0;
               $$sum127 = (($308) + 16)|0;
               $309 = (($219) + ($$sum127)|0);
               $310 = HEAP32[$309>>2]|0;
               $311 = $310 | 1;
               HEAP32[$309>>2] = $311;
               $$sum128 = (($308) + 20)|0;
               $312 = (($219) + ($$sum128)|0);
               $313 = HEAP32[$312>>2]|0;
               $314 = $313 & 1;
               $315 = ($314|0)==(0);
               if ($315) {
                ___cxa_end_catch();
                break;
               }
               __THREW__ = 0;
               invoke_v(426);
               $316 = __THREW__; __THREW__ = 0;
               $317 = $316&1;
               if (!($317)) {
                // unreachable;
               }
               $318 = ___cxa_find_matching_catch()|0;
               $319 = tempRet0;
               __THREW__ = 0;
               invoke_v(427);
               $320 = __THREW__; __THREW__ = 0;
               $321 = $320&1;
               if ($321) {
                $322 = ___cxa_find_matching_catch(0|0)|0;
                $323 = tempRet0;
                ___clang_call_terminate($322);
                // unreachable;
               } else {
                ___resumeException($318|0);
                // unreachable;
               }
              } else {
               label = 90;
              }
             } while(0);
             if ((label|0) == 90) {
              __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
             }
             __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($219);
             $324 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(216)|0);
             $325 = HEAP32[$324>>2]|0;
             $326 = (($325) + -12|0);
             $327 = HEAP32[$326>>2]|0;
             $$sum121 = (($327) + 28)|0;
             $328 = (($324) + ($$sum121)|0);
             $329 = HEAP32[$328>>2]|0;
             $330 = (($329) + 4|0);
             $331 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($331+1)|0);
             __THREW__ = 0;
             $332 = (invoke_ii(423,(11752|0))|0);
             $333 = __THREW__; __THREW__ = 0;
             $334 = $333&1;
             L118: do {
              if (!($334)) {
               $335 = (($329) + 12|0);
               $336 = HEAP32[$335>>2]|0;
               $337 = (($329) + 8|0);
               $338 = HEAP32[$337>>2]|0;
               $339 = $336;
               $340 = $338;
               $341 = (($339) - ($340))|0;
               $342 = $341 >> 2;
               $343 = ($342>>>0)>($332>>>0);
               do {
                if ($343) {
                 $344 = (($338) + ($332<<2)|0);
                 $345 = HEAP32[$344>>2]|0;
                 $346 = ($345|0)==(0|0);
                 if ($346) {
                  break;
                 }
                 $350 = HEAP32[$345>>2]|0;
                 $351 = (($350) + 28|0);
                 $352 = HEAP32[$351>>2]|0;
                 __THREW__ = 0;
                 $353 = (invoke_iii($352|0,($345|0),10)|0);
                 $354 = __THREW__; __THREW__ = 0;
                 $355 = $354&1;
                 if ($355) {
                  break L118;
                 }
                 $363 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($363+-1)|0);
                 $364 = ($363|0)==(0);
                 if ($364) {
                  $365 = HEAP32[$329>>2]|0;
                  $366 = (($365) + 8|0);
                  $367 = HEAP32[$366>>2]|0;
                  FUNCTION_TABLE_vi[$367 & 1023]($329);
                 }
                 HEAP8[$__s$i$i59>>0] = 0;
                 $368 = (($__s$i$i59) + 4|0);
                 HEAP32[$368>>2] = $324;
                 $369 = HEAP32[$324>>2]|0;
                 $370 = (($369) + -12|0);
                 $371 = HEAP32[$370>>2]|0;
                 $$sum$i3$i66 = (($371) + 16)|0;
                 $372 = (($324) + ($$sum$i3$i66)|0);
                 $373 = HEAP32[$372>>2]|0;
                 $374 = ($373|0)==(0);
                 L127: do {
                  if ($374) {
                   $$sum1$i$i68 = (($371) + 72)|0;
                   $375 = (($324) + ($$sum1$i$i68)|0);
                   $376 = HEAP32[$375>>2]|0;
                   $377 = ($376|0)==(0|0);
                   do {
                    if ($377) {
                     label = 108;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(424,($376|0));
                     $378 = __THREW__; __THREW__ = 0;
                     $379 = $378&1;
                     if (!($379)) {
                      label = 108;
                      break;
                     }
                     $407 = ___cxa_find_matching_catch(0|0)|0;
                     $408 = tempRet0;
                     $$0$i$i83 = $407;
                    }
                   } while(0);
                   if ((label|0) == 108) {
                    HEAP8[$__s$i$i59>>0] = 1;
                    $380 = HEAP32[$324>>2]|0;
                    $381 = (($380) + -12|0);
                    $382 = HEAP32[$381>>2]|0;
                    $$sum$i$i$i$i71 = (($382) + 24)|0;
                    $383 = (($324) + ($$sum$i$i$i$i71)|0);
                    $384 = HEAP32[$383>>2]|0;
                    $385 = ($384|0)==(0|0);
                    do {
                     if ($385) {
                      $401 = $382;
                      label = 114;
                     } else {
                      $386 = (($384) + 24|0);
                      $387 = HEAP32[$386>>2]|0;
                      $388 = (($384) + 28|0);
                      $389 = HEAP32[$388>>2]|0;
                      $390 = ($387|0)==($389|0);
                      if (!($390)) {
                       $391 = (($387) + 1|0);
                       HEAP32[$386>>2] = $391;
                       HEAP8[$387>>0] = $353;
                       label = 121;
                       break L127;
                      }
                      $392 = HEAP32[$384>>2]|0;
                      $393 = (($392) + 52|0);
                      $394 = HEAP32[$393>>2]|0;
                      $395 = $353&255;
                      __THREW__ = 0;
                      $396 = (invoke_iii($394|0,($384|0),($395|0))|0);
                      $397 = __THREW__; __THREW__ = 0;
                      $398 = $397&1;
                      if ($398) {
                       break;
                      }
                      $399 = ($396|0)==(-1);
                      if (!($399)) {
                       label = 121;
                       break L127;
                      }
                      $$pre$i$i75 = HEAP32[$324>>2]|0;
                      $$phi$trans$insert144 = (($$pre$i$i75) + -12|0);
                      $$pre146 = HEAP32[$$phi$trans$insert144>>2]|0;
                      $401 = $$pre146;
                      label = 114;
                     }
                    } while(0);
                    if ((label|0) == 114) {
                     $400 = (($324) + ($401)|0);
                     $$sum$i$i77 = (($401) + 16)|0;
                     $402 = (($324) + ($$sum$i$i77)|0);
                     $403 = HEAP32[$402>>2]|0;
                     $404 = $403 | 1;
                     __THREW__ = 0;
                     invoke_vii(425,($400|0),($404|0));
                     $405 = __THREW__; __THREW__ = 0;
                     $406 = $405&1;
                     if (!($406)) {
                      label = 121;
                      break;
                     }
                    }
                    $409 = ___cxa_find_matching_catch(0|0)|0;
                    $410 = tempRet0;
                    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                    $$0$i$i83 = $409;
                   }
                   (___cxa_begin_catch(($$0$i$i83|0))|0);
                   $411 = HEAP32[$324>>2]|0;
                   $412 = (($411) + -12|0);
                   $413 = HEAP32[$412>>2]|0;
                   $$sum125 = (($413) + 16)|0;
                   $414 = (($324) + ($$sum125)|0);
                   $415 = HEAP32[$414>>2]|0;
                   $416 = $415 | 1;
                   HEAP32[$414>>2] = $416;
                   $$sum126 = (($413) + 20)|0;
                   $417 = (($324) + ($$sum126)|0);
                   $418 = HEAP32[$417>>2]|0;
                   $419 = $418 & 1;
                   $420 = ($419|0)==(0);
                   if ($420) {
                    ___cxa_end_catch();
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(426);
                   $421 = __THREW__; __THREW__ = 0;
                   $422 = $421&1;
                   if (!($422)) {
                    // unreachable;
                   }
                   $423 = ___cxa_find_matching_catch()|0;
                   $424 = tempRet0;
                   __THREW__ = 0;
                   invoke_v(427);
                   $425 = __THREW__; __THREW__ = 0;
                   $426 = $425&1;
                   if ($426) {
                    $427 = ___cxa_find_matching_catch(0|0)|0;
                    $428 = tempRet0;
                    ___clang_call_terminate($427);
                    // unreachable;
                   } else {
                    ___resumeException($423|0);
                    // unreachable;
                   }
                  } else {
                   label = 121;
                  }
                 } while(0);
                 if ((label|0) == 121) {
                  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                 }
                 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($324);
                 $429 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(232)|0);
                 $430 = HEAP32[$429>>2]|0;
                 $431 = (($430) + -12|0);
                 $432 = HEAP32[$431>>2]|0;
                 $$sum122 = (($432) + 28)|0;
                 $433 = (($429) + ($$sum122)|0);
                 $434 = HEAP32[$433>>2]|0;
                 $435 = (($434) + 4|0);
                 $436 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($436+1)|0);
                 __THREW__ = 0;
                 $437 = (invoke_ii(423,(11752|0))|0);
                 $438 = __THREW__; __THREW__ = 0;
                 $439 = $438&1;
                 L157: do {
                  if (!($439)) {
                   $440 = (($434) + 12|0);
                   $441 = HEAP32[$440>>2]|0;
                   $442 = (($434) + 8|0);
                   $443 = HEAP32[$442>>2]|0;
                   $444 = $441;
                   $445 = $443;
                   $446 = (($444) - ($445))|0;
                   $447 = $446 >> 2;
                   $448 = ($447>>>0)>($437>>>0);
                   do {
                    if ($448) {
                     $449 = (($443) + ($437<<2)|0);
                     $450 = HEAP32[$449>>2]|0;
                     $451 = ($450|0)==(0|0);
                     if ($451) {
                      break;
                     }
                     $455 = HEAP32[$450>>2]|0;
                     $456 = (($455) + 28|0);
                     $457 = HEAP32[$456>>2]|0;
                     __THREW__ = 0;
                     $458 = (invoke_iii($457|0,($450|0),10)|0);
                     $459 = __THREW__; __THREW__ = 0;
                     $460 = $459&1;
                     if ($460) {
                      break L157;
                     }
                     $468 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($468+-1)|0);
                     $469 = ($468|0)==(0);
                     if ($469) {
                      $470 = HEAP32[$434>>2]|0;
                      $471 = (($470) + 8|0);
                      $472 = HEAP32[$471>>2]|0;
                      FUNCTION_TABLE_vi[$472 & 1023]($434);
                     }
                     HEAP8[$__s$i$i88>>0] = 0;
                     $473 = (($__s$i$i88) + 4|0);
                     HEAP32[$473>>2] = $429;
                     $474 = HEAP32[$429>>2]|0;
                     $475 = (($474) + -12|0);
                     $476 = HEAP32[$475>>2]|0;
                     $$sum$i3$i95 = (($476) + 16)|0;
                     $477 = (($429) + ($$sum$i3$i95)|0);
                     $478 = HEAP32[$477>>2]|0;
                     $479 = ($478|0)==(0);
                     L166: do {
                      if ($479) {
                       $$sum1$i$i97 = (($476) + 72)|0;
                       $480 = (($429) + ($$sum1$i$i97)|0);
                       $481 = HEAP32[$480>>2]|0;
                       $482 = ($481|0)==(0|0);
                       do {
                        if ($482) {
                         label = 139;
                        } else {
                         __THREW__ = 0;
                         invoke_vi(424,($481|0));
                         $483 = __THREW__; __THREW__ = 0;
                         $484 = $483&1;
                         if (!($484)) {
                          label = 139;
                          break;
                         }
                         $512 = ___cxa_find_matching_catch(0|0)|0;
                         $513 = tempRet0;
                         $$0$i$i112 = $512;
                        }
                       } while(0);
                       if ((label|0) == 139) {
                        HEAP8[$__s$i$i88>>0] = 1;
                        $485 = HEAP32[$429>>2]|0;
                        $486 = (($485) + -12|0);
                        $487 = HEAP32[$486>>2]|0;
                        $$sum$i$i$i$i100 = (($487) + 24)|0;
                        $488 = (($429) + ($$sum$i$i$i$i100)|0);
                        $489 = HEAP32[$488>>2]|0;
                        $490 = ($489|0)==(0|0);
                        do {
                         if ($490) {
                          $506 = $487;
                          label = 145;
                         } else {
                          $491 = (($489) + 24|0);
                          $492 = HEAP32[$491>>2]|0;
                          $493 = (($489) + 28|0);
                          $494 = HEAP32[$493>>2]|0;
                          $495 = ($492|0)==($494|0);
                          if (!($495)) {
                           $496 = (($492) + 1|0);
                           HEAP32[$491>>2] = $496;
                           HEAP8[$492>>0] = $458;
                           label = 152;
                           break L166;
                          }
                          $497 = HEAP32[$489>>2]|0;
                          $498 = (($497) + 52|0);
                          $499 = HEAP32[$498>>2]|0;
                          $500 = $458&255;
                          __THREW__ = 0;
                          $501 = (invoke_iii($499|0,($489|0),($500|0))|0);
                          $502 = __THREW__; __THREW__ = 0;
                          $503 = $502&1;
                          if ($503) {
                           break;
                          }
                          $504 = ($501|0)==(-1);
                          if (!($504)) {
                           label = 152;
                           break L166;
                          }
                          $$pre$i$i104 = HEAP32[$429>>2]|0;
                          $$phi$trans$insert147 = (($$pre$i$i104) + -12|0);
                          $$pre149 = HEAP32[$$phi$trans$insert147>>2]|0;
                          $506 = $$pre149;
                          label = 145;
                         }
                        } while(0);
                        if ((label|0) == 145) {
                         $505 = (($429) + ($506)|0);
                         $$sum$i$i106 = (($506) + 16)|0;
                         $507 = (($429) + ($$sum$i$i106)|0);
                         $508 = HEAP32[$507>>2]|0;
                         $509 = $508 | 1;
                         __THREW__ = 0;
                         invoke_vii(425,($505|0),($509|0));
                         $510 = __THREW__; __THREW__ = 0;
                         $511 = $510&1;
                         if (!($511)) {
                          label = 152;
                          break;
                         }
                        }
                        $514 = ___cxa_find_matching_catch(0|0)|0;
                        $515 = tempRet0;
                        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                        $$0$i$i112 = $514;
                       }
                       (___cxa_begin_catch(($$0$i$i112|0))|0);
                       $516 = HEAP32[$429>>2]|0;
                       $517 = (($516) + -12|0);
                       $518 = HEAP32[$517>>2]|0;
                       $$sum123 = (($518) + 16)|0;
                       $519 = (($429) + ($$sum123)|0);
                       $520 = HEAP32[$519>>2]|0;
                       $521 = $520 | 1;
                       HEAP32[$519>>2] = $521;
                       $$sum124 = (($518) + 20)|0;
                       $522 = (($429) + ($$sum124)|0);
                       $523 = HEAP32[$522>>2]|0;
                       $524 = $523 & 1;
                       $525 = ($524|0)==(0);
                       if ($525) {
                        ___cxa_end_catch();
                        break;
                       }
                       __THREW__ = 0;
                       invoke_v(426);
                       $526 = __THREW__; __THREW__ = 0;
                       $527 = $526&1;
                       if (!($527)) {
                        // unreachable;
                       }
                       $528 = ___cxa_find_matching_catch()|0;
                       $529 = tempRet0;
                       __THREW__ = 0;
                       invoke_v(427);
                       $530 = __THREW__; __THREW__ = 0;
                       $531 = $530&1;
                       if ($531) {
                        $532 = ___cxa_find_matching_catch(0|0)|0;
                        $533 = tempRet0;
                        ___clang_call_terminate($532);
                        // unreachable;
                       } else {
                        ___resumeException($528|0);
                        // unreachable;
                       }
                      } else {
                       label = 152;
                      }
                     } while(0);
                     if ((label|0) == 152) {
                      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                     }
                     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($429);
                     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($option);
                     $534 = HEAP32[$option>>2]|0;
                     switch ($534|0) {
                     case 1:  {
                      $$idx118 = (($_hero) + 44|0);
                      $$idx118$val = +HEAPF32[$$idx118>>2];
                      $535 = (+__ZN4hero25get_energy_consuming_rateEv($$idx118$val));
                      HEAPF32[$0>>2] = $535;
                      $536 = (($0) + 4|0);
                      HEAPF32[$536>>2] = -10.0;
                      $537 = (($0) + 8|0);
                      HEAPF32[$537>>2] = 0.0;
                      $538 = (($0) + 12|0);
                      HEAPF32[$538>>2] = 2.0;
                      $539 = (($0) + 16|0);
                      HEAPF32[$539>>2] = 0.0;
                      $540 = (($0) + 20|0);
                      HEAPF32[$540>>2] = 8.0;
                      $541 = (($_hero) + 76|0);
                      _memcpy(($1|0),($541|0),144)|0;
                      $542 = (($1) + 24|0);
                      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
                      ;HEAP32[$$byval_copy150+0>>2]=HEAP32[$542+0>>2]|0;HEAP32[$$byval_copy150+4>>2]=HEAP32[$542+4>>2]|0;HEAP32[$$byval_copy150+8>>2]=HEAP32[$542+8>>2]|0;HEAP32[$$byval_copy150+12>>2]=HEAP32[$542+12>>2]|0;HEAP32[$$byval_copy150+16>>2]=HEAP32[$542+16>>2]|0;HEAP32[$$byval_copy150+20>>2]=HEAP32[$542+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy,$$byval_copy150,1);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 2:  {
                      $$idx117 = (($_hero) + 44|0);
                      $$idx117$val = +HEAPF32[$$idx117>>2];
                      $543 = (+__ZN4hero25get_energy_consuming_rateEv($$idx117$val));
                      HEAPF32[$2>>2] = $543;
                      $544 = (($2) + 4|0);
                      HEAPF32[$544>>2] = 15.0;
                      $545 = (($2) + 8|0);
                      HEAPF32[$545>>2] = 1.0;
                      $546 = (($2) + 12|0);
                      HEAPF32[$546>>2] = -0.800000011920928955078;
                      $547 = (($2) + 16|0);
                      HEAPF32[$547>>2] = 0.0;
                      $548 = (($2) + 20|0);
                      HEAPF32[$548>>2] = 4.0;
                      $tmpcast = (($_hero) + 76|0);
                      ;HEAP32[$$byval_copy151+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$$byval_copy151+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy151+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy151+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy151+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy151+20>>2]=HEAP32[$2+20>>2]|0;
                      ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$tmpcast+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$tmpcast+4>>2]|0;HEAP32[$tmpcast$byval_copy+8>>2]=HEAP32[$tmpcast+8>>2]|0;HEAP32[$tmpcast$byval_copy+12>>2]=HEAP32[$tmpcast+12>>2]|0;HEAP32[$tmpcast$byval_copy+16>>2]=HEAP32[$tmpcast+16>>2]|0;HEAP32[$tmpcast$byval_copy+20>>2]=HEAP32[$tmpcast+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy151,$tmpcast$byval_copy,1);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 3:  {
                      $$idx = (($_hero) + 44|0);
                      $$idx$val = +HEAPF32[$$idx>>2];
                      $549 = (+__ZN4hero25get_energy_consuming_rateEv($$idx$val));
                      HEAPF32[$3>>2] = $549;
                      $550 = (($3) + 4|0);
                      HEAPF32[$550>>2] = -12.0;
                      $551 = (($3) + 8|0);
                      HEAPF32[$551>>2] = 5.0;
                      $552 = (($3) + 12|0);
                      HEAPF32[$552>>2] = -4.0;
                      $553 = (($3) + 16|0);
                      HEAPF32[$553>>2] = 0.0;
                      $554 = (($3) + 20|0);
                      HEAPF32[$554>>2] = 0.0;
                      $555 = (($_hero) + 76|0);
                      _memcpy(($4|0),($555|0),144)|0;
                      $556 = (($4) + 72|0);
                      ;HEAP32[$$byval_copy152+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy152+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy152+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy152+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy152+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy152+20>>2]=HEAP32[$3+20>>2]|0;
                      ;HEAP32[$$byval_copy153+0>>2]=HEAP32[$556+0>>2]|0;HEAP32[$$byval_copy153+4>>2]=HEAP32[$556+4>>2]|0;HEAP32[$$byval_copy153+8>>2]=HEAP32[$556+8>>2]|0;HEAP32[$$byval_copy153+12>>2]=HEAP32[$556+12>>2]|0;HEAP32[$$byval_copy153+16>>2]=HEAP32[$556+16>>2]|0;HEAP32[$$byval_copy153+20>>2]=HEAP32[$556+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy152,$$byval_copy153,1);
                      STACKTOP = sp;return;
                      break;
                     }
                     case 5:  {
                      HEAPF32[$7>>2] = 0.0;
                      $564 = (($7) + 4|0);
                      HEAPF32[$564>>2] = -12.0;
                      $565 = (($7) + 8|0);
                      $566 = (($_hero) + 76|0);
                      ;HEAP32[$565+0>>2]=0|0;HEAP32[$565+4>>2]=0|0;HEAP32[$565+8>>2]=0|0;HEAP32[$565+12>>2]=0|0;
                      _memcpy(($8|0),($566|0),144)|0;
                      $567 = (($8) + 120|0);
                      ;HEAP32[$$byval_copy156+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy156+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy156+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy156+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy156+20>>2]=HEAP32[$7+20>>2]|0;
                      ;HEAP32[$$byval_copy157+0>>2]=HEAP32[$567+0>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$567+4>>2]|0;HEAP32[$$byval_copy157+8>>2]=HEAP32[$567+8>>2]|0;HEAP32[$$byval_copy157+12>>2]=HEAP32[$567+12>>2]|0;HEAP32[$$byval_copy157+16>>2]=HEAP32[$567+16>>2]|0;HEAP32[$$byval_copy157+20>>2]=HEAP32[$567+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy156,$$byval_copy157,1);
                      $568 = +HEAPF32[$_hero>>2];
                      $569 = (($_hero) + 24|0);
                      HEAPF32[$569>>2] = $568;
                      STACKTOP = sp;return;
                      break;
                     }
                     case 4:  {
                      HEAPF32[$5>>2] = 8.0;
                      $557 = (($5) + 4|0);
                      HEAPF32[$557>>2] = -10.0;
                      $558 = (($5) + 8|0);
                      HEAPF32[$558>>2] = 0.0;
                      $559 = (($5) + 12|0);
                      HEAPF32[$559>>2] = 0.0;
                      $560 = (($5) + 16|0);
                      HEAPF32[$560>>2] = 0.0;
                      $561 = (($5) + 20|0);
                      HEAPF32[$561>>2] = -4.0;
                      $562 = (($_hero) + 76|0);
                      _memcpy(($6|0),($562|0),144)|0;
                      $563 = (($6) + 96|0);
                      ;HEAP32[$$byval_copy154+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy154+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy154+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy154+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy154+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$$byval_copy154+20>>2]=HEAP32[$5+20>>2]|0;
                      ;HEAP32[$$byval_copy155+0>>2]=HEAP32[$563+0>>2]|0;HEAP32[$$byval_copy155+4>>2]=HEAP32[$563+4>>2]|0;HEAP32[$$byval_copy155+8>>2]=HEAP32[$563+8>>2]|0;HEAP32[$$byval_copy155+12>>2]=HEAP32[$563+12>>2]|0;HEAP32[$$byval_copy155+16>>2]=HEAP32[$563+16>>2]|0;HEAP32[$$byval_copy155+20>>2]=HEAP32[$563+20>>2]|0;
                      __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy154,$$byval_copy155,1);
                      STACKTOP = sp;return;
                      break;
                     }
                     default: {
                      STACKTOP = sp;return;
                     }
                     }
                    }
                   } while(0);
                   $452 = (___cxa_allocate_exception(4)|0);
                   HEAP32[$452>>2] = ((20400 + 8|0));
                   __THREW__ = 0;
                   invoke_viii(422,($452|0),(20480|0),(396|0));
                   $453 = __THREW__; __THREW__ = 0;
                   $454 = $453&1;
                   if ($454) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $461 = ___cxa_find_matching_catch()|0;
                 $462 = tempRet0;
                 $463 = HEAP32[$435>>2]|0;HEAP32[$435>>2] = (($463+-1)|0);
                 $464 = ($463|0)==(0);
                 if (!($464)) {
                  ___resumeException($461|0);
                  // unreachable;
                 }
                 $465 = HEAP32[$434>>2]|0;
                 $466 = (($465) + 8|0);
                 $467 = HEAP32[$466>>2]|0;
                 FUNCTION_TABLE_vi[$467 & 1023]($434);
                 ___resumeException($461|0);
                 // unreachable;
                }
               } while(0);
               $347 = (___cxa_allocate_exception(4)|0);
               HEAP32[$347>>2] = ((20400 + 8|0));
               __THREW__ = 0;
               invoke_viii(422,($347|0),(20480|0),(396|0));
               $348 = __THREW__; __THREW__ = 0;
               $349 = $348&1;
               if ($349) {
                break;
               }
               // unreachable;
              }
             } while(0);
             $356 = ___cxa_find_matching_catch()|0;
             $357 = tempRet0;
             $358 = HEAP32[$330>>2]|0;HEAP32[$330>>2] = (($358+-1)|0);
             $359 = ($358|0)==(0);
             if (!($359)) {
              ___resumeException($356|0);
              // unreachable;
             }
             $360 = HEAP32[$329>>2]|0;
             $361 = (($360) + 8|0);
             $362 = HEAP32[$361>>2]|0;
             FUNCTION_TABLE_vi[$362 & 1023]($329);
             ___resumeException($356|0);
             // unreachable;
            }
           } while(0);
           $242 = (___cxa_allocate_exception(4)|0);
           HEAP32[$242>>2] = ((20400 + 8|0));
           __THREW__ = 0;
           invoke_viii(422,($242|0),(20480|0),(396|0));
           $243 = __THREW__; __THREW__ = 0;
           $244 = $243&1;
           if (!($244)) {
            // unreachable;
           }
          }
         } while(0);
         $251 = ___cxa_find_matching_catch()|0;
         $252 = tempRet0;
         $253 = HEAP32[$225>>2]|0;HEAP32[$225>>2] = (($253+-1)|0);
         $254 = ($253|0)==(0);
         if (!($254)) {
          ___resumeException($251|0);
          // unreachable;
         }
         $255 = HEAP32[$224>>2]|0;
         $256 = (($255) + 8|0);
         $257 = HEAP32[$256>>2]|0;
         FUNCTION_TABLE_vi[$257 & 1023]($224);
         ___resumeException($251|0);
         // unreachable;
        }
       }
       $137 = (___cxa_allocate_exception(4)|0);
       HEAP32[$137>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($137|0),(20480|0),(396|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if (!($139)) {
        // unreachable;
       }
      }
     } while(0);
     $146 = ___cxa_find_matching_catch()|0;
     $147 = tempRet0;
     $148 = HEAP32[$120>>2]|0;HEAP32[$120>>2] = (($148+-1)|0);
     $149 = ($148|0)==(0);
     if (!($149)) {
      ___resumeException($146|0);
      // unreachable;
     }
     $150 = HEAP32[$119>>2]|0;
     $151 = (($150) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     FUNCTION_TABLE_vi[$152 & 1023]($119);
     ___resumeException($146|0);
     // unreachable;
    }
   }
   $32 = (___cxa_allocate_exception(4)|0);
   HEAP32[$32>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($32|0),(20480|0),(396|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    // unreachable;
   }
  }
 } while(0);
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $43 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($43+-1)|0);
 $44 = ($43|0)==(0);
 if (!($44)) {
  ___resumeException($41|0);
  // unreachable;
 }
 $45 = HEAP32[$14>>2]|0;
 $46 = (($45) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vi[$47 & 1023]($14);
 ___resumeException($41|0);
 // unreachable;
}
function __ZN5dance11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i112 = 0, $$0$i$i141 = 0, $$0$i$i25 = 0, $$0$i$i54 = 0, $$0$i$i83 = 0, $$byval_copy = 0, $$byval_copy188 = 0, $$byval_copy189 = 0, $$byval_copy190 = 0, $$byval_copy191 = 0, $$byval_copy192 = 0, $$byval_copy193 = 0, $$byval_copy194 = 0, $$byval_copy195 = 0, $$byval_copy196 = 0, $$idx = 0, $$idx$val = 0.0, $$idx146 = 0, $$idx146$val = 0.0;
 var $$idx147 = 0, $$idx147$val = 0.0, $$idx148 = 0, $$idx148$val = 0.0, $$idx149 = 0, $$idx149$val = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert173 = 0, $$phi$trans$insert176 = 0, $$phi$trans$insert179 = 0, $$phi$trans$insert182 = 0, $$phi$trans$insert185 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i104 = 0, $$pre$i$i133 = 0, $$pre$i$i17 = 0, $$pre$i$i46 = 0, $$pre$i$i75 = 0, $$pre175 = 0;
 var $$pre178 = 0, $$pre181 = 0, $$pre184 = 0, $$pre187 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i$i100 = 0, $$sum$i$i$i$i129 = 0, $$sum$i$i$i$i13 = 0, $$sum$i$i$i$i42 = 0, $$sum$i$i$i$i71 = 0, $$sum$i$i106 = 0, $$sum$i$i135 = 0, $$sum$i$i19 = 0, $$sum$i$i48 = 0, $$sum$i$i77 = 0, $$sum$i3$i = 0, $$sum$i3$i124 = 0, $$sum$i3$i37 = 0;
 var $$sum$i3$i66 = 0, $$sum$i3$i8 = 0, $$sum$i3$i95 = 0, $$sum1$i$i = 0, $$sum1$i$i10 = 0, $$sum1$i$i126 = 0, $$sum1$i$i39 = 0, $$sum1$i$i68 = 0, $$sum1$i$i97 = 0, $$sum150 = 0, $$sum151 = 0, $$sum152 = 0, $$sum153 = 0, $$sum154 = 0, $$sum155 = 0, $$sum156 = 0, $$sum157 = 0, $$sum158 = 0, $$sum159 = 0, $$sum160 = 0;
 var $$sum161 = 0, $$sum162 = 0, $$sum163 = 0, $$sum164 = 0, $$sum165 = 0, $$sum166 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s$i$i = 0, $__s$i$i1 = 0, $__s$i$i117 = 0, $__s$i$i30 = 0, $__s$i$i59 = 0, $__s$i$i88 = 0, $option = 0, $tmpcast = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy196 = sp + 1016|0;
 $$byval_copy195 = sp + 992|0;
 $$byval_copy194 = sp + 968|0;
 $$byval_copy193 = sp + 944|0;
 $$byval_copy192 = sp + 920|0;
 $$byval_copy191 = sp + 896|0;
 $$byval_copy190 = sp + 872|0;
 $tmpcast$byval_copy = sp + 848|0;
 $$byval_copy189 = sp + 824|0;
 $$byval_copy188 = sp + 800|0;
 $$byval_copy = sp + 776|0;
 $__s$i$i117 = sp + 768|0;
 $__s$i$i88 = sp + 760|0;
 $__s$i$i59 = sp + 752|0;
 $__s$i$i30 = sp + 744|0;
 $__s$i$i1 = sp + 208|0;
 $__s$i$i = sp;
 $option = sp + 8|0;
 $0 = sp + 16|0;
 $1 = sp + 40|0;
 $2 = sp + 184|0;
 $3 = sp + 216|0;
 $4 = sp + 240|0;
 $5 = sp + 384|0;
 $6 = sp + 408|0;
 $7 = sp + 552|0;
 $8 = sp + 576|0;
 $9 = sp + 720|0;
 $10 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(56)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $$sum = (($13) + 28)|0;
 $14 = (($10) + ($$sum)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17+1)|0);
 __THREW__ = 0;
 $18 = (invoke_ii(423,(11752|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 do {
  if (!($20)) {
   $21 = (($15) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($15) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $22;
   $26 = $24;
   $27 = (($25) - ($26))|0;
   $28 = $27 >> 2;
   $29 = ($28>>>0)>($18>>>0);
   if ($29) {
    $30 = (($24) + ($18<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     $36 = HEAP32[$31>>2]|0;
     $37 = (($36) + 28|0);
     $38 = HEAP32[$37>>2]|0;
     __THREW__ = 0;
     $39 = (invoke_iii($38|0,($31|0),10)|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      break;
     }
     $49 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($49+-1)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = HEAP32[$15>>2]|0;
      $52 = (($51) + 8|0);
      $53 = HEAP32[$52>>2]|0;
      FUNCTION_TABLE_vi[$53 & 1023]($15);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $54 = (($__s$i$i) + 4|0);
     HEAP32[$54>>2] = $10;
     $55 = HEAP32[$10>>2]|0;
     $56 = (($55) + -12|0);
     $57 = HEAP32[$56>>2]|0;
     $$sum$i3$i = (($57) + 16)|0;
     $58 = (($10) + ($$sum$i3$i)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)==(0);
     do {
      if ($60) {
       $$sum1$i$i = (($57) + 72)|0;
       $61 = (($10) + ($$sum1$i$i)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($62|0)==(0|0);
       if ($63) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($62|0));
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $93 = ___cxa_find_matching_catch(0|0)|0;
         $94 = tempRet0;
         $$0$i$i = $93;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $66 = HEAP32[$10>>2]|0;
        $67 = (($66) + -12|0);
        $68 = HEAP32[$67>>2]|0;
        $$sum$i$i$i$i = (($68) + 24)|0;
        $69 = (($10) + ($$sum$i$i$i$i)|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($70|0)==(0|0);
        if ($71) {
         $87 = $68;
         label = 21;
        } else {
         $72 = (($70) + 24|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = (($70) + 28|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = ($73|0)==($75|0);
         if (!($76)) {
          $77 = (($73) + 1|0);
          HEAP32[$72>>2] = $77;
          HEAP8[$73>>0] = $39;
          label = 28;
          break;
         }
         $78 = HEAP32[$70>>2]|0;
         $79 = (($78) + 52|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = $39&255;
         __THREW__ = 0;
         $82 = (invoke_iii($80|0,($70|0),($81|0))|0);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if (!($84)) {
          $85 = ($82|0)==(-1);
          if (!($85)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$10>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $87 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $86 = (($10) + ($87)|0);
         $$sum$i$i = (($87) + 16)|0;
         $88 = (($10) + ($$sum$i$i)|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = $89 | 1;
         __THREW__ = 0;
         invoke_vii(425,($86|0),($90|0));
         $91 = __THREW__; __THREW__ = 0;
         $92 = $91&1;
         if (!($92)) {
          label = 28;
          break;
         }
        }
        $95 = ___cxa_find_matching_catch(0|0)|0;
        $96 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $95;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $97 = HEAP32[$10>>2]|0;
       $98 = (($97) + -12|0);
       $99 = HEAP32[$98>>2]|0;
       $$sum165 = (($99) + 16)|0;
       $100 = (($10) + ($$sum165)|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = $101 | 1;
       HEAP32[$100>>2] = $102;
       $$sum166 = (($99) + 20)|0;
       $103 = (($10) + ($$sum166)|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = $104 & 1;
       $106 = ($105|0)==(0);
       if ($106) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $107 = __THREW__; __THREW__ = 0;
       $108 = $107&1;
       if (!($108)) {
        // unreachable;
       }
       $109 = ___cxa_find_matching_catch()|0;
       $110 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        $113 = ___cxa_find_matching_catch(0|0)|0;
        $114 = tempRet0;
        ___clang_call_terminate($113);
        // unreachable;
       } else {
        ___resumeException($109|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($10);
     $115 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(72)|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + -12|0);
     $118 = HEAP32[$117>>2]|0;
     $$sum150 = (($118) + 28)|0;
     $119 = (($115) + ($$sum150)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + 4|0);
     $122 = HEAP32[$121>>2]|0;HEAP32[$121>>2] = (($122+1)|0);
     __THREW__ = 0;
     $123 = (invoke_ii(423,(11752|0))|0);
     $124 = __THREW__; __THREW__ = 0;
     $125 = $124&1;
     do {
      if (!($125)) {
       $126 = (($120) + 12|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = (($120) + 8|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = $127;
       $131 = $129;
       $132 = (($130) - ($131))|0;
       $133 = $132 >> 2;
       $134 = ($133>>>0)>($123>>>0);
       if ($134) {
        $135 = (($129) + ($123<<2)|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)==(0|0);
        if (!($137)) {
         $141 = HEAP32[$136>>2]|0;
         $142 = (($141) + 28|0);
         $143 = HEAP32[$142>>2]|0;
         __THREW__ = 0;
         $144 = (invoke_iii($143|0,($136|0),10)|0);
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         if ($146) {
          break;
         }
         $154 = HEAP32[$121>>2]|0;HEAP32[$121>>2] = (($154+-1)|0);
         $155 = ($154|0)==(0);
         if ($155) {
          $156 = HEAP32[$120>>2]|0;
          $157 = (($156) + 8|0);
          $158 = HEAP32[$157>>2]|0;
          FUNCTION_TABLE_vi[$158 & 1023]($120);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $159 = (($__s$i$i1) + 4|0);
         HEAP32[$159>>2] = $115;
         $160 = HEAP32[$115>>2]|0;
         $161 = (($160) + -12|0);
         $162 = HEAP32[$161>>2]|0;
         $$sum$i3$i8 = (($162) + 16)|0;
         $163 = (($115) + ($$sum$i3$i8)|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = ($164|0)==(0);
         L49: do {
          if ($165) {
           $$sum1$i$i10 = (($162) + 72)|0;
           $166 = (($115) + ($$sum1$i$i10)|0);
           $167 = HEAP32[$166>>2]|0;
           $168 = ($167|0)==(0|0);
           if ($168) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($167|0));
            $169 = __THREW__; __THREW__ = 0;
            $170 = $169&1;
            if ($170) {
             $198 = ___cxa_find_matching_catch(0|0)|0;
             $199 = tempRet0;
             $$0$i$i25 = $198;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $171 = HEAP32[$115>>2]|0;
            $172 = (($171) + -12|0);
            $173 = HEAP32[$172>>2]|0;
            $$sum$i$i$i$i13 = (($173) + 24)|0;
            $174 = (($115) + ($$sum$i$i$i$i13)|0);
            $175 = HEAP32[$174>>2]|0;
            $176 = ($175|0)==(0|0);
            do {
             if ($176) {
              $192 = $173;
              label = 52;
             } else {
              $177 = (($175) + 24|0);
              $178 = HEAP32[$177>>2]|0;
              $179 = (($175) + 28|0);
              $180 = HEAP32[$179>>2]|0;
              $181 = ($178|0)==($180|0);
              if (!($181)) {
               $182 = (($178) + 1|0);
               HEAP32[$177>>2] = $182;
               HEAP8[$178>>0] = $144;
               label = 59;
               break L49;
              }
              $183 = HEAP32[$175>>2]|0;
              $184 = (($183) + 52|0);
              $185 = HEAP32[$184>>2]|0;
              $186 = $144&255;
              __THREW__ = 0;
              $187 = (invoke_iii($185|0,($175|0),($186|0))|0);
              $188 = __THREW__; __THREW__ = 0;
              $189 = $188&1;
              if ($189) {
               break;
              }
              $190 = ($187|0)==(-1);
              if (!($190)) {
               label = 59;
               break L49;
              }
              $$pre$i$i17 = HEAP32[$115>>2]|0;
              $$phi$trans$insert173 = (($$pre$i$i17) + -12|0);
              $$pre175 = HEAP32[$$phi$trans$insert173>>2]|0;
              $192 = $$pre175;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $191 = (($115) + ($192)|0);
             $$sum$i$i19 = (($192) + 16)|0;
             $193 = (($115) + ($$sum$i$i19)|0);
             $194 = HEAP32[$193>>2]|0;
             $195 = $194 | 1;
             __THREW__ = 0;
             invoke_vii(425,($191|0),($195|0));
             $196 = __THREW__; __THREW__ = 0;
             $197 = $196&1;
             if (!($197)) {
              label = 59;
              break;
             }
            }
            $200 = ___cxa_find_matching_catch(0|0)|0;
            $201 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $200;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $202 = HEAP32[$115>>2]|0;
           $203 = (($202) + -12|0);
           $204 = HEAP32[$203>>2]|0;
           $$sum163 = (($204) + 16)|0;
           $205 = (($115) + ($$sum163)|0);
           $206 = HEAP32[$205>>2]|0;
           $207 = $206 | 1;
           HEAP32[$205>>2] = $207;
           $$sum164 = (($204) + 20)|0;
           $208 = (($115) + ($$sum164)|0);
           $209 = HEAP32[$208>>2]|0;
           $210 = $209 & 1;
           $211 = ($210|0)==(0);
           if ($211) {
            ___cxa_end_catch();
            break;
           }
           __THREW__ = 0;
           invoke_v(426);
           $212 = __THREW__; __THREW__ = 0;
           $213 = $212&1;
           if (!($213)) {
            // unreachable;
           }
           $214 = ___cxa_find_matching_catch()|0;
           $215 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $216 = __THREW__; __THREW__ = 0;
           $217 = $216&1;
           if ($217) {
            $218 = ___cxa_find_matching_catch(0|0)|0;
            $219 = tempRet0;
            ___clang_call_terminate($218);
            // unreachable;
           } else {
            ___resumeException($214|0);
            // unreachable;
           }
          } else {
           label = 59;
          }
         } while(0);
         if ((label|0) == 59) {
          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         }
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($115);
         $220 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(88)|0);
         $221 = HEAP32[$220>>2]|0;
         $222 = (($221) + -12|0);
         $223 = HEAP32[$222>>2]|0;
         $$sum151 = (($223) + 28)|0;
         $224 = (($220) + ($$sum151)|0);
         $225 = HEAP32[$224>>2]|0;
         $226 = (($225) + 4|0);
         $227 = HEAP32[$226>>2]|0;HEAP32[$226>>2] = (($227+1)|0);
         __THREW__ = 0;
         $228 = (invoke_ii(423,(11752|0))|0);
         $229 = __THREW__; __THREW__ = 0;
         $230 = $229&1;
         L79: do {
          if (!($230)) {
           $231 = (($225) + 12|0);
           $232 = HEAP32[$231>>2]|0;
           $233 = (($225) + 8|0);
           $234 = HEAP32[$233>>2]|0;
           $235 = $232;
           $236 = $234;
           $237 = (($235) - ($236))|0;
           $238 = $237 >> 2;
           $239 = ($238>>>0)>($228>>>0);
           do {
            if ($239) {
             $240 = (($234) + ($228<<2)|0);
             $241 = HEAP32[$240>>2]|0;
             $242 = ($241|0)==(0|0);
             if ($242) {
              break;
             }
             $246 = HEAP32[$241>>2]|0;
             $247 = (($246) + 28|0);
             $248 = HEAP32[$247>>2]|0;
             __THREW__ = 0;
             $249 = (invoke_iii($248|0,($241|0),10)|0);
             $250 = __THREW__; __THREW__ = 0;
             $251 = $250&1;
             if ($251) {
              break L79;
             }
             $259 = HEAP32[$226>>2]|0;HEAP32[$226>>2] = (($259+-1)|0);
             $260 = ($259|0)==(0);
             if ($260) {
              $261 = HEAP32[$225>>2]|0;
              $262 = (($261) + 8|0);
              $263 = HEAP32[$262>>2]|0;
              FUNCTION_TABLE_vi[$263 & 1023]($225);
             }
             HEAP8[$__s$i$i30>>0] = 0;
             $264 = (($__s$i$i30) + 4|0);
             HEAP32[$264>>2] = $220;
             $265 = HEAP32[$220>>2]|0;
             $266 = (($265) + -12|0);
             $267 = HEAP32[$266>>2]|0;
             $$sum$i3$i37 = (($267) + 16)|0;
             $268 = (($220) + ($$sum$i3$i37)|0);
             $269 = HEAP32[$268>>2]|0;
             $270 = ($269|0)==(0);
             L88: do {
              if ($270) {
               $$sum1$i$i39 = (($267) + 72)|0;
               $271 = (($220) + ($$sum1$i$i39)|0);
               $272 = HEAP32[$271>>2]|0;
               $273 = ($272|0)==(0|0);
               do {
                if ($273) {
                 label = 77;
                } else {
                 __THREW__ = 0;
                 invoke_vi(424,($272|0));
                 $274 = __THREW__; __THREW__ = 0;
                 $275 = $274&1;
                 if (!($275)) {
                  label = 77;
                  break;
                 }
                 $303 = ___cxa_find_matching_catch(0|0)|0;
                 $304 = tempRet0;
                 $$0$i$i54 = $303;
                }
               } while(0);
               if ((label|0) == 77) {
                HEAP8[$__s$i$i30>>0] = 1;
                $276 = HEAP32[$220>>2]|0;
                $277 = (($276) + -12|0);
                $278 = HEAP32[$277>>2]|0;
                $$sum$i$i$i$i42 = (($278) + 24)|0;
                $279 = (($220) + ($$sum$i$i$i$i42)|0);
                $280 = HEAP32[$279>>2]|0;
                $281 = ($280|0)==(0|0);
                do {
                 if ($281) {
                  $297 = $278;
                  label = 83;
                 } else {
                  $282 = (($280) + 24|0);
                  $283 = HEAP32[$282>>2]|0;
                  $284 = (($280) + 28|0);
                  $285 = HEAP32[$284>>2]|0;
                  $286 = ($283|0)==($285|0);
                  if (!($286)) {
                   $287 = (($283) + 1|0);
                   HEAP32[$282>>2] = $287;
                   HEAP8[$283>>0] = $249;
                   label = 90;
                   break L88;
                  }
                  $288 = HEAP32[$280>>2]|0;
                  $289 = (($288) + 52|0);
                  $290 = HEAP32[$289>>2]|0;
                  $291 = $249&255;
                  __THREW__ = 0;
                  $292 = (invoke_iii($290|0,($280|0),($291|0))|0);
                  $293 = __THREW__; __THREW__ = 0;
                  $294 = $293&1;
                  if ($294) {
                   break;
                  }
                  $295 = ($292|0)==(-1);
                  if (!($295)) {
                   label = 90;
                   break L88;
                  }
                  $$pre$i$i46 = HEAP32[$220>>2]|0;
                  $$phi$trans$insert176 = (($$pre$i$i46) + -12|0);
                  $$pre178 = HEAP32[$$phi$trans$insert176>>2]|0;
                  $297 = $$pre178;
                  label = 83;
                 }
                } while(0);
                if ((label|0) == 83) {
                 $296 = (($220) + ($297)|0);
                 $$sum$i$i48 = (($297) + 16)|0;
                 $298 = (($220) + ($$sum$i$i48)|0);
                 $299 = HEAP32[$298>>2]|0;
                 $300 = $299 | 1;
                 __THREW__ = 0;
                 invoke_vii(425,($296|0),($300|0));
                 $301 = __THREW__; __THREW__ = 0;
                 $302 = $301&1;
                 if (!($302)) {
                  label = 90;
                  break;
                 }
                }
                $305 = ___cxa_find_matching_catch(0|0)|0;
                $306 = tempRet0;
                __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
                $$0$i$i54 = $305;
               }
               (___cxa_begin_catch(($$0$i$i54|0))|0);
               $307 = HEAP32[$220>>2]|0;
               $308 = (($307) + -12|0);
               $309 = HEAP32[$308>>2]|0;
               $$sum161 = (($309) + 16)|0;
               $310 = (($220) + ($$sum161)|0);
               $311 = HEAP32[$310>>2]|0;
               $312 = $311 | 1;
               HEAP32[$310>>2] = $312;
               $$sum162 = (($309) + 20)|0;
               $313 = (($220) + ($$sum162)|0);
               $314 = HEAP32[$313>>2]|0;
               $315 = $314 & 1;
               $316 = ($315|0)==(0);
               if ($316) {
                ___cxa_end_catch();
                break;
               }
               __THREW__ = 0;
               invoke_v(426);
               $317 = __THREW__; __THREW__ = 0;
               $318 = $317&1;
               if (!($318)) {
                // unreachable;
               }
               $319 = ___cxa_find_matching_catch()|0;
               $320 = tempRet0;
               __THREW__ = 0;
               invoke_v(427);
               $321 = __THREW__; __THREW__ = 0;
               $322 = $321&1;
               if ($322) {
                $323 = ___cxa_find_matching_catch(0|0)|0;
                $324 = tempRet0;
                ___clang_call_terminate($323);
                // unreachable;
               } else {
                ___resumeException($319|0);
                // unreachable;
               }
              } else {
               label = 90;
              }
             } while(0);
             if ((label|0) == 90) {
              __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i30);
             }
             __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($220);
             $325 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(120)|0);
             $326 = HEAP32[$325>>2]|0;
             $327 = (($326) + -12|0);
             $328 = HEAP32[$327>>2]|0;
             $$sum152 = (($328) + 28)|0;
             $329 = (($325) + ($$sum152)|0);
             $330 = HEAP32[$329>>2]|0;
             $331 = (($330) + 4|0);
             $332 = HEAP32[$331>>2]|0;HEAP32[$331>>2] = (($332+1)|0);
             __THREW__ = 0;
             $333 = (invoke_ii(423,(11752|0))|0);
             $334 = __THREW__; __THREW__ = 0;
             $335 = $334&1;
             L118: do {
              if (!($335)) {
               $336 = (($330) + 12|0);
               $337 = HEAP32[$336>>2]|0;
               $338 = (($330) + 8|0);
               $339 = HEAP32[$338>>2]|0;
               $340 = $337;
               $341 = $339;
               $342 = (($340) - ($341))|0;
               $343 = $342 >> 2;
               $344 = ($343>>>0)>($333>>>0);
               do {
                if ($344) {
                 $345 = (($339) + ($333<<2)|0);
                 $346 = HEAP32[$345>>2]|0;
                 $347 = ($346|0)==(0|0);
                 if ($347) {
                  break;
                 }
                 $351 = HEAP32[$346>>2]|0;
                 $352 = (($351) + 28|0);
                 $353 = HEAP32[$352>>2]|0;
                 __THREW__ = 0;
                 $354 = (invoke_iii($353|0,($346|0),10)|0);
                 $355 = __THREW__; __THREW__ = 0;
                 $356 = $355&1;
                 if ($356) {
                  break L118;
                 }
                 $364 = HEAP32[$331>>2]|0;HEAP32[$331>>2] = (($364+-1)|0);
                 $365 = ($364|0)==(0);
                 if ($365) {
                  $366 = HEAP32[$330>>2]|0;
                  $367 = (($366) + 8|0);
                  $368 = HEAP32[$367>>2]|0;
                  FUNCTION_TABLE_vi[$368 & 1023]($330);
                 }
                 HEAP8[$__s$i$i59>>0] = 0;
                 $369 = (($__s$i$i59) + 4|0);
                 HEAP32[$369>>2] = $325;
                 $370 = HEAP32[$325>>2]|0;
                 $371 = (($370) + -12|0);
                 $372 = HEAP32[$371>>2]|0;
                 $$sum$i3$i66 = (($372) + 16)|0;
                 $373 = (($325) + ($$sum$i3$i66)|0);
                 $374 = HEAP32[$373>>2]|0;
                 $375 = ($374|0)==(0);
                 L127: do {
                  if ($375) {
                   $$sum1$i$i68 = (($372) + 72)|0;
                   $376 = (($325) + ($$sum1$i$i68)|0);
                   $377 = HEAP32[$376>>2]|0;
                   $378 = ($377|0)==(0|0);
                   do {
                    if ($378) {
                     label = 108;
                    } else {
                     __THREW__ = 0;
                     invoke_vi(424,($377|0));
                     $379 = __THREW__; __THREW__ = 0;
                     $380 = $379&1;
                     if (!($380)) {
                      label = 108;
                      break;
                     }
                     $408 = ___cxa_find_matching_catch(0|0)|0;
                     $409 = tempRet0;
                     $$0$i$i83 = $408;
                    }
                   } while(0);
                   if ((label|0) == 108) {
                    HEAP8[$__s$i$i59>>0] = 1;
                    $381 = HEAP32[$325>>2]|0;
                    $382 = (($381) + -12|0);
                    $383 = HEAP32[$382>>2]|0;
                    $$sum$i$i$i$i71 = (($383) + 24)|0;
                    $384 = (($325) + ($$sum$i$i$i$i71)|0);
                    $385 = HEAP32[$384>>2]|0;
                    $386 = ($385|0)==(0|0);
                    do {
                     if ($386) {
                      $402 = $383;
                      label = 114;
                     } else {
                      $387 = (($385) + 24|0);
                      $388 = HEAP32[$387>>2]|0;
                      $389 = (($385) + 28|0);
                      $390 = HEAP32[$389>>2]|0;
                      $391 = ($388|0)==($390|0);
                      if (!($391)) {
                       $392 = (($388) + 1|0);
                       HEAP32[$387>>2] = $392;
                       HEAP8[$388>>0] = $354;
                       label = 121;
                       break L127;
                      }
                      $393 = HEAP32[$385>>2]|0;
                      $394 = (($393) + 52|0);
                      $395 = HEAP32[$394>>2]|0;
                      $396 = $354&255;
                      __THREW__ = 0;
                      $397 = (invoke_iii($395|0,($385|0),($396|0))|0);
                      $398 = __THREW__; __THREW__ = 0;
                      $399 = $398&1;
                      if ($399) {
                       break;
                      }
                      $400 = ($397|0)==(-1);
                      if (!($400)) {
                       label = 121;
                       break L127;
                      }
                      $$pre$i$i75 = HEAP32[$325>>2]|0;
                      $$phi$trans$insert179 = (($$pre$i$i75) + -12|0);
                      $$pre181 = HEAP32[$$phi$trans$insert179>>2]|0;
                      $402 = $$pre181;
                      label = 114;
                     }
                    } while(0);
                    if ((label|0) == 114) {
                     $401 = (($325) + ($402)|0);
                     $$sum$i$i77 = (($402) + 16)|0;
                     $403 = (($325) + ($$sum$i$i77)|0);
                     $404 = HEAP32[$403>>2]|0;
                     $405 = $404 | 1;
                     __THREW__ = 0;
                     invoke_vii(425,($401|0),($405|0));
                     $406 = __THREW__; __THREW__ = 0;
                     $407 = $406&1;
                     if (!($407)) {
                      label = 121;
                      break;
                     }
                    }
                    $410 = ___cxa_find_matching_catch(0|0)|0;
                    $411 = tempRet0;
                    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                    $$0$i$i83 = $410;
                   }
                   (___cxa_begin_catch(($$0$i$i83|0))|0);
                   $412 = HEAP32[$325>>2]|0;
                   $413 = (($412) + -12|0);
                   $414 = HEAP32[$413>>2]|0;
                   $$sum159 = (($414) + 16)|0;
                   $415 = (($325) + ($$sum159)|0);
                   $416 = HEAP32[$415>>2]|0;
                   $417 = $416 | 1;
                   HEAP32[$415>>2] = $417;
                   $$sum160 = (($414) + 20)|0;
                   $418 = (($325) + ($$sum160)|0);
                   $419 = HEAP32[$418>>2]|0;
                   $420 = $419 & 1;
                   $421 = ($420|0)==(0);
                   if ($421) {
                    ___cxa_end_catch();
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(426);
                   $422 = __THREW__; __THREW__ = 0;
                   $423 = $422&1;
                   if (!($423)) {
                    // unreachable;
                   }
                   $424 = ___cxa_find_matching_catch()|0;
                   $425 = tempRet0;
                   __THREW__ = 0;
                   invoke_v(427);
                   $426 = __THREW__; __THREW__ = 0;
                   $427 = $426&1;
                   if ($427) {
                    $428 = ___cxa_find_matching_catch(0|0)|0;
                    $429 = tempRet0;
                    ___clang_call_terminate($428);
                    // unreachable;
                   } else {
                    ___resumeException($424|0);
                    // unreachable;
                   }
                  } else {
                   label = 121;
                  }
                 } while(0);
                 if ((label|0) == 121) {
                  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i59);
                 }
                 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($325);
                 $430 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(136)|0);
                 $431 = HEAP32[$430>>2]|0;
                 $432 = (($431) + -12|0);
                 $433 = HEAP32[$432>>2]|0;
                 $$sum153 = (($433) + 28)|0;
                 $434 = (($430) + ($$sum153)|0);
                 $435 = HEAP32[$434>>2]|0;
                 $436 = (($435) + 4|0);
                 $437 = HEAP32[$436>>2]|0;HEAP32[$436>>2] = (($437+1)|0);
                 __THREW__ = 0;
                 $438 = (invoke_ii(423,(11752|0))|0);
                 $439 = __THREW__; __THREW__ = 0;
                 $440 = $439&1;
                 L157: do {
                  if (!($440)) {
                   $441 = (($435) + 12|0);
                   $442 = HEAP32[$441>>2]|0;
                   $443 = (($435) + 8|0);
                   $444 = HEAP32[$443>>2]|0;
                   $445 = $442;
                   $446 = $444;
                   $447 = (($445) - ($446))|0;
                   $448 = $447 >> 2;
                   $449 = ($448>>>0)>($438>>>0);
                   do {
                    if ($449) {
                     $450 = (($444) + ($438<<2)|0);
                     $451 = HEAP32[$450>>2]|0;
                     $452 = ($451|0)==(0|0);
                     if ($452) {
                      break;
                     }
                     $456 = HEAP32[$451>>2]|0;
                     $457 = (($456) + 28|0);
                     $458 = HEAP32[$457>>2]|0;
                     __THREW__ = 0;
                     $459 = (invoke_iii($458|0,($451|0),10)|0);
                     $460 = __THREW__; __THREW__ = 0;
                     $461 = $460&1;
                     if ($461) {
                      break L157;
                     }
                     $469 = HEAP32[$436>>2]|0;HEAP32[$436>>2] = (($469+-1)|0);
                     $470 = ($469|0)==(0);
                     if ($470) {
                      $471 = HEAP32[$435>>2]|0;
                      $472 = (($471) + 8|0);
                      $473 = HEAP32[$472>>2]|0;
                      FUNCTION_TABLE_vi[$473 & 1023]($435);
                     }
                     HEAP8[$__s$i$i88>>0] = 0;
                     $474 = (($__s$i$i88) + 4|0);
                     HEAP32[$474>>2] = $430;
                     $475 = HEAP32[$430>>2]|0;
                     $476 = (($475) + -12|0);
                     $477 = HEAP32[$476>>2]|0;
                     $$sum$i3$i95 = (($477) + 16)|0;
                     $478 = (($430) + ($$sum$i3$i95)|0);
                     $479 = HEAP32[$478>>2]|0;
                     $480 = ($479|0)==(0);
                     L166: do {
                      if ($480) {
                       $$sum1$i$i97 = (($477) + 72)|0;
                       $481 = (($430) + ($$sum1$i$i97)|0);
                       $482 = HEAP32[$481>>2]|0;
                       $483 = ($482|0)==(0|0);
                       do {
                        if ($483) {
                         label = 139;
                        } else {
                         __THREW__ = 0;
                         invoke_vi(424,($482|0));
                         $484 = __THREW__; __THREW__ = 0;
                         $485 = $484&1;
                         if (!($485)) {
                          label = 139;
                          break;
                         }
                         $513 = ___cxa_find_matching_catch(0|0)|0;
                         $514 = tempRet0;
                         $$0$i$i112 = $513;
                        }
                       } while(0);
                       if ((label|0) == 139) {
                        HEAP8[$__s$i$i88>>0] = 1;
                        $486 = HEAP32[$430>>2]|0;
                        $487 = (($486) + -12|0);
                        $488 = HEAP32[$487>>2]|0;
                        $$sum$i$i$i$i100 = (($488) + 24)|0;
                        $489 = (($430) + ($$sum$i$i$i$i100)|0);
                        $490 = HEAP32[$489>>2]|0;
                        $491 = ($490|0)==(0|0);
                        do {
                         if ($491) {
                          $507 = $488;
                          label = 145;
                         } else {
                          $492 = (($490) + 24|0);
                          $493 = HEAP32[$492>>2]|0;
                          $494 = (($490) + 28|0);
                          $495 = HEAP32[$494>>2]|0;
                          $496 = ($493|0)==($495|0);
                          if (!($496)) {
                           $497 = (($493) + 1|0);
                           HEAP32[$492>>2] = $497;
                           HEAP8[$493>>0] = $459;
                           label = 152;
                           break L166;
                          }
                          $498 = HEAP32[$490>>2]|0;
                          $499 = (($498) + 52|0);
                          $500 = HEAP32[$499>>2]|0;
                          $501 = $459&255;
                          __THREW__ = 0;
                          $502 = (invoke_iii($500|0,($490|0),($501|0))|0);
                          $503 = __THREW__; __THREW__ = 0;
                          $504 = $503&1;
                          if ($504) {
                           break;
                          }
                          $505 = ($502|0)==(-1);
                          if (!($505)) {
                           label = 152;
                           break L166;
                          }
                          $$pre$i$i104 = HEAP32[$430>>2]|0;
                          $$phi$trans$insert182 = (($$pre$i$i104) + -12|0);
                          $$pre184 = HEAP32[$$phi$trans$insert182>>2]|0;
                          $507 = $$pre184;
                          label = 145;
                         }
                        } while(0);
                        if ((label|0) == 145) {
                         $506 = (($430) + ($507)|0);
                         $$sum$i$i106 = (($507) + 16)|0;
                         $508 = (($430) + ($$sum$i$i106)|0);
                         $509 = HEAP32[$508>>2]|0;
                         $510 = $509 | 1;
                         __THREW__ = 0;
                         invoke_vii(425,($506|0),($510|0));
                         $511 = __THREW__; __THREW__ = 0;
                         $512 = $511&1;
                         if (!($512)) {
                          label = 152;
                          break;
                         }
                        }
                        $515 = ___cxa_find_matching_catch(0|0)|0;
                        $516 = tempRet0;
                        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                        $$0$i$i112 = $515;
                       }
                       (___cxa_begin_catch(($$0$i$i112|0))|0);
                       $517 = HEAP32[$430>>2]|0;
                       $518 = (($517) + -12|0);
                       $519 = HEAP32[$518>>2]|0;
                       $$sum157 = (($519) + 16)|0;
                       $520 = (($430) + ($$sum157)|0);
                       $521 = HEAP32[$520>>2]|0;
                       $522 = $521 | 1;
                       HEAP32[$520>>2] = $522;
                       $$sum158 = (($519) + 20)|0;
                       $523 = (($430) + ($$sum158)|0);
                       $524 = HEAP32[$523>>2]|0;
                       $525 = $524 & 1;
                       $526 = ($525|0)==(0);
                       if ($526) {
                        ___cxa_end_catch();
                        break;
                       }
                       __THREW__ = 0;
                       invoke_v(426);
                       $527 = __THREW__; __THREW__ = 0;
                       $528 = $527&1;
                       if (!($528)) {
                        // unreachable;
                       }
                       $529 = ___cxa_find_matching_catch()|0;
                       $530 = tempRet0;
                       __THREW__ = 0;
                       invoke_v(427);
                       $531 = __THREW__; __THREW__ = 0;
                       $532 = $531&1;
                       if ($532) {
                        $533 = ___cxa_find_matching_catch(0|0)|0;
                        $534 = tempRet0;
                        ___clang_call_terminate($533);
                        // unreachable;
                       } else {
                        ___resumeException($529|0);
                        // unreachable;
                       }
                      } else {
                       label = 152;
                      }
                     } while(0);
                     if ((label|0) == 152) {
                      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i88);
                     }
                     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($430);
                     $535 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(248)|0);
                     $536 = HEAP32[$535>>2]|0;
                     $537 = (($536) + -12|0);
                     $538 = HEAP32[$537>>2]|0;
                     $$sum154 = (($538) + 28)|0;
                     $539 = (($535) + ($$sum154)|0);
                     $540 = HEAP32[$539>>2]|0;
                     $541 = (($540) + 4|0);
                     $542 = HEAP32[$541>>2]|0;HEAP32[$541>>2] = (($542+1)|0);
                     __THREW__ = 0;
                     $543 = (invoke_ii(423,(11752|0))|0);
                     $544 = __THREW__; __THREW__ = 0;
                     $545 = $544&1;
                     L196: do {
                      if (!($545)) {
                       $546 = (($540) + 12|0);
                       $547 = HEAP32[$546>>2]|0;
                       $548 = (($540) + 8|0);
                       $549 = HEAP32[$548>>2]|0;
                       $550 = $547;
                       $551 = $549;
                       $552 = (($550) - ($551))|0;
                       $553 = $552 >> 2;
                       $554 = ($553>>>0)>($543>>>0);
                       do {
                        if ($554) {
                         $555 = (($549) + ($543<<2)|0);
                         $556 = HEAP32[$555>>2]|0;
                         $557 = ($556|0)==(0|0);
                         if ($557) {
                          break;
                         }
                         $561 = HEAP32[$556>>2]|0;
                         $562 = (($561) + 28|0);
                         $563 = HEAP32[$562>>2]|0;
                         __THREW__ = 0;
                         $564 = (invoke_iii($563|0,($556|0),10)|0);
                         $565 = __THREW__; __THREW__ = 0;
                         $566 = $565&1;
                         if ($566) {
                          break L196;
                         }
                         $574 = HEAP32[$541>>2]|0;HEAP32[$541>>2] = (($574+-1)|0);
                         $575 = ($574|0)==(0);
                         if ($575) {
                          $576 = HEAP32[$540>>2]|0;
                          $577 = (($576) + 8|0);
                          $578 = HEAP32[$577>>2]|0;
                          FUNCTION_TABLE_vi[$578 & 1023]($540);
                         }
                         HEAP8[$__s$i$i117>>0] = 0;
                         $579 = (($__s$i$i117) + 4|0);
                         HEAP32[$579>>2] = $535;
                         $580 = HEAP32[$535>>2]|0;
                         $581 = (($580) + -12|0);
                         $582 = HEAP32[$581>>2]|0;
                         $$sum$i3$i124 = (($582) + 16)|0;
                         $583 = (($535) + ($$sum$i3$i124)|0);
                         $584 = HEAP32[$583>>2]|0;
                         $585 = ($584|0)==(0);
                         L205: do {
                          if ($585) {
                           $$sum1$i$i126 = (($582) + 72)|0;
                           $586 = (($535) + ($$sum1$i$i126)|0);
                           $587 = HEAP32[$586>>2]|0;
                           $588 = ($587|0)==(0|0);
                           do {
                            if ($588) {
                             label = 170;
                            } else {
                             __THREW__ = 0;
                             invoke_vi(424,($587|0));
                             $589 = __THREW__; __THREW__ = 0;
                             $590 = $589&1;
                             if (!($590)) {
                              label = 170;
                              break;
                             }
                             $618 = ___cxa_find_matching_catch(0|0)|0;
                             $619 = tempRet0;
                             $$0$i$i141 = $618;
                            }
                           } while(0);
                           if ((label|0) == 170) {
                            HEAP8[$__s$i$i117>>0] = 1;
                            $591 = HEAP32[$535>>2]|0;
                            $592 = (($591) + -12|0);
                            $593 = HEAP32[$592>>2]|0;
                            $$sum$i$i$i$i129 = (($593) + 24)|0;
                            $594 = (($535) + ($$sum$i$i$i$i129)|0);
                            $595 = HEAP32[$594>>2]|0;
                            $596 = ($595|0)==(0|0);
                            do {
                             if ($596) {
                              $612 = $593;
                              label = 176;
                             } else {
                              $597 = (($595) + 24|0);
                              $598 = HEAP32[$597>>2]|0;
                              $599 = (($595) + 28|0);
                              $600 = HEAP32[$599>>2]|0;
                              $601 = ($598|0)==($600|0);
                              if (!($601)) {
                               $602 = (($598) + 1|0);
                               HEAP32[$597>>2] = $602;
                               HEAP8[$598>>0] = $564;
                               label = 183;
                               break L205;
                              }
                              $603 = HEAP32[$595>>2]|0;
                              $604 = (($603) + 52|0);
                              $605 = HEAP32[$604>>2]|0;
                              $606 = $564&255;
                              __THREW__ = 0;
                              $607 = (invoke_iii($605|0,($595|0),($606|0))|0);
                              $608 = __THREW__; __THREW__ = 0;
                              $609 = $608&1;
                              if ($609) {
                               break;
                              }
                              $610 = ($607|0)==(-1);
                              if (!($610)) {
                               label = 183;
                               break L205;
                              }
                              $$pre$i$i133 = HEAP32[$535>>2]|0;
                              $$phi$trans$insert185 = (($$pre$i$i133) + -12|0);
                              $$pre187 = HEAP32[$$phi$trans$insert185>>2]|0;
                              $612 = $$pre187;
                              label = 176;
                             }
                            } while(0);
                            if ((label|0) == 176) {
                             $611 = (($535) + ($612)|0);
                             $$sum$i$i135 = (($612) + 16)|0;
                             $613 = (($535) + ($$sum$i$i135)|0);
                             $614 = HEAP32[$613>>2]|0;
                             $615 = $614 | 1;
                             __THREW__ = 0;
                             invoke_vii(425,($611|0),($615|0));
                             $616 = __THREW__; __THREW__ = 0;
                             $617 = $616&1;
                             if (!($617)) {
                              label = 183;
                              break;
                             }
                            }
                            $620 = ___cxa_find_matching_catch(0|0)|0;
                            $621 = tempRet0;
                            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i117);
                            $$0$i$i141 = $620;
                           }
                           (___cxa_begin_catch(($$0$i$i141|0))|0);
                           $622 = HEAP32[$535>>2]|0;
                           $623 = (($622) + -12|0);
                           $624 = HEAP32[$623>>2]|0;
                           $$sum155 = (($624) + 16)|0;
                           $625 = (($535) + ($$sum155)|0);
                           $626 = HEAP32[$625>>2]|0;
                           $627 = $626 | 1;
                           HEAP32[$625>>2] = $627;
                           $$sum156 = (($624) + 20)|0;
                           $628 = (($535) + ($$sum156)|0);
                           $629 = HEAP32[$628>>2]|0;
                           $630 = $629 & 1;
                           $631 = ($630|0)==(0);
                           if ($631) {
                            ___cxa_end_catch();
                            break;
                           }
                           __THREW__ = 0;
                           invoke_v(426);
                           $632 = __THREW__; __THREW__ = 0;
                           $633 = $632&1;
                           if (!($633)) {
                            // unreachable;
                           }
                           $634 = ___cxa_find_matching_catch()|0;
                           $635 = tempRet0;
                           __THREW__ = 0;
                           invoke_v(427);
                           $636 = __THREW__; __THREW__ = 0;
                           $637 = $636&1;
                           if ($637) {
                            $638 = ___cxa_find_matching_catch(0|0)|0;
                            $639 = tempRet0;
                            ___clang_call_terminate($638);
                            // unreachable;
                           } else {
                            ___resumeException($634|0);
                            // unreachable;
                           }
                          } else {
                           label = 183;
                          }
                         } while(0);
                         if ((label|0) == 183) {
                          __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i117);
                         }
                         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($535);
                         __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($option);
                         $640 = HEAP32[$option>>2]|0;
                         switch ($640|0) {
                         case 1:  {
                          $$idx149 = (($_hero) + 44|0);
                          $$idx149$val = +HEAPF32[$$idx149>>2];
                          $641 = (+__ZN4hero25get_energy_consuming_rateEv($$idx149$val));
                          HEAPF32[$0>>2] = $641;
                          $642 = (($0) + 4|0);
                          HEAPF32[$642>>2] = -3.0;
                          $643 = (($0) + 8|0);
                          HEAPF32[$643>>2] = 0.0;
                          $644 = (($0) + 12|0);
                          HEAPF32[$644>>2] = 2.0;
                          $645 = (($0) + 16|0);
                          HEAPF32[$645>>2] = 0.0;
                          $646 = (($0) + 20|0);
                          HEAPF32[$646>>2] = 8.0;
                          $647 = (($_hero) + 76|0);
                          _memcpy(($1|0),($647|0),144)|0;
                          $648 = (($1) + 24|0);
                          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
                          ;HEAP32[$$byval_copy188+0>>2]=HEAP32[$648+0>>2]|0;HEAP32[$$byval_copy188+4>>2]=HEAP32[$648+4>>2]|0;HEAP32[$$byval_copy188+8>>2]=HEAP32[$648+8>>2]|0;HEAP32[$$byval_copy188+12>>2]=HEAP32[$648+12>>2]|0;HEAP32[$$byval_copy188+16>>2]=HEAP32[$648+16>>2]|0;HEAP32[$$byval_copy188+20>>2]=HEAP32[$648+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy,$$byval_copy188,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 2:  {
                          $$idx148 = (($_hero) + 44|0);
                          $$idx148$val = +HEAPF32[$$idx148>>2];
                          $649 = (+__ZN4hero25get_energy_consuming_rateEv($$idx148$val));
                          HEAPF32[$2>>2] = $649;
                          $650 = (($2) + 4|0);
                          HEAPF32[$650>>2] = 5.0;
                          $651 = (($2) + 8|0);
                          HEAPF32[$651>>2] = 1.0;
                          $652 = (($2) + 12|0);
                          HEAPF32[$652>>2] = -4.0;
                          $653 = (($2) + 16|0);
                          HEAPF32[$653>>2] = 0.0;
                          $654 = (($2) + 20|0);
                          HEAPF32[$654>>2] = 5.0;
                          $tmpcast = (($_hero) + 76|0);
                          ;HEAP32[$$byval_copy189+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$$byval_copy189+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy189+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy189+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$byval_copy189+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$byval_copy189+20>>2]=HEAP32[$2+20>>2]|0;
                          ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$tmpcast+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$tmpcast+4>>2]|0;HEAP32[$tmpcast$byval_copy+8>>2]=HEAP32[$tmpcast+8>>2]|0;HEAP32[$tmpcast$byval_copy+12>>2]=HEAP32[$tmpcast+12>>2]|0;HEAP32[$tmpcast$byval_copy+16>>2]=HEAP32[$tmpcast+16>>2]|0;HEAP32[$tmpcast$byval_copy+20>>2]=HEAP32[$tmpcast+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy189,$tmpcast$byval_copy,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 3:  {
                          $$idx147 = (($_hero) + 44|0);
                          $$idx147$val = +HEAPF32[$$idx147>>2];
                          $655 = (+__ZN4hero25get_energy_consuming_rateEv($$idx147$val));
                          HEAPF32[$3>>2] = $655;
                          $656 = (($3) + 4|0);
                          HEAPF32[$656>>2] = 4.0;
                          $657 = (($3) + 8|0);
                          HEAPF32[$657>>2] = 1.0;
                          $658 = (($3) + 12|0);
                          HEAPF32[$658>>2] = -4.0;
                          $659 = (($3) + 16|0);
                          HEAPF32[$659>>2] = 1.0;
                          $660 = (($3) + 20|0);
                          HEAPF32[$660>>2] = -3.0;
                          $661 = (($_hero) + 76|0);
                          _memcpy(($4|0),($661|0),144)|0;
                          $662 = (($4) + 48|0);
                          ;HEAP32[$$byval_copy190+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$$byval_copy190+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy190+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy190+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$$byval_copy190+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$$byval_copy190+20>>2]=HEAP32[$3+20>>2]|0;
                          ;HEAP32[$$byval_copy191+0>>2]=HEAP32[$662+0>>2]|0;HEAP32[$$byval_copy191+4>>2]=HEAP32[$662+4>>2]|0;HEAP32[$$byval_copy191+8>>2]=HEAP32[$662+8>>2]|0;HEAP32[$$byval_copy191+12>>2]=HEAP32[$662+12>>2]|0;HEAP32[$$byval_copy191+16>>2]=HEAP32[$662+16>>2]|0;HEAP32[$$byval_copy191+20>>2]=HEAP32[$662+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy190,$$byval_copy191,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 4:  {
                          $$idx146 = (($_hero) + 44|0);
                          $$idx146$val = +HEAPF32[$$idx146>>2];
                          $663 = (+__ZN4hero25get_energy_consuming_rateEv($$idx146$val));
                          HEAPF32[$5>>2] = $663;
                          $664 = (($5) + 4|0);
                          HEAPF32[$664>>2] = -3.0;
                          $665 = (($5) + 8|0);
                          HEAPF32[$665>>2] = 5.0;
                          $666 = (($5) + 12|0);
                          HEAPF32[$666>>2] = -4.0;
                          $667 = (($5) + 16|0);
                          HEAPF32[$667>>2] = 0.0;
                          $668 = (($5) + 20|0);
                          HEAPF32[$668>>2] = 0.0;
                          $669 = (($_hero) + 76|0);
                          _memcpy(($6|0),($669|0),144)|0;
                          $670 = (($6) + 72|0);
                          ;HEAP32[$$byval_copy192+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$$byval_copy192+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy192+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy192+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy192+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$$byval_copy192+20>>2]=HEAP32[$5+20>>2]|0;
                          ;HEAP32[$$byval_copy193+0>>2]=HEAP32[$670+0>>2]|0;HEAP32[$$byval_copy193+4>>2]=HEAP32[$670+4>>2]|0;HEAP32[$$byval_copy193+8>>2]=HEAP32[$670+8>>2]|0;HEAP32[$$byval_copy193+12>>2]=HEAP32[$670+12>>2]|0;HEAP32[$$byval_copy193+16>>2]=HEAP32[$670+16>>2]|0;HEAP32[$$byval_copy193+20>>2]=HEAP32[$670+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy192,$$byval_copy193,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 5:  {
                          HEAPF32[$7>>2] = 8.0;
                          $671 = (($7) + 4|0);
                          HEAPF32[$671>>2] = -3.0;
                          $672 = (($7) + 8|0);
                          HEAPF32[$672>>2] = 0.0;
                          $673 = (($7) + 12|0);
                          HEAPF32[$673>>2] = 0.0;
                          $674 = (($7) + 16|0);
                          HEAPF32[$674>>2] = 0.0;
                          $675 = (($7) + 20|0);
                          HEAPF32[$675>>2] = -5.0;
                          $676 = (($_hero) + 76|0);
                          _memcpy(($8|0),($676|0),144)|0;
                          $677 = (($8) + 96|0);
                          ;HEAP32[$$byval_copy194+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy194+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy194+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy194+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$$byval_copy194+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$$byval_copy194+20>>2]=HEAP32[$7+20>>2]|0;
                          ;HEAP32[$$byval_copy195+0>>2]=HEAP32[$677+0>>2]|0;HEAP32[$$byval_copy195+4>>2]=HEAP32[$677+4>>2]|0;HEAP32[$$byval_copy195+8>>2]=HEAP32[$677+8>>2]|0;HEAP32[$$byval_copy195+12>>2]=HEAP32[$677+12>>2]|0;HEAP32[$$byval_copy195+16>>2]=HEAP32[$677+16>>2]|0;HEAP32[$$byval_copy195+20>>2]=HEAP32[$677+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusS2_i($_hero,$$byval_copy194,$$byval_copy195,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         case 6:  {
                          $$idx = (($_hero) + 44|0);
                          $$idx$val = +HEAPF32[$$idx>>2];
                          $678 = (+__ZN4hero25get_energy_consuming_rateEv($$idx$val));
                          HEAPF32[$9>>2] = $678;
                          $679 = (($9) + 4|0);
                          HEAPF32[$679>>2] = 7.0;
                          $680 = (($9) + 8|0);
                          HEAPF32[$680>>2] = 0.0;
                          $681 = (($9) + 12|0);
                          HEAPF32[$681>>2] = -4.0;
                          $682 = (($9) + 16|0);
                          HEAPF32[$682>>2] = 0.0;
                          $683 = (($9) + 20|0);
                          HEAPF32[$683>>2] = 6.0;
                          ;HEAP32[$$byval_copy196+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$$byval_copy196+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy196+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy196+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$$byval_copy196+16>>2]=HEAP32[$9+16>>2]|0;HEAP32[$$byval_copy196+20>>2]=HEAP32[$9+20>>2]|0;
                          __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy196,$day);
                          STACKTOP = sp;return;
                          break;
                         }
                         default: {
                          STACKTOP = sp;return;
                         }
                         }
                        }
                       } while(0);
                       $558 = (___cxa_allocate_exception(4)|0);
                       HEAP32[$558>>2] = ((20400 + 8|0));
                       __THREW__ = 0;
                       invoke_viii(422,($558|0),(20480|0),(396|0));
                       $559 = __THREW__; __THREW__ = 0;
                       $560 = $559&1;
                       if ($560) {
                        break;
                       }
                       // unreachable;
                      }
                     } while(0);
                     $567 = ___cxa_find_matching_catch()|0;
                     $568 = tempRet0;
                     $569 = HEAP32[$541>>2]|0;HEAP32[$541>>2] = (($569+-1)|0);
                     $570 = ($569|0)==(0);
                     if (!($570)) {
                      ___resumeException($567|0);
                      // unreachable;
                     }
                     $571 = HEAP32[$540>>2]|0;
                     $572 = (($571) + 8|0);
                     $573 = HEAP32[$572>>2]|0;
                     FUNCTION_TABLE_vi[$573 & 1023]($540);
                     ___resumeException($567|0);
                     // unreachable;
                    }
                   } while(0);
                   $453 = (___cxa_allocate_exception(4)|0);
                   HEAP32[$453>>2] = ((20400 + 8|0));
                   __THREW__ = 0;
                   invoke_viii(422,($453|0),(20480|0),(396|0));
                   $454 = __THREW__; __THREW__ = 0;
                   $455 = $454&1;
                   if ($455) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $462 = ___cxa_find_matching_catch()|0;
                 $463 = tempRet0;
                 $464 = HEAP32[$436>>2]|0;HEAP32[$436>>2] = (($464+-1)|0);
                 $465 = ($464|0)==(0);
                 if (!($465)) {
                  ___resumeException($462|0);
                  // unreachable;
                 }
                 $466 = HEAP32[$435>>2]|0;
                 $467 = (($466) + 8|0);
                 $468 = HEAP32[$467>>2]|0;
                 FUNCTION_TABLE_vi[$468 & 1023]($435);
                 ___resumeException($462|0);
                 // unreachable;
                }
               } while(0);
               $348 = (___cxa_allocate_exception(4)|0);
               HEAP32[$348>>2] = ((20400 + 8|0));
               __THREW__ = 0;
               invoke_viii(422,($348|0),(20480|0),(396|0));
               $349 = __THREW__; __THREW__ = 0;
               $350 = $349&1;
               if ($350) {
                break;
               }
               // unreachable;
              }
             } while(0);
             $357 = ___cxa_find_matching_catch()|0;
             $358 = tempRet0;
             $359 = HEAP32[$331>>2]|0;HEAP32[$331>>2] = (($359+-1)|0);
             $360 = ($359|0)==(0);
             if (!($360)) {
              ___resumeException($357|0);
              // unreachable;
             }
             $361 = HEAP32[$330>>2]|0;
             $362 = (($361) + 8|0);
             $363 = HEAP32[$362>>2]|0;
             FUNCTION_TABLE_vi[$363 & 1023]($330);
             ___resumeException($357|0);
             // unreachable;
            }
           } while(0);
           $243 = (___cxa_allocate_exception(4)|0);
           HEAP32[$243>>2] = ((20400 + 8|0));
           __THREW__ = 0;
           invoke_viii(422,($243|0),(20480|0),(396|0));
           $244 = __THREW__; __THREW__ = 0;
           $245 = $244&1;
           if (!($245)) {
            // unreachable;
           }
          }
         } while(0);
         $252 = ___cxa_find_matching_catch()|0;
         $253 = tempRet0;
         $254 = HEAP32[$226>>2]|0;HEAP32[$226>>2] = (($254+-1)|0);
         $255 = ($254|0)==(0);
         if (!($255)) {
          ___resumeException($252|0);
          // unreachable;
         }
         $256 = HEAP32[$225>>2]|0;
         $257 = (($256) + 8|0);
         $258 = HEAP32[$257>>2]|0;
         FUNCTION_TABLE_vi[$258 & 1023]($225);
         ___resumeException($252|0);
         // unreachable;
        }
       }
       $138 = (___cxa_allocate_exception(4)|0);
       HEAP32[$138>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($138|0),(20480|0),(396|0));
       $139 = __THREW__; __THREW__ = 0;
       $140 = $139&1;
       if (!($140)) {
        // unreachable;
       }
      }
     } while(0);
     $147 = ___cxa_find_matching_catch()|0;
     $148 = tempRet0;
     $149 = HEAP32[$121>>2]|0;HEAP32[$121>>2] = (($149+-1)|0);
     $150 = ($149|0)==(0);
     if (!($150)) {
      ___resumeException($147|0);
      // unreachable;
     }
     $151 = HEAP32[$120>>2]|0;
     $152 = (($151) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     FUNCTION_TABLE_vi[$153 & 1023]($120);
     ___resumeException($147|0);
     // unreachable;
    }
   }
   $33 = (___cxa_allocate_exception(4)|0);
   HEAP32[$33>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($33|0),(20480|0),(396|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    // unreachable;
   }
  }
 } while(0);
 $42 = ___cxa_find_matching_catch()|0;
 $43 = tempRet0;
 $44 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($44+-1)|0);
 $45 = ($44|0)==(0);
 if (!($45)) {
  ___resumeException($42|0);
  // unreachable;
 }
 $46 = HEAP32[$15>>2]|0;
 $47 = (($46) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 FUNCTION_TABLE_vi[$48 & 1023]($15);
 ___resumeException($42|0);
 // unreachable;
}
function __ZN7special11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var $$0$i$i = 0, $$0$i$i25 = 0, $$byval_copy = 0, $$idx30 = 0, $$idx30$val = 0.0, $$phi$trans$insert = 0, $$phi$trans$insert38 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i17 = 0, $$pre40 = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i$i13 = 0, $$sum$i$i19 = 0, $$sum$i3$i = 0, $$sum$i3$i8 = 0, $$sum1$i$i = 0, $$sum1$i$i10 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__s$i$i = 0, $__s$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 40|0;
 $__s$i$i1 = sp;
 $__s$i$i = sp + 8|0;
 $0 = sp + 16|0;
 $1 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(272)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 28)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+1)|0);
 __THREW__ = 0;
 $9 = (invoke_ii(423,(11752|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 do {
  if (!($11)) {
   $12 = (($6) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($6) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($9>>>0);
   if ($20) {
    $21 = (($15) + ($9<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 28|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iii($29|0,($22|0),10)|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break;
     }
     $40 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($40+-1)|0);
     $41 = ($40|0)==(0);
     if ($41) {
      $42 = HEAP32[$6>>2]|0;
      $43 = (($42) + 8|0);
      $44 = HEAP32[$43>>2]|0;
      FUNCTION_TABLE_vi[$44 & 1023]($6);
     }
     HEAP8[$__s$i$i>>0] = 0;
     $45 = (($__s$i$i) + 4|0);
     HEAP32[$45>>2] = $1;
     $46 = HEAP32[$1>>2]|0;
     $47 = (($46) + -12|0);
     $48 = HEAP32[$47>>2]|0;
     $$sum$i3$i = (($48) + 16)|0;
     $49 = (($1) + ($$sum$i3$i)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0);
     do {
      if ($51) {
       $$sum1$i$i = (($48) + 72)|0;
       $52 = (($1) + ($$sum1$i$i)|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)==(0|0);
       if ($54) {
        label = 15;
       } else {
        __THREW__ = 0;
        invoke_vi(424,($53|0));
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         $84 = ___cxa_find_matching_catch(0|0)|0;
         $85 = tempRet0;
         $$0$i$i = $84;
        } else {
         label = 15;
        }
       }
       if ((label|0) == 15) {
        HEAP8[$__s$i$i>>0] = 1;
        $57 = HEAP32[$1>>2]|0;
        $58 = (($57) + -12|0);
        $59 = HEAP32[$58>>2]|0;
        $$sum$i$i$i$i = (($59) + 24)|0;
        $60 = (($1) + ($$sum$i$i$i$i)|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = ($61|0)==(0|0);
        if ($62) {
         $78 = $59;
         label = 21;
        } else {
         $63 = (($61) + 24|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = (($61) + 28|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = ($64|0)==($66|0);
         if (!($67)) {
          $68 = (($64) + 1|0);
          HEAP32[$63>>2] = $68;
          HEAP8[$64>>0] = $30;
          label = 28;
          break;
         }
         $69 = HEAP32[$61>>2]|0;
         $70 = (($69) + 52|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = $30&255;
         __THREW__ = 0;
         $73 = (invoke_iii($71|0,($61|0),($72|0))|0);
         $74 = __THREW__; __THREW__ = 0;
         $75 = $74&1;
         if (!($75)) {
          $76 = ($73|0)==(-1);
          if (!($76)) {
           label = 28;
           break;
          }
          $$pre$i$i = HEAP32[$1>>2]|0;
          $$phi$trans$insert = (($$pre$i$i) + -12|0);
          $$pre = HEAP32[$$phi$trans$insert>>2]|0;
          $78 = $$pre;
          label = 21;
         }
        }
        if ((label|0) == 21) {
         $77 = (($1) + ($78)|0);
         $$sum$i$i = (($78) + 16)|0;
         $79 = (($1) + ($$sum$i$i)|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = $80 | 1;
         __THREW__ = 0;
         invoke_vii(425,($77|0),($81|0));
         $82 = __THREW__; __THREW__ = 0;
         $83 = $82&1;
         if (!($83)) {
          label = 28;
          break;
         }
        }
        $86 = ___cxa_find_matching_catch(0|0)|0;
        $87 = tempRet0;
        __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
        $$0$i$i = $86;
       }
       (___cxa_begin_catch(($$0$i$i|0))|0);
       $88 = HEAP32[$1>>2]|0;
       $89 = (($88) + -12|0);
       $90 = HEAP32[$89>>2]|0;
       $$sum34 = (($90) + 16)|0;
       $91 = (($1) + ($$sum34)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $92 | 1;
       HEAP32[$91>>2] = $93;
       $$sum35 = (($90) + 20)|0;
       $94 = (($1) + ($$sum35)|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = $95 & 1;
       $97 = ($96|0)==(0);
       if ($97) {
        ___cxa_end_catch();
        break;
       }
       __THREW__ = 0;
       invoke_v(426);
       $98 = __THREW__; __THREW__ = 0;
       $99 = $98&1;
       if (!($99)) {
        // unreachable;
       }
       $100 = ___cxa_find_matching_catch()|0;
       $101 = tempRet0;
       __THREW__ = 0;
       invoke_v(427);
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if ($103) {
        $104 = ___cxa_find_matching_catch(0|0)|0;
        $105 = tempRet0;
        ___clang_call_terminate($104);
        // unreachable;
       } else {
        ___resumeException($100|0);
        // unreachable;
       }
      } else {
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i);
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($1);
     $106 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(288)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (($107) + -12|0);
     $109 = HEAP32[$108>>2]|0;
     $$sum31 = (($109) + 28)|0;
     $110 = (($106) + ($$sum31)|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (($111) + 4|0);
     $113 = HEAP32[$112>>2]|0;HEAP32[$112>>2] = (($113+1)|0);
     __THREW__ = 0;
     $114 = (invoke_ii(423,(11752|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     do {
      if (!($116)) {
       $117 = (($111) + 12|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($111) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $118;
       $122 = $120;
       $123 = (($121) - ($122))|0;
       $124 = $123 >> 2;
       $125 = ($124>>>0)>($114>>>0);
       if ($125) {
        $126 = (($120) + ($114<<2)|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = ($127|0)==(0|0);
        if (!($128)) {
         $132 = HEAP32[$127>>2]|0;
         $133 = (($132) + 28|0);
         $134 = HEAP32[$133>>2]|0;
         __THREW__ = 0;
         $135 = (invoke_iii($134|0,($127|0),10)|0);
         $136 = __THREW__; __THREW__ = 0;
         $137 = $136&1;
         if ($137) {
          break;
         }
         $145 = HEAP32[$112>>2]|0;HEAP32[$112>>2] = (($145+-1)|0);
         $146 = ($145|0)==(0);
         if ($146) {
          $147 = HEAP32[$111>>2]|0;
          $148 = (($147) + 8|0);
          $149 = HEAP32[$148>>2]|0;
          FUNCTION_TABLE_vi[$149 & 1023]($111);
         }
         HEAP8[$__s$i$i1>>0] = 0;
         $150 = (($__s$i$i1) + 4|0);
         HEAP32[$150>>2] = $106;
         $151 = HEAP32[$106>>2]|0;
         $152 = (($151) + -12|0);
         $153 = HEAP32[$152>>2]|0;
         $$sum$i3$i8 = (($153) + 16)|0;
         $154 = (($106) + ($$sum$i3$i8)|0);
         $155 = HEAP32[$154>>2]|0;
         $156 = ($155|0)==(0);
         L49: do {
          if ($156) {
           $$sum1$i$i10 = (($153) + 72)|0;
           $157 = (($106) + ($$sum1$i$i10)|0);
           $158 = HEAP32[$157>>2]|0;
           $159 = ($158|0)==(0|0);
           if ($159) {
            label = 46;
           } else {
            __THREW__ = 0;
            invoke_vi(424,($158|0));
            $160 = __THREW__; __THREW__ = 0;
            $161 = $160&1;
            if ($161) {
             $189 = ___cxa_find_matching_catch(0|0)|0;
             $190 = tempRet0;
             $$0$i$i25 = $189;
            } else {
             label = 46;
            }
           }
           if ((label|0) == 46) {
            HEAP8[$__s$i$i1>>0] = 1;
            $162 = HEAP32[$106>>2]|0;
            $163 = (($162) + -12|0);
            $164 = HEAP32[$163>>2]|0;
            $$sum$i$i$i$i13 = (($164) + 24)|0;
            $165 = (($106) + ($$sum$i$i$i$i13)|0);
            $166 = HEAP32[$165>>2]|0;
            $167 = ($166|0)==(0|0);
            do {
             if ($167) {
              $183 = $164;
              label = 52;
             } else {
              $168 = (($166) + 24|0);
              $169 = HEAP32[$168>>2]|0;
              $170 = (($166) + 28|0);
              $171 = HEAP32[$170>>2]|0;
              $172 = ($169|0)==($171|0);
              if (!($172)) {
               $173 = (($169) + 1|0);
               HEAP32[$168>>2] = $173;
               HEAP8[$169>>0] = $135;
               break L49;
              }
              $174 = HEAP32[$166>>2]|0;
              $175 = (($174) + 52|0);
              $176 = HEAP32[$175>>2]|0;
              $177 = $135&255;
              __THREW__ = 0;
              $178 = (invoke_iii($176|0,($166|0),($177|0))|0);
              $179 = __THREW__; __THREW__ = 0;
              $180 = $179&1;
              if ($180) {
               break;
              }
              $181 = ($178|0)==(-1);
              if (!($181)) {
               break L49;
              }
              $$pre$i$i17 = HEAP32[$106>>2]|0;
              $$phi$trans$insert38 = (($$pre$i$i17) + -12|0);
              $$pre40 = HEAP32[$$phi$trans$insert38>>2]|0;
              $183 = $$pre40;
              label = 52;
             }
            } while(0);
            if ((label|0) == 52) {
             $182 = (($106) + ($183)|0);
             $$sum$i$i19 = (($183) + 16)|0;
             $184 = (($106) + ($$sum$i$i19)|0);
             $185 = HEAP32[$184>>2]|0;
             $186 = $185 | 1;
             __THREW__ = 0;
             invoke_vii(425,($182|0),($186|0));
             $187 = __THREW__; __THREW__ = 0;
             $188 = $187&1;
             if (!($188)) {
              break;
             }
            }
            $191 = ___cxa_find_matching_catch(0|0)|0;
            $192 = tempRet0;
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
            $$0$i$i25 = $191;
           }
           (___cxa_begin_catch(($$0$i$i25|0))|0);
           $193 = HEAP32[$106>>2]|0;
           $194 = (($193) + -12|0);
           $195 = HEAP32[$194>>2]|0;
           $$sum32 = (($195) + 16)|0;
           $196 = (($106) + ($$sum32)|0);
           $197 = HEAP32[$196>>2]|0;
           $198 = $197 | 1;
           HEAP32[$196>>2] = $198;
           $$sum33 = (($195) + 20)|0;
           $199 = (($106) + ($$sum33)|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = $200 & 1;
           $202 = ($201|0)==(0);
           if ($202) {
            ___cxa_end_catch();
            __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($106);
            $$idx30 = (($_hero) + 44|0);
            $$idx30$val = +HEAPF32[$$idx30>>2];
            $211 = (+__ZN4hero25get_energy_consuming_rateEv($$idx30$val));
            HEAPF32[$0>>2] = $211;
            $212 = (($0) + 4|0);
            HEAPF32[$212>>2] = 8.0;
            $213 = (($0) + 8|0);
            HEAPF32[$213>>2] = 0.0;
            $214 = (($0) + 12|0);
            HEAPF32[$214>>2] = -4.0;
            $215 = (($0) + 16|0);
            HEAPF32[$215>>2] = 0.0;
            $216 = (($0) + 20|0);
            HEAPF32[$216>>2] = 4.0;
            ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
            __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy,1);
            STACKTOP = sp;return;
           }
           __THREW__ = 0;
           invoke_v(426);
           $203 = __THREW__; __THREW__ = 0;
           $204 = $203&1;
           if (!($204)) {
            // unreachable;
           }
           $205 = ___cxa_find_matching_catch()|0;
           $206 = tempRet0;
           __THREW__ = 0;
           invoke_v(427);
           $207 = __THREW__; __THREW__ = 0;
           $208 = $207&1;
           if ($208) {
            $209 = ___cxa_find_matching_catch(0|0)|0;
            $210 = tempRet0;
            ___clang_call_terminate($209);
            // unreachable;
           } else {
            ___resumeException($205|0);
            // unreachable;
           }
          }
         } while(0);
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s$i$i1);
         __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($106);
         $$idx30 = (($_hero) + 44|0);
         $$idx30$val = +HEAPF32[$$idx30>>2];
         $211 = (+__ZN4hero25get_energy_consuming_rateEv($$idx30$val));
         HEAPF32[$0>>2] = $211;
         $212 = (($0) + 4|0);
         HEAPF32[$212>>2] = 8.0;
         $213 = (($0) + 8|0);
         HEAPF32[$213>>2] = 0.0;
         $214 = (($0) + 12|0);
         HEAPF32[$214>>2] = -4.0;
         $215 = (($0) + 16|0);
         HEAPF32[$215>>2] = 0.0;
         $216 = (($0) + 20|0);
         HEAPF32[$216>>2] = 4.0;
         ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[$0+20>>2]|0;
         __ZN4cell6changeEP4hero14PersonalStatusi($_hero,$$byval_copy,1);
         STACKTOP = sp;return;
        }
       }
       $129 = (___cxa_allocate_exception(4)|0);
       HEAP32[$129>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($129|0),(20480|0),(396|0));
       $130 = __THREW__; __THREW__ = 0;
       $131 = $130&1;
       if (!($131)) {
        // unreachable;
       }
      }
     } while(0);
     $138 = ___cxa_find_matching_catch()|0;
     $139 = tempRet0;
     $140 = HEAP32[$112>>2]|0;HEAP32[$112>>2] = (($140+-1)|0);
     $141 = ($140|0)==(0);
     if (!($141)) {
      ___resumeException($138|0);
      // unreachable;
     }
     $142 = HEAP32[$111>>2]|0;
     $143 = (($142) + 8|0);
     $144 = HEAP32[$143>>2]|0;
     FUNCTION_TABLE_vi[$144 & 1023]($111);
     ___resumeException($138|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   HEAP32[$24>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($24|0),(20480|0),(396|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $33 = ___cxa_find_matching_catch()|0;
 $34 = tempRet0;
 $35 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($35+-1)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  ___resumeException($33|0);
  // unreachable;
 }
 $37 = HEAP32[$6>>2]|0;
 $38 = (($37) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 1023]($6);
 ___resumeException($33|0);
 // unreachable;
}
function __ZN4examD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4examD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN8festivalD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN8festivalD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN6normalD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN6normalD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN7weekendD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN7weekendD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN5marchD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN5marchD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN11before_examD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN11before_examD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10after_examD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10after_examD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN5danceD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN5danceD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s$0,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s$0 = $__s$0|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $$ = 0, $$lcssa$i = 0, $$pre$phiZ2D = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, $__s$sroa$0$0 = 0, $__s$sroa$0$1 = 0, $__sp = 0, $cond = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = ($__s$0|0)==(0|0);
 if ($0) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $3 = (($1) - ($2))|0;
 $4 = (($__iob) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>($3|0);
 $7 = (($5) - ($3))|0;
 $$ = $6 ? $7 : 0;
 $8 = $__op;
 $9 = (($8) - ($2))|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[$__s$0>>2]|0;
  $12 = (($11) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($__s$0,$__ob,$9)|0);
  $15 = ($14|0)==($9|0);
  if (!($15)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $16 = ($$|0)>(0);
 if ($16) {
  $17 = ($$>>>0)<(11);
  if ($17) {
   $18 = $$ << 1;
   $19 = $18&255;
   HEAP8[$__sp>>0] = $19;
   $20 = (($__sp) + 1|0);
   $$pre$phiZ2D = $__sp;$__p$0$i = $20;
  } else {
   $21 = (($$) + 16)|0;
   $22 = $21 & -16;
   $23 = ($22|0)==(0);
   $$size$i = $23 ? 1 : $22;
   $24 = (_malloc($$size$i)|0);
   $25 = ($24|0)==(0|0);
   L15: do {
    if ($25) {
     while(1) {
      $26 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($26+0)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       break;
      }
      $28 = $26;
      FUNCTION_TABLE_v[$28 & 1023]();
      $29 = (_malloc($$size$i)|0);
      $30 = ($29|0)==(0|0);
      if (!($30)) {
       $$lcssa$i = $29;
       break L15;
      }
     }
     $31 = (___cxa_allocate_exception(4)|0);
     HEAP32[$31>>2] = ((19952 + 8|0));
     ___cxa_throw(($31|0),(20008|0),(386|0));
     // unreachable;
    } else {
     $$lcssa$i = $24;
    }
   } while(0);
   $32 = (($__sp) + 8|0);
   HEAP32[$32>>2] = $$lcssa$i;
   $33 = $22 | 1;
   HEAP32[$__sp>>2] = $33;
   $34 = (($__sp) + 4|0);
   HEAP32[$34>>2] = $$;
   $$pre$phiZ2D = $__sp;$__p$0$i = $$lcssa$i;
  }
  _memset(($__p$0$i|0),($__fl|0),($$|0))|0;
  $35 = (($__p$0$i) + ($$)|0);
  HEAP8[$35>>0] = 0;
  $36 = HEAP8[$$pre$phiZ2D>>0]|0;
  $37 = $36 & 1;
  $38 = ($37<<24>>24)==(0);
  if ($38) {
   $41 = (($__sp) + 1|0);
   $45 = $41;
  } else {
   $39 = (($__sp) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $45 = $40;
  }
  $42 = HEAP32[$__s$0>>2]|0;
  $43 = (($42) + 48|0);
  $44 = HEAP32[$43>>2]|0;
  __THREW__ = 0;
  $46 = (invoke_iiii($44|0,($__s$0|0),($45|0),($$|0))|0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $50 = ___cxa_find_matching_catch()|0;
   $51 = tempRet0;
   $52 = HEAP8[$$pre$phiZ2D>>0]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   if ($54) {
    ___resumeException($50|0);
    // unreachable;
   }
   $55 = (($__sp) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   _free($56);
   ___resumeException($50|0);
   // unreachable;
  }
  $49 = ($46|0)==($$|0);
  if ($49) {
   $__s$sroa$0$0 = $__s$0;$storemerge1 = 0;
  } else {
   HEAP32[$agg$result>>2] = 0;
   $__s$sroa$0$0 = 0;$storemerge1 = 1;
  }
  $57 = HEAP8[$$pre$phiZ2D>>0]|0;
  $58 = $57 & 1;
  $59 = ($58<<24>>24)==(0);
  if (!($59)) {
   $60 = (($__sp) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   _free($61);
  }
  $cond = ($storemerge1|0)==(1);
  if ($cond) {
   STACKTOP = sp;return;
  } else {
   $__s$sroa$0$1 = $__s$sroa$0$0;
  }
 } else {
  $__s$sroa$0$1 = $__s$0;
 }
 $62 = (($1) - ($8))|0;
 $63 = ($62|0)>(0);
 if ($63) {
  $64 = HEAP32[$__s$sroa$0$1>>2]|0;
  $65 = (($64) + 48|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_iiii[$66 & 1023]($__s$sroa$0$1,$__op,$62)|0);
  $68 = ($67|0)==($62|0);
  if (!($68)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$4>>2] = 0;
 HEAP32[$agg$result>>2] = $__s$sroa$0$1;
 STACKTOP = sp;return;
}
function __ZN8MonthDay13from_calendarE5Monthi($agg$result,$month,$day) {
 $agg$result = $agg$result|0;
 $month = $month|0;
 $day = $day|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $month_zero$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $month;
 $1 = (($agg$result) + 8|0);
 HEAP32[$1>>2] = $day;
 do {
  switch ($month|0) {
  case 7:  {
   $month_zero$0 = 122;
   break;
  }
  case 9:  {
   $month_zero$0 = 184;
   break;
  }
  case 12:  {
   $month_zero$0 = 275;
   break;
  }
  case 6:  {
   $month_zero$0 = 92;
   break;
  }
  case 10:  {
   $month_zero$0 = 214;
   break;
  }
  case 4:  {
   $month_zero$0 = 31;
   break;
  }
  case 11:  {
   $month_zero$0 = 245;
   break;
  }
  case 5:  {
   $month_zero$0 = 61;
   break;
  }
  case 3:  {
   $month_zero$0 = 0;
   break;
  }
  case 8:  {
   $month_zero$0 = 153;
   break;
  }
  default: {
   $month_zero$0 = 0;
  }
  }
 } while(0);
 $2 = (($month_zero$0) + ($day))|0;
 $3 = (($2) + -1)|0;
 HEAP32[$agg$result>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN8MonthDay10from_indexEi($agg$result,$date_index) {
 $agg$result = $agg$result|0;
 $date_index = $date_index|0;
 var $$ = 0, $$24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $month$0 = 0, $month_day_info$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $date_index;
 $0 = (($date_index) + 1)|0;
 $1 = ($date_index|0)>(-1);
 do {
  if ($1) {
   $2 = ($0|0)<(32);
   if ($2) {
    $month$0 = 3;$month_day_info$0 = $0;
   } else {
    $3 = ($0|0)<(62);
    if ($3) {
     $4 = (($date_index) + -30)|0;
     $month$0 = 4;$month_day_info$0 = $4;
     break;
    }
    $5 = ($0|0)<(93);
    if ($5) {
     $6 = (($date_index) + -60)|0;
     $month$0 = 5;$month_day_info$0 = $6;
     break;
    }
    $7 = ($date_index|0)>(91);
    if ($7) {
     $8 = ($0|0)<(123);
     if ($8) {
      $9 = (($date_index) + -91)|0;
      $month$0 = 6;$month_day_info$0 = $9;
      break;
     }
     $10 = ($0|0)<(154);
     if ($10) {
      $11 = (($date_index) + -121)|0;
      $month$0 = 7;$month_day_info$0 = $11;
      break;
     }
     $12 = ($date_index|0)>(152);
     if ($12) {
      $13 = ($0|0)<(185);
      if ($13) {
       $14 = (($date_index) + -152)|0;
       $month$0 = 8;$month_day_info$0 = $14;
       break;
      }
      $15 = ($0|0)<(215);
      if ($15) {
       $16 = (($date_index) + -183)|0;
       $month$0 = 9;$month_day_info$0 = $16;
       break;
      }
      $17 = ($date_index|0)>(213);
      if ($17) {
       $18 = ($0|0)<(246);
       if ($18) {
        $19 = (($date_index) + -213)|0;
        $month$0 = 10;$month_day_info$0 = $19;
        break;
       }
       $20 = ($0|0)<(276);
       if ($20) {
        $21 = (($date_index) + -244)|0;
        $month$0 = 11;$month_day_info$0 = $21;
        break;
       } else {
        $22 = ($date_index|0)>(274);
        $23 = ($0|0)<(307);
        $or$cond = $22 & $23;
        $24 = (($date_index) + -274)|0;
        $$ = $or$cond ? $24 : 0;
        $$24 = $or$cond ? 12 : 0;
        $month$0 = $$24;$month_day_info$0 = $$;
        break;
       }
      } else {
       $month$0 = 0;$month_day_info$0 = 0;
      }
     } else {
      $month$0 = 0;$month_day_info$0 = 0;
     }
    } else {
     $month$0 = 0;$month_day_info$0 = 0;
    }
   }
  } else {
   $month$0 = 0;$month_day_info$0 = 0;
  }
 } while(0);
 $25 = (($agg$result) + 4|0);
 HEAP32[$25>>2] = $month$0;
 $26 = (($agg$result) + 8|0);
 HEAP32[$26>>2] = $month_day_info$0;
 STACKTOP = sp;return;
}
function __ZN8MonthDay15containing_daysE5Month($month) {
 $month = $month|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($month|0) {
 case 11:  {
  $$0 = 30;
  break;
 }
 case 6:  {
  $$0 = 30;
  break;
 }
 case 12: case 10: case 8: case 7: case 5: case 3:  {
  $$0 = 31;
  break;
 }
 case 9:  {
  $$0 = 30;
  break;
 }
 case 4:  {
  $$0 = 30;
  break;
 }
 default: {
  _llvm_trap();
  // unreachable;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN8MapTable10check_stopEii($this,$reference,$step) {
 $this = $this|0;
 $reference = $reference|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $storemerge = 0, $storemerge$in = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($reference) + ($step))|0;
 $storemerge$in = $reference;
 while(1) {
  $storemerge = (($storemerge$in) + 1)|0;
  $1 = ($storemerge$in|0)<($0|0);
  if (!($1)) {
   $storemerge1 = $0;
   label = 4;
   break;
  }
  $2 = (__ZN8MapTable2atEi($this,$storemerge)|0);
  $3 = (($2) + 4|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 1;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $storemerge$in = $storemerge;
  } else {
   $storemerge1 = $storemerge;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($storemerge1|0);
 }
 return 0|0;
}
function __ZN8MapTable2atEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $$lcssa$i$i = 0, $$size$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)>($i>>>0);
 if ($7) {
  $33 = (($2) + ($i<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  STACKTOP = sp;return ($34|0);
 }
 $8 = (___cxa_allocate_exception(8)|0);
 HEAP32[$8>>2] = ((20152 + 8|0));
 $9 = (($8) + 4|0);
 $10 = (_strlen((11648|0))|0);
 $11 = (($10) + 1)|0;
 $12 = (($10) + 13)|0;
 $13 = ($12|0)==(0);
 $$size$i$i = $13 ? 1 : $12;
 $14 = (_malloc($$size$i$i)|0);
 $15 = ($14|0)==(0|0);
 L4: do {
  if ($15) {
   while(1) {
    $16 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($16+0)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    }
    $18 = $16;
    __THREW__ = 0;
    invoke_v($18|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 9;
     break;
    }
    $21 = (_malloc($$size$i$i)|0);
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $$lcssa$i$i = $21;
     break L4;
    }
   }
   if ((label|0) == 9) {
    $29 = ___cxa_find_matching_catch()|0;
    $30 = tempRet0;
    $lpad$phi$index = $29;$lpad$phi$index2 = $30;
    ___cxa_free_exception(($8|0));
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $23 = (___cxa_allocate_exception(4)|0);
   HEAP32[$23>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($23|0),(20008|0),(386|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    // unreachable;
   }
   $31 = ___cxa_find_matching_catch()|0;
   $32 = tempRet0;
   $lpad$phi$index = $31;$lpad$phi$index2 = $32;
   ___cxa_free_exception(($8|0));
   ___resumeException($lpad$phi$index|0);
   // unreachable;
  } else {
   $$lcssa$i$i = $14;
  }
 } while(0);
 $26 = (($$lcssa$i$i) + 4|0);
 HEAP32[$26>>2] = $10;
 HEAP32[$$lcssa$i$i>>2] = $10;
 $27 = (($$lcssa$i$i) + 12|0);
 HEAP32[$9>>2] = $27;
 $28 = (($$lcssa$i$i) + 8|0);
 HEAP32[$28>>2] = 0;
 _memcpy(($27|0),(11648|0),($11|0))|0;
 HEAP32[$8>>2] = ((20296 + 8|0));
 ___cxa_throw(($8|0),(20344|0),(389|0));
 // unreachable;
 return 0|0;
}
function __ZNK4cell9stop_cellEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)!=(0);
 STACKTOP = sp;return ($3|0);
}
function __ZN8MapTable16generate_defaultEv($agg$result) {
 $agg$result = $agg$result|0;
 var $$0 = 0, $$lcssa$i = 0, $$lcssa$i$i$i = 0, $$lcssa$i1000 = 0, $$lcssa$i1007 = 0, $$lcssa$i1014 = 0, $$lcssa$i1021 = 0, $$lcssa$i1028 = 0, $$lcssa$i1035 = 0, $$lcssa$i104 = 0, $$lcssa$i1042 = 0, $$lcssa$i1049 = 0, $$lcssa$i1056 = 0, $$lcssa$i1063 = 0, $$lcssa$i1070 = 0, $$lcssa$i1077 = 0, $$lcssa$i1084 = 0, $$lcssa$i1091 = 0, $$lcssa$i1098 = 0, $$lcssa$i1105 = 0;
 var $$lcssa$i111 = 0, $$lcssa$i1112 = 0, $$lcssa$i1119 = 0, $$lcssa$i1126 = 0, $$lcssa$i1133 = 0, $$lcssa$i1140 = 0, $$lcssa$i1147 = 0, $$lcssa$i1154 = 0, $$lcssa$i1161 = 0, $$lcssa$i1168 = 0, $$lcssa$i1175 = 0, $$lcssa$i118 = 0, $$lcssa$i1182 = 0, $$lcssa$i1189 = 0, $$lcssa$i1196 = 0, $$lcssa$i1203 = 0, $$lcssa$i1210 = 0, $$lcssa$i1217 = 0, $$lcssa$i1224 = 0, $$lcssa$i1231 = 0;
 var $$lcssa$i1238 = 0, $$lcssa$i1245 = 0, $$lcssa$i125 = 0, $$lcssa$i1252 = 0, $$lcssa$i1259 = 0, $$lcssa$i1266 = 0, $$lcssa$i1273 = 0, $$lcssa$i1280 = 0, $$lcssa$i1287 = 0, $$lcssa$i1294 = 0, $$lcssa$i13 = 0, $$lcssa$i1301 = 0, $$lcssa$i1308 = 0, $$lcssa$i1315 = 0, $$lcssa$i132 = 0, $$lcssa$i1322 = 0, $$lcssa$i1329 = 0, $$lcssa$i1336 = 0, $$lcssa$i1343 = 0, $$lcssa$i1350 = 0;
 var $$lcssa$i1357 = 0, $$lcssa$i1364 = 0, $$lcssa$i1371 = 0, $$lcssa$i1378 = 0, $$lcssa$i1385 = 0, $$lcssa$i139 = 0, $$lcssa$i1392 = 0, $$lcssa$i1399 = 0, $$lcssa$i1406 = 0, $$lcssa$i1413 = 0, $$lcssa$i1420 = 0, $$lcssa$i1427 = 0, $$lcssa$i1434 = 0, $$lcssa$i1441 = 0, $$lcssa$i1448 = 0, $$lcssa$i1455 = 0, $$lcssa$i146 = 0, $$lcssa$i1462 = 0, $$lcssa$i1469 = 0, $$lcssa$i1476 = 0;
 var $$lcssa$i1483 = 0, $$lcssa$i1490 = 0, $$lcssa$i1497 = 0, $$lcssa$i1504 = 0, $$lcssa$i1511 = 0, $$lcssa$i1518 = 0, $$lcssa$i1525 = 0, $$lcssa$i153 = 0, $$lcssa$i1532 = 0, $$lcssa$i1539 = 0, $$lcssa$i1546 = 0, $$lcssa$i1553 = 0, $$lcssa$i1560 = 0, $$lcssa$i1567 = 0, $$lcssa$i1574 = 0, $$lcssa$i1581 = 0, $$lcssa$i1588 = 0, $$lcssa$i1595 = 0, $$lcssa$i160 = 0, $$lcssa$i1602 = 0;
 var $$lcssa$i1609 = 0, $$lcssa$i1616 = 0, $$lcssa$i1623 = 0, $$lcssa$i1630 = 0, $$lcssa$i1637 = 0, $$lcssa$i1644 = 0, $$lcssa$i1651 = 0, $$lcssa$i1658 = 0, $$lcssa$i1665 = 0, $$lcssa$i167 = 0, $$lcssa$i1672 = 0, $$lcssa$i1679 = 0, $$lcssa$i1686 = 0, $$lcssa$i1693 = 0, $$lcssa$i1700 = 0, $$lcssa$i1707 = 0, $$lcssa$i1714 = 0, $$lcssa$i1721 = 0, $$lcssa$i1728 = 0, $$lcssa$i1735 = 0;
 var $$lcssa$i174 = 0, $$lcssa$i1742 = 0, $$lcssa$i1749 = 0, $$lcssa$i1756 = 0, $$lcssa$i1763 = 0, $$lcssa$i1770 = 0, $$lcssa$i1777 = 0, $$lcssa$i1784 = 0, $$lcssa$i1791 = 0, $$lcssa$i1798 = 0, $$lcssa$i1805 = 0, $$lcssa$i181 = 0, $$lcssa$i1812 = 0, $$lcssa$i1819 = 0, $$lcssa$i1826 = 0, $$lcssa$i1833 = 0, $$lcssa$i1840 = 0, $$lcssa$i1847 = 0, $$lcssa$i1854 = 0, $$lcssa$i1861 = 0;
 var $$lcssa$i1868 = 0, $$lcssa$i1875 = 0, $$lcssa$i188 = 0, $$lcssa$i1882 = 0, $$lcssa$i1889 = 0, $$lcssa$i1896 = 0, $$lcssa$i1903 = 0, $$lcssa$i1910 = 0, $$lcssa$i1917 = 0, $$lcssa$i1924 = 0, $$lcssa$i1931 = 0, $$lcssa$i1938 = 0, $$lcssa$i1945 = 0, $$lcssa$i195 = 0, $$lcssa$i1952 = 0, $$lcssa$i1959 = 0, $$lcssa$i1966 = 0, $$lcssa$i1973 = 0, $$lcssa$i1980 = 0, $$lcssa$i1987 = 0;
 var $$lcssa$i1994 = 0, $$lcssa$i20 = 0, $$lcssa$i2001 = 0, $$lcssa$i2008 = 0, $$lcssa$i2015 = 0, $$lcssa$i202 = 0, $$lcssa$i2022 = 0, $$lcssa$i2029 = 0, $$lcssa$i2036 = 0, $$lcssa$i2043 = 0, $$lcssa$i2050 = 0, $$lcssa$i2057 = 0, $$lcssa$i2064 = 0, $$lcssa$i2071 = 0, $$lcssa$i2078 = 0, $$lcssa$i2085 = 0, $$lcssa$i209 = 0, $$lcssa$i2092 = 0, $$lcssa$i2099 = 0, $$lcssa$i2106 = 0;
 var $$lcssa$i2113 = 0, $$lcssa$i2120 = 0, $$lcssa$i2127 = 0, $$lcssa$i2134 = 0, $$lcssa$i216 = 0, $$lcssa$i223 = 0, $$lcssa$i230 = 0, $$lcssa$i237 = 0, $$lcssa$i244 = 0, $$lcssa$i251 = 0, $$lcssa$i258 = 0, $$lcssa$i265 = 0, $$lcssa$i27 = 0, $$lcssa$i272 = 0, $$lcssa$i279 = 0, $$lcssa$i286 = 0, $$lcssa$i293 = 0, $$lcssa$i300 = 0, $$lcssa$i307 = 0, $$lcssa$i314 = 0;
 var $$lcssa$i321 = 0, $$lcssa$i328 = 0, $$lcssa$i335 = 0, $$lcssa$i34 = 0, $$lcssa$i342 = 0, $$lcssa$i349 = 0, $$lcssa$i356 = 0, $$lcssa$i363 = 0, $$lcssa$i370 = 0, $$lcssa$i377 = 0, $$lcssa$i384 = 0, $$lcssa$i391 = 0, $$lcssa$i398 = 0, $$lcssa$i405 = 0, $$lcssa$i41 = 0, $$lcssa$i412 = 0, $$lcssa$i419 = 0, $$lcssa$i426 = 0, $$lcssa$i433 = 0, $$lcssa$i440 = 0;
 var $$lcssa$i447 = 0, $$lcssa$i454 = 0, $$lcssa$i461 = 0, $$lcssa$i468 = 0, $$lcssa$i475 = 0, $$lcssa$i48 = 0, $$lcssa$i482 = 0, $$lcssa$i489 = 0, $$lcssa$i496 = 0, $$lcssa$i503 = 0, $$lcssa$i510 = 0, $$lcssa$i517 = 0, $$lcssa$i524 = 0, $$lcssa$i531 = 0, $$lcssa$i538 = 0, $$lcssa$i545 = 0, $$lcssa$i55 = 0, $$lcssa$i552 = 0, $$lcssa$i559 = 0, $$lcssa$i566 = 0;
 var $$lcssa$i573 = 0, $$lcssa$i580 = 0, $$lcssa$i587 = 0, $$lcssa$i594 = 0, $$lcssa$i6 = 0, $$lcssa$i601 = 0, $$lcssa$i608 = 0, $$lcssa$i615 = 0, $$lcssa$i62 = 0, $$lcssa$i622 = 0, $$lcssa$i629 = 0, $$lcssa$i636 = 0, $$lcssa$i643 = 0, $$lcssa$i650 = 0, $$lcssa$i657 = 0, $$lcssa$i664 = 0, $$lcssa$i671 = 0, $$lcssa$i678 = 0, $$lcssa$i685 = 0, $$lcssa$i69 = 0;
 var $$lcssa$i692 = 0, $$lcssa$i699 = 0, $$lcssa$i706 = 0, $$lcssa$i713 = 0, $$lcssa$i720 = 0, $$lcssa$i727 = 0, $$lcssa$i734 = 0, $$lcssa$i741 = 0, $$lcssa$i748 = 0, $$lcssa$i755 = 0, $$lcssa$i76 = 0, $$lcssa$i762 = 0, $$lcssa$i769 = 0, $$lcssa$i776 = 0, $$lcssa$i783 = 0, $$lcssa$i790 = 0, $$lcssa$i797 = 0, $$lcssa$i804 = 0, $$lcssa$i811 = 0, $$lcssa$i818 = 0;
 var $$lcssa$i825 = 0, $$lcssa$i83 = 0, $$lcssa$i832 = 0, $$lcssa$i839 = 0, $$lcssa$i846 = 0, $$lcssa$i853 = 0, $$lcssa$i860 = 0, $$lcssa$i867 = 0, $$lcssa$i874 = 0, $$lcssa$i881 = 0, $$lcssa$i888 = 0, $$lcssa$i895 = 0, $$lcssa$i90 = 0, $$lcssa$i902 = 0, $$lcssa$i909 = 0, $$lcssa$i916 = 0, $$lcssa$i923 = 0, $$lcssa$i930 = 0, $$lcssa$i937 = 0, $$lcssa$i944 = 0;
 var $$lcssa$i951 = 0, $$lcssa$i958 = 0, $$lcssa$i965 = 0, $$lcssa$i97 = 0, $$lcssa$i972 = 0, $$lcssa$i979 = 0, $$lcssa$i986 = 0, $$lcssa$i993 = 0, $$pre = 0, $$pre3863 = 0, $$sroa$1$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0;
 var $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0;
 var $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0;
 var $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0;
 var $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0;
 var $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0;
 var $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0;
 var $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0;
 var $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0;
 var $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0;
 var $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0;
 var $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0;
 var $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0;
 var $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0;
 var $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0;
 var $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0;
 var $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0;
 var $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0;
 var $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0;
 var $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0;
 var $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0;
 var $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0;
 var $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0;
 var $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0;
 var $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0;
 var $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0;
 var $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0;
 var $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0;
 var $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0;
 var $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0;
 var $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0;
 var $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0;
 var $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0;
 var $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0;
 var $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0;
 var $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0;
 var $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0;
 var $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0;
 var $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0;
 var $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0;
 var $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0;
 var $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0;
 var $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0;
 var $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0;
 var $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0;
 var $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0;
 var $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0;
 var $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0;
 var $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0;
 var $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0;
 var $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0;
 var $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0;
 var $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0;
 var $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0;
 var $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0;
 var $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0;
 var $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0;
 var $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0;
 var $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0;
 var $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0;
 var $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0;
 var $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0;
 var $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0;
 var $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0;
 var $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0;
 var $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0;
 var $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0;
 var $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0;
 var $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0;
 var $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0;
 var $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0;
 var $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0;
 var $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0;
 var $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0;
 var $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0;
 var $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0;
 var $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0;
 var $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0;
 var $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0;
 var $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0;
 var $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0;
 var $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0;
 var $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0;
 var $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0;
 var $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0;
 var $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0;
 var $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0;
 var $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0;
 var $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0;
 var $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0;
 var $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0;
 var $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0;
 var $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0;
 var $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0;
 var $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0;
 var $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0;
 var $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0;
 var $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0;
 var $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0;
 var $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0;
 var $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0;
 var $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0;
 var $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0;
 var $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0;
 var $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0;
 var $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0;
 var $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0;
 var $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0;
 var $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0;
 var $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0;
 var $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0;
 var $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0;
 var $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0;
 var $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0;
 var $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0;
 var $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0;
 var $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0;
 var $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0;
 var $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0;
 var $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0;
 var $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0;
 var $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0;
 var $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0;
 var $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0;
 var $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0;
 var $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0;
 var $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0;
 var $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0;
 var $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0;
 var $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0;
 var $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0;
 var $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0;
 var $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0;
 var $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0;
 var $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0;
 var $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0;
 var $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0;
 var $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0;
 var $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0;
 var $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0;
 var $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0;
 var $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0;
 var $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0;
 var $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0;
 var $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0;
 var $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0;
 var $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0;
 var $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0;
 var $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0;
 var $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0;
 var $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0;
 var $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0;
 var $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0;
 var $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0;
 var $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0;
 var $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0;
 var $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0;
 var $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0;
 var $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0;
 var $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0;
 var $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0;
 var $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0;
 var $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0;
 var $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0;
 var $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0, $4509 = 0, $451 = 0, $4510 = 0, $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0, $4515 = 0;
 var $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0, $4527 = 0, $4528 = 0, $4529 = 0, $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0, $4533 = 0;
 var $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0, $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0, $4551 = 0;
 var $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4565 = 0, $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0, $457 = 0;
 var $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0, $4581 = 0, $4582 = 0, $4583 = 0, $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0, $4588 = 0;
 var $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0, $46 = 0, $460 = 0, $4600 = 0, $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0, $4605 = 0;
 var $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0, $4617 = 0, $4618 = 0, $4619 = 0, $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0, $4623 = 0;
 var $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0, $4635 = 0, $4636 = 0, $4637 = 0, $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0, $4641 = 0;
 var $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0, $4653 = 0, $4654 = 0, $4655 = 0, $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0, $466 = 0;
 var $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0, $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0, $4678 = 0;
 var $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0, $469 = 0, $4690 = 0, $4691 = 0, $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0, $4696 = 0;
 var $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0, $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0;
 var $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0, $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0;
 var $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0, $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0;
 var $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0, $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0;
 var $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0, $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0, $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0, $4786 = 0;
 var $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0, $4798 = 0, $4799 = 0, $48 = 0, $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0, $4803 = 0;
 var $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0, $4813 = 0, $4814 = 0, $4815 = 0, $4816 = 0, $4817 = 0, $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0, $4821 = 0;
 var $4822 = 0, $4823 = 0, $4824 = 0, $4825 = 0, $4826 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $483 = 0, $4830 = 0, $4831 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0, $4836 = 0, $4837 = 0, $4838 = 0, $4839 = 0, $484 = 0;
 var $4840 = 0, $4841 = 0, $4842 = 0, $4843 = 0, $4844 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4848 = 0, $4849 = 0, $485 = 0, $4850 = 0, $4851 = 0, $4852 = 0, $4853 = 0, $4854 = 0, $4855 = 0, $4856 = 0, $4857 = 0, $4858 = 0;
 var $4859 = 0, $486 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4863 = 0, $4864 = 0, $4865 = 0, $4866 = 0, $4867 = 0, $4868 = 0, $4869 = 0, $487 = 0, $4870 = 0, $4871 = 0, $4872 = 0, $4873 = 0, $4874 = 0, $4875 = 0, $4876 = 0;
 var $4877 = 0, $4878 = 0, $4879 = 0, $488 = 0, $4880 = 0, $4881 = 0, $4882 = 0, $4883 = 0, $4884 = 0, $4885 = 0, $4886 = 0, $4887 = 0, $4888 = 0, $4889 = 0, $489 = 0, $4890 = 0, $4891 = 0, $4892 = 0, $4893 = 0, $4894 = 0;
 var $4895 = 0, $4896 = 0, $4897 = 0, $4898 = 0, $4899 = 0, $49 = 0, $490 = 0, $4900 = 0, $4901 = 0, $4902 = 0, $4903 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0, $4908 = 0, $4909 = 0, $491 = 0, $4910 = 0, $4911 = 0;
 var $4912 = 0, $4913 = 0, $4914 = 0, $4915 = 0, $4916 = 0, $4917 = 0, $4918 = 0, $4919 = 0, $492 = 0, $4920 = 0, $4921 = 0, $4922 = 0, $4923 = 0, $4924 = 0, $4925 = 0, $4926 = 0, $4927 = 0, $4928 = 0, $4929 = 0, $493 = 0;
 var $4930 = 0, $4931 = 0, $4932 = 0, $4933 = 0, $4934 = 0, $4935 = 0, $4936 = 0, $4937 = 0, $4938 = 0, $4939 = 0, $494 = 0, $4940 = 0, $4941 = 0, $4942 = 0, $4943 = 0, $4944 = 0, $4945 = 0, $4946 = 0, $4947 = 0, $4948 = 0;
 var $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0, $4958 = 0, $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0, $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0, $4966 = 0;
 var $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0, $4976 = 0, $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0, $4980 = 0, $4981 = 0, $4982 = 0, $4983 = 0, $4984 = 0;
 var $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0, $4994 = 0, $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0, $4999 = 0, $5 = 0, $50 = 0, $500 = 0, $5000 = 0;
 var $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0, $5009 = 0, $501 = 0, $5010 = 0, $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0, $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0, $5019 = 0;
 var $502 = 0, $5020 = 0, $5021 = 0, $5022 = 0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0, $5029 = 0, $503 = 0, $5030 = 0, $5031 = 0, $5032 = 0, $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0, $5037 = 0;
 var $5038 = 0, $5039 = 0, $504 = 0, $5040 = 0, $5041 = 0, $5042 = 0, $5043 = 0, $5044 = 0, $5045 = 0, $5046 = 0, $5047 = 0, $5048 = 0, $5049 = 0, $505 = 0, $5050 = 0, $5051 = 0, $5052 = 0, $5053 = 0, $5054 = 0, $5055 = 0;
 var $5056 = 0, $5057 = 0, $5058 = 0, $5059 = 0, $506 = 0, $5060 = 0, $5061 = 0, $5062 = 0, $5063 = 0, $5064 = 0, $5065 = 0, $5066 = 0, $5067 = 0, $5068 = 0, $5069 = 0, $507 = 0, $5070 = 0, $5071 = 0, $5072 = 0, $5073 = 0;
 var $5074 = 0, $5075 = 0, $5076 = 0, $5077 = 0, $5078 = 0, $5079 = 0, $508 = 0, $5080 = 0, $5081 = 0, $5082 = 0, $5083 = 0, $5084 = 0, $5085 = 0, $5086 = 0, $5087 = 0, $5088 = 0, $5089 = 0, $509 = 0, $5090 = 0, $5091 = 0;
 var $5092 = 0, $5093 = 0, $5094 = 0, $5095 = 0, $5096 = 0, $5097 = 0, $5098 = 0, $5099 = 0, $51 = 0, $510 = 0, $5100 = 0, $5101 = 0, $5102 = 0, $5103 = 0, $5104 = 0, $5105 = 0, $5106 = 0, $5107 = 0, $5108 = 0, $5109 = 0;
 var $511 = 0, $5110 = 0, $5111 = 0, $5112 = 0, $5113 = 0, $5114 = 0, $5115 = 0, $5116 = 0, $5117 = 0, $5118 = 0, $5119 = 0, $512 = 0, $5120 = 0, $5121 = 0, $5122 = 0, $5123 = 0, $5124 = 0, $5125 = 0, $5126 = 0, $5127 = 0;
 var $5128 = 0, $5129 = 0, $513 = 0, $5130 = 0, $5131 = 0, $5132 = 0, $5133 = 0, $5134 = 0, $5135 = 0, $5136 = 0, $5137 = 0, $5138 = 0, $5139 = 0, $514 = 0, $5140 = 0, $5141 = 0, $5142 = 0, $5143 = 0, $5144 = 0, $5145 = 0;
 var $5146 = 0, $5147 = 0, $5148 = 0, $5149 = 0, $515 = 0, $5150 = 0, $5151 = 0, $5152 = 0, $5153 = 0, $5154 = 0, $5155 = 0, $5156 = 0, $5157 = 0, $5158 = 0, $5159 = 0, $516 = 0, $5160 = 0, $5161 = 0, $5162 = 0, $5163 = 0;
 var $5164 = 0, $5165 = 0, $5166 = 0, $5167 = 0, $5168 = 0, $5169 = 0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0, $5173 = 0, $5174 = 0, $5175 = 0, $5176 = 0, $5177 = 0, $5178 = 0, $5179 = 0, $518 = 0, $5180 = 0, $5181 = 0;
 var $5182 = 0, $5183 = 0, $5184 = 0, $5185 = 0, $5186 = 0, $5187 = 0, $5188 = 0, $5189 = 0, $519 = 0, $5190 = 0, $5191 = 0, $5192 = 0, $5193 = 0, $5194 = 0, $5195 = 0, $5196 = 0, $5197 = 0, $5198 = 0, $5199 = 0, $52 = 0;
 var $520 = 0, $5200 = 0, $5201 = 0, $5202 = 0, $5203 = 0, $5204 = 0, $5205 = 0, $5206 = 0, $5207 = 0, $5208 = 0, $5209 = 0, $521 = 0, $5210 = 0, $5211 = 0, $5212 = 0, $5213 = 0, $5214 = 0, $5215 = 0, $5216 = 0, $5217 = 0;
 var $5218 = 0, $5219 = 0, $522 = 0, $5220 = 0, $5221 = 0, $5222 = 0, $5223 = 0, $5224 = 0, $5225 = 0, $5226 = 0, $5227 = 0, $5228 = 0, $5229 = 0, $523 = 0, $5230 = 0, $5231 = 0, $5232 = 0, $5233 = 0, $5234 = 0, $5235 = 0;
 var $5236 = 0, $5237 = 0, $5238 = 0, $5239 = 0, $524 = 0, $5240 = 0, $5241 = 0, $5242 = 0, $5243 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__begin$i$sroa$0$0 = 0, $eh$lpad$body$index4213Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($agg$result) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (_malloc(1224)|0);
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   while(1) {
    $4 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4+0)|0);
    $5 = ($4|0)==(0);
    if ($5) {
     break;
    }
    $6 = $4;
    __THREW__ = 0;
    invoke_v($6|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     label = 11;
     break;
    }
    $9 = (_malloc(1224)|0);
    $10 = ($9|0)==(0|0);
    if (!($10)) {
     $$lcssa$i$i$i = $9;
     label = 7;
     break L1;
    }
   }
   if ((label|0) == 11) {
    $19 = ___cxa_find_matching_catch()|0;
    $20 = tempRet0;
    $eh$lpad$body$index4213Z2D = $20;$eh$lpad$body$indexZ2D = $19;
    break;
   }
   $11 = (___cxa_allocate_exception(4)|0);
   HEAP32[$11>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($11|0),(20008|0),(386|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $21 = ___cxa_find_matching_catch()|0;
    $22 = tempRet0;
    $eh$lpad$body$index4213Z2D = $22;$eh$lpad$body$indexZ2D = $21;
    break;
   } else {
    // unreachable;
   }
  } else {
   $$lcssa$i$i$i = $2;
   label = 7;
  }
 } while(0);
 L12: do {
  if ((label|0) == 7) {
   $14 = (($$lcssa$i$i$i) + 1224|0);
   $$0 = 306;$$sroa$1$0 = $$lcssa$i$i$i;
   while(1) {
    $15 = ($$sroa$1$0|0)==(0|0);
    if (!($15)) {
     HEAP32[$$sroa$1$0>>2] = 0;
    }
    $16 = (($$sroa$1$0) + 4|0);
    $17 = (($$0) + -1)|0;
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    } else {
     $$0 = $17;$$sroa$1$0 = $16;
    }
   }
   $$pre = HEAP32[$agg$result>>2]|0;
   $23 = ($$pre|0)==(0|0);
   if (!($23)) {
    $$pre3863 = HEAP32[$0>>2]|0;
    $25 = $$pre3863;
    while(1) {
     $24 = ($$pre|0)==($25|0);
     if ($24) {
      break;
     }
     $26 = (($25) + -4|0);
     HEAP32[$0>>2] = $26;
     $25 = $26;
    }
    _free($$pre);
    HEAP32[$1>>2] = 0;
    HEAP32[$0>>2] = 0;
    HEAP32[$agg$result>>2] = 0;
   }
   HEAP32[$agg$result>>2] = $$lcssa$i$i$i;
   HEAP32[$0>>2] = $16;
   HEAP32[$1>>2] = $14;
   $27 = (_malloc(8)|0);
   $28 = ($27|0)==(0|0);
   L27: do {
    if ($28) {
     while(1) {
      $29 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($29+0)|0);
      $30 = ($29|0)==(0);
      if ($30) {
       break;
      }
      $31 = $29;
      __THREW__ = 0;
      invoke_v($31|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 2159;
       break;
      }
      $34 = (_malloc(8)|0);
      $35 = ($34|0)==(0|0);
      if (!($35)) {
       $$lcssa$i = $34;
       label = 24;
       break L27;
      }
     }
     if ((label|0) == 2159) {
      $5223 = ___cxa_find_matching_catch()|0;
      $5224 = tempRet0;
      $eh$lpad$body$index4213Z2D = $5224;$eh$lpad$body$indexZ2D = $5223;
      break L12;
     }
     $36 = (___cxa_allocate_exception(4)|0);
     HEAP32[$36>>2] = ((19952 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($36|0),(20008|0),(386|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if (!($38)) {
      // unreachable;
     }
    } else {
     $$lcssa$i = $27;
     label = 24;
    }
   } while(0);
   L36: do {
    if ((label|0) == 24) {
     $39 = (($$lcssa$i) + 4|0);
     HEAP8[$39>>0] = 0;
     HEAP32[$$lcssa$i>>2] = ((520 + 8|0));
     $40 = HEAP32[$agg$result>>2]|0;
     HEAP32[$40>>2] = $$lcssa$i;
     $41 = (_malloc(8)|0);
     $42 = ($41|0)==(0|0);
     L38: do {
      if ($42) {
       while(1) {
        $43 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($43+0)|0);
        $44 = ($43|0)==(0);
        if ($44) {
         break;
        }
        $45 = $43;
        __THREW__ = 0;
        invoke_v($45|0);
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         label = 2158;
         break;
        }
        $48 = (_malloc(8)|0);
        $49 = ($48|0)==(0|0);
        if (!($49)) {
         $$lcssa$i6 = $48;
         break L38;
        }
       }
       if ((label|0) == 2158) {
        $5221 = ___cxa_find_matching_catch()|0;
        $5222 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5222;$eh$lpad$body$indexZ2D = $5221;
        break L12;
       }
       $50 = (___cxa_allocate_exception(4)|0);
       HEAP32[$50>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($50|0),(20008|0),(386|0));
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i6 = $41;
      }
     } while(0);
     $53 = (($$lcssa$i6) + 4|0);
     HEAP8[$53>>0] = 0;
     HEAP32[$$lcssa$i6>>2] = ((520 + 8|0));
     $54 = HEAP32[$agg$result>>2]|0;
     $55 = (($54) + 4|0);
     HEAP32[$55>>2] = $$lcssa$i6;
     $56 = (_malloc(8)|0);
     $57 = ($56|0)==(0|0);
     L48: do {
      if ($57) {
       while(1) {
        $58 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($58+0)|0);
        $59 = ($58|0)==(0);
        if ($59) {
         break;
        }
        $60 = $58;
        __THREW__ = 0;
        invoke_v($60|0);
        $61 = __THREW__; __THREW__ = 0;
        $62 = $61&1;
        if ($62) {
         label = 2157;
         break;
        }
        $63 = (_malloc(8)|0);
        $64 = ($63|0)==(0|0);
        if (!($64)) {
         $$lcssa$i13 = $63;
         break L48;
        }
       }
       if ((label|0) == 2157) {
        $5219 = ___cxa_find_matching_catch()|0;
        $5220 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5220;$eh$lpad$body$indexZ2D = $5219;
        break L12;
       }
       $65 = (___cxa_allocate_exception(4)|0);
       HEAP32[$65>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($65|0),(20008|0),(386|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i13 = $56;
      }
     } while(0);
     $68 = (($$lcssa$i13) + 4|0);
     HEAP8[$68>>0] = 0;
     HEAP32[$$lcssa$i13>>2] = ((520 + 8|0));
     $69 = HEAP32[$agg$result>>2]|0;
     $70 = (($69) + 8|0);
     HEAP32[$70>>2] = $$lcssa$i13;
     $71 = (_malloc(8)|0);
     $72 = ($71|0)==(0|0);
     L58: do {
      if ($72) {
       while(1) {
        $73 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($73+0)|0);
        $74 = ($73|0)==(0);
        if ($74) {
         break;
        }
        $75 = $73;
        __THREW__ = 0;
        invoke_v($75|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 2156;
         break;
        }
        $78 = (_malloc(8)|0);
        $79 = ($78|0)==(0|0);
        if (!($79)) {
         $$lcssa$i20 = $78;
         break L58;
        }
       }
       if ((label|0) == 2156) {
        $5217 = ___cxa_find_matching_catch()|0;
        $5218 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5218;$eh$lpad$body$indexZ2D = $5217;
        break L12;
       }
       $80 = (___cxa_allocate_exception(4)|0);
       HEAP32[$80>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($80|0),(20008|0),(386|0));
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       if ($82) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i20 = $71;
      }
     } while(0);
     $83 = (($$lcssa$i20) + 4|0);
     HEAP8[$83>>0] = 0;
     HEAP32[$$lcssa$i20>>2] = ((576 + 8|0));
     $84 = HEAP32[$agg$result>>2]|0;
     $85 = (($84) + 12|0);
     HEAP32[$85>>2] = $$lcssa$i20;
     $86 = (_malloc(8)|0);
     $87 = ($86|0)==(0|0);
     L68: do {
      if ($87) {
       while(1) {
        $88 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($88+0)|0);
        $89 = ($88|0)==(0);
        if ($89) {
         break;
        }
        $90 = $88;
        __THREW__ = 0;
        invoke_v($90|0);
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         label = 2155;
         break;
        }
        $93 = (_malloc(8)|0);
        $94 = ($93|0)==(0|0);
        if (!($94)) {
         $$lcssa$i27 = $93;
         break L68;
        }
       }
       if ((label|0) == 2155) {
        $5215 = ___cxa_find_matching_catch()|0;
        $5216 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5216;$eh$lpad$body$indexZ2D = $5215;
        break L12;
       }
       $95 = (___cxa_allocate_exception(4)|0);
       HEAP32[$95>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($95|0),(20008|0),(386|0));
       $96 = __THREW__; __THREW__ = 0;
       $97 = $96&1;
       if ($97) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i27 = $86;
      }
     } while(0);
     $98 = (($$lcssa$i27) + 4|0);
     HEAP8[$98>>0] = 1;
     HEAP32[$$lcssa$i27>>2] = ((1096 + 8|0));
     $99 = HEAP32[$agg$result>>2]|0;
     $100 = (($99) + 16|0);
     HEAP32[$100>>2] = $$lcssa$i27;
     $101 = (_malloc(8)|0);
     $102 = ($101|0)==(0|0);
     L78: do {
      if ($102) {
       while(1) {
        $103 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($103+0)|0);
        $104 = ($103|0)==(0);
        if ($104) {
         break;
        }
        $105 = $103;
        __THREW__ = 0;
        invoke_v($105|0);
        $106 = __THREW__; __THREW__ = 0;
        $107 = $106&1;
        if ($107) {
         label = 2154;
         break;
        }
        $108 = (_malloc(8)|0);
        $109 = ($108|0)==(0|0);
        if (!($109)) {
         $$lcssa$i34 = $108;
         break L78;
        }
       }
       if ((label|0) == 2154) {
        $5213 = ___cxa_find_matching_catch()|0;
        $5214 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5214;$eh$lpad$body$indexZ2D = $5213;
        break L12;
       }
       $110 = (___cxa_allocate_exception(4)|0);
       HEAP32[$110>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($110|0),(20008|0),(386|0));
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i34 = $101;
      }
     } while(0);
     $113 = (($$lcssa$i34) + 4|0);
     HEAP8[$113>>0] = 0;
     HEAP32[$$lcssa$i34>>2] = ((576 + 8|0));
     $114 = HEAP32[$agg$result>>2]|0;
     $115 = (($114) + 20|0);
     HEAP32[$115>>2] = $$lcssa$i34;
     $116 = (_malloc(8)|0);
     $117 = ($116|0)==(0|0);
     L88: do {
      if ($117) {
       while(1) {
        $118 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($118+0)|0);
        $119 = ($118|0)==(0);
        if ($119) {
         break;
        }
        $120 = $118;
        __THREW__ = 0;
        invoke_v($120|0);
        $121 = __THREW__; __THREW__ = 0;
        $122 = $121&1;
        if ($122) {
         label = 2153;
         break;
        }
        $123 = (_malloc(8)|0);
        $124 = ($123|0)==(0|0);
        if (!($124)) {
         $$lcssa$i41 = $123;
         break L88;
        }
       }
       if ((label|0) == 2153) {
        $5211 = ___cxa_find_matching_catch()|0;
        $5212 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5212;$eh$lpad$body$indexZ2D = $5211;
        break L12;
       }
       $125 = (___cxa_allocate_exception(4)|0);
       HEAP32[$125>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($125|0),(20008|0),(386|0));
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       if ($127) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i41 = $116;
      }
     } while(0);
     $128 = (($$lcssa$i41) + 4|0);
     HEAP8[$128>>0] = 1;
     HEAP32[$$lcssa$i41>>2] = ((1096 + 8|0));
     $129 = HEAP32[$agg$result>>2]|0;
     $130 = (($129) + 24|0);
     HEAP32[$130>>2] = $$lcssa$i41;
     $131 = (_malloc(8)|0);
     $132 = ($131|0)==(0|0);
     L98: do {
      if ($132) {
       while(1) {
        $133 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($133+0)|0);
        $134 = ($133|0)==(0);
        if ($134) {
         break;
        }
        $135 = $133;
        __THREW__ = 0;
        invoke_v($135|0);
        $136 = __THREW__; __THREW__ = 0;
        $137 = $136&1;
        if ($137) {
         label = 2152;
         break;
        }
        $138 = (_malloc(8)|0);
        $139 = ($138|0)==(0|0);
        if (!($139)) {
         $$lcssa$i48 = $138;
         break L98;
        }
       }
       if ((label|0) == 2152) {
        $5209 = ___cxa_find_matching_catch()|0;
        $5210 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5210;$eh$lpad$body$indexZ2D = $5209;
        break L12;
       }
       $140 = (___cxa_allocate_exception(4)|0);
       HEAP32[$140>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($140|0),(20008|0),(386|0));
       $141 = __THREW__; __THREW__ = 0;
       $142 = $141&1;
       if ($142) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i48 = $131;
      }
     } while(0);
     $143 = (($$lcssa$i48) + 4|0);
     HEAP8[$143>>0] = 0;
     HEAP32[$$lcssa$i48>>2] = ((576 + 8|0));
     $144 = HEAP32[$agg$result>>2]|0;
     $145 = (($144) + 28|0);
     HEAP32[$145>>2] = $$lcssa$i48;
     $146 = (_malloc(8)|0);
     $147 = ($146|0)==(0|0);
     L108: do {
      if ($147) {
       while(1) {
        $148 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($148+0)|0);
        $149 = ($148|0)==(0);
        if ($149) {
         break;
        }
        $150 = $148;
        __THREW__ = 0;
        invoke_v($150|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         label = 2151;
         break;
        }
        $153 = (_malloc(8)|0);
        $154 = ($153|0)==(0|0);
        if (!($154)) {
         $$lcssa$i55 = $153;
         break L108;
        }
       }
       if ((label|0) == 2151) {
        $5207 = ___cxa_find_matching_catch()|0;
        $5208 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5208;$eh$lpad$body$indexZ2D = $5207;
        break L12;
       }
       $155 = (___cxa_allocate_exception(4)|0);
       HEAP32[$155>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($155|0),(20008|0),(386|0));
       $156 = __THREW__; __THREW__ = 0;
       $157 = $156&1;
       if ($157) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i55 = $146;
      }
     } while(0);
     $158 = (($$lcssa$i55) + 4|0);
     HEAP8[$158>>0] = 1;
     HEAP32[$$lcssa$i55>>2] = ((1048 + 8|0));
     $159 = HEAP32[$agg$result>>2]|0;
     $160 = (($159) + 32|0);
     HEAP32[$160>>2] = $$lcssa$i55;
     $161 = (_malloc(8)|0);
     $162 = ($161|0)==(0|0);
     L118: do {
      if ($162) {
       while(1) {
        $163 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($163+0)|0);
        $164 = ($163|0)==(0);
        if ($164) {
         break;
        }
        $165 = $163;
        __THREW__ = 0;
        invoke_v($165|0);
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         label = 2150;
         break;
        }
        $168 = (_malloc(8)|0);
        $169 = ($168|0)==(0|0);
        if (!($169)) {
         $$lcssa$i62 = $168;
         break L118;
        }
       }
       if ((label|0) == 2150) {
        $5205 = ___cxa_find_matching_catch()|0;
        $5206 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5206;$eh$lpad$body$indexZ2D = $5205;
        break L12;
       }
       $170 = (___cxa_allocate_exception(4)|0);
       HEAP32[$170>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($170|0),(20008|0),(386|0));
       $171 = __THREW__; __THREW__ = 0;
       $172 = $171&1;
       if ($172) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i62 = $161;
      }
     } while(0);
     $173 = (($$lcssa$i62) + 4|0);
     HEAP8[$173>>0] = 0;
     HEAP32[$$lcssa$i62>>2] = ((520 + 8|0));
     $174 = HEAP32[$agg$result>>2]|0;
     $175 = (($174) + 36|0);
     HEAP32[$175>>2] = $$lcssa$i62;
     $176 = (_malloc(8)|0);
     $177 = ($176|0)==(0|0);
     L128: do {
      if ($177) {
       while(1) {
        $178 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($178+0)|0);
        $179 = ($178|0)==(0);
        if ($179) {
         break;
        }
        $180 = $178;
        __THREW__ = 0;
        invoke_v($180|0);
        $181 = __THREW__; __THREW__ = 0;
        $182 = $181&1;
        if ($182) {
         label = 2149;
         break;
        }
        $183 = (_malloc(8)|0);
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $$lcssa$i69 = $183;
         break L128;
        }
       }
       if ((label|0) == 2149) {
        $5203 = ___cxa_find_matching_catch()|0;
        $5204 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5204;$eh$lpad$body$indexZ2D = $5203;
        break L12;
       }
       $185 = (___cxa_allocate_exception(4)|0);
       HEAP32[$185>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($185|0),(20008|0),(386|0));
       $186 = __THREW__; __THREW__ = 0;
       $187 = $186&1;
       if ($187) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i69 = $176;
      }
     } while(0);
     $188 = (($$lcssa$i69) + 4|0);
     HEAP8[$188>>0] = 1;
     HEAP32[$$lcssa$i69>>2] = ((992 + 8|0));
     $189 = HEAP32[$agg$result>>2]|0;
     $190 = (($189) + 40|0);
     HEAP32[$190>>2] = $$lcssa$i69;
     $191 = (_malloc(8)|0);
     $192 = ($191|0)==(0|0);
     L138: do {
      if ($192) {
       while(1) {
        $193 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($193+0)|0);
        $194 = ($193|0)==(0);
        if ($194) {
         break;
        }
        $195 = $193;
        __THREW__ = 0;
        invoke_v($195|0);
        $196 = __THREW__; __THREW__ = 0;
        $197 = $196&1;
        if ($197) {
         label = 2148;
         break;
        }
        $198 = (_malloc(8)|0);
        $199 = ($198|0)==(0|0);
        if (!($199)) {
         $$lcssa$i76 = $198;
         break L138;
        }
       }
       if ((label|0) == 2148) {
        $5201 = ___cxa_find_matching_catch()|0;
        $5202 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5202;$eh$lpad$body$indexZ2D = $5201;
        break L12;
       }
       $200 = (___cxa_allocate_exception(4)|0);
       HEAP32[$200>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($200|0),(20008|0),(386|0));
       $201 = __THREW__; __THREW__ = 0;
       $202 = $201&1;
       if ($202) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i76 = $191;
      }
     } while(0);
     $203 = (($$lcssa$i76) + 4|0);
     HEAP8[$203>>0] = 0;
     HEAP32[$$lcssa$i76>>2] = ((576 + 8|0));
     $204 = HEAP32[$agg$result>>2]|0;
     $205 = (($204) + 44|0);
     HEAP32[$205>>2] = $$lcssa$i76;
     $206 = (_malloc(8)|0);
     $207 = ($206|0)==(0|0);
     L148: do {
      if ($207) {
       while(1) {
        $208 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($208+0)|0);
        $209 = ($208|0)==(0);
        if ($209) {
         break;
        }
        $210 = $208;
        __THREW__ = 0;
        invoke_v($210|0);
        $211 = __THREW__; __THREW__ = 0;
        $212 = $211&1;
        if ($212) {
         label = 2147;
         break;
        }
        $213 = (_malloc(8)|0);
        $214 = ($213|0)==(0|0);
        if (!($214)) {
         $$lcssa$i83 = $213;
         break L148;
        }
       }
       if ((label|0) == 2147) {
        $5199 = ___cxa_find_matching_catch()|0;
        $5200 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5200;$eh$lpad$body$indexZ2D = $5199;
        break L12;
       }
       $215 = (___cxa_allocate_exception(4)|0);
       HEAP32[$215>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($215|0),(20008|0),(386|0));
       $216 = __THREW__; __THREW__ = 0;
       $217 = $216&1;
       if ($217) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i83 = $206;
      }
     } while(0);
     $218 = (($$lcssa$i83) + 4|0);
     HEAP8[$218>>0] = 0;
     HEAP32[$$lcssa$i83>>2] = ((576 + 8|0));
     $219 = HEAP32[$agg$result>>2]|0;
     $220 = (($219) + 48|0);
     HEAP32[$220>>2] = $$lcssa$i83;
     $221 = (_malloc(8)|0);
     $222 = ($221|0)==(0|0);
     L158: do {
      if ($222) {
       while(1) {
        $223 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($223+0)|0);
        $224 = ($223|0)==(0);
        if ($224) {
         break;
        }
        $225 = $223;
        __THREW__ = 0;
        invoke_v($225|0);
        $226 = __THREW__; __THREW__ = 0;
        $227 = $226&1;
        if ($227) {
         label = 2146;
         break;
        }
        $228 = (_malloc(8)|0);
        $229 = ($228|0)==(0|0);
        if (!($229)) {
         $$lcssa$i90 = $228;
         break L158;
        }
       }
       if ((label|0) == 2146) {
        $5197 = ___cxa_find_matching_catch()|0;
        $5198 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5198;$eh$lpad$body$indexZ2D = $5197;
        break L12;
       }
       $230 = (___cxa_allocate_exception(4)|0);
       HEAP32[$230>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($230|0),(20008|0),(386|0));
       $231 = __THREW__; __THREW__ = 0;
       $232 = $231&1;
       if ($232) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i90 = $221;
      }
     } while(0);
     $233 = (($$lcssa$i90) + 4|0);
     HEAP8[$233>>0] = 1;
     HEAP32[$$lcssa$i90>>2] = ((992 + 8|0));
     $234 = HEAP32[$agg$result>>2]|0;
     $235 = (($234) + 52|0);
     HEAP32[$235>>2] = $$lcssa$i90;
     $236 = (_malloc(8)|0);
     $237 = ($236|0)==(0|0);
     L168: do {
      if ($237) {
       while(1) {
        $238 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($238+0)|0);
        $239 = ($238|0)==(0);
        if ($239) {
         break;
        }
        $240 = $238;
        __THREW__ = 0;
        invoke_v($240|0);
        $241 = __THREW__; __THREW__ = 0;
        $242 = $241&1;
        if ($242) {
         label = 2145;
         break;
        }
        $243 = (_malloc(8)|0);
        $244 = ($243|0)==(0|0);
        if (!($244)) {
         $$lcssa$i97 = $243;
         break L168;
        }
       }
       if ((label|0) == 2145) {
        $5195 = ___cxa_find_matching_catch()|0;
        $5196 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5196;$eh$lpad$body$indexZ2D = $5195;
        break L12;
       }
       $245 = (___cxa_allocate_exception(4)|0);
       HEAP32[$245>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($245|0),(20008|0),(386|0));
       $246 = __THREW__; __THREW__ = 0;
       $247 = $246&1;
       if ($247) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i97 = $236;
      }
     } while(0);
     $248 = (($$lcssa$i97) + 4|0);
     HEAP8[$248>>0] = 0;
     HEAP32[$$lcssa$i97>>2] = ((576 + 8|0));
     $249 = HEAP32[$agg$result>>2]|0;
     $250 = (($249) + 56|0);
     HEAP32[$250>>2] = $$lcssa$i97;
     $251 = (_malloc(8)|0);
     $252 = ($251|0)==(0|0);
     L178: do {
      if ($252) {
       while(1) {
        $253 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($253+0)|0);
        $254 = ($253|0)==(0);
        if ($254) {
         break;
        }
        $255 = $253;
        __THREW__ = 0;
        invoke_v($255|0);
        $256 = __THREW__; __THREW__ = 0;
        $257 = $256&1;
        if ($257) {
         label = 2144;
         break;
        }
        $258 = (_malloc(8)|0);
        $259 = ($258|0)==(0|0);
        if (!($259)) {
         $$lcssa$i104 = $258;
         break L178;
        }
       }
       if ((label|0) == 2144) {
        $5193 = ___cxa_find_matching_catch()|0;
        $5194 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5194;$eh$lpad$body$indexZ2D = $5193;
        break L12;
       }
       $260 = (___cxa_allocate_exception(4)|0);
       HEAP32[$260>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($260|0),(20008|0),(386|0));
       $261 = __THREW__; __THREW__ = 0;
       $262 = $261&1;
       if ($262) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i104 = $251;
      }
     } while(0);
     $263 = (($$lcssa$i104) + 4|0);
     HEAP8[$263>>0] = 1;
     HEAP32[$$lcssa$i104>>2] = ((1048 + 8|0));
     $264 = HEAP32[$agg$result>>2]|0;
     $265 = (($264) + 60|0);
     HEAP32[$265>>2] = $$lcssa$i104;
     $266 = (_malloc(8)|0);
     $267 = ($266|0)==(0|0);
     L188: do {
      if ($267) {
       while(1) {
        $268 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($268+0)|0);
        $269 = ($268|0)==(0);
        if ($269) {
         break;
        }
        $270 = $268;
        __THREW__ = 0;
        invoke_v($270|0);
        $271 = __THREW__; __THREW__ = 0;
        $272 = $271&1;
        if ($272) {
         label = 2143;
         break;
        }
        $273 = (_malloc(8)|0);
        $274 = ($273|0)==(0|0);
        if (!($274)) {
         $$lcssa$i111 = $273;
         break L188;
        }
       }
       if ((label|0) == 2143) {
        $5191 = ___cxa_find_matching_catch()|0;
        $5192 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5192;$eh$lpad$body$indexZ2D = $5191;
        break L12;
       }
       $275 = (___cxa_allocate_exception(4)|0);
       HEAP32[$275>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($275|0),(20008|0),(386|0));
       $276 = __THREW__; __THREW__ = 0;
       $277 = $276&1;
       if ($277) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i111 = $266;
      }
     } while(0);
     $278 = (($$lcssa$i111) + 4|0);
     HEAP8[$278>>0] = 0;
     HEAP32[$$lcssa$i111>>2] = ((520 + 8|0));
     $279 = HEAP32[$agg$result>>2]|0;
     $280 = (($279) + 64|0);
     HEAP32[$280>>2] = $$lcssa$i111;
     $281 = (_malloc(8)|0);
     $282 = ($281|0)==(0|0);
     L198: do {
      if ($282) {
       while(1) {
        $283 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($283+0)|0);
        $284 = ($283|0)==(0);
        if ($284) {
         break;
        }
        $285 = $283;
        __THREW__ = 0;
        invoke_v($285|0);
        $286 = __THREW__; __THREW__ = 0;
        $287 = $286&1;
        if ($287) {
         label = 2142;
         break;
        }
        $288 = (_malloc(8)|0);
        $289 = ($288|0)==(0|0);
        if (!($289)) {
         $$lcssa$i118 = $288;
         break L198;
        }
       }
       if ((label|0) == 2142) {
        $5189 = ___cxa_find_matching_catch()|0;
        $5190 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5190;$eh$lpad$body$indexZ2D = $5189;
        break L12;
       }
       $290 = (___cxa_allocate_exception(4)|0);
       HEAP32[$290>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($290|0),(20008|0),(386|0));
       $291 = __THREW__; __THREW__ = 0;
       $292 = $291&1;
       if ($292) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i118 = $281;
      }
     } while(0);
     $293 = (($$lcssa$i118) + 4|0);
     HEAP8[$293>>0] = 0;
     HEAP32[$$lcssa$i118>>2] = ((576 + 8|0));
     $294 = HEAP32[$agg$result>>2]|0;
     $295 = (($294) + 68|0);
     HEAP32[$295>>2] = $$lcssa$i118;
     $296 = (_malloc(8)|0);
     $297 = ($296|0)==(0|0);
     L208: do {
      if ($297) {
       while(1) {
        $298 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($298+0)|0);
        $299 = ($298|0)==(0);
        if ($299) {
         break;
        }
        $300 = $298;
        __THREW__ = 0;
        invoke_v($300|0);
        $301 = __THREW__; __THREW__ = 0;
        $302 = $301&1;
        if ($302) {
         label = 2141;
         break;
        }
        $303 = (_malloc(8)|0);
        $304 = ($303|0)==(0|0);
        if (!($304)) {
         $$lcssa$i125 = $303;
         break L208;
        }
       }
       if ((label|0) == 2141) {
        $5187 = ___cxa_find_matching_catch()|0;
        $5188 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5188;$eh$lpad$body$indexZ2D = $5187;
        break L12;
       }
       $305 = (___cxa_allocate_exception(4)|0);
       HEAP32[$305>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($305|0),(20008|0),(386|0));
       $306 = __THREW__; __THREW__ = 0;
       $307 = $306&1;
       if ($307) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i125 = $296;
      }
     } while(0);
     $308 = (($$lcssa$i125) + 4|0);
     HEAP8[$308>>0] = 1;
     HEAP32[$$lcssa$i125>>2] = ((992 + 8|0));
     $309 = HEAP32[$agg$result>>2]|0;
     $310 = (($309) + 72|0);
     HEAP32[$310>>2] = $$lcssa$i125;
     $311 = (_malloc(8)|0);
     $312 = ($311|0)==(0|0);
     L218: do {
      if ($312) {
       while(1) {
        $313 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($313+0)|0);
        $314 = ($313|0)==(0);
        if ($314) {
         break;
        }
        $315 = $313;
        __THREW__ = 0;
        invoke_v($315|0);
        $316 = __THREW__; __THREW__ = 0;
        $317 = $316&1;
        if ($317) {
         label = 2140;
         break;
        }
        $318 = (_malloc(8)|0);
        $319 = ($318|0)==(0|0);
        if (!($319)) {
         $$lcssa$i132 = $318;
         break L218;
        }
       }
       if ((label|0) == 2140) {
        $5185 = ___cxa_find_matching_catch()|0;
        $5186 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5186;$eh$lpad$body$indexZ2D = $5185;
        break L12;
       }
       $320 = (___cxa_allocate_exception(4)|0);
       HEAP32[$320>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($320|0),(20008|0),(386|0));
       $321 = __THREW__; __THREW__ = 0;
       $322 = $321&1;
       if ($322) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i132 = $311;
      }
     } while(0);
     $323 = (($$lcssa$i132) + 4|0);
     HEAP8[$323>>0] = 0;
     HEAP32[$$lcssa$i132>>2] = ((576 + 8|0));
     $324 = HEAP32[$agg$result>>2]|0;
     $325 = (($324) + 76|0);
     HEAP32[$325>>2] = $$lcssa$i132;
     $326 = (_malloc(8)|0);
     $327 = ($326|0)==(0|0);
     L228: do {
      if ($327) {
       while(1) {
        $328 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($328+0)|0);
        $329 = ($328|0)==(0);
        if ($329) {
         break;
        }
        $330 = $328;
        __THREW__ = 0;
        invoke_v($330|0);
        $331 = __THREW__; __THREW__ = 0;
        $332 = $331&1;
        if ($332) {
         label = 2139;
         break;
        }
        $333 = (_malloc(8)|0);
        $334 = ($333|0)==(0|0);
        if (!($334)) {
         $$lcssa$i139 = $333;
         break L228;
        }
       }
       if ((label|0) == 2139) {
        $5183 = ___cxa_find_matching_catch()|0;
        $5184 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5184;$eh$lpad$body$indexZ2D = $5183;
        break L12;
       }
       $335 = (___cxa_allocate_exception(4)|0);
       HEAP32[$335>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($335|0),(20008|0),(386|0));
       $336 = __THREW__; __THREW__ = 0;
       $337 = $336&1;
       if ($337) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i139 = $326;
      }
     } while(0);
     $338 = (($$lcssa$i139) + 4|0);
     HEAP8[$338>>0] = 1;
     HEAP32[$$lcssa$i139>>2] = ((992 + 8|0));
     $339 = HEAP32[$agg$result>>2]|0;
     $340 = (($339) + 80|0);
     HEAP32[$340>>2] = $$lcssa$i139;
     $341 = (_malloc(8)|0);
     $342 = ($341|0)==(0|0);
     L238: do {
      if ($342) {
       while(1) {
        $343 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($343+0)|0);
        $344 = ($343|0)==(0);
        if ($344) {
         break;
        }
        $345 = $343;
        __THREW__ = 0;
        invoke_v($345|0);
        $346 = __THREW__; __THREW__ = 0;
        $347 = $346&1;
        if ($347) {
         label = 2138;
         break;
        }
        $348 = (_malloc(8)|0);
        $349 = ($348|0)==(0|0);
        if (!($349)) {
         $$lcssa$i146 = $348;
         break L238;
        }
       }
       if ((label|0) == 2138) {
        $5181 = ___cxa_find_matching_catch()|0;
        $5182 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5182;$eh$lpad$body$indexZ2D = $5181;
        break L12;
       }
       $350 = (___cxa_allocate_exception(4)|0);
       HEAP32[$350>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($350|0),(20008|0),(386|0));
       $351 = __THREW__; __THREW__ = 0;
       $352 = $351&1;
       if ($352) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i146 = $341;
      }
     } while(0);
     $353 = (($$lcssa$i146) + 4|0);
     HEAP8[$353>>0] = 0;
     HEAP32[$$lcssa$i146>>2] = ((576 + 8|0));
     $354 = HEAP32[$agg$result>>2]|0;
     $355 = (($354) + 84|0);
     HEAP32[$355>>2] = $$lcssa$i146;
     $356 = (_malloc(8)|0);
     $357 = ($356|0)==(0|0);
     L248: do {
      if ($357) {
       while(1) {
        $358 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($358+0)|0);
        $359 = ($358|0)==(0);
        if ($359) {
         break;
        }
        $360 = $358;
        __THREW__ = 0;
        invoke_v($360|0);
        $361 = __THREW__; __THREW__ = 0;
        $362 = $361&1;
        if ($362) {
         label = 2137;
         break;
        }
        $363 = (_malloc(8)|0);
        $364 = ($363|0)==(0|0);
        if (!($364)) {
         $$lcssa$i153 = $363;
         break L248;
        }
       }
       if ((label|0) == 2137) {
        $5179 = ___cxa_find_matching_catch()|0;
        $5180 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5180;$eh$lpad$body$indexZ2D = $5179;
        break L12;
       }
       $365 = (___cxa_allocate_exception(4)|0);
       HEAP32[$365>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($365|0),(20008|0),(386|0));
       $366 = __THREW__; __THREW__ = 0;
       $367 = $366&1;
       if ($367) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i153 = $356;
      }
     } while(0);
     $368 = (($$lcssa$i153) + 4|0);
     HEAP8[$368>>0] = 0;
     HEAP32[$$lcssa$i153>>2] = ((520 + 8|0));
     $369 = HEAP32[$agg$result>>2]|0;
     $370 = (($369) + 88|0);
     HEAP32[$370>>2] = $$lcssa$i153;
     $371 = (_malloc(8)|0);
     $372 = ($371|0)==(0|0);
     L258: do {
      if ($372) {
       while(1) {
        $373 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($373+0)|0);
        $374 = ($373|0)==(0);
        if ($374) {
         break;
        }
        $375 = $373;
        __THREW__ = 0;
        invoke_v($375|0);
        $376 = __THREW__; __THREW__ = 0;
        $377 = $376&1;
        if ($377) {
         label = 2136;
         break;
        }
        $378 = (_malloc(8)|0);
        $379 = ($378|0)==(0|0);
        if (!($379)) {
         $$lcssa$i160 = $378;
         break L258;
        }
       }
       if ((label|0) == 2136) {
        $5177 = ___cxa_find_matching_catch()|0;
        $5178 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5178;$eh$lpad$body$indexZ2D = $5177;
        break L12;
       }
       $380 = (___cxa_allocate_exception(4)|0);
       HEAP32[$380>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($380|0),(20008|0),(386|0));
       $381 = __THREW__; __THREW__ = 0;
       $382 = $381&1;
       if ($382) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i160 = $371;
      }
     } while(0);
     $383 = (($$lcssa$i160) + 4|0);
     HEAP8[$383>>0] = 0;
     HEAP32[$$lcssa$i160>>2] = ((520 + 8|0));
     $384 = HEAP32[$agg$result>>2]|0;
     $385 = (($384) + 92|0);
     HEAP32[$385>>2] = $$lcssa$i160;
     $386 = (_malloc(8)|0);
     $387 = ($386|0)==(0|0);
     L268: do {
      if ($387) {
       while(1) {
        $388 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($388+0)|0);
        $389 = ($388|0)==(0);
        if ($389) {
         break;
        }
        $390 = $388;
        __THREW__ = 0;
        invoke_v($390|0);
        $391 = __THREW__; __THREW__ = 0;
        $392 = $391&1;
        if ($392) {
         label = 2135;
         break;
        }
        $393 = (_malloc(8)|0);
        $394 = ($393|0)==(0|0);
        if (!($394)) {
         $$lcssa$i167 = $393;
         break L268;
        }
       }
       if ((label|0) == 2135) {
        $5175 = ___cxa_find_matching_catch()|0;
        $5176 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5176;$eh$lpad$body$indexZ2D = $5175;
        break L12;
       }
       $395 = (___cxa_allocate_exception(4)|0);
       HEAP32[$395>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($395|0),(20008|0),(386|0));
       $396 = __THREW__; __THREW__ = 0;
       $397 = $396&1;
       if ($397) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i167 = $386;
      }
     } while(0);
     $398 = (($$lcssa$i167) + 4|0);
     HEAP8[$398>>0] = 0;
     HEAP32[$$lcssa$i167>>2] = ((576 + 8|0));
     $399 = HEAP32[$agg$result>>2]|0;
     $400 = (($399) + 96|0);
     HEAP32[$400>>2] = $$lcssa$i167;
     $401 = (_malloc(8)|0);
     $402 = ($401|0)==(0|0);
     L278: do {
      if ($402) {
       while(1) {
        $403 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($403+0)|0);
        $404 = ($403|0)==(0);
        if ($404) {
         break;
        }
        $405 = $403;
        __THREW__ = 0;
        invoke_v($405|0);
        $406 = __THREW__; __THREW__ = 0;
        $407 = $406&1;
        if ($407) {
         label = 2134;
         break;
        }
        $408 = (_malloc(8)|0);
        $409 = ($408|0)==(0|0);
        if (!($409)) {
         $$lcssa$i174 = $408;
         break L278;
        }
       }
       if ((label|0) == 2134) {
        $5173 = ___cxa_find_matching_catch()|0;
        $5174 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5174;$eh$lpad$body$indexZ2D = $5173;
        break L12;
       }
       $410 = (___cxa_allocate_exception(4)|0);
       HEAP32[$410>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($410|0),(20008|0),(386|0));
       $411 = __THREW__; __THREW__ = 0;
       $412 = $411&1;
       if ($412) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i174 = $401;
      }
     } while(0);
     $413 = (($$lcssa$i174) + 4|0);
     HEAP8[$413>>0] = 0;
     HEAP32[$$lcssa$i174>>2] = ((576 + 8|0));
     $414 = HEAP32[$agg$result>>2]|0;
     $415 = (($414) + 100|0);
     HEAP32[$415>>2] = $$lcssa$i174;
     $416 = (_malloc(8)|0);
     $417 = ($416|0)==(0|0);
     L288: do {
      if ($417) {
       while(1) {
        $418 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($418+0)|0);
        $419 = ($418|0)==(0);
        if ($419) {
         break;
        }
        $420 = $418;
        __THREW__ = 0;
        invoke_v($420|0);
        $421 = __THREW__; __THREW__ = 0;
        $422 = $421&1;
        if ($422) {
         label = 2133;
         break;
        }
        $423 = (_malloc(8)|0);
        $424 = ($423|0)==(0|0);
        if (!($424)) {
         $$lcssa$i181 = $423;
         break L288;
        }
       }
       if ((label|0) == 2133) {
        $5171 = ___cxa_find_matching_catch()|0;
        $5172 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5172;$eh$lpad$body$indexZ2D = $5171;
        break L12;
       }
       $425 = (___cxa_allocate_exception(4)|0);
       HEAP32[$425>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($425|0),(20008|0),(386|0));
       $426 = __THREW__; __THREW__ = 0;
       $427 = $426&1;
       if ($427) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i181 = $416;
      }
     } while(0);
     $428 = (($$lcssa$i181) + 4|0);
     HEAP8[$428>>0] = 0;
     HEAP32[$$lcssa$i181>>2] = ((576 + 8|0));
     $429 = HEAP32[$agg$result>>2]|0;
     $430 = (($429) + 104|0);
     HEAP32[$430>>2] = $$lcssa$i181;
     $431 = (_malloc(8)|0);
     $432 = ($431|0)==(0|0);
     L298: do {
      if ($432) {
       while(1) {
        $433 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($433+0)|0);
        $434 = ($433|0)==(0);
        if ($434) {
         break;
        }
        $435 = $433;
        __THREW__ = 0;
        invoke_v($435|0);
        $436 = __THREW__; __THREW__ = 0;
        $437 = $436&1;
        if ($437) {
         label = 2132;
         break;
        }
        $438 = (_malloc(8)|0);
        $439 = ($438|0)==(0|0);
        if (!($439)) {
         $$lcssa$i188 = $438;
         break L298;
        }
       }
       if ((label|0) == 2132) {
        $5169 = ___cxa_find_matching_catch()|0;
        $5170 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5170;$eh$lpad$body$indexZ2D = $5169;
        break L12;
       }
       $440 = (___cxa_allocate_exception(4)|0);
       HEAP32[$440>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($440|0),(20008|0),(386|0));
       $441 = __THREW__; __THREW__ = 0;
       $442 = $441&1;
       if ($442) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i188 = $431;
      }
     } while(0);
     $443 = (($$lcssa$i188) + 4|0);
     HEAP8[$443>>0] = 0;
     HEAP32[$$lcssa$i188>>2] = ((576 + 8|0));
     $444 = HEAP32[$agg$result>>2]|0;
     $445 = (($444) + 108|0);
     HEAP32[$445>>2] = $$lcssa$i188;
     $446 = (_malloc(8)|0);
     $447 = ($446|0)==(0|0);
     L308: do {
      if ($447) {
       while(1) {
        $448 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($448+0)|0);
        $449 = ($448|0)==(0);
        if ($449) {
         break;
        }
        $450 = $448;
        __THREW__ = 0;
        invoke_v($450|0);
        $451 = __THREW__; __THREW__ = 0;
        $452 = $451&1;
        if ($452) {
         label = 2131;
         break;
        }
        $453 = (_malloc(8)|0);
        $454 = ($453|0)==(0|0);
        if (!($454)) {
         $$lcssa$i195 = $453;
         break L308;
        }
       }
       if ((label|0) == 2131) {
        $5167 = ___cxa_find_matching_catch()|0;
        $5168 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5168;$eh$lpad$body$indexZ2D = $5167;
        break L12;
       }
       $455 = (___cxa_allocate_exception(4)|0);
       HEAP32[$455>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($455|0),(20008|0),(386|0));
       $456 = __THREW__; __THREW__ = 0;
       $457 = $456&1;
       if ($457) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i195 = $446;
      }
     } while(0);
     $458 = (($$lcssa$i195) + 4|0);
     HEAP8[$458>>0] = 0;
     HEAP32[$$lcssa$i195>>2] = ((576 + 8|0));
     $459 = HEAP32[$agg$result>>2]|0;
     $460 = (($459) + 112|0);
     HEAP32[$460>>2] = $$lcssa$i195;
     $461 = (_malloc(8)|0);
     $462 = ($461|0)==(0|0);
     L318: do {
      if ($462) {
       while(1) {
        $463 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($463+0)|0);
        $464 = ($463|0)==(0);
        if ($464) {
         break;
        }
        $465 = $463;
        __THREW__ = 0;
        invoke_v($465|0);
        $466 = __THREW__; __THREW__ = 0;
        $467 = $466&1;
        if ($467) {
         label = 2130;
         break;
        }
        $468 = (_malloc(8)|0);
        $469 = ($468|0)==(0|0);
        if (!($469)) {
         $$lcssa$i202 = $468;
         break L318;
        }
       }
       if ((label|0) == 2130) {
        $5165 = ___cxa_find_matching_catch()|0;
        $5166 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5166;$eh$lpad$body$indexZ2D = $5165;
        break L12;
       }
       $470 = (___cxa_allocate_exception(4)|0);
       HEAP32[$470>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($470|0),(20008|0),(386|0));
       $471 = __THREW__; __THREW__ = 0;
       $472 = $471&1;
       if ($472) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i202 = $461;
      }
     } while(0);
     $473 = (($$lcssa$i202) + 4|0);
     HEAP8[$473>>0] = 0;
     HEAP32[$$lcssa$i202>>2] = ((520 + 8|0));
     $474 = HEAP32[$agg$result>>2]|0;
     $475 = (($474) + 116|0);
     HEAP32[$475>>2] = $$lcssa$i202;
     $476 = (_malloc(8)|0);
     $477 = ($476|0)==(0|0);
     L328: do {
      if ($477) {
       while(1) {
        $478 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($478+0)|0);
        $479 = ($478|0)==(0);
        if ($479) {
         break;
        }
        $480 = $478;
        __THREW__ = 0;
        invoke_v($480|0);
        $481 = __THREW__; __THREW__ = 0;
        $482 = $481&1;
        if ($482) {
         label = 2129;
         break;
        }
        $483 = (_malloc(8)|0);
        $484 = ($483|0)==(0|0);
        if (!($484)) {
         $$lcssa$i209 = $483;
         break L328;
        }
       }
       if ((label|0) == 2129) {
        $5163 = ___cxa_find_matching_catch()|0;
        $5164 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5164;$eh$lpad$body$indexZ2D = $5163;
        break L12;
       }
       $485 = (___cxa_allocate_exception(4)|0);
       HEAP32[$485>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($485|0),(20008|0),(386|0));
       $486 = __THREW__; __THREW__ = 0;
       $487 = $486&1;
       if ($487) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i209 = $476;
      }
     } while(0);
     $488 = (($$lcssa$i209) + 4|0);
     HEAP8[$488>>0] = 0;
     HEAP32[$$lcssa$i209>>2] = ((520 + 8|0));
     $489 = HEAP32[$agg$result>>2]|0;
     $490 = (($489) + 120|0);
     HEAP32[$490>>2] = $$lcssa$i209;
     $491 = (_malloc(8)|0);
     $492 = ($491|0)==(0|0);
     L338: do {
      if ($492) {
       while(1) {
        $493 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($493+0)|0);
        $494 = ($493|0)==(0);
        if ($494) {
         break;
        }
        $495 = $493;
        __THREW__ = 0;
        invoke_v($495|0);
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         label = 2128;
         break;
        }
        $498 = (_malloc(8)|0);
        $499 = ($498|0)==(0|0);
        if (!($499)) {
         $$lcssa$i216 = $498;
         break L338;
        }
       }
       if ((label|0) == 2128) {
        $5161 = ___cxa_find_matching_catch()|0;
        $5162 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5162;$eh$lpad$body$indexZ2D = $5161;
        break L12;
       }
       $500 = (___cxa_allocate_exception(4)|0);
       HEAP32[$500>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($500|0),(20008|0),(386|0));
       $501 = __THREW__; __THREW__ = 0;
       $502 = $501&1;
       if ($502) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i216 = $491;
      }
     } while(0);
     $503 = (($$lcssa$i216) + 4|0);
     HEAP8[$503>>0] = 0;
     HEAP32[$$lcssa$i216>>2] = ((472 + 8|0));
     $504 = HEAP32[$agg$result>>2]|0;
     $505 = (($504) + 124|0);
     HEAP32[$505>>2] = $$lcssa$i216;
     $506 = (_malloc(8)|0);
     $507 = ($506|0)==(0|0);
     L348: do {
      if ($507) {
       while(1) {
        $508 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($508+0)|0);
        $509 = ($508|0)==(0);
        if ($509) {
         break;
        }
        $510 = $508;
        __THREW__ = 0;
        invoke_v($510|0);
        $511 = __THREW__; __THREW__ = 0;
        $512 = $511&1;
        if ($512) {
         label = 2127;
         break;
        }
        $513 = (_malloc(8)|0);
        $514 = ($513|0)==(0|0);
        if (!($514)) {
         $$lcssa$i223 = $513;
         break L348;
        }
       }
       if ((label|0) == 2127) {
        $5159 = ___cxa_find_matching_catch()|0;
        $5160 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5160;$eh$lpad$body$indexZ2D = $5159;
        break L12;
       }
       $515 = (___cxa_allocate_exception(4)|0);
       HEAP32[$515>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($515|0),(20008|0),(386|0));
       $516 = __THREW__; __THREW__ = 0;
       $517 = $516&1;
       if ($517) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i223 = $506;
      }
     } while(0);
     $518 = (($$lcssa$i223) + 4|0);
     HEAP8[$518>>0] = 0;
     HEAP32[$$lcssa$i223>>2] = ((472 + 8|0));
     $519 = HEAP32[$agg$result>>2]|0;
     $520 = (($519) + 128|0);
     HEAP32[$520>>2] = $$lcssa$i223;
     $521 = (_malloc(8)|0);
     $522 = ($521|0)==(0|0);
     L358: do {
      if ($522) {
       while(1) {
        $523 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($523+0)|0);
        $524 = ($523|0)==(0);
        if ($524) {
         break;
        }
        $525 = $523;
        __THREW__ = 0;
        invoke_v($525|0);
        $526 = __THREW__; __THREW__ = 0;
        $527 = $526&1;
        if ($527) {
         label = 2126;
         break;
        }
        $528 = (_malloc(8)|0);
        $529 = ($528|0)==(0|0);
        if (!($529)) {
         $$lcssa$i230 = $528;
         break L358;
        }
       }
       if ((label|0) == 2126) {
        $5157 = ___cxa_find_matching_catch()|0;
        $5158 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5158;$eh$lpad$body$indexZ2D = $5157;
        break L12;
       }
       $530 = (___cxa_allocate_exception(4)|0);
       HEAP32[$530>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($530|0),(20008|0),(386|0));
       $531 = __THREW__; __THREW__ = 0;
       $532 = $531&1;
       if ($532) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i230 = $521;
      }
     } while(0);
     $533 = (($$lcssa$i230) + 4|0);
     HEAP8[$533>>0] = 0;
     HEAP32[$$lcssa$i230>>2] = ((472 + 8|0));
     $534 = HEAP32[$agg$result>>2]|0;
     $535 = (($534) + 132|0);
     HEAP32[$535>>2] = $$lcssa$i230;
     $536 = (_malloc(8)|0);
     $537 = ($536|0)==(0|0);
     L368: do {
      if ($537) {
       while(1) {
        $538 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($538+0)|0);
        $539 = ($538|0)==(0);
        if ($539) {
         break;
        }
        $540 = $538;
        __THREW__ = 0;
        invoke_v($540|0);
        $541 = __THREW__; __THREW__ = 0;
        $542 = $541&1;
        if ($542) {
         label = 2125;
         break;
        }
        $543 = (_malloc(8)|0);
        $544 = ($543|0)==(0|0);
        if (!($544)) {
         $$lcssa$i237 = $543;
         break L368;
        }
       }
       if ((label|0) == 2125) {
        $5155 = ___cxa_find_matching_catch()|0;
        $5156 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5156;$eh$lpad$body$indexZ2D = $5155;
        break L12;
       }
       $545 = (___cxa_allocate_exception(4)|0);
       HEAP32[$545>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($545|0),(20008|0),(386|0));
       $546 = __THREW__; __THREW__ = 0;
       $547 = $546&1;
       if ($547) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i237 = $536;
      }
     } while(0);
     $548 = (($$lcssa$i237) + 4|0);
     HEAP8[$548>>0] = 0;
     HEAP32[$$lcssa$i237>>2] = ((472 + 8|0));
     $549 = HEAP32[$agg$result>>2]|0;
     $550 = (($549) + 136|0);
     HEAP32[$550>>2] = $$lcssa$i237;
     $551 = (_malloc(8)|0);
     $552 = ($551|0)==(0|0);
     L378: do {
      if ($552) {
       while(1) {
        $553 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($553+0)|0);
        $554 = ($553|0)==(0);
        if ($554) {
         break;
        }
        $555 = $553;
        __THREW__ = 0;
        invoke_v($555|0);
        $556 = __THREW__; __THREW__ = 0;
        $557 = $556&1;
        if ($557) {
         label = 2124;
         break;
        }
        $558 = (_malloc(8)|0);
        $559 = ($558|0)==(0|0);
        if (!($559)) {
         $$lcssa$i244 = $558;
         break L378;
        }
       }
       if ((label|0) == 2124) {
        $5153 = ___cxa_find_matching_catch()|0;
        $5154 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5154;$eh$lpad$body$indexZ2D = $5153;
        break L12;
       }
       $560 = (___cxa_allocate_exception(4)|0);
       HEAP32[$560>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($560|0),(20008|0),(386|0));
       $561 = __THREW__; __THREW__ = 0;
       $562 = $561&1;
       if ($562) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i244 = $551;
      }
     } while(0);
     $563 = (($$lcssa$i244) + 4|0);
     HEAP8[$563>>0] = 0;
     HEAP32[$$lcssa$i244>>2] = ((472 + 8|0));
     $564 = HEAP32[$agg$result>>2]|0;
     $565 = (($564) + 140|0);
     HEAP32[$565>>2] = $$lcssa$i244;
     $566 = (_malloc(8)|0);
     $567 = ($566|0)==(0|0);
     L388: do {
      if ($567) {
       while(1) {
        $568 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($568+0)|0);
        $569 = ($568|0)==(0);
        if ($569) {
         break;
        }
        $570 = $568;
        __THREW__ = 0;
        invoke_v($570|0);
        $571 = __THREW__; __THREW__ = 0;
        $572 = $571&1;
        if ($572) {
         label = 2123;
         break;
        }
        $573 = (_malloc(8)|0);
        $574 = ($573|0)==(0|0);
        if (!($574)) {
         $$lcssa$i251 = $573;
         break L388;
        }
       }
       if ((label|0) == 2123) {
        $5151 = ___cxa_find_matching_catch()|0;
        $5152 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5152;$eh$lpad$body$indexZ2D = $5151;
        break L12;
       }
       $575 = (___cxa_allocate_exception(4)|0);
       HEAP32[$575>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($575|0),(20008|0),(386|0));
       $576 = __THREW__; __THREW__ = 0;
       $577 = $576&1;
       if ($577) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i251 = $566;
      }
     } while(0);
     $578 = (($$lcssa$i251) + 4|0);
     HEAP8[$578>>0] = 0;
     HEAP32[$$lcssa$i251>>2] = ((520 + 8|0));
     $579 = HEAP32[$agg$result>>2]|0;
     $580 = (($579) + 144|0);
     HEAP32[$580>>2] = $$lcssa$i251;
     $581 = (_malloc(8)|0);
     $582 = ($581|0)==(0|0);
     L398: do {
      if ($582) {
       while(1) {
        $583 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($583+0)|0);
        $584 = ($583|0)==(0);
        if ($584) {
         break;
        }
        $585 = $583;
        __THREW__ = 0;
        invoke_v($585|0);
        $586 = __THREW__; __THREW__ = 0;
        $587 = $586&1;
        if ($587) {
         label = 2122;
         break;
        }
        $588 = (_malloc(8)|0);
        $589 = ($588|0)==(0|0);
        if (!($589)) {
         $$lcssa$i258 = $588;
         break L398;
        }
       }
       if ((label|0) == 2122) {
        $5149 = ___cxa_find_matching_catch()|0;
        $5150 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5150;$eh$lpad$body$indexZ2D = $5149;
        break L12;
       }
       $590 = (___cxa_allocate_exception(4)|0);
       HEAP32[$590>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($590|0),(20008|0),(386|0));
       $591 = __THREW__; __THREW__ = 0;
       $592 = $591&1;
       if ($592) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i258 = $581;
      }
     } while(0);
     $593 = (($$lcssa$i258) + 4|0);
     HEAP8[$593>>0] = 0;
     HEAP32[$$lcssa$i258>>2] = ((520 + 8|0));
     $594 = HEAP32[$agg$result>>2]|0;
     $595 = (($594) + 148|0);
     HEAP32[$595>>2] = $$lcssa$i258;
     $596 = (_malloc(8)|0);
     $597 = ($596|0)==(0|0);
     L408: do {
      if ($597) {
       while(1) {
        $598 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($598+0)|0);
        $599 = ($598|0)==(0);
        if ($599) {
         break;
        }
        $600 = $598;
        __THREW__ = 0;
        invoke_v($600|0);
        $601 = __THREW__; __THREW__ = 0;
        $602 = $601&1;
        if ($602) {
         label = 2121;
         break;
        }
        $603 = (_malloc(8)|0);
        $604 = ($603|0)==(0|0);
        if (!($604)) {
         $$lcssa$i265 = $603;
         break L408;
        }
       }
       if ((label|0) == 2121) {
        $5147 = ___cxa_find_matching_catch()|0;
        $5148 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5148;$eh$lpad$body$indexZ2D = $5147;
        break L12;
       }
       $605 = (___cxa_allocate_exception(4)|0);
       HEAP32[$605>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($605|0),(20008|0),(386|0));
       $606 = __THREW__; __THREW__ = 0;
       $607 = $606&1;
       if ($607) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i265 = $596;
      }
     } while(0);
     $608 = (($$lcssa$i265) + 4|0);
     HEAP8[$608>>0] = 0;
     HEAP32[$$lcssa$i265>>2] = ((472 + 8|0));
     $609 = HEAP32[$agg$result>>2]|0;
     $610 = (($609) + 152|0);
     HEAP32[$610>>2] = $$lcssa$i265;
     $611 = (_malloc(8)|0);
     $612 = ($611|0)==(0|0);
     L418: do {
      if ($612) {
       while(1) {
        $613 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($613+0)|0);
        $614 = ($613|0)==(0);
        if ($614) {
         break;
        }
        $615 = $613;
        __THREW__ = 0;
        invoke_v($615|0);
        $616 = __THREW__; __THREW__ = 0;
        $617 = $616&1;
        if ($617) {
         label = 2120;
         break;
        }
        $618 = (_malloc(8)|0);
        $619 = ($618|0)==(0|0);
        if (!($619)) {
         $$lcssa$i272 = $618;
         break L418;
        }
       }
       if ((label|0) == 2120) {
        $5145 = ___cxa_find_matching_catch()|0;
        $5146 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5146;$eh$lpad$body$indexZ2D = $5145;
        break L12;
       }
       $620 = (___cxa_allocate_exception(4)|0);
       HEAP32[$620>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($620|0),(20008|0),(386|0));
       $621 = __THREW__; __THREW__ = 0;
       $622 = $621&1;
       if ($622) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i272 = $611;
      }
     } while(0);
     $623 = (($$lcssa$i272) + 4|0);
     HEAP8[$623>>0] = 0;
     HEAP32[$$lcssa$i272>>2] = ((472 + 8|0));
     $624 = HEAP32[$agg$result>>2]|0;
     $625 = (($624) + 156|0);
     HEAP32[$625>>2] = $$lcssa$i272;
     $626 = (_malloc(8)|0);
     $627 = ($626|0)==(0|0);
     L428: do {
      if ($627) {
       while(1) {
        $628 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($628+0)|0);
        $629 = ($628|0)==(0);
        if ($629) {
         break;
        }
        $630 = $628;
        __THREW__ = 0;
        invoke_v($630|0);
        $631 = __THREW__; __THREW__ = 0;
        $632 = $631&1;
        if ($632) {
         label = 2119;
         break;
        }
        $633 = (_malloc(8)|0);
        $634 = ($633|0)==(0|0);
        if (!($634)) {
         $$lcssa$i279 = $633;
         break L428;
        }
       }
       if ((label|0) == 2119) {
        $5143 = ___cxa_find_matching_catch()|0;
        $5144 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5144;$eh$lpad$body$indexZ2D = $5143;
        break L12;
       }
       $635 = (___cxa_allocate_exception(4)|0);
       HEAP32[$635>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($635|0),(20008|0),(386|0));
       $636 = __THREW__; __THREW__ = 0;
       $637 = $636&1;
       if ($637) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i279 = $626;
      }
     } while(0);
     $638 = (($$lcssa$i279) + 4|0);
     HEAP8[$638>>0] = 0;
     HEAP32[$$lcssa$i279>>2] = ((472 + 8|0));
     $639 = HEAP32[$agg$result>>2]|0;
     $640 = (($639) + 160|0);
     HEAP32[$640>>2] = $$lcssa$i279;
     $641 = (_malloc(8)|0);
     $642 = ($641|0)==(0|0);
     L438: do {
      if ($642) {
       while(1) {
        $643 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($643+0)|0);
        $644 = ($643|0)==(0);
        if ($644) {
         break;
        }
        $645 = $643;
        __THREW__ = 0;
        invoke_v($645|0);
        $646 = __THREW__; __THREW__ = 0;
        $647 = $646&1;
        if ($647) {
         label = 2118;
         break;
        }
        $648 = (_malloc(8)|0);
        $649 = ($648|0)==(0|0);
        if (!($649)) {
         $$lcssa$i286 = $648;
         break L438;
        }
       }
       if ((label|0) == 2118) {
        $5141 = ___cxa_find_matching_catch()|0;
        $5142 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5142;$eh$lpad$body$indexZ2D = $5141;
        break L12;
       }
       $650 = (___cxa_allocate_exception(4)|0);
       HEAP32[$650>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($650|0),(20008|0),(386|0));
       $651 = __THREW__; __THREW__ = 0;
       $652 = $651&1;
       if ($652) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i286 = $641;
      }
     } while(0);
     $653 = (($$lcssa$i286) + 4|0);
     HEAP8[$653>>0] = 0;
     HEAP32[$$lcssa$i286>>2] = ((472 + 8|0));
     $654 = HEAP32[$agg$result>>2]|0;
     $655 = (($654) + 164|0);
     HEAP32[$655>>2] = $$lcssa$i286;
     $656 = (_malloc(8)|0);
     $657 = ($656|0)==(0|0);
     L448: do {
      if ($657) {
       while(1) {
        $658 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($658+0)|0);
        $659 = ($658|0)==(0);
        if ($659) {
         break;
        }
        $660 = $658;
        __THREW__ = 0;
        invoke_v($660|0);
        $661 = __THREW__; __THREW__ = 0;
        $662 = $661&1;
        if ($662) {
         label = 2117;
         break;
        }
        $663 = (_malloc(8)|0);
        $664 = ($663|0)==(0|0);
        if (!($664)) {
         $$lcssa$i293 = $663;
         break L448;
        }
       }
       if ((label|0) == 2117) {
        $5139 = ___cxa_find_matching_catch()|0;
        $5140 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5140;$eh$lpad$body$indexZ2D = $5139;
        break L12;
       }
       $665 = (___cxa_allocate_exception(4)|0);
       HEAP32[$665>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($665|0),(20008|0),(386|0));
       $666 = __THREW__; __THREW__ = 0;
       $667 = $666&1;
       if ($667) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i293 = $656;
      }
     } while(0);
     $668 = (($$lcssa$i293) + 4|0);
     HEAP8[$668>>0] = 0;
     HEAP32[$$lcssa$i293>>2] = ((472 + 8|0));
     $669 = HEAP32[$agg$result>>2]|0;
     $670 = (($669) + 168|0);
     HEAP32[$670>>2] = $$lcssa$i293;
     $671 = (_malloc(8)|0);
     $672 = ($671|0)==(0|0);
     L458: do {
      if ($672) {
       while(1) {
        $673 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($673+0)|0);
        $674 = ($673|0)==(0);
        if ($674) {
         break;
        }
        $675 = $673;
        __THREW__ = 0;
        invoke_v($675|0);
        $676 = __THREW__; __THREW__ = 0;
        $677 = $676&1;
        if ($677) {
         label = 2116;
         break;
        }
        $678 = (_malloc(8)|0);
        $679 = ($678|0)==(0|0);
        if (!($679)) {
         $$lcssa$i300 = $678;
         break L458;
        }
       }
       if ((label|0) == 2116) {
        $5137 = ___cxa_find_matching_catch()|0;
        $5138 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5138;$eh$lpad$body$indexZ2D = $5137;
        break L12;
       }
       $680 = (___cxa_allocate_exception(4)|0);
       HEAP32[$680>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($680|0),(20008|0),(386|0));
       $681 = __THREW__; __THREW__ = 0;
       $682 = $681&1;
       if ($682) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i300 = $671;
      }
     } while(0);
     $683 = (($$lcssa$i300) + 4|0);
     HEAP8[$683>>0] = 0;
     HEAP32[$$lcssa$i300>>2] = ((520 + 8|0));
     $684 = HEAP32[$agg$result>>2]|0;
     $685 = (($684) + 172|0);
     HEAP32[$685>>2] = $$lcssa$i300;
     $686 = (_malloc(8)|0);
     $687 = ($686|0)==(0|0);
     L468: do {
      if ($687) {
       while(1) {
        $688 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($688+0)|0);
        $689 = ($688|0)==(0);
        if ($689) {
         break;
        }
        $690 = $688;
        __THREW__ = 0;
        invoke_v($690|0);
        $691 = __THREW__; __THREW__ = 0;
        $692 = $691&1;
        if ($692) {
         label = 2115;
         break;
        }
        $693 = (_malloc(8)|0);
        $694 = ($693|0)==(0|0);
        if (!($694)) {
         $$lcssa$i307 = $693;
         break L468;
        }
       }
       if ((label|0) == 2115) {
        $5135 = ___cxa_find_matching_catch()|0;
        $5136 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5136;$eh$lpad$body$indexZ2D = $5135;
        break L12;
       }
       $695 = (___cxa_allocate_exception(4)|0);
       HEAP32[$695>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($695|0),(20008|0),(386|0));
       $696 = __THREW__; __THREW__ = 0;
       $697 = $696&1;
       if ($697) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i307 = $686;
      }
     } while(0);
     $698 = (($$lcssa$i307) + 4|0);
     HEAP8[$698>>0] = 0;
     HEAP32[$$lcssa$i307>>2] = ((520 + 8|0));
     $699 = HEAP32[$agg$result>>2]|0;
     $700 = (($699) + 176|0);
     HEAP32[$700>>2] = $$lcssa$i307;
     $701 = (_malloc(8)|0);
     $702 = ($701|0)==(0|0);
     L478: do {
      if ($702) {
       while(1) {
        $703 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($703+0)|0);
        $704 = ($703|0)==(0);
        if ($704) {
         break;
        }
        $705 = $703;
        __THREW__ = 0;
        invoke_v($705|0);
        $706 = __THREW__; __THREW__ = 0;
        $707 = $706&1;
        if ($707) {
         label = 2114;
         break;
        }
        $708 = (_malloc(8)|0);
        $709 = ($708|0)==(0|0);
        if (!($709)) {
         $$lcssa$i314 = $708;
         break L478;
        }
       }
       if ((label|0) == 2114) {
        $5133 = ___cxa_find_matching_catch()|0;
        $5134 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5134;$eh$lpad$body$indexZ2D = $5133;
        break L12;
       }
       $710 = (___cxa_allocate_exception(4)|0);
       HEAP32[$710>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($710|0),(20008|0),(386|0));
       $711 = __THREW__; __THREW__ = 0;
       $712 = $711&1;
       if ($712) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i314 = $701;
      }
     } while(0);
     $713 = (($$lcssa$i314) + 4|0);
     HEAP8[$713>>0] = 0;
     HEAP32[$$lcssa$i314>>2] = ((624 + 8|0));
     $714 = HEAP32[$agg$result>>2]|0;
     $715 = (($714) + 180|0);
     HEAP32[$715>>2] = $$lcssa$i314;
     $716 = (_malloc(8)|0);
     $717 = ($716|0)==(0|0);
     L488: do {
      if ($717) {
       while(1) {
        $718 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($718+0)|0);
        $719 = ($718|0)==(0);
        if ($719) {
         break;
        }
        $720 = $718;
        __THREW__ = 0;
        invoke_v($720|0);
        $721 = __THREW__; __THREW__ = 0;
        $722 = $721&1;
        if ($722) {
         label = 2113;
         break;
        }
        $723 = (_malloc(8)|0);
        $724 = ($723|0)==(0|0);
        if (!($724)) {
         $$lcssa$i321 = $723;
         break L488;
        }
       }
       if ((label|0) == 2113) {
        $5131 = ___cxa_find_matching_catch()|0;
        $5132 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5132;$eh$lpad$body$indexZ2D = $5131;
        break L12;
       }
       $725 = (___cxa_allocate_exception(4)|0);
       HEAP32[$725>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($725|0),(20008|0),(386|0));
       $726 = __THREW__; __THREW__ = 0;
       $727 = $726&1;
       if ($727) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i321 = $716;
      }
     } while(0);
     $728 = (($$lcssa$i321) + 4|0);
     HEAP8[$728>>0] = 0;
     HEAP32[$$lcssa$i321>>2] = ((624 + 8|0));
     $729 = HEAP32[$agg$result>>2]|0;
     $730 = (($729) + 184|0);
     HEAP32[$730>>2] = $$lcssa$i321;
     $731 = (_malloc(8)|0);
     $732 = ($731|0)==(0|0);
     L498: do {
      if ($732) {
       while(1) {
        $733 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($733+0)|0);
        $734 = ($733|0)==(0);
        if ($734) {
         break;
        }
        $735 = $733;
        __THREW__ = 0;
        invoke_v($735|0);
        $736 = __THREW__; __THREW__ = 0;
        $737 = $736&1;
        if ($737) {
         label = 2112;
         break;
        }
        $738 = (_malloc(8)|0);
        $739 = ($738|0)==(0|0);
        if (!($739)) {
         $$lcssa$i328 = $738;
         break L498;
        }
       }
       if ((label|0) == 2112) {
        $5129 = ___cxa_find_matching_catch()|0;
        $5130 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5130;$eh$lpad$body$indexZ2D = $5129;
        break L12;
       }
       $740 = (___cxa_allocate_exception(4)|0);
       HEAP32[$740>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($740|0),(20008|0),(386|0));
       $741 = __THREW__; __THREW__ = 0;
       $742 = $741&1;
       if ($742) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i328 = $731;
      }
     } while(0);
     $743 = (($$lcssa$i328) + 4|0);
     HEAP8[$743>>0] = 0;
     HEAP32[$$lcssa$i328>>2] = ((624 + 8|0));
     $744 = HEAP32[$agg$result>>2]|0;
     $745 = (($744) + 188|0);
     HEAP32[$745>>2] = $$lcssa$i328;
     $746 = (_malloc(8)|0);
     $747 = ($746|0)==(0|0);
     L508: do {
      if ($747) {
       while(1) {
        $748 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($748+0)|0);
        $749 = ($748|0)==(0);
        if ($749) {
         break;
        }
        $750 = $748;
        __THREW__ = 0;
        invoke_v($750|0);
        $751 = __THREW__; __THREW__ = 0;
        $752 = $751&1;
        if ($752) {
         label = 2111;
         break;
        }
        $753 = (_malloc(8)|0);
        $754 = ($753|0)==(0|0);
        if (!($754)) {
         $$lcssa$i335 = $753;
         break L508;
        }
       }
       if ((label|0) == 2111) {
        $5127 = ___cxa_find_matching_catch()|0;
        $5128 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5128;$eh$lpad$body$indexZ2D = $5127;
        break L12;
       }
       $755 = (___cxa_allocate_exception(4)|0);
       HEAP32[$755>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($755|0),(20008|0),(386|0));
       $756 = __THREW__; __THREW__ = 0;
       $757 = $756&1;
       if ($757) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i335 = $746;
      }
     } while(0);
     $758 = (($$lcssa$i335) + 4|0);
     HEAP8[$758>>0] = 0;
     HEAP32[$$lcssa$i335>>2] = ((624 + 8|0));
     $759 = HEAP32[$agg$result>>2]|0;
     $760 = (($759) + 192|0);
     HEAP32[$760>>2] = $$lcssa$i335;
     $761 = (_malloc(8)|0);
     $762 = ($761|0)==(0|0);
     L518: do {
      if ($762) {
       while(1) {
        $763 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($763+0)|0);
        $764 = ($763|0)==(0);
        if ($764) {
         break;
        }
        $765 = $763;
        __THREW__ = 0;
        invoke_v($765|0);
        $766 = __THREW__; __THREW__ = 0;
        $767 = $766&1;
        if ($767) {
         label = 2110;
         break;
        }
        $768 = (_malloc(8)|0);
        $769 = ($768|0)==(0|0);
        if (!($769)) {
         $$lcssa$i342 = $768;
         break L518;
        }
       }
       if ((label|0) == 2110) {
        $5125 = ___cxa_find_matching_catch()|0;
        $5126 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5126;$eh$lpad$body$indexZ2D = $5125;
        break L12;
       }
       $770 = (___cxa_allocate_exception(4)|0);
       HEAP32[$770>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($770|0),(20008|0),(386|0));
       $771 = __THREW__; __THREW__ = 0;
       $772 = $771&1;
       if ($772) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i342 = $761;
      }
     } while(0);
     $773 = (($$lcssa$i342) + 4|0);
     HEAP8[$773>>0] = 0;
     HEAP32[$$lcssa$i342>>2] = ((624 + 8|0));
     $774 = HEAP32[$agg$result>>2]|0;
     $775 = (($774) + 196|0);
     HEAP32[$775>>2] = $$lcssa$i342;
     $776 = (_malloc(8)|0);
     $777 = ($776|0)==(0|0);
     L528: do {
      if ($777) {
       while(1) {
        $778 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($778+0)|0);
        $779 = ($778|0)==(0);
        if ($779) {
         break;
        }
        $780 = $778;
        __THREW__ = 0;
        invoke_v($780|0);
        $781 = __THREW__; __THREW__ = 0;
        $782 = $781&1;
        if ($782) {
         label = 2109;
         break;
        }
        $783 = (_malloc(8)|0);
        $784 = ($783|0)==(0|0);
        if (!($784)) {
         $$lcssa$i349 = $783;
         break L528;
        }
       }
       if ((label|0) == 2109) {
        $5123 = ___cxa_find_matching_catch()|0;
        $5124 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5124;$eh$lpad$body$indexZ2D = $5123;
        break L12;
       }
       $785 = (___cxa_allocate_exception(4)|0);
       HEAP32[$785>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($785|0),(20008|0),(386|0));
       $786 = __THREW__; __THREW__ = 0;
       $787 = $786&1;
       if ($787) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i349 = $776;
      }
     } while(0);
     $788 = (($$lcssa$i349) + 4|0);
     HEAP8[$788>>0] = 0;
     HEAP32[$$lcssa$i349>>2] = ((520 + 8|0));
     $789 = HEAP32[$agg$result>>2]|0;
     $790 = (($789) + 200|0);
     HEAP32[$790>>2] = $$lcssa$i349;
     $791 = (_malloc(8)|0);
     $792 = ($791|0)==(0|0);
     L538: do {
      if ($792) {
       while(1) {
        $793 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($793+0)|0);
        $794 = ($793|0)==(0);
        if ($794) {
         break;
        }
        $795 = $793;
        __THREW__ = 0;
        invoke_v($795|0);
        $796 = __THREW__; __THREW__ = 0;
        $797 = $796&1;
        if ($797) {
         label = 2108;
         break;
        }
        $798 = (_malloc(8)|0);
        $799 = ($798|0)==(0|0);
        if (!($799)) {
         $$lcssa$i356 = $798;
         break L538;
        }
       }
       if ((label|0) == 2108) {
        $5121 = ___cxa_find_matching_catch()|0;
        $5122 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5122;$eh$lpad$body$indexZ2D = $5121;
        break L12;
       }
       $800 = (___cxa_allocate_exception(4)|0);
       HEAP32[$800>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($800|0),(20008|0),(386|0));
       $801 = __THREW__; __THREW__ = 0;
       $802 = $801&1;
       if ($802) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i356 = $791;
      }
     } while(0);
     $803 = (($$lcssa$i356) + 4|0);
     HEAP8[$803>>0] = 0;
     HEAP32[$$lcssa$i356>>2] = ((520 + 8|0));
     $804 = HEAP32[$agg$result>>2]|0;
     $805 = (($804) + 204|0);
     HEAP32[$805>>2] = $$lcssa$i356;
     $806 = (_malloc(8)|0);
     $807 = ($806|0)==(0|0);
     L548: do {
      if ($807) {
       while(1) {
        $808 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($808+0)|0);
        $809 = ($808|0)==(0);
        if ($809) {
         break;
        }
        $810 = $808;
        __THREW__ = 0;
        invoke_v($810|0);
        $811 = __THREW__; __THREW__ = 0;
        $812 = $811&1;
        if ($812) {
         label = 2107;
         break;
        }
        $813 = (_malloc(8)|0);
        $814 = ($813|0)==(0|0);
        if (!($814)) {
         $$lcssa$i363 = $813;
         break L548;
        }
       }
       if ((label|0) == 2107) {
        $5119 = ___cxa_find_matching_catch()|0;
        $5120 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5120;$eh$lpad$body$indexZ2D = $5119;
        break L12;
       }
       $815 = (___cxa_allocate_exception(4)|0);
       HEAP32[$815>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($815|0),(20008|0),(386|0));
       $816 = __THREW__; __THREW__ = 0;
       $817 = $816&1;
       if ($817) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i363 = $806;
      }
     } while(0);
     $818 = (($$lcssa$i363) + 4|0);
     HEAP32[$$lcssa$i363>>2] = ((320 + 8|0));
     HEAP8[$818>>0] = 1;
     $819 = HEAP32[$agg$result>>2]|0;
     $820 = (($819) + 208|0);
     HEAP32[$820>>2] = $$lcssa$i363;
     $821 = (_malloc(8)|0);
     $822 = ($821|0)==(0|0);
     L558: do {
      if ($822) {
       while(1) {
        $823 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($823+0)|0);
        $824 = ($823|0)==(0);
        if ($824) {
         break;
        }
        $825 = $823;
        __THREW__ = 0;
        invoke_v($825|0);
        $826 = __THREW__; __THREW__ = 0;
        $827 = $826&1;
        if ($827) {
         label = 2106;
         break;
        }
        $828 = (_malloc(8)|0);
        $829 = ($828|0)==(0|0);
        if (!($829)) {
         $$lcssa$i370 = $828;
         break L558;
        }
       }
       if ((label|0) == 2106) {
        $5117 = ___cxa_find_matching_catch()|0;
        $5118 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5118;$eh$lpad$body$indexZ2D = $5117;
        break L12;
       }
       $830 = (___cxa_allocate_exception(4)|0);
       HEAP32[$830>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($830|0),(20008|0),(386|0));
       $831 = __THREW__; __THREW__ = 0;
       $832 = $831&1;
       if ($832) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i370 = $821;
      }
     } while(0);
     $833 = (($$lcssa$i370) + 4|0);
     HEAP32[$$lcssa$i370>>2] = ((320 + 8|0));
     HEAP8[$833>>0] = 1;
     $834 = HEAP32[$agg$result>>2]|0;
     $835 = (($834) + 212|0);
     HEAP32[$835>>2] = $$lcssa$i370;
     $836 = (_malloc(8)|0);
     $837 = ($836|0)==(0|0);
     L568: do {
      if ($837) {
       while(1) {
        $838 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($838+0)|0);
        $839 = ($838|0)==(0);
        if ($839) {
         break;
        }
        $840 = $838;
        __THREW__ = 0;
        invoke_v($840|0);
        $841 = __THREW__; __THREW__ = 0;
        $842 = $841&1;
        if ($842) {
         label = 2105;
         break;
        }
        $843 = (_malloc(8)|0);
        $844 = ($843|0)==(0|0);
        if (!($844)) {
         $$lcssa$i377 = $843;
         break L568;
        }
       }
       if ((label|0) == 2105) {
        $5115 = ___cxa_find_matching_catch()|0;
        $5116 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5116;$eh$lpad$body$indexZ2D = $5115;
        break L12;
       }
       $845 = (___cxa_allocate_exception(4)|0);
       HEAP32[$845>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($845|0),(20008|0),(386|0));
       $846 = __THREW__; __THREW__ = 0;
       $847 = $846&1;
       if ($847) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i377 = $836;
      }
     } while(0);
     $848 = (($$lcssa$i377) + 4|0);
     HEAP32[$$lcssa$i377>>2] = ((320 + 8|0));
     HEAP8[$848>>0] = 1;
     $849 = HEAP32[$agg$result>>2]|0;
     $850 = (($849) + 216|0);
     HEAP32[$850>>2] = $$lcssa$i377;
     $851 = (_malloc(8)|0);
     $852 = ($851|0)==(0|0);
     L578: do {
      if ($852) {
       while(1) {
        $853 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($853+0)|0);
        $854 = ($853|0)==(0);
        if ($854) {
         break;
        }
        $855 = $853;
        __THREW__ = 0;
        invoke_v($855|0);
        $856 = __THREW__; __THREW__ = 0;
        $857 = $856&1;
        if ($857) {
         label = 2104;
         break;
        }
        $858 = (_malloc(8)|0);
        $859 = ($858|0)==(0|0);
        if (!($859)) {
         $$lcssa$i384 = $858;
         break L578;
        }
       }
       if ((label|0) == 2104) {
        $5113 = ___cxa_find_matching_catch()|0;
        $5114 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5114;$eh$lpad$body$indexZ2D = $5113;
        break L12;
       }
       $860 = (___cxa_allocate_exception(4)|0);
       HEAP32[$860>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($860|0),(20008|0),(386|0));
       $861 = __THREW__; __THREW__ = 0;
       $862 = $861&1;
       if ($862) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i384 = $851;
      }
     } while(0);
     $863 = (($$lcssa$i384) + 4|0);
     HEAP32[$$lcssa$i384>>2] = ((320 + 8|0));
     HEAP8[$863>>0] = 1;
     $864 = HEAP32[$agg$result>>2]|0;
     $865 = (($864) + 220|0);
     HEAP32[$865>>2] = $$lcssa$i384;
     $866 = (_malloc(8)|0);
     $867 = ($866|0)==(0|0);
     L588: do {
      if ($867) {
       while(1) {
        $868 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($868+0)|0);
        $869 = ($868|0)==(0);
        if ($869) {
         break;
        }
        $870 = $868;
        __THREW__ = 0;
        invoke_v($870|0);
        $871 = __THREW__; __THREW__ = 0;
        $872 = $871&1;
        if ($872) {
         label = 2103;
         break;
        }
        $873 = (_malloc(8)|0);
        $874 = ($873|0)==(0|0);
        if (!($874)) {
         $$lcssa$i391 = $873;
         break L588;
        }
       }
       if ((label|0) == 2103) {
        $5111 = ___cxa_find_matching_catch()|0;
        $5112 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5112;$eh$lpad$body$indexZ2D = $5111;
        break L12;
       }
       $875 = (___cxa_allocate_exception(4)|0);
       HEAP32[$875>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($875|0),(20008|0),(386|0));
       $876 = __THREW__; __THREW__ = 0;
       $877 = $876&1;
       if ($877) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i391 = $866;
      }
     } while(0);
     $878 = (($$lcssa$i391) + 4|0);
     HEAP32[$$lcssa$i391>>2] = ((320 + 8|0));
     HEAP8[$878>>0] = 1;
     $879 = HEAP32[$agg$result>>2]|0;
     $880 = (($879) + 224|0);
     HEAP32[$880>>2] = $$lcssa$i391;
     $881 = (_malloc(8)|0);
     $882 = ($881|0)==(0|0);
     L598: do {
      if ($882) {
       while(1) {
        $883 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($883+0)|0);
        $884 = ($883|0)==(0);
        if ($884) {
         break;
        }
        $885 = $883;
        __THREW__ = 0;
        invoke_v($885|0);
        $886 = __THREW__; __THREW__ = 0;
        $887 = $886&1;
        if ($887) {
         label = 2102;
         break;
        }
        $888 = (_malloc(8)|0);
        $889 = ($888|0)==(0|0);
        if (!($889)) {
         $$lcssa$i398 = $888;
         break L598;
        }
       }
       if ((label|0) == 2102) {
        $5109 = ___cxa_find_matching_catch()|0;
        $5110 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5110;$eh$lpad$body$indexZ2D = $5109;
        break L12;
       }
       $890 = (___cxa_allocate_exception(4)|0);
       HEAP32[$890>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($890|0),(20008|0),(386|0));
       $891 = __THREW__; __THREW__ = 0;
       $892 = $891&1;
       if ($892) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i398 = $881;
      }
     } while(0);
     $893 = (($$lcssa$i398) + 4|0);
     HEAP8[$893>>0] = 0;
     HEAP32[$$lcssa$i398>>2] = ((520 + 8|0));
     $894 = HEAP32[$agg$result>>2]|0;
     $895 = (($894) + 228|0);
     HEAP32[$895>>2] = $$lcssa$i398;
     $896 = (_malloc(8)|0);
     $897 = ($896|0)==(0|0);
     L608: do {
      if ($897) {
       while(1) {
        $898 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($898+0)|0);
        $899 = ($898|0)==(0);
        if ($899) {
         break;
        }
        $900 = $898;
        __THREW__ = 0;
        invoke_v($900|0);
        $901 = __THREW__; __THREW__ = 0;
        $902 = $901&1;
        if ($902) {
         label = 2101;
         break;
        }
        $903 = (_malloc(8)|0);
        $904 = ($903|0)==(0|0);
        if (!($904)) {
         $$lcssa$i405 = $903;
         break L608;
        }
       }
       if ((label|0) == 2101) {
        $5107 = ___cxa_find_matching_catch()|0;
        $5108 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5108;$eh$lpad$body$indexZ2D = $5107;
        break L12;
       }
       $905 = (___cxa_allocate_exception(4)|0);
       HEAP32[$905>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($905|0),(20008|0),(386|0));
       $906 = __THREW__; __THREW__ = 0;
       $907 = $906&1;
       if ($907) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i405 = $896;
      }
     } while(0);
     $908 = (($$lcssa$i405) + 4|0);
     HEAP8[$908>>0] = 0;
     HEAP32[$$lcssa$i405>>2] = ((520 + 8|0));
     $909 = HEAP32[$agg$result>>2]|0;
     $910 = (($909) + 232|0);
     HEAP32[$910>>2] = $$lcssa$i405;
     $911 = (_malloc(8)|0);
     $912 = ($911|0)==(0|0);
     L618: do {
      if ($912) {
       while(1) {
        $913 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($913+0)|0);
        $914 = ($913|0)==(0);
        if ($914) {
         break;
        }
        $915 = $913;
        __THREW__ = 0;
        invoke_v($915|0);
        $916 = __THREW__; __THREW__ = 0;
        $917 = $916&1;
        if ($917) {
         label = 2100;
         break;
        }
        $918 = (_malloc(8)|0);
        $919 = ($918|0)==(0|0);
        if (!($919)) {
         $$lcssa$i412 = $918;
         break L618;
        }
       }
       if ((label|0) == 2100) {
        $5105 = ___cxa_find_matching_catch()|0;
        $5106 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5106;$eh$lpad$body$indexZ2D = $5105;
        break L12;
       }
       $920 = (___cxa_allocate_exception(4)|0);
       HEAP32[$920>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($920|0),(20008|0),(386|0));
       $921 = __THREW__; __THREW__ = 0;
       $922 = $921&1;
       if ($922) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i412 = $911;
      }
     } while(0);
     $923 = (($$lcssa$i412) + 4|0);
     HEAP8[$923>>0] = 0;
     HEAP32[$$lcssa$i412>>2] = ((680 + 8|0));
     $924 = HEAP32[$agg$result>>2]|0;
     $925 = (($924) + 236|0);
     HEAP32[$925>>2] = $$lcssa$i412;
     $926 = (_malloc(8)|0);
     $927 = ($926|0)==(0|0);
     L628: do {
      if ($927) {
       while(1) {
        $928 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($928+0)|0);
        $929 = ($928|0)==(0);
        if ($929) {
         break;
        }
        $930 = $928;
        __THREW__ = 0;
        invoke_v($930|0);
        $931 = __THREW__; __THREW__ = 0;
        $932 = $931&1;
        if ($932) {
         label = 2099;
         break;
        }
        $933 = (_malloc(8)|0);
        $934 = ($933|0)==(0|0);
        if (!($934)) {
         $$lcssa$i419 = $933;
         break L628;
        }
       }
       if ((label|0) == 2099) {
        $5103 = ___cxa_find_matching_catch()|0;
        $5104 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5104;$eh$lpad$body$indexZ2D = $5103;
        break L12;
       }
       $935 = (___cxa_allocate_exception(4)|0);
       HEAP32[$935>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($935|0),(20008|0),(386|0));
       $936 = __THREW__; __THREW__ = 0;
       $937 = $936&1;
       if ($937) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i419 = $926;
      }
     } while(0);
     $938 = (($$lcssa$i419) + 4|0);
     HEAP8[$938>>0] = 0;
     HEAP32[$$lcssa$i419>>2] = ((680 + 8|0));
     $939 = HEAP32[$agg$result>>2]|0;
     $940 = (($939) + 240|0);
     HEAP32[$940>>2] = $$lcssa$i419;
     $941 = (_malloc(8)|0);
     $942 = ($941|0)==(0|0);
     L638: do {
      if ($942) {
       while(1) {
        $943 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($943+0)|0);
        $944 = ($943|0)==(0);
        if ($944) {
         break;
        }
        $945 = $943;
        __THREW__ = 0;
        invoke_v($945|0);
        $946 = __THREW__; __THREW__ = 0;
        $947 = $946&1;
        if ($947) {
         label = 2098;
         break;
        }
        $948 = (_malloc(8)|0);
        $949 = ($948|0)==(0|0);
        if (!($949)) {
         $$lcssa$i426 = $948;
         break L638;
        }
       }
       if ((label|0) == 2098) {
        $5101 = ___cxa_find_matching_catch()|0;
        $5102 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5102;$eh$lpad$body$indexZ2D = $5101;
        break L12;
       }
       $950 = (___cxa_allocate_exception(4)|0);
       HEAP32[$950>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($950|0),(20008|0),(386|0));
       $951 = __THREW__; __THREW__ = 0;
       $952 = $951&1;
       if ($952) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i426 = $941;
      }
     } while(0);
     $953 = (($$lcssa$i426) + 4|0);
     HEAP8[$953>>0] = 0;
     HEAP32[$$lcssa$i426>>2] = ((680 + 8|0));
     $954 = HEAP32[$agg$result>>2]|0;
     $955 = (($954) + 244|0);
     HEAP32[$955>>2] = $$lcssa$i426;
     $956 = (_malloc(8)|0);
     $957 = ($956|0)==(0|0);
     L648: do {
      if ($957) {
       while(1) {
        $958 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($958+0)|0);
        $959 = ($958|0)==(0);
        if ($959) {
         break;
        }
        $960 = $958;
        __THREW__ = 0;
        invoke_v($960|0);
        $961 = __THREW__; __THREW__ = 0;
        $962 = $961&1;
        if ($962) {
         label = 2097;
         break;
        }
        $963 = (_malloc(8)|0);
        $964 = ($963|0)==(0|0);
        if (!($964)) {
         $$lcssa$i433 = $963;
         break L648;
        }
       }
       if ((label|0) == 2097) {
        $5099 = ___cxa_find_matching_catch()|0;
        $5100 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5100;$eh$lpad$body$indexZ2D = $5099;
        break L12;
       }
       $965 = (___cxa_allocate_exception(4)|0);
       HEAP32[$965>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($965|0),(20008|0),(386|0));
       $966 = __THREW__; __THREW__ = 0;
       $967 = $966&1;
       if ($967) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i433 = $956;
      }
     } while(0);
     $968 = (($$lcssa$i433) + 4|0);
     HEAP8[$968>>0] = 0;
     HEAP32[$$lcssa$i433>>2] = ((680 + 8|0));
     $969 = HEAP32[$agg$result>>2]|0;
     $970 = (($969) + 248|0);
     HEAP32[$970>>2] = $$lcssa$i433;
     $971 = (_malloc(8)|0);
     $972 = ($971|0)==(0|0);
     L658: do {
      if ($972) {
       while(1) {
        $973 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($973+0)|0);
        $974 = ($973|0)==(0);
        if ($974) {
         break;
        }
        $975 = $973;
        __THREW__ = 0;
        invoke_v($975|0);
        $976 = __THREW__; __THREW__ = 0;
        $977 = $976&1;
        if ($977) {
         label = 2096;
         break;
        }
        $978 = (_malloc(8)|0);
        $979 = ($978|0)==(0|0);
        if (!($979)) {
         $$lcssa$i440 = $978;
         break L658;
        }
       }
       if ((label|0) == 2096) {
        $5097 = ___cxa_find_matching_catch()|0;
        $5098 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5098;$eh$lpad$body$indexZ2D = $5097;
        break L12;
       }
       $980 = (___cxa_allocate_exception(4)|0);
       HEAP32[$980>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($980|0),(20008|0),(386|0));
       $981 = __THREW__; __THREW__ = 0;
       $982 = $981&1;
       if ($982) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i440 = $971;
      }
     } while(0);
     $983 = (($$lcssa$i440) + 4|0);
     HEAP8[$983>>0] = 0;
     HEAP32[$$lcssa$i440>>2] = ((680 + 8|0));
     $984 = HEAP32[$agg$result>>2]|0;
     $985 = (($984) + 252|0);
     HEAP32[$985>>2] = $$lcssa$i440;
     $986 = (_malloc(8)|0);
     $987 = ($986|0)==(0|0);
     L668: do {
      if ($987) {
       while(1) {
        $988 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($988+0)|0);
        $989 = ($988|0)==(0);
        if ($989) {
         break;
        }
        $990 = $988;
        __THREW__ = 0;
        invoke_v($990|0);
        $991 = __THREW__; __THREW__ = 0;
        $992 = $991&1;
        if ($992) {
         label = 2095;
         break;
        }
        $993 = (_malloc(8)|0);
        $994 = ($993|0)==(0|0);
        if (!($994)) {
         $$lcssa$i447 = $993;
         break L668;
        }
       }
       if ((label|0) == 2095) {
        $5095 = ___cxa_find_matching_catch()|0;
        $5096 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5096;$eh$lpad$body$indexZ2D = $5095;
        break L12;
       }
       $995 = (___cxa_allocate_exception(4)|0);
       HEAP32[$995>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($995|0),(20008|0),(386|0));
       $996 = __THREW__; __THREW__ = 0;
       $997 = $996&1;
       if ($997) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i447 = $986;
      }
     } while(0);
     $998 = (($$lcssa$i447) + 4|0);
     HEAP8[$998>>0] = 0;
     HEAP32[$$lcssa$i447>>2] = ((520 + 8|0));
     $999 = HEAP32[$agg$result>>2]|0;
     $1000 = (($999) + 256|0);
     HEAP32[$1000>>2] = $$lcssa$i447;
     $1001 = (_malloc(8)|0);
     $1002 = ($1001|0)==(0|0);
     L678: do {
      if ($1002) {
       while(1) {
        $1003 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1003+0)|0);
        $1004 = ($1003|0)==(0);
        if ($1004) {
         break;
        }
        $1005 = $1003;
        __THREW__ = 0;
        invoke_v($1005|0);
        $1006 = __THREW__; __THREW__ = 0;
        $1007 = $1006&1;
        if ($1007) {
         label = 2094;
         break;
        }
        $1008 = (_malloc(8)|0);
        $1009 = ($1008|0)==(0|0);
        if (!($1009)) {
         $$lcssa$i454 = $1008;
         break L678;
        }
       }
       if ((label|0) == 2094) {
        $5093 = ___cxa_find_matching_catch()|0;
        $5094 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5094;$eh$lpad$body$indexZ2D = $5093;
        break L12;
       }
       $1010 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1010>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1010|0),(20008|0),(386|0));
       $1011 = __THREW__; __THREW__ = 0;
       $1012 = $1011&1;
       if ($1012) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i454 = $1001;
      }
     } while(0);
     $1013 = (($$lcssa$i454) + 4|0);
     HEAP8[$1013>>0] = 0;
     HEAP32[$$lcssa$i454>>2] = ((520 + 8|0));
     $1014 = HEAP32[$agg$result>>2]|0;
     $1015 = (($1014) + 260|0);
     HEAP32[$1015>>2] = $$lcssa$i454;
     $1016 = (_malloc(8)|0);
     $1017 = ($1016|0)==(0|0);
     L688: do {
      if ($1017) {
       while(1) {
        $1018 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1018+0)|0);
        $1019 = ($1018|0)==(0);
        if ($1019) {
         break;
        }
        $1020 = $1018;
        __THREW__ = 0;
        invoke_v($1020|0);
        $1021 = __THREW__; __THREW__ = 0;
        $1022 = $1021&1;
        if ($1022) {
         label = 2093;
         break;
        }
        $1023 = (_malloc(8)|0);
        $1024 = ($1023|0)==(0|0);
        if (!($1024)) {
         $$lcssa$i461 = $1023;
         break L688;
        }
       }
       if ((label|0) == 2093) {
        $5091 = ___cxa_find_matching_catch()|0;
        $5092 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5092;$eh$lpad$body$indexZ2D = $5091;
        break L12;
       }
       $1025 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1025>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1025|0),(20008|0),(386|0));
       $1026 = __THREW__; __THREW__ = 0;
       $1027 = $1026&1;
       if ($1027) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i461 = $1016;
      }
     } while(0);
     $1028 = (($$lcssa$i461) + 4|0);
     HEAP8[$1028>>0] = 0;
     HEAP32[$$lcssa$i461>>2] = ((736 + 8|0));
     $1029 = HEAP32[$agg$result>>2]|0;
     $1030 = (($1029) + 264|0);
     HEAP32[$1030>>2] = $$lcssa$i461;
     $1031 = (_malloc(8)|0);
     $1032 = ($1031|0)==(0|0);
     L698: do {
      if ($1032) {
       while(1) {
        $1033 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1033+0)|0);
        $1034 = ($1033|0)==(0);
        if ($1034) {
         break;
        }
        $1035 = $1033;
        __THREW__ = 0;
        invoke_v($1035|0);
        $1036 = __THREW__; __THREW__ = 0;
        $1037 = $1036&1;
        if ($1037) {
         label = 2092;
         break;
        }
        $1038 = (_malloc(8)|0);
        $1039 = ($1038|0)==(0|0);
        if (!($1039)) {
         $$lcssa$i468 = $1038;
         break L698;
        }
       }
       if ((label|0) == 2092) {
        $5089 = ___cxa_find_matching_catch()|0;
        $5090 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5090;$eh$lpad$body$indexZ2D = $5089;
        break L12;
       }
       $1040 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1040>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1040|0),(20008|0),(386|0));
       $1041 = __THREW__; __THREW__ = 0;
       $1042 = $1041&1;
       if ($1042) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i468 = $1031;
      }
     } while(0);
     $1043 = (($$lcssa$i468) + 4|0);
     HEAP8[$1043>>0] = 0;
     HEAP32[$$lcssa$i468>>2] = ((736 + 8|0));
     $1044 = HEAP32[$agg$result>>2]|0;
     $1045 = (($1044) + 268|0);
     HEAP32[$1045>>2] = $$lcssa$i468;
     $1046 = (_malloc(8)|0);
     $1047 = ($1046|0)==(0|0);
     L708: do {
      if ($1047) {
       while(1) {
        $1048 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1048+0)|0);
        $1049 = ($1048|0)==(0);
        if ($1049) {
         break;
        }
        $1050 = $1048;
        __THREW__ = 0;
        invoke_v($1050|0);
        $1051 = __THREW__; __THREW__ = 0;
        $1052 = $1051&1;
        if ($1052) {
         label = 2091;
         break;
        }
        $1053 = (_malloc(8)|0);
        $1054 = ($1053|0)==(0|0);
        if (!($1054)) {
         $$lcssa$i475 = $1053;
         break L708;
        }
       }
       if ((label|0) == 2091) {
        $5087 = ___cxa_find_matching_catch()|0;
        $5088 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5088;$eh$lpad$body$indexZ2D = $5087;
        break L12;
       }
       $1055 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1055>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1055|0),(20008|0),(386|0));
       $1056 = __THREW__; __THREW__ = 0;
       $1057 = $1056&1;
       if ($1057) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i475 = $1046;
      }
     } while(0);
     $1058 = (($$lcssa$i475) + 4|0);
     HEAP8[$1058>>0] = 0;
     HEAP32[$$lcssa$i475>>2] = ((736 + 8|0));
     $1059 = HEAP32[$agg$result>>2]|0;
     $1060 = (($1059) + 272|0);
     HEAP32[$1060>>2] = $$lcssa$i475;
     $1061 = (_malloc(8)|0);
     $1062 = ($1061|0)==(0|0);
     L718: do {
      if ($1062) {
       while(1) {
        $1063 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1063+0)|0);
        $1064 = ($1063|0)==(0);
        if ($1064) {
         break;
        }
        $1065 = $1063;
        __THREW__ = 0;
        invoke_v($1065|0);
        $1066 = __THREW__; __THREW__ = 0;
        $1067 = $1066&1;
        if ($1067) {
         label = 2090;
         break;
        }
        $1068 = (_malloc(8)|0);
        $1069 = ($1068|0)==(0|0);
        if (!($1069)) {
         $$lcssa$i482 = $1068;
         break L718;
        }
       }
       if ((label|0) == 2090) {
        $5085 = ___cxa_find_matching_catch()|0;
        $5086 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5086;$eh$lpad$body$indexZ2D = $5085;
        break L12;
       }
       $1070 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1070>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1070|0),(20008|0),(386|0));
       $1071 = __THREW__; __THREW__ = 0;
       $1072 = $1071&1;
       if ($1072) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i482 = $1061;
      }
     } while(0);
     $1073 = (($$lcssa$i482) + 4|0);
     HEAP8[$1073>>0] = 0;
     HEAP32[$$lcssa$i482>>2] = ((736 + 8|0));
     $1074 = HEAP32[$agg$result>>2]|0;
     $1075 = (($1074) + 276|0);
     HEAP32[$1075>>2] = $$lcssa$i482;
     $1076 = (_malloc(8)|0);
     $1077 = ($1076|0)==(0|0);
     L728: do {
      if ($1077) {
       while(1) {
        $1078 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1078+0)|0);
        $1079 = ($1078|0)==(0);
        if ($1079) {
         break;
        }
        $1080 = $1078;
        __THREW__ = 0;
        invoke_v($1080|0);
        $1081 = __THREW__; __THREW__ = 0;
        $1082 = $1081&1;
        if ($1082) {
         label = 2089;
         break;
        }
        $1083 = (_malloc(8)|0);
        $1084 = ($1083|0)==(0|0);
        if (!($1084)) {
         $$lcssa$i489 = $1083;
         break L728;
        }
       }
       if ((label|0) == 2089) {
        $5083 = ___cxa_find_matching_catch()|0;
        $5084 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5084;$eh$lpad$body$indexZ2D = $5083;
        break L12;
       }
       $1085 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1085>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1085|0),(20008|0),(386|0));
       $1086 = __THREW__; __THREW__ = 0;
       $1087 = $1086&1;
       if ($1087) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i489 = $1076;
      }
     } while(0);
     $1088 = (($$lcssa$i489) + 4|0);
     HEAP8[$1088>>0] = 0;
     HEAP32[$$lcssa$i489>>2] = ((736 + 8|0));
     $1089 = HEAP32[$agg$result>>2]|0;
     $1090 = (($1089) + 280|0);
     HEAP32[$1090>>2] = $$lcssa$i489;
     $1091 = (_malloc(8)|0);
     $1092 = ($1091|0)==(0|0);
     L738: do {
      if ($1092) {
       while(1) {
        $1093 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1093+0)|0);
        $1094 = ($1093|0)==(0);
        if ($1094) {
         break;
        }
        $1095 = $1093;
        __THREW__ = 0;
        invoke_v($1095|0);
        $1096 = __THREW__; __THREW__ = 0;
        $1097 = $1096&1;
        if ($1097) {
         label = 2088;
         break;
        }
        $1098 = (_malloc(8)|0);
        $1099 = ($1098|0)==(0|0);
        if (!($1099)) {
         $$lcssa$i496 = $1098;
         break L738;
        }
       }
       if ((label|0) == 2088) {
        $5081 = ___cxa_find_matching_catch()|0;
        $5082 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5082;$eh$lpad$body$indexZ2D = $5081;
        break L12;
       }
       $1100 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1100>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1100|0),(20008|0),(386|0));
       $1101 = __THREW__; __THREW__ = 0;
       $1102 = $1101&1;
       if ($1102) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i496 = $1091;
      }
     } while(0);
     $1103 = (($$lcssa$i496) + 4|0);
     HEAP8[$1103>>0] = 0;
     HEAP32[$$lcssa$i496>>2] = ((520 + 8|0));
     $1104 = HEAP32[$agg$result>>2]|0;
     $1105 = (($1104) + 284|0);
     HEAP32[$1105>>2] = $$lcssa$i496;
     $1106 = (_malloc(8)|0);
     $1107 = ($1106|0)==(0|0);
     L748: do {
      if ($1107) {
       while(1) {
        $1108 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1108+0)|0);
        $1109 = ($1108|0)==(0);
        if ($1109) {
         break;
        }
        $1110 = $1108;
        __THREW__ = 0;
        invoke_v($1110|0);
        $1111 = __THREW__; __THREW__ = 0;
        $1112 = $1111&1;
        if ($1112) {
         label = 2087;
         break;
        }
        $1113 = (_malloc(8)|0);
        $1114 = ($1113|0)==(0|0);
        if (!($1114)) {
         $$lcssa$i503 = $1113;
         break L748;
        }
       }
       if ((label|0) == 2087) {
        $5079 = ___cxa_find_matching_catch()|0;
        $5080 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5080;$eh$lpad$body$indexZ2D = $5079;
        break L12;
       }
       $1115 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1115>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1115|0),(20008|0),(386|0));
       $1116 = __THREW__; __THREW__ = 0;
       $1117 = $1116&1;
       if ($1117) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i503 = $1106;
      }
     } while(0);
     $1118 = (($$lcssa$i503) + 4|0);
     HEAP8[$1118>>0] = 0;
     HEAP32[$$lcssa$i503>>2] = ((520 + 8|0));
     $1119 = HEAP32[$agg$result>>2]|0;
     $1120 = (($1119) + 288|0);
     HEAP32[$1120>>2] = $$lcssa$i503;
     $1121 = (_malloc(8)|0);
     $1122 = ($1121|0)==(0|0);
     L758: do {
      if ($1122) {
       while(1) {
        $1123 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1123+0)|0);
        $1124 = ($1123|0)==(0);
        if ($1124) {
         break;
        }
        $1125 = $1123;
        __THREW__ = 0;
        invoke_v($1125|0);
        $1126 = __THREW__; __THREW__ = 0;
        $1127 = $1126&1;
        if ($1127) {
         label = 2086;
         break;
        }
        $1128 = (_malloc(8)|0);
        $1129 = ($1128|0)==(0|0);
        if (!($1129)) {
         $$lcssa$i510 = $1128;
         break L758;
        }
       }
       if ((label|0) == 2086) {
        $5077 = ___cxa_find_matching_catch()|0;
        $5078 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5078;$eh$lpad$body$indexZ2D = $5077;
        break L12;
       }
       $1130 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1130>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1130|0),(20008|0),(386|0));
       $1131 = __THREW__; __THREW__ = 0;
       $1132 = $1131&1;
       if ($1132) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i510 = $1121;
      }
     } while(0);
     $1133 = (($$lcssa$i510) + 4|0);
     HEAP8[$1133>>0] = 0;
     HEAP32[$$lcssa$i510>>2] = ((736 + 8|0));
     $1134 = HEAP32[$agg$result>>2]|0;
     $1135 = (($1134) + 292|0);
     HEAP32[$1135>>2] = $$lcssa$i510;
     $1136 = (_malloc(8)|0);
     $1137 = ($1136|0)==(0|0);
     L768: do {
      if ($1137) {
       while(1) {
        $1138 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1138+0)|0);
        $1139 = ($1138|0)==(0);
        if ($1139) {
         break;
        }
        $1140 = $1138;
        __THREW__ = 0;
        invoke_v($1140|0);
        $1141 = __THREW__; __THREW__ = 0;
        $1142 = $1141&1;
        if ($1142) {
         label = 2085;
         break;
        }
        $1143 = (_malloc(8)|0);
        $1144 = ($1143|0)==(0|0);
        if (!($1144)) {
         $$lcssa$i517 = $1143;
         break L768;
        }
       }
       if ((label|0) == 2085) {
        $5075 = ___cxa_find_matching_catch()|0;
        $5076 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5076;$eh$lpad$body$indexZ2D = $5075;
        break L12;
       }
       $1145 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1145>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1145|0),(20008|0),(386|0));
       $1146 = __THREW__; __THREW__ = 0;
       $1147 = $1146&1;
       if ($1147) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i517 = $1136;
      }
     } while(0);
     $1148 = (($$lcssa$i517) + 4|0);
     HEAP8[$1148>>0] = 0;
     HEAP32[$$lcssa$i517>>2] = ((736 + 8|0));
     $1149 = HEAP32[$agg$result>>2]|0;
     $1150 = (($1149) + 296|0);
     HEAP32[$1150>>2] = $$lcssa$i517;
     $1151 = (_malloc(8)|0);
     $1152 = ($1151|0)==(0|0);
     L778: do {
      if ($1152) {
       while(1) {
        $1153 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1153+0)|0);
        $1154 = ($1153|0)==(0);
        if ($1154) {
         break;
        }
        $1155 = $1153;
        __THREW__ = 0;
        invoke_v($1155|0);
        $1156 = __THREW__; __THREW__ = 0;
        $1157 = $1156&1;
        if ($1157) {
         label = 2084;
         break;
        }
        $1158 = (_malloc(8)|0);
        $1159 = ($1158|0)==(0|0);
        if (!($1159)) {
         $$lcssa$i524 = $1158;
         break L778;
        }
       }
       if ((label|0) == 2084) {
        $5073 = ___cxa_find_matching_catch()|0;
        $5074 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5074;$eh$lpad$body$indexZ2D = $5073;
        break L12;
       }
       $1160 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1160>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1160|0),(20008|0),(386|0));
       $1161 = __THREW__; __THREW__ = 0;
       $1162 = $1161&1;
       if ($1162) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i524 = $1151;
      }
     } while(0);
     $1163 = (($$lcssa$i524) + 4|0);
     HEAP8[$1163>>0] = 0;
     HEAP32[$$lcssa$i524>>2] = ((736 + 8|0));
     $1164 = HEAP32[$agg$result>>2]|0;
     $1165 = (($1164) + 300|0);
     HEAP32[$1165>>2] = $$lcssa$i524;
     $1166 = (_malloc(8)|0);
     $1167 = ($1166|0)==(0|0);
     L788: do {
      if ($1167) {
       while(1) {
        $1168 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1168+0)|0);
        $1169 = ($1168|0)==(0);
        if ($1169) {
         break;
        }
        $1170 = $1168;
        __THREW__ = 0;
        invoke_v($1170|0);
        $1171 = __THREW__; __THREW__ = 0;
        $1172 = $1171&1;
        if ($1172) {
         label = 2083;
         break;
        }
        $1173 = (_malloc(8)|0);
        $1174 = ($1173|0)==(0|0);
        if (!($1174)) {
         $$lcssa$i531 = $1173;
         break L788;
        }
       }
       if ((label|0) == 2083) {
        $5071 = ___cxa_find_matching_catch()|0;
        $5072 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5072;$eh$lpad$body$indexZ2D = $5071;
        break L12;
       }
       $1175 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1175>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1175|0),(20008|0),(386|0));
       $1176 = __THREW__; __THREW__ = 0;
       $1177 = $1176&1;
       if ($1177) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i531 = $1166;
      }
     } while(0);
     $1178 = (($$lcssa$i531) + 4|0);
     HEAP8[$1178>>0] = 0;
     HEAP32[$$lcssa$i531>>2] = ((736 + 8|0));
     $1179 = HEAP32[$agg$result>>2]|0;
     $1180 = (($1179) + 304|0);
     HEAP32[$1180>>2] = $$lcssa$i531;
     $1181 = (_malloc(8)|0);
     $1182 = ($1181|0)==(0|0);
     L798: do {
      if ($1182) {
       while(1) {
        $1183 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1183+0)|0);
        $1184 = ($1183|0)==(0);
        if ($1184) {
         break;
        }
        $1185 = $1183;
        __THREW__ = 0;
        invoke_v($1185|0);
        $1186 = __THREW__; __THREW__ = 0;
        $1187 = $1186&1;
        if ($1187) {
         label = 2082;
         break;
        }
        $1188 = (_malloc(8)|0);
        $1189 = ($1188|0)==(0|0);
        if (!($1189)) {
         $$lcssa$i538 = $1188;
         break L798;
        }
       }
       if ((label|0) == 2082) {
        $5069 = ___cxa_find_matching_catch()|0;
        $5070 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5070;$eh$lpad$body$indexZ2D = $5069;
        break L12;
       }
       $1190 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1190>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1190|0),(20008|0),(386|0));
       $1191 = __THREW__; __THREW__ = 0;
       $1192 = $1191&1;
       if ($1192) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i538 = $1181;
      }
     } while(0);
     $1193 = (($$lcssa$i538) + 4|0);
     HEAP8[$1193>>0] = 0;
     HEAP32[$$lcssa$i538>>2] = ((520 + 8|0));
     $1194 = HEAP32[$agg$result>>2]|0;
     $1195 = (($1194) + 308|0);
     HEAP32[$1195>>2] = $$lcssa$i538;
     $1196 = (_malloc(8)|0);
     $1197 = ($1196|0)==(0|0);
     L808: do {
      if ($1197) {
       while(1) {
        $1198 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1198+0)|0);
        $1199 = ($1198|0)==(0);
        if ($1199) {
         break;
        }
        $1200 = $1198;
        __THREW__ = 0;
        invoke_v($1200|0);
        $1201 = __THREW__; __THREW__ = 0;
        $1202 = $1201&1;
        if ($1202) {
         label = 2081;
         break;
        }
        $1203 = (_malloc(8)|0);
        $1204 = ($1203|0)==(0|0);
        if (!($1204)) {
         $$lcssa$i545 = $1203;
         break L808;
        }
       }
       if ((label|0) == 2081) {
        $5067 = ___cxa_find_matching_catch()|0;
        $5068 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5068;$eh$lpad$body$indexZ2D = $5067;
        break L12;
       }
       $1205 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1205>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1205|0),(20008|0),(386|0));
       $1206 = __THREW__; __THREW__ = 0;
       $1207 = $1206&1;
       if ($1207) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i545 = $1196;
      }
     } while(0);
     $1208 = (($$lcssa$i545) + 4|0);
     HEAP8[$1208>>0] = 0;
     HEAP32[$$lcssa$i545>>2] = ((520 + 8|0));
     $1209 = HEAP32[$agg$result>>2]|0;
     $1210 = (($1209) + 312|0);
     HEAP32[$1210>>2] = $$lcssa$i545;
     $1211 = (_malloc(8)|0);
     $1212 = ($1211|0)==(0|0);
     L818: do {
      if ($1212) {
       while(1) {
        $1213 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1213+0)|0);
        $1214 = ($1213|0)==(0);
        if ($1214) {
         break;
        }
        $1215 = $1213;
        __THREW__ = 0;
        invoke_v($1215|0);
        $1216 = __THREW__; __THREW__ = 0;
        $1217 = $1216&1;
        if ($1217) {
         label = 2080;
         break;
        }
        $1218 = (_malloc(8)|0);
        $1219 = ($1218|0)==(0|0);
        if (!($1219)) {
         $$lcssa$i552 = $1218;
         break L818;
        }
       }
       if ((label|0) == 2080) {
        $5065 = ___cxa_find_matching_catch()|0;
        $5066 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5066;$eh$lpad$body$indexZ2D = $5065;
        break L12;
       }
       $1220 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1220>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1220|0),(20008|0),(386|0));
       $1221 = __THREW__; __THREW__ = 0;
       $1222 = $1221&1;
       if ($1222) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i552 = $1211;
      }
     } while(0);
     $1223 = (($$lcssa$i552) + 4|0);
     HEAP8[$1223>>0] = 0;
     HEAP32[$$lcssa$i552>>2] = ((520 + 8|0));
     $1224 = HEAP32[$agg$result>>2]|0;
     $1225 = (($1224) + 316|0);
     HEAP32[$1225>>2] = $$lcssa$i552;
     $1226 = (_malloc(8)|0);
     $1227 = ($1226|0)==(0|0);
     L828: do {
      if ($1227) {
       while(1) {
        $1228 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1228+0)|0);
        $1229 = ($1228|0)==(0);
        if ($1229) {
         break;
        }
        $1230 = $1228;
        __THREW__ = 0;
        invoke_v($1230|0);
        $1231 = __THREW__; __THREW__ = 0;
        $1232 = $1231&1;
        if ($1232) {
         label = 2079;
         break;
        }
        $1233 = (_malloc(8)|0);
        $1234 = ($1233|0)==(0|0);
        if (!($1234)) {
         $$lcssa$i559 = $1233;
         break L828;
        }
       }
       if ((label|0) == 2079) {
        $5063 = ___cxa_find_matching_catch()|0;
        $5064 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5064;$eh$lpad$body$indexZ2D = $5063;
        break L12;
       }
       $1235 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1235>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1235|0),(20008|0),(386|0));
       $1236 = __THREW__; __THREW__ = 0;
       $1237 = $1236&1;
       if ($1237) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i559 = $1226;
      }
     } while(0);
     $1238 = (($$lcssa$i559) + 4|0);
     HEAP8[$1238>>0] = 0;
     HEAP32[$$lcssa$i559>>2] = ((736 + 8|0));
     $1239 = HEAP32[$agg$result>>2]|0;
     $1240 = (($1239) + 320|0);
     HEAP32[$1240>>2] = $$lcssa$i559;
     $1241 = (_malloc(8)|0);
     $1242 = ($1241|0)==(0|0);
     L838: do {
      if ($1242) {
       while(1) {
        $1243 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1243+0)|0);
        $1244 = ($1243|0)==(0);
        if ($1244) {
         break;
        }
        $1245 = $1243;
        __THREW__ = 0;
        invoke_v($1245|0);
        $1246 = __THREW__; __THREW__ = 0;
        $1247 = $1246&1;
        if ($1247) {
         label = 2078;
         break;
        }
        $1248 = (_malloc(8)|0);
        $1249 = ($1248|0)==(0|0);
        if (!($1249)) {
         $$lcssa$i566 = $1248;
         break L838;
        }
       }
       if ((label|0) == 2078) {
        $5061 = ___cxa_find_matching_catch()|0;
        $5062 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5062;$eh$lpad$body$indexZ2D = $5061;
        break L12;
       }
       $1250 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1250>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1250|0),(20008|0),(386|0));
       $1251 = __THREW__; __THREW__ = 0;
       $1252 = $1251&1;
       if ($1252) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i566 = $1241;
      }
     } while(0);
     $1253 = (($$lcssa$i566) + 4|0);
     HEAP8[$1253>>0] = 0;
     HEAP32[$$lcssa$i566>>2] = ((736 + 8|0));
     $1254 = HEAP32[$agg$result>>2]|0;
     $1255 = (($1254) + 324|0);
     HEAP32[$1255>>2] = $$lcssa$i566;
     $1256 = (_malloc(8)|0);
     $1257 = ($1256|0)==(0|0);
     L848: do {
      if ($1257) {
       while(1) {
        $1258 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1258+0)|0);
        $1259 = ($1258|0)==(0);
        if ($1259) {
         break;
        }
        $1260 = $1258;
        __THREW__ = 0;
        invoke_v($1260|0);
        $1261 = __THREW__; __THREW__ = 0;
        $1262 = $1261&1;
        if ($1262) {
         label = 2077;
         break;
        }
        $1263 = (_malloc(8)|0);
        $1264 = ($1263|0)==(0|0);
        if (!($1264)) {
         $$lcssa$i573 = $1263;
         break L848;
        }
       }
       if ((label|0) == 2077) {
        $5059 = ___cxa_find_matching_catch()|0;
        $5060 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5060;$eh$lpad$body$indexZ2D = $5059;
        break L12;
       }
       $1265 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1265>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1265|0),(20008|0),(386|0));
       $1266 = __THREW__; __THREW__ = 0;
       $1267 = $1266&1;
       if ($1267) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i573 = $1256;
      }
     } while(0);
     $1268 = (($$lcssa$i573) + 4|0);
     HEAP8[$1268>>0] = 0;
     HEAP32[$$lcssa$i573>>2] = ((736 + 8|0));
     $1269 = HEAP32[$agg$result>>2]|0;
     $1270 = (($1269) + 328|0);
     HEAP32[$1270>>2] = $$lcssa$i573;
     $1271 = (_malloc(8)|0);
     $1272 = ($1271|0)==(0|0);
     L858: do {
      if ($1272) {
       while(1) {
        $1273 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1273+0)|0);
        $1274 = ($1273|0)==(0);
        if ($1274) {
         break;
        }
        $1275 = $1273;
        __THREW__ = 0;
        invoke_v($1275|0);
        $1276 = __THREW__; __THREW__ = 0;
        $1277 = $1276&1;
        if ($1277) {
         label = 2076;
         break;
        }
        $1278 = (_malloc(8)|0);
        $1279 = ($1278|0)==(0|0);
        if (!($1279)) {
         $$lcssa$i580 = $1278;
         break L858;
        }
       }
       if ((label|0) == 2076) {
        $5057 = ___cxa_find_matching_catch()|0;
        $5058 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5058;$eh$lpad$body$indexZ2D = $5057;
        break L12;
       }
       $1280 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1280>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1280|0),(20008|0),(386|0));
       $1281 = __THREW__; __THREW__ = 0;
       $1282 = $1281&1;
       if ($1282) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i580 = $1271;
      }
     } while(0);
     $1283 = (($$lcssa$i580) + 4|0);
     HEAP32[$$lcssa$i580>>2] = ((384 + 8|0));
     HEAP8[$1283>>0] = 1;
     $1284 = HEAP32[$agg$result>>2]|0;
     $1285 = (($1284) + 332|0);
     HEAP32[$1285>>2] = $$lcssa$i580;
     $1286 = (_malloc(8)|0);
     $1287 = ($1286|0)==(0|0);
     L868: do {
      if ($1287) {
       while(1) {
        $1288 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1288+0)|0);
        $1289 = ($1288|0)==(0);
        if ($1289) {
         break;
        }
        $1290 = $1288;
        __THREW__ = 0;
        invoke_v($1290|0);
        $1291 = __THREW__; __THREW__ = 0;
        $1292 = $1291&1;
        if ($1292) {
         label = 2075;
         break;
        }
        $1293 = (_malloc(8)|0);
        $1294 = ($1293|0)==(0|0);
        if (!($1294)) {
         $$lcssa$i587 = $1293;
         break L868;
        }
       }
       if ((label|0) == 2075) {
        $5055 = ___cxa_find_matching_catch()|0;
        $5056 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5056;$eh$lpad$body$indexZ2D = $5055;
        break L12;
       }
       $1295 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1295>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1295|0),(20008|0),(386|0));
       $1296 = __THREW__; __THREW__ = 0;
       $1297 = $1296&1;
       if ($1297) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i587 = $1286;
      }
     } while(0);
     $1298 = (($$lcssa$i587) + 4|0);
     HEAP32[$$lcssa$i587>>2] = ((384 + 8|0));
     HEAP8[$1298>>0] = 1;
     $1299 = HEAP32[$agg$result>>2]|0;
     $1300 = (($1299) + 336|0);
     HEAP32[$1300>>2] = $$lcssa$i587;
     $1301 = (_malloc(8)|0);
     $1302 = ($1301|0)==(0|0);
     L878: do {
      if ($1302) {
       while(1) {
        $1303 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1303+0)|0);
        $1304 = ($1303|0)==(0);
        if ($1304) {
         break;
        }
        $1305 = $1303;
        __THREW__ = 0;
        invoke_v($1305|0);
        $1306 = __THREW__; __THREW__ = 0;
        $1307 = $1306&1;
        if ($1307) {
         label = 2074;
         break;
        }
        $1308 = (_malloc(8)|0);
        $1309 = ($1308|0)==(0|0);
        if (!($1309)) {
         $$lcssa$i594 = $1308;
         break L878;
        }
       }
       if ((label|0) == 2074) {
        $5053 = ___cxa_find_matching_catch()|0;
        $5054 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5054;$eh$lpad$body$indexZ2D = $5053;
        break L12;
       }
       $1310 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1310>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1310|0),(20008|0),(386|0));
       $1311 = __THREW__; __THREW__ = 0;
       $1312 = $1311&1;
       if ($1312) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i594 = $1301;
      }
     } while(0);
     $1313 = (($$lcssa$i594) + 4|0);
     HEAP8[$1313>>0] = 0;
     HEAP32[$$lcssa$i594>>2] = ((520 + 8|0));
     $1314 = HEAP32[$agg$result>>2]|0;
     $1315 = (($1314) + 340|0);
     HEAP32[$1315>>2] = $$lcssa$i594;
     $1316 = (_malloc(8)|0);
     $1317 = ($1316|0)==(0|0);
     L888: do {
      if ($1317) {
       while(1) {
        $1318 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1318+0)|0);
        $1319 = ($1318|0)==(0);
        if ($1319) {
         break;
        }
        $1320 = $1318;
        __THREW__ = 0;
        invoke_v($1320|0);
        $1321 = __THREW__; __THREW__ = 0;
        $1322 = $1321&1;
        if ($1322) {
         label = 2073;
         break;
        }
        $1323 = (_malloc(8)|0);
        $1324 = ($1323|0)==(0|0);
        if (!($1324)) {
         $$lcssa$i601 = $1323;
         break L888;
        }
       }
       if ((label|0) == 2073) {
        $5051 = ___cxa_find_matching_catch()|0;
        $5052 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5052;$eh$lpad$body$indexZ2D = $5051;
        break L12;
       }
       $1325 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1325>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1325|0),(20008|0),(386|0));
       $1326 = __THREW__; __THREW__ = 0;
       $1327 = $1326&1;
       if ($1327) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i601 = $1316;
      }
     } while(0);
     $1328 = (($$lcssa$i601) + 4|0);
     HEAP8[$1328>>0] = 0;
     HEAP32[$$lcssa$i601>>2] = ((520 + 8|0));
     $1329 = HEAP32[$agg$result>>2]|0;
     $1330 = (($1329) + 344|0);
     HEAP32[$1330>>2] = $$lcssa$i601;
     $1331 = (_malloc(8)|0);
     $1332 = ($1331|0)==(0|0);
     L898: do {
      if ($1332) {
       while(1) {
        $1333 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1333+0)|0);
        $1334 = ($1333|0)==(0);
        if ($1334) {
         break;
        }
        $1335 = $1333;
        __THREW__ = 0;
        invoke_v($1335|0);
        $1336 = __THREW__; __THREW__ = 0;
        $1337 = $1336&1;
        if ($1337) {
         label = 2072;
         break;
        }
        $1338 = (_malloc(8)|0);
        $1339 = ($1338|0)==(0|0);
        if (!($1339)) {
         $$lcssa$i608 = $1338;
         break L898;
        }
       }
       if ((label|0) == 2072) {
        $5049 = ___cxa_find_matching_catch()|0;
        $5050 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5050;$eh$lpad$body$indexZ2D = $5049;
        break L12;
       }
       $1340 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1340>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1340|0),(20008|0),(386|0));
       $1341 = __THREW__; __THREW__ = 0;
       $1342 = $1341&1;
       if ($1342) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i608 = $1331;
      }
     } while(0);
     $1343 = (($$lcssa$i608) + 4|0);
     HEAP8[$1343>>0] = 0;
     HEAP32[$$lcssa$i608>>2] = ((472 + 8|0));
     $1344 = HEAP32[$agg$result>>2]|0;
     $1345 = (($1344) + 348|0);
     HEAP32[$1345>>2] = $$lcssa$i608;
     $1346 = (_malloc(8)|0);
     $1347 = ($1346|0)==(0|0);
     L908: do {
      if ($1347) {
       while(1) {
        $1348 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1348+0)|0);
        $1349 = ($1348|0)==(0);
        if ($1349) {
         break;
        }
        $1350 = $1348;
        __THREW__ = 0;
        invoke_v($1350|0);
        $1351 = __THREW__; __THREW__ = 0;
        $1352 = $1351&1;
        if ($1352) {
         label = 2071;
         break;
        }
        $1353 = (_malloc(8)|0);
        $1354 = ($1353|0)==(0|0);
        if (!($1354)) {
         $$lcssa$i615 = $1353;
         break L908;
        }
       }
       if ((label|0) == 2071) {
        $5047 = ___cxa_find_matching_catch()|0;
        $5048 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5048;$eh$lpad$body$indexZ2D = $5047;
        break L12;
       }
       $1355 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1355>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1355|0),(20008|0),(386|0));
       $1356 = __THREW__; __THREW__ = 0;
       $1357 = $1356&1;
       if ($1357) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i615 = $1346;
      }
     } while(0);
     $1358 = (($$lcssa$i615) + 4|0);
     HEAP8[$1358>>0] = 0;
     HEAP32[$$lcssa$i615>>2] = ((472 + 8|0));
     $1359 = HEAP32[$agg$result>>2]|0;
     $1360 = (($1359) + 352|0);
     HEAP32[$1360>>2] = $$lcssa$i615;
     $1361 = (_malloc(8)|0);
     $1362 = ($1361|0)==(0|0);
     L918: do {
      if ($1362) {
       while(1) {
        $1363 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1363+0)|0);
        $1364 = ($1363|0)==(0);
        if ($1364) {
         break;
        }
        $1365 = $1363;
        __THREW__ = 0;
        invoke_v($1365|0);
        $1366 = __THREW__; __THREW__ = 0;
        $1367 = $1366&1;
        if ($1367) {
         label = 2070;
         break;
        }
        $1368 = (_malloc(8)|0);
        $1369 = ($1368|0)==(0|0);
        if (!($1369)) {
         $$lcssa$i622 = $1368;
         break L918;
        }
       }
       if ((label|0) == 2070) {
        $5045 = ___cxa_find_matching_catch()|0;
        $5046 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5046;$eh$lpad$body$indexZ2D = $5045;
        break L12;
       }
       $1370 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1370>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1370|0),(20008|0),(386|0));
       $1371 = __THREW__; __THREW__ = 0;
       $1372 = $1371&1;
       if ($1372) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i622 = $1361;
      }
     } while(0);
     $1373 = (($$lcssa$i622) + 4|0);
     HEAP8[$1373>>0] = 0;
     HEAP32[$$lcssa$i622>>2] = ((472 + 8|0));
     $1374 = HEAP32[$agg$result>>2]|0;
     $1375 = (($1374) + 356|0);
     HEAP32[$1375>>2] = $$lcssa$i622;
     $1376 = (_malloc(8)|0);
     $1377 = ($1376|0)==(0|0);
     L928: do {
      if ($1377) {
       while(1) {
        $1378 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1378+0)|0);
        $1379 = ($1378|0)==(0);
        if ($1379) {
         break;
        }
        $1380 = $1378;
        __THREW__ = 0;
        invoke_v($1380|0);
        $1381 = __THREW__; __THREW__ = 0;
        $1382 = $1381&1;
        if ($1382) {
         label = 2069;
         break;
        }
        $1383 = (_malloc(8)|0);
        $1384 = ($1383|0)==(0|0);
        if (!($1384)) {
         $$lcssa$i629 = $1383;
         break L928;
        }
       }
       if ((label|0) == 2069) {
        $5043 = ___cxa_find_matching_catch()|0;
        $5044 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5044;$eh$lpad$body$indexZ2D = $5043;
        break L12;
       }
       $1385 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1385>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1385|0),(20008|0),(386|0));
       $1386 = __THREW__; __THREW__ = 0;
       $1387 = $1386&1;
       if ($1387) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i629 = $1376;
      }
     } while(0);
     $1388 = (($$lcssa$i629) + 4|0);
     HEAP8[$1388>>0] = 0;
     HEAP32[$$lcssa$i629>>2] = ((472 + 8|0));
     $1389 = HEAP32[$agg$result>>2]|0;
     $1390 = (($1389) + 360|0);
     HEAP32[$1390>>2] = $$lcssa$i629;
     $1391 = (_malloc(8)|0);
     $1392 = ($1391|0)==(0|0);
     L938: do {
      if ($1392) {
       while(1) {
        $1393 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1393+0)|0);
        $1394 = ($1393|0)==(0);
        if ($1394) {
         break;
        }
        $1395 = $1393;
        __THREW__ = 0;
        invoke_v($1395|0);
        $1396 = __THREW__; __THREW__ = 0;
        $1397 = $1396&1;
        if ($1397) {
         label = 2068;
         break;
        }
        $1398 = (_malloc(8)|0);
        $1399 = ($1398|0)==(0|0);
        if (!($1399)) {
         $$lcssa$i636 = $1398;
         break L938;
        }
       }
       if ((label|0) == 2068) {
        $5041 = ___cxa_find_matching_catch()|0;
        $5042 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5042;$eh$lpad$body$indexZ2D = $5041;
        break L12;
       }
       $1400 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1400>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1400|0),(20008|0),(386|0));
       $1401 = __THREW__; __THREW__ = 0;
       $1402 = $1401&1;
       if ($1402) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i636 = $1391;
      }
     } while(0);
     $1403 = (($$lcssa$i636) + 4|0);
     HEAP8[$1403>>0] = 0;
     HEAP32[$$lcssa$i636>>2] = ((472 + 8|0));
     $1404 = HEAP32[$agg$result>>2]|0;
     $1405 = (($1404) + 364|0);
     HEAP32[$1405>>2] = $$lcssa$i636;
     $1406 = (_malloc(8)|0);
     $1407 = ($1406|0)==(0|0);
     L948: do {
      if ($1407) {
       while(1) {
        $1408 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1408+0)|0);
        $1409 = ($1408|0)==(0);
        if ($1409) {
         break;
        }
        $1410 = $1408;
        __THREW__ = 0;
        invoke_v($1410|0);
        $1411 = __THREW__; __THREW__ = 0;
        $1412 = $1411&1;
        if ($1412) {
         label = 2067;
         break;
        }
        $1413 = (_malloc(8)|0);
        $1414 = ($1413|0)==(0|0);
        if (!($1414)) {
         $$lcssa$i643 = $1413;
         break L948;
        }
       }
       if ((label|0) == 2067) {
        $5039 = ___cxa_find_matching_catch()|0;
        $5040 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5040;$eh$lpad$body$indexZ2D = $5039;
        break L12;
       }
       $1415 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1415>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1415|0),(20008|0),(386|0));
       $1416 = __THREW__; __THREW__ = 0;
       $1417 = $1416&1;
       if ($1417) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i643 = $1406;
      }
     } while(0);
     $1418 = (($$lcssa$i643) + 4|0);
     HEAP8[$1418>>0] = 0;
     HEAP32[$$lcssa$i643>>2] = ((520 + 8|0));
     $1419 = HEAP32[$agg$result>>2]|0;
     $1420 = (($1419) + 368|0);
     HEAP32[$1420>>2] = $$lcssa$i643;
     $1421 = (_malloc(8)|0);
     $1422 = ($1421|0)==(0|0);
     L958: do {
      if ($1422) {
       while(1) {
        $1423 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1423+0)|0);
        $1424 = ($1423|0)==(0);
        if ($1424) {
         break;
        }
        $1425 = $1423;
        __THREW__ = 0;
        invoke_v($1425|0);
        $1426 = __THREW__; __THREW__ = 0;
        $1427 = $1426&1;
        if ($1427) {
         label = 2066;
         break;
        }
        $1428 = (_malloc(8)|0);
        $1429 = ($1428|0)==(0|0);
        if (!($1429)) {
         $$lcssa$i650 = $1428;
         break L958;
        }
       }
       if ((label|0) == 2066) {
        $5037 = ___cxa_find_matching_catch()|0;
        $5038 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5038;$eh$lpad$body$indexZ2D = $5037;
        break L12;
       }
       $1430 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1430>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1430|0),(20008|0),(386|0));
       $1431 = __THREW__; __THREW__ = 0;
       $1432 = $1431&1;
       if ($1432) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i650 = $1421;
      }
     } while(0);
     $1433 = (($$lcssa$i650) + 4|0);
     HEAP8[$1433>>0] = 0;
     HEAP32[$$lcssa$i650>>2] = ((520 + 8|0));
     $1434 = HEAP32[$agg$result>>2]|0;
     $1435 = (($1434) + 372|0);
     HEAP32[$1435>>2] = $$lcssa$i650;
     $1436 = (_malloc(8)|0);
     $1437 = ($1436|0)==(0|0);
     L968: do {
      if ($1437) {
       while(1) {
        $1438 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1438+0)|0);
        $1439 = ($1438|0)==(0);
        if ($1439) {
         break;
        }
        $1440 = $1438;
        __THREW__ = 0;
        invoke_v($1440|0);
        $1441 = __THREW__; __THREW__ = 0;
        $1442 = $1441&1;
        if ($1442) {
         label = 2065;
         break;
        }
        $1443 = (_malloc(8)|0);
        $1444 = ($1443|0)==(0|0);
        if (!($1444)) {
         $$lcssa$i657 = $1443;
         break L968;
        }
       }
       if ((label|0) == 2065) {
        $5035 = ___cxa_find_matching_catch()|0;
        $5036 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5036;$eh$lpad$body$indexZ2D = $5035;
        break L12;
       }
       $1445 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1445>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1445|0),(20008|0),(386|0));
       $1446 = __THREW__; __THREW__ = 0;
       $1447 = $1446&1;
       if ($1447) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i657 = $1436;
      }
     } while(0);
     $1448 = (($$lcssa$i657) + 4|0);
     HEAP8[$1448>>0] = 1;
     HEAP32[$$lcssa$i657>>2] = ((936 + 8|0));
     $1449 = HEAP32[$agg$result>>2]|0;
     $1450 = (($1449) + 376|0);
     HEAP32[$1450>>2] = $$lcssa$i657;
     $1451 = (_malloc(8)|0);
     $1452 = ($1451|0)==(0|0);
     L978: do {
      if ($1452) {
       while(1) {
        $1453 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1453+0)|0);
        $1454 = ($1453|0)==(0);
        if ($1454) {
         break;
        }
        $1455 = $1453;
        __THREW__ = 0;
        invoke_v($1455|0);
        $1456 = __THREW__; __THREW__ = 0;
        $1457 = $1456&1;
        if ($1457) {
         label = 2064;
         break;
        }
        $1458 = (_malloc(8)|0);
        $1459 = ($1458|0)==(0|0);
        if (!($1459)) {
         $$lcssa$i664 = $1458;
         break L978;
        }
       }
       if ((label|0) == 2064) {
        $5033 = ___cxa_find_matching_catch()|0;
        $5034 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5034;$eh$lpad$body$indexZ2D = $5033;
        break L12;
       }
       $1460 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1460>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1460|0),(20008|0),(386|0));
       $1461 = __THREW__; __THREW__ = 0;
       $1462 = $1461&1;
       if ($1462) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i664 = $1451;
      }
     } while(0);
     $1463 = (($$lcssa$i664) + 4|0);
     HEAP8[$1463>>0] = 0;
     HEAP32[$$lcssa$i664>>2] = ((472 + 8|0));
     $1464 = HEAP32[$agg$result>>2]|0;
     $1465 = (($1464) + 380|0);
     HEAP32[$1465>>2] = $$lcssa$i664;
     $1466 = (_malloc(8)|0);
     $1467 = ($1466|0)==(0|0);
     L988: do {
      if ($1467) {
       while(1) {
        $1468 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1468+0)|0);
        $1469 = ($1468|0)==(0);
        if ($1469) {
         break;
        }
        $1470 = $1468;
        __THREW__ = 0;
        invoke_v($1470|0);
        $1471 = __THREW__; __THREW__ = 0;
        $1472 = $1471&1;
        if ($1472) {
         label = 2063;
         break;
        }
        $1473 = (_malloc(8)|0);
        $1474 = ($1473|0)==(0|0);
        if (!($1474)) {
         $$lcssa$i671 = $1473;
         break L988;
        }
       }
       if ((label|0) == 2063) {
        $5031 = ___cxa_find_matching_catch()|0;
        $5032 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5032;$eh$lpad$body$indexZ2D = $5031;
        break L12;
       }
       $1475 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1475>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1475|0),(20008|0),(386|0));
       $1476 = __THREW__; __THREW__ = 0;
       $1477 = $1476&1;
       if ($1477) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i671 = $1466;
      }
     } while(0);
     $1478 = (($$lcssa$i671) + 4|0);
     HEAP8[$1478>>0] = 1;
     HEAP32[$$lcssa$i671>>2] = ((936 + 8|0));
     $1479 = HEAP32[$agg$result>>2]|0;
     $1480 = (($1479) + 384|0);
     HEAP32[$1480>>2] = $$lcssa$i671;
     $1481 = (_malloc(8)|0);
     $1482 = ($1481|0)==(0|0);
     L998: do {
      if ($1482) {
       while(1) {
        $1483 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1483+0)|0);
        $1484 = ($1483|0)==(0);
        if ($1484) {
         break;
        }
        $1485 = $1483;
        __THREW__ = 0;
        invoke_v($1485|0);
        $1486 = __THREW__; __THREW__ = 0;
        $1487 = $1486&1;
        if ($1487) {
         label = 2062;
         break;
        }
        $1488 = (_malloc(8)|0);
        $1489 = ($1488|0)==(0|0);
        if (!($1489)) {
         $$lcssa$i678 = $1488;
         break L998;
        }
       }
       if ((label|0) == 2062) {
        $5029 = ___cxa_find_matching_catch()|0;
        $5030 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5030;$eh$lpad$body$indexZ2D = $5029;
        break L12;
       }
       $1490 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1490>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1490|0),(20008|0),(386|0));
       $1491 = __THREW__; __THREW__ = 0;
       $1492 = $1491&1;
       if ($1492) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i678 = $1481;
      }
     } while(0);
     $1493 = (($$lcssa$i678) + 4|0);
     HEAP8[$1493>>0] = 0;
     HEAP32[$$lcssa$i678>>2] = ((520 + 8|0));
     $1494 = HEAP32[$agg$result>>2]|0;
     $1495 = (($1494) + 388|0);
     HEAP32[$1495>>2] = $$lcssa$i678;
     $1496 = (_malloc(8)|0);
     $1497 = ($1496|0)==(0|0);
     L1008: do {
      if ($1497) {
       while(1) {
        $1498 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1498+0)|0);
        $1499 = ($1498|0)==(0);
        if ($1499) {
         break;
        }
        $1500 = $1498;
        __THREW__ = 0;
        invoke_v($1500|0);
        $1501 = __THREW__; __THREW__ = 0;
        $1502 = $1501&1;
        if ($1502) {
         label = 2061;
         break;
        }
        $1503 = (_malloc(8)|0);
        $1504 = ($1503|0)==(0|0);
        if (!($1504)) {
         $$lcssa$i685 = $1503;
         break L1008;
        }
       }
       if ((label|0) == 2061) {
        $5027 = ___cxa_find_matching_catch()|0;
        $5028 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5028;$eh$lpad$body$indexZ2D = $5027;
        break L12;
       }
       $1505 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1505>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1505|0),(20008|0),(386|0));
       $1506 = __THREW__; __THREW__ = 0;
       $1507 = $1506&1;
       if ($1507) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i685 = $1496;
      }
     } while(0);
     $1508 = (($$lcssa$i685) + 4|0);
     HEAP8[$1508>>0] = 0;
     HEAP32[$$lcssa$i685>>2] = ((472 + 8|0));
     $1509 = HEAP32[$agg$result>>2]|0;
     $1510 = (($1509) + 392|0);
     HEAP32[$1510>>2] = $$lcssa$i685;
     $1511 = (_malloc(8)|0);
     $1512 = ($1511|0)==(0|0);
     L1018: do {
      if ($1512) {
       while(1) {
        $1513 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1513+0)|0);
        $1514 = ($1513|0)==(0);
        if ($1514) {
         break;
        }
        $1515 = $1513;
        __THREW__ = 0;
        invoke_v($1515|0);
        $1516 = __THREW__; __THREW__ = 0;
        $1517 = $1516&1;
        if ($1517) {
         label = 2060;
         break;
        }
        $1518 = (_malloc(8)|0);
        $1519 = ($1518|0)==(0|0);
        if (!($1519)) {
         $$lcssa$i692 = $1518;
         break L1018;
        }
       }
       if ((label|0) == 2060) {
        $5025 = ___cxa_find_matching_catch()|0;
        $5026 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5026;$eh$lpad$body$indexZ2D = $5025;
        break L12;
       }
       $1520 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1520>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1520|0),(20008|0),(386|0));
       $1521 = __THREW__; __THREW__ = 0;
       $1522 = $1521&1;
       if ($1522) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i692 = $1511;
      }
     } while(0);
     $1523 = (($$lcssa$i692) + 4|0);
     HEAP8[$1523>>0] = 0;
     HEAP32[$$lcssa$i692>>2] = ((520 + 8|0));
     $1524 = HEAP32[$agg$result>>2]|0;
     $1525 = (($1524) + 396|0);
     HEAP32[$1525>>2] = $$lcssa$i692;
     $1526 = (_malloc(8)|0);
     $1527 = ($1526|0)==(0|0);
     L1028: do {
      if ($1527) {
       while(1) {
        $1528 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1528+0)|0);
        $1529 = ($1528|0)==(0);
        if ($1529) {
         break;
        }
        $1530 = $1528;
        __THREW__ = 0;
        invoke_v($1530|0);
        $1531 = __THREW__; __THREW__ = 0;
        $1532 = $1531&1;
        if ($1532) {
         label = 2059;
         break;
        }
        $1533 = (_malloc(8)|0);
        $1534 = ($1533|0)==(0|0);
        if (!($1534)) {
         $$lcssa$i699 = $1533;
         break L1028;
        }
       }
       if ((label|0) == 2059) {
        $5023 = ___cxa_find_matching_catch()|0;
        $5024 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5024;$eh$lpad$body$indexZ2D = $5023;
        break L12;
       }
       $1535 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1535>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1535|0),(20008|0),(386|0));
       $1536 = __THREW__; __THREW__ = 0;
       $1537 = $1536&1;
       if ($1537) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i699 = $1526;
      }
     } while(0);
     $1538 = (($$lcssa$i699) + 4|0);
     HEAP8[$1538>>0] = 0;
     HEAP32[$$lcssa$i699>>2] = ((520 + 8|0));
     $1539 = HEAP32[$agg$result>>2]|0;
     $1540 = (($1539) + 400|0);
     HEAP32[$1540>>2] = $$lcssa$i699;
     $1541 = (_malloc(8)|0);
     $1542 = ($1541|0)==(0|0);
     L1038: do {
      if ($1542) {
       while(1) {
        $1543 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1543+0)|0);
        $1544 = ($1543|0)==(0);
        if ($1544) {
         break;
        }
        $1545 = $1543;
        __THREW__ = 0;
        invoke_v($1545|0);
        $1546 = __THREW__; __THREW__ = 0;
        $1547 = $1546&1;
        if ($1547) {
         label = 2058;
         break;
        }
        $1548 = (_malloc(8)|0);
        $1549 = ($1548|0)==(0|0);
        if (!($1549)) {
         $$lcssa$i706 = $1548;
         break L1038;
        }
       }
       if ((label|0) == 2058) {
        $5021 = ___cxa_find_matching_catch()|0;
        $5022 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5022;$eh$lpad$body$indexZ2D = $5021;
        break L12;
       }
       $1550 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1550>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1550|0),(20008|0),(386|0));
       $1551 = __THREW__; __THREW__ = 0;
       $1552 = $1551&1;
       if ($1552) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i706 = $1541;
      }
     } while(0);
     $1553 = (($$lcssa$i706) + 4|0);
     HEAP8[$1553>>0] = 0;
     HEAP32[$$lcssa$i706>>2] = ((624 + 8|0));
     $1554 = HEAP32[$agg$result>>2]|0;
     $1555 = (($1554) + 404|0);
     HEAP32[$1555>>2] = $$lcssa$i706;
     $1556 = (_malloc(8)|0);
     $1557 = ($1556|0)==(0|0);
     L1048: do {
      if ($1557) {
       while(1) {
        $1558 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1558+0)|0);
        $1559 = ($1558|0)==(0);
        if ($1559) {
         break;
        }
        $1560 = $1558;
        __THREW__ = 0;
        invoke_v($1560|0);
        $1561 = __THREW__; __THREW__ = 0;
        $1562 = $1561&1;
        if ($1562) {
         label = 2057;
         break;
        }
        $1563 = (_malloc(8)|0);
        $1564 = ($1563|0)==(0|0);
        if (!($1564)) {
         $$lcssa$i713 = $1563;
         break L1048;
        }
       }
       if ((label|0) == 2057) {
        $5019 = ___cxa_find_matching_catch()|0;
        $5020 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5020;$eh$lpad$body$indexZ2D = $5019;
        break L12;
       }
       $1565 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1565>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1565|0),(20008|0),(386|0));
       $1566 = __THREW__; __THREW__ = 0;
       $1567 = $1566&1;
       if ($1567) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i713 = $1556;
      }
     } while(0);
     $1568 = (($$lcssa$i713) + 4|0);
     HEAP8[$1568>>0] = 0;
     HEAP32[$$lcssa$i713>>2] = ((624 + 8|0));
     $1569 = HEAP32[$agg$result>>2]|0;
     $1570 = (($1569) + 408|0);
     HEAP32[$1570>>2] = $$lcssa$i713;
     $1571 = (_malloc(8)|0);
     $1572 = ($1571|0)==(0|0);
     L1058: do {
      if ($1572) {
       while(1) {
        $1573 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1573+0)|0);
        $1574 = ($1573|0)==(0);
        if ($1574) {
         break;
        }
        $1575 = $1573;
        __THREW__ = 0;
        invoke_v($1575|0);
        $1576 = __THREW__; __THREW__ = 0;
        $1577 = $1576&1;
        if ($1577) {
         label = 2056;
         break;
        }
        $1578 = (_malloc(8)|0);
        $1579 = ($1578|0)==(0|0);
        if (!($1579)) {
         $$lcssa$i720 = $1578;
         break L1058;
        }
       }
       if ((label|0) == 2056) {
        $5017 = ___cxa_find_matching_catch()|0;
        $5018 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5018;$eh$lpad$body$indexZ2D = $5017;
        break L12;
       }
       $1580 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1580>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1580|0),(20008|0),(386|0));
       $1581 = __THREW__; __THREW__ = 0;
       $1582 = $1581&1;
       if ($1582) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i720 = $1571;
      }
     } while(0);
     $1583 = (($$lcssa$i720) + 4|0);
     HEAP8[$1583>>0] = 0;
     HEAP32[$$lcssa$i720>>2] = ((624 + 8|0));
     $1584 = HEAP32[$agg$result>>2]|0;
     $1585 = (($1584) + 412|0);
     HEAP32[$1585>>2] = $$lcssa$i720;
     $1586 = (_malloc(8)|0);
     $1587 = ($1586|0)==(0|0);
     L1068: do {
      if ($1587) {
       while(1) {
        $1588 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1588+0)|0);
        $1589 = ($1588|0)==(0);
        if ($1589) {
         break;
        }
        $1590 = $1588;
        __THREW__ = 0;
        invoke_v($1590|0);
        $1591 = __THREW__; __THREW__ = 0;
        $1592 = $1591&1;
        if ($1592) {
         label = 2055;
         break;
        }
        $1593 = (_malloc(8)|0);
        $1594 = ($1593|0)==(0|0);
        if (!($1594)) {
         $$lcssa$i727 = $1593;
         break L1068;
        }
       }
       if ((label|0) == 2055) {
        $5015 = ___cxa_find_matching_catch()|0;
        $5016 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5016;$eh$lpad$body$indexZ2D = $5015;
        break L12;
       }
       $1595 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1595>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1595|0),(20008|0),(386|0));
       $1596 = __THREW__; __THREW__ = 0;
       $1597 = $1596&1;
       if ($1597) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i727 = $1586;
      }
     } while(0);
     $1598 = (($$lcssa$i727) + 4|0);
     HEAP8[$1598>>0] = 0;
     HEAP32[$$lcssa$i727>>2] = ((624 + 8|0));
     $1599 = HEAP32[$agg$result>>2]|0;
     $1600 = (($1599) + 416|0);
     HEAP32[$1600>>2] = $$lcssa$i727;
     $1601 = (_malloc(8)|0);
     $1602 = ($1601|0)==(0|0);
     L1078: do {
      if ($1602) {
       while(1) {
        $1603 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1603+0)|0);
        $1604 = ($1603|0)==(0);
        if ($1604) {
         break;
        }
        $1605 = $1603;
        __THREW__ = 0;
        invoke_v($1605|0);
        $1606 = __THREW__; __THREW__ = 0;
        $1607 = $1606&1;
        if ($1607) {
         label = 2054;
         break;
        }
        $1608 = (_malloc(8)|0);
        $1609 = ($1608|0)==(0|0);
        if (!($1609)) {
         $$lcssa$i734 = $1608;
         break L1078;
        }
       }
       if ((label|0) == 2054) {
        $5013 = ___cxa_find_matching_catch()|0;
        $5014 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5014;$eh$lpad$body$indexZ2D = $5013;
        break L12;
       }
       $1610 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1610>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1610|0),(20008|0),(386|0));
       $1611 = __THREW__; __THREW__ = 0;
       $1612 = $1611&1;
       if ($1612) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i734 = $1601;
      }
     } while(0);
     $1613 = (($$lcssa$i734) + 4|0);
     HEAP8[$1613>>0] = 0;
     HEAP32[$$lcssa$i734>>2] = ((624 + 8|0));
     $1614 = HEAP32[$agg$result>>2]|0;
     $1615 = (($1614) + 420|0);
     HEAP32[$1615>>2] = $$lcssa$i734;
     $1616 = (_malloc(8)|0);
     $1617 = ($1616|0)==(0|0);
     L1088: do {
      if ($1617) {
       while(1) {
        $1618 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1618+0)|0);
        $1619 = ($1618|0)==(0);
        if ($1619) {
         break;
        }
        $1620 = $1618;
        __THREW__ = 0;
        invoke_v($1620|0);
        $1621 = __THREW__; __THREW__ = 0;
        $1622 = $1621&1;
        if ($1622) {
         label = 2053;
         break;
        }
        $1623 = (_malloc(8)|0);
        $1624 = ($1623|0)==(0|0);
        if (!($1624)) {
         $$lcssa$i741 = $1623;
         break L1088;
        }
       }
       if ((label|0) == 2053) {
        $5011 = ___cxa_find_matching_catch()|0;
        $5012 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5012;$eh$lpad$body$indexZ2D = $5011;
        break L12;
       }
       $1625 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1625>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1625|0),(20008|0),(386|0));
       $1626 = __THREW__; __THREW__ = 0;
       $1627 = $1626&1;
       if ($1627) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i741 = $1616;
      }
     } while(0);
     $1628 = (($$lcssa$i741) + 4|0);
     HEAP8[$1628>>0] = 0;
     HEAP32[$$lcssa$i741>>2] = ((520 + 8|0));
     $1629 = HEAP32[$agg$result>>2]|0;
     $1630 = (($1629) + 424|0);
     HEAP32[$1630>>2] = $$lcssa$i741;
     $1631 = (_malloc(8)|0);
     $1632 = ($1631|0)==(0|0);
     L1098: do {
      if ($1632) {
       while(1) {
        $1633 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1633+0)|0);
        $1634 = ($1633|0)==(0);
        if ($1634) {
         break;
        }
        $1635 = $1633;
        __THREW__ = 0;
        invoke_v($1635|0);
        $1636 = __THREW__; __THREW__ = 0;
        $1637 = $1636&1;
        if ($1637) {
         label = 2052;
         break;
        }
        $1638 = (_malloc(8)|0);
        $1639 = ($1638|0)==(0|0);
        if (!($1639)) {
         $$lcssa$i748 = $1638;
         break L1098;
        }
       }
       if ((label|0) == 2052) {
        $5009 = ___cxa_find_matching_catch()|0;
        $5010 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5010;$eh$lpad$body$indexZ2D = $5009;
        break L12;
       }
       $1640 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1640>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1640|0),(20008|0),(386|0));
       $1641 = __THREW__; __THREW__ = 0;
       $1642 = $1641&1;
       if ($1642) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i748 = $1631;
      }
     } while(0);
     $1643 = (($$lcssa$i748) + 4|0);
     HEAP8[$1643>>0] = 0;
     HEAP32[$$lcssa$i748>>2] = ((520 + 8|0));
     $1644 = HEAP32[$agg$result>>2]|0;
     $1645 = (($1644) + 428|0);
     HEAP32[$1645>>2] = $$lcssa$i748;
     $1646 = (_malloc(8)|0);
     $1647 = ($1646|0)==(0|0);
     L1108: do {
      if ($1647) {
       while(1) {
        $1648 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1648+0)|0);
        $1649 = ($1648|0)==(0);
        if ($1649) {
         break;
        }
        $1650 = $1648;
        __THREW__ = 0;
        invoke_v($1650|0);
        $1651 = __THREW__; __THREW__ = 0;
        $1652 = $1651&1;
        if ($1652) {
         label = 2051;
         break;
        }
        $1653 = (_malloc(8)|0);
        $1654 = ($1653|0)==(0|0);
        if (!($1654)) {
         $$lcssa$i755 = $1653;
         break L1108;
        }
       }
       if ((label|0) == 2051) {
        $5007 = ___cxa_find_matching_catch()|0;
        $5008 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5008;$eh$lpad$body$indexZ2D = $5007;
        break L12;
       }
       $1655 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1655>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1655|0),(20008|0),(386|0));
       $1656 = __THREW__; __THREW__ = 0;
       $1657 = $1656&1;
       if ($1657) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i755 = $1646;
      }
     } while(0);
     $1658 = (($$lcssa$i755) + 4|0);
     HEAP32[$$lcssa$i755>>2] = ((320 + 8|0));
     HEAP8[$1658>>0] = 1;
     $1659 = HEAP32[$agg$result>>2]|0;
     $1660 = (($1659) + 432|0);
     HEAP32[$1660>>2] = $$lcssa$i755;
     $1661 = (_malloc(8)|0);
     $1662 = ($1661|0)==(0|0);
     L1118: do {
      if ($1662) {
       while(1) {
        $1663 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1663+0)|0);
        $1664 = ($1663|0)==(0);
        if ($1664) {
         break;
        }
        $1665 = $1663;
        __THREW__ = 0;
        invoke_v($1665|0);
        $1666 = __THREW__; __THREW__ = 0;
        $1667 = $1666&1;
        if ($1667) {
         label = 2050;
         break;
        }
        $1668 = (_malloc(8)|0);
        $1669 = ($1668|0)==(0|0);
        if (!($1669)) {
         $$lcssa$i762 = $1668;
         break L1118;
        }
       }
       if ((label|0) == 2050) {
        $5005 = ___cxa_find_matching_catch()|0;
        $5006 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5006;$eh$lpad$body$indexZ2D = $5005;
        break L12;
       }
       $1670 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1670>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1670|0),(20008|0),(386|0));
       $1671 = __THREW__; __THREW__ = 0;
       $1672 = $1671&1;
       if ($1672) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i762 = $1661;
      }
     } while(0);
     $1673 = (($$lcssa$i762) + 4|0);
     HEAP32[$$lcssa$i762>>2] = ((320 + 8|0));
     HEAP8[$1673>>0] = 1;
     $1674 = HEAP32[$agg$result>>2]|0;
     $1675 = (($1674) + 436|0);
     HEAP32[$1675>>2] = $$lcssa$i762;
     $1676 = (_malloc(8)|0);
     $1677 = ($1676|0)==(0|0);
     L1128: do {
      if ($1677) {
       while(1) {
        $1678 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1678+0)|0);
        $1679 = ($1678|0)==(0);
        if ($1679) {
         break;
        }
        $1680 = $1678;
        __THREW__ = 0;
        invoke_v($1680|0);
        $1681 = __THREW__; __THREW__ = 0;
        $1682 = $1681&1;
        if ($1682) {
         label = 2049;
         break;
        }
        $1683 = (_malloc(8)|0);
        $1684 = ($1683|0)==(0|0);
        if (!($1684)) {
         $$lcssa$i769 = $1683;
         break L1128;
        }
       }
       if ((label|0) == 2049) {
        $5003 = ___cxa_find_matching_catch()|0;
        $5004 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5004;$eh$lpad$body$indexZ2D = $5003;
        break L12;
       }
       $1685 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1685>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1685|0),(20008|0),(386|0));
       $1686 = __THREW__; __THREW__ = 0;
       $1687 = $1686&1;
       if ($1687) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i769 = $1676;
      }
     } while(0);
     $1688 = (($$lcssa$i769) + 4|0);
     HEAP32[$$lcssa$i769>>2] = ((320 + 8|0));
     HEAP8[$1688>>0] = 1;
     $1689 = HEAP32[$agg$result>>2]|0;
     $1690 = (($1689) + 440|0);
     HEAP32[$1690>>2] = $$lcssa$i769;
     $1691 = (_malloc(8)|0);
     $1692 = ($1691|0)==(0|0);
     L1138: do {
      if ($1692) {
       while(1) {
        $1693 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1693+0)|0);
        $1694 = ($1693|0)==(0);
        if ($1694) {
         break;
        }
        $1695 = $1693;
        __THREW__ = 0;
        invoke_v($1695|0);
        $1696 = __THREW__; __THREW__ = 0;
        $1697 = $1696&1;
        if ($1697) {
         label = 2048;
         break;
        }
        $1698 = (_malloc(8)|0);
        $1699 = ($1698|0)==(0|0);
        if (!($1699)) {
         $$lcssa$i776 = $1698;
         break L1138;
        }
       }
       if ((label|0) == 2048) {
        $5001 = ___cxa_find_matching_catch()|0;
        $5002 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5002;$eh$lpad$body$indexZ2D = $5001;
        break L12;
       }
       $1700 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1700>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1700|0),(20008|0),(386|0));
       $1701 = __THREW__; __THREW__ = 0;
       $1702 = $1701&1;
       if ($1702) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i776 = $1691;
      }
     } while(0);
     $1703 = (($$lcssa$i776) + 4|0);
     HEAP32[$$lcssa$i776>>2] = ((320 + 8|0));
     HEAP8[$1703>>0] = 1;
     $1704 = HEAP32[$agg$result>>2]|0;
     $1705 = (($1704) + 444|0);
     HEAP32[$1705>>2] = $$lcssa$i776;
     $1706 = (_malloc(8)|0);
     $1707 = ($1706|0)==(0|0);
     L1148: do {
      if ($1707) {
       while(1) {
        $1708 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1708+0)|0);
        $1709 = ($1708|0)==(0);
        if ($1709) {
         break;
        }
        $1710 = $1708;
        __THREW__ = 0;
        invoke_v($1710|0);
        $1711 = __THREW__; __THREW__ = 0;
        $1712 = $1711&1;
        if ($1712) {
         label = 2047;
         break;
        }
        $1713 = (_malloc(8)|0);
        $1714 = ($1713|0)==(0|0);
        if (!($1714)) {
         $$lcssa$i783 = $1713;
         break L1148;
        }
       }
       if ((label|0) == 2047) {
        $4999 = ___cxa_find_matching_catch()|0;
        $5000 = tempRet0;
        $eh$lpad$body$index4213Z2D = $5000;$eh$lpad$body$indexZ2D = $4999;
        break L12;
       }
       $1715 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1715>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1715|0),(20008|0),(386|0));
       $1716 = __THREW__; __THREW__ = 0;
       $1717 = $1716&1;
       if ($1717) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i783 = $1706;
      }
     } while(0);
     $1718 = (($$lcssa$i783) + 4|0);
     HEAP32[$$lcssa$i783>>2] = ((320 + 8|0));
     HEAP8[$1718>>0] = 1;
     $1719 = HEAP32[$agg$result>>2]|0;
     $1720 = (($1719) + 448|0);
     HEAP32[$1720>>2] = $$lcssa$i783;
     $1721 = (_malloc(8)|0);
     $1722 = ($1721|0)==(0|0);
     L1158: do {
      if ($1722) {
       while(1) {
        $1723 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1723+0)|0);
        $1724 = ($1723|0)==(0);
        if ($1724) {
         break;
        }
        $1725 = $1723;
        __THREW__ = 0;
        invoke_v($1725|0);
        $1726 = __THREW__; __THREW__ = 0;
        $1727 = $1726&1;
        if ($1727) {
         label = 2046;
         break;
        }
        $1728 = (_malloc(8)|0);
        $1729 = ($1728|0)==(0|0);
        if (!($1729)) {
         $$lcssa$i790 = $1728;
         break L1158;
        }
       }
       if ((label|0) == 2046) {
        $4997 = ___cxa_find_matching_catch()|0;
        $4998 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4998;$eh$lpad$body$indexZ2D = $4997;
        break L12;
       }
       $1730 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1730>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1730|0),(20008|0),(386|0));
       $1731 = __THREW__; __THREW__ = 0;
       $1732 = $1731&1;
       if ($1732) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i790 = $1721;
      }
     } while(0);
     $1733 = (($$lcssa$i790) + 4|0);
     HEAP8[$1733>>0] = 0;
     HEAP32[$$lcssa$i790>>2] = ((520 + 8|0));
     $1734 = HEAP32[$agg$result>>2]|0;
     $1735 = (($1734) + 452|0);
     HEAP32[$1735>>2] = $$lcssa$i790;
     $1736 = (_malloc(8)|0);
     $1737 = ($1736|0)==(0|0);
     L1168: do {
      if ($1737) {
       while(1) {
        $1738 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1738+0)|0);
        $1739 = ($1738|0)==(0);
        if ($1739) {
         break;
        }
        $1740 = $1738;
        __THREW__ = 0;
        invoke_v($1740|0);
        $1741 = __THREW__; __THREW__ = 0;
        $1742 = $1741&1;
        if ($1742) {
         label = 2045;
         break;
        }
        $1743 = (_malloc(8)|0);
        $1744 = ($1743|0)==(0|0);
        if (!($1744)) {
         $$lcssa$i797 = $1743;
         break L1168;
        }
       }
       if ((label|0) == 2045) {
        $4995 = ___cxa_find_matching_catch()|0;
        $4996 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4996;$eh$lpad$body$indexZ2D = $4995;
        break L12;
       }
       $1745 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1745>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1745|0),(20008|0),(386|0));
       $1746 = __THREW__; __THREW__ = 0;
       $1747 = $1746&1;
       if ($1747) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i797 = $1736;
      }
     } while(0);
     $1748 = (($$lcssa$i797) + 4|0);
     HEAP8[$1748>>0] = 0;
     HEAP32[$$lcssa$i797>>2] = ((520 + 8|0));
     $1749 = HEAP32[$agg$result>>2]|0;
     $1750 = (($1749) + 456|0);
     HEAP32[$1750>>2] = $$lcssa$i797;
     $1751 = (_malloc(8)|0);
     $1752 = ($1751|0)==(0|0);
     L1178: do {
      if ($1752) {
       while(1) {
        $1753 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1753+0)|0);
        $1754 = ($1753|0)==(0);
        if ($1754) {
         break;
        }
        $1755 = $1753;
        __THREW__ = 0;
        invoke_v($1755|0);
        $1756 = __THREW__; __THREW__ = 0;
        $1757 = $1756&1;
        if ($1757) {
         label = 2044;
         break;
        }
        $1758 = (_malloc(8)|0);
        $1759 = ($1758|0)==(0|0);
        if (!($1759)) {
         $$lcssa$i804 = $1758;
         break L1178;
        }
       }
       if ((label|0) == 2044) {
        $4993 = ___cxa_find_matching_catch()|0;
        $4994 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4994;$eh$lpad$body$indexZ2D = $4993;
        break L12;
       }
       $1760 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1760>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1760|0),(20008|0),(386|0));
       $1761 = __THREW__; __THREW__ = 0;
       $1762 = $1761&1;
       if ($1762) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i804 = $1751;
      }
     } while(0);
     $1763 = (($$lcssa$i804) + 4|0);
     HEAP8[$1763>>0] = 0;
     HEAP32[$$lcssa$i804>>2] = ((880 + 8|0));
     $1764 = HEAP32[$agg$result>>2]|0;
     $1765 = (($1764) + 460|0);
     HEAP32[$1765>>2] = $$lcssa$i804;
     $1766 = (_malloc(8)|0);
     $1767 = ($1766|0)==(0|0);
     L1188: do {
      if ($1767) {
       while(1) {
        $1768 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1768+0)|0);
        $1769 = ($1768|0)==(0);
        if ($1769) {
         break;
        }
        $1770 = $1768;
        __THREW__ = 0;
        invoke_v($1770|0);
        $1771 = __THREW__; __THREW__ = 0;
        $1772 = $1771&1;
        if ($1772) {
         label = 2043;
         break;
        }
        $1773 = (_malloc(8)|0);
        $1774 = ($1773|0)==(0|0);
        if (!($1774)) {
         $$lcssa$i811 = $1773;
         break L1188;
        }
       }
       if ((label|0) == 2043) {
        $4991 = ___cxa_find_matching_catch()|0;
        $4992 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4992;$eh$lpad$body$indexZ2D = $4991;
        break L12;
       }
       $1775 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1775>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1775|0),(20008|0),(386|0));
       $1776 = __THREW__; __THREW__ = 0;
       $1777 = $1776&1;
       if ($1777) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i811 = $1766;
      }
     } while(0);
     $1778 = (($$lcssa$i811) + 4|0);
     HEAP8[$1778>>0] = 0;
     HEAP32[$$lcssa$i811>>2] = ((880 + 8|0));
     $1779 = HEAP32[$agg$result>>2]|0;
     $1780 = (($1779) + 464|0);
     HEAP32[$1780>>2] = $$lcssa$i811;
     $1781 = (_malloc(8)|0);
     $1782 = ($1781|0)==(0|0);
     L1198: do {
      if ($1782) {
       while(1) {
        $1783 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1783+0)|0);
        $1784 = ($1783|0)==(0);
        if ($1784) {
         break;
        }
        $1785 = $1783;
        __THREW__ = 0;
        invoke_v($1785|0);
        $1786 = __THREW__; __THREW__ = 0;
        $1787 = $1786&1;
        if ($1787) {
         label = 2042;
         break;
        }
        $1788 = (_malloc(8)|0);
        $1789 = ($1788|0)==(0|0);
        if (!($1789)) {
         $$lcssa$i818 = $1788;
         break L1198;
        }
       }
       if ((label|0) == 2042) {
        $4989 = ___cxa_find_matching_catch()|0;
        $4990 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4990;$eh$lpad$body$indexZ2D = $4989;
        break L12;
       }
       $1790 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1790>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1790|0),(20008|0),(386|0));
       $1791 = __THREW__; __THREW__ = 0;
       $1792 = $1791&1;
       if ($1792) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i818 = $1781;
      }
     } while(0);
     $1793 = (($$lcssa$i818) + 4|0);
     HEAP8[$1793>>0] = 0;
     HEAP32[$$lcssa$i818>>2] = ((880 + 8|0));
     $1794 = HEAP32[$agg$result>>2]|0;
     $1795 = (($1794) + 468|0);
     HEAP32[$1795>>2] = $$lcssa$i818;
     $1796 = (_malloc(8)|0);
     $1797 = ($1796|0)==(0|0);
     L1208: do {
      if ($1797) {
       while(1) {
        $1798 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1798+0)|0);
        $1799 = ($1798|0)==(0);
        if ($1799) {
         break;
        }
        $1800 = $1798;
        __THREW__ = 0;
        invoke_v($1800|0);
        $1801 = __THREW__; __THREW__ = 0;
        $1802 = $1801&1;
        if ($1802) {
         label = 2041;
         break;
        }
        $1803 = (_malloc(8)|0);
        $1804 = ($1803|0)==(0|0);
        if (!($1804)) {
         $$lcssa$i825 = $1803;
         break L1208;
        }
       }
       if ((label|0) == 2041) {
        $4987 = ___cxa_find_matching_catch()|0;
        $4988 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4988;$eh$lpad$body$indexZ2D = $4987;
        break L12;
       }
       $1805 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1805>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1805|0),(20008|0),(386|0));
       $1806 = __THREW__; __THREW__ = 0;
       $1807 = $1806&1;
       if ($1807) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i825 = $1796;
      }
     } while(0);
     $1808 = (($$lcssa$i825) + 4|0);
     HEAP8[$1808>>0] = 0;
     HEAP32[$$lcssa$i825>>2] = ((880 + 8|0));
     $1809 = HEAP32[$agg$result>>2]|0;
     $1810 = (($1809) + 472|0);
     HEAP32[$1810>>2] = $$lcssa$i825;
     $1811 = (_malloc(8)|0);
     $1812 = ($1811|0)==(0|0);
     L1218: do {
      if ($1812) {
       while(1) {
        $1813 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1813+0)|0);
        $1814 = ($1813|0)==(0);
        if ($1814) {
         break;
        }
        $1815 = $1813;
        __THREW__ = 0;
        invoke_v($1815|0);
        $1816 = __THREW__; __THREW__ = 0;
        $1817 = $1816&1;
        if ($1817) {
         label = 2040;
         break;
        }
        $1818 = (_malloc(8)|0);
        $1819 = ($1818|0)==(0|0);
        if (!($1819)) {
         $$lcssa$i832 = $1818;
         break L1218;
        }
       }
       if ((label|0) == 2040) {
        $4985 = ___cxa_find_matching_catch()|0;
        $4986 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4986;$eh$lpad$body$indexZ2D = $4985;
        break L12;
       }
       $1820 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1820>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1820|0),(20008|0),(386|0));
       $1821 = __THREW__; __THREW__ = 0;
       $1822 = $1821&1;
       if ($1822) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i832 = $1811;
      }
     } while(0);
     $1823 = (($$lcssa$i832) + 4|0);
     HEAP8[$1823>>0] = 0;
     HEAP32[$$lcssa$i832>>2] = ((880 + 8|0));
     $1824 = HEAP32[$agg$result>>2]|0;
     $1825 = (($1824) + 476|0);
     HEAP32[$1825>>2] = $$lcssa$i832;
     $1826 = (_malloc(8)|0);
     $1827 = ($1826|0)==(0|0);
     L1228: do {
      if ($1827) {
       while(1) {
        $1828 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1828+0)|0);
        $1829 = ($1828|0)==(0);
        if ($1829) {
         break;
        }
        $1830 = $1828;
        __THREW__ = 0;
        invoke_v($1830|0);
        $1831 = __THREW__; __THREW__ = 0;
        $1832 = $1831&1;
        if ($1832) {
         label = 2039;
         break;
        }
        $1833 = (_malloc(8)|0);
        $1834 = ($1833|0)==(0|0);
        if (!($1834)) {
         $$lcssa$i839 = $1833;
         break L1228;
        }
       }
       if ((label|0) == 2039) {
        $4983 = ___cxa_find_matching_catch()|0;
        $4984 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4984;$eh$lpad$body$indexZ2D = $4983;
        break L12;
       }
       $1835 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1835>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1835|0),(20008|0),(386|0));
       $1836 = __THREW__; __THREW__ = 0;
       $1837 = $1836&1;
       if ($1837) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i839 = $1826;
      }
     } while(0);
     $1838 = (($$lcssa$i839) + 4|0);
     HEAP8[$1838>>0] = 0;
     HEAP32[$$lcssa$i839>>2] = ((880 + 8|0));
     $1839 = HEAP32[$agg$result>>2]|0;
     $1840 = (($1839) + 480|0);
     HEAP32[$1840>>2] = $$lcssa$i839;
     $1841 = (_malloc(8)|0);
     $1842 = ($1841|0)==(0|0);
     L1238: do {
      if ($1842) {
       while(1) {
        $1843 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1843+0)|0);
        $1844 = ($1843|0)==(0);
        if ($1844) {
         break;
        }
        $1845 = $1843;
        __THREW__ = 0;
        invoke_v($1845|0);
        $1846 = __THREW__; __THREW__ = 0;
        $1847 = $1846&1;
        if ($1847) {
         label = 2038;
         break;
        }
        $1848 = (_malloc(8)|0);
        $1849 = ($1848|0)==(0|0);
        if (!($1849)) {
         $$lcssa$i846 = $1848;
         break L1238;
        }
       }
       if ((label|0) == 2038) {
        $4981 = ___cxa_find_matching_catch()|0;
        $4982 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4982;$eh$lpad$body$indexZ2D = $4981;
        break L12;
       }
       $1850 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1850>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1850|0),(20008|0),(386|0));
       $1851 = __THREW__; __THREW__ = 0;
       $1852 = $1851&1;
       if ($1852) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i846 = $1841;
      }
     } while(0);
     $1853 = (($$lcssa$i846) + 4|0);
     HEAP8[$1853>>0] = 0;
     HEAP32[$$lcssa$i846>>2] = ((880 + 8|0));
     $1854 = HEAP32[$agg$result>>2]|0;
     $1855 = (($1854) + 484|0);
     HEAP32[$1855>>2] = $$lcssa$i846;
     $1856 = (_malloc(8)|0);
     $1857 = ($1856|0)==(0|0);
     L1248: do {
      if ($1857) {
       while(1) {
        $1858 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1858+0)|0);
        $1859 = ($1858|0)==(0);
        if ($1859) {
         break;
        }
        $1860 = $1858;
        __THREW__ = 0;
        invoke_v($1860|0);
        $1861 = __THREW__; __THREW__ = 0;
        $1862 = $1861&1;
        if ($1862) {
         label = 2037;
         break;
        }
        $1863 = (_malloc(8)|0);
        $1864 = ($1863|0)==(0|0);
        if (!($1864)) {
         $$lcssa$i853 = $1863;
         break L1248;
        }
       }
       if ((label|0) == 2037) {
        $4979 = ___cxa_find_matching_catch()|0;
        $4980 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4980;$eh$lpad$body$indexZ2D = $4979;
        break L12;
       }
       $1865 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1865>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1865|0),(20008|0),(386|0));
       $1866 = __THREW__; __THREW__ = 0;
       $1867 = $1866&1;
       if ($1867) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i853 = $1856;
      }
     } while(0);
     $1868 = (($$lcssa$i853) + 4|0);
     HEAP8[$1868>>0] = 0;
     HEAP32[$$lcssa$i853>>2] = ((880 + 8|0));
     $1869 = HEAP32[$agg$result>>2]|0;
     $1870 = (($1869) + 488|0);
     HEAP32[$1870>>2] = $$lcssa$i853;
     $1871 = (_malloc(8)|0);
     $1872 = ($1871|0)==(0|0);
     L1258: do {
      if ($1872) {
       while(1) {
        $1873 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1873+0)|0);
        $1874 = ($1873|0)==(0);
        if ($1874) {
         break;
        }
        $1875 = $1873;
        __THREW__ = 0;
        invoke_v($1875|0);
        $1876 = __THREW__; __THREW__ = 0;
        $1877 = $1876&1;
        if ($1877) {
         label = 2036;
         break;
        }
        $1878 = (_malloc(8)|0);
        $1879 = ($1878|0)==(0|0);
        if (!($1879)) {
         $$lcssa$i860 = $1878;
         break L1258;
        }
       }
       if ((label|0) == 2036) {
        $4977 = ___cxa_find_matching_catch()|0;
        $4978 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4978;$eh$lpad$body$indexZ2D = $4977;
        break L12;
       }
       $1880 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1880>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1880|0),(20008|0),(386|0));
       $1881 = __THREW__; __THREW__ = 0;
       $1882 = $1881&1;
       if ($1882) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i860 = $1871;
      }
     } while(0);
     $1883 = (($$lcssa$i860) + 4|0);
     HEAP8[$1883>>0] = 0;
     HEAP32[$$lcssa$i860>>2] = ((880 + 8|0));
     $1884 = HEAP32[$agg$result>>2]|0;
     $1885 = (($1884) + 492|0);
     HEAP32[$1885>>2] = $$lcssa$i860;
     $1886 = (_malloc(8)|0);
     $1887 = ($1886|0)==(0|0);
     L1268: do {
      if ($1887) {
       while(1) {
        $1888 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1888+0)|0);
        $1889 = ($1888|0)==(0);
        if ($1889) {
         break;
        }
        $1890 = $1888;
        __THREW__ = 0;
        invoke_v($1890|0);
        $1891 = __THREW__; __THREW__ = 0;
        $1892 = $1891&1;
        if ($1892) {
         label = 2035;
         break;
        }
        $1893 = (_malloc(8)|0);
        $1894 = ($1893|0)==(0|0);
        if (!($1894)) {
         $$lcssa$i867 = $1893;
         break L1268;
        }
       }
       if ((label|0) == 2035) {
        $4975 = ___cxa_find_matching_catch()|0;
        $4976 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4976;$eh$lpad$body$indexZ2D = $4975;
        break L12;
       }
       $1895 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1895>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1895|0),(20008|0),(386|0));
       $1896 = __THREW__; __THREW__ = 0;
       $1897 = $1896&1;
       if ($1897) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i867 = $1886;
      }
     } while(0);
     $1898 = (($$lcssa$i867) + 4|0);
     HEAP8[$1898>>0] = 0;
     HEAP32[$$lcssa$i867>>2] = ((880 + 8|0));
     $1899 = HEAP32[$agg$result>>2]|0;
     $1900 = (($1899) + 496|0);
     HEAP32[$1900>>2] = $$lcssa$i867;
     $1901 = (_malloc(8)|0);
     $1902 = ($1901|0)==(0|0);
     L1278: do {
      if ($1902) {
       while(1) {
        $1903 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1903+0)|0);
        $1904 = ($1903|0)==(0);
        if ($1904) {
         break;
        }
        $1905 = $1903;
        __THREW__ = 0;
        invoke_v($1905|0);
        $1906 = __THREW__; __THREW__ = 0;
        $1907 = $1906&1;
        if ($1907) {
         label = 2034;
         break;
        }
        $1908 = (_malloc(8)|0);
        $1909 = ($1908|0)==(0|0);
        if (!($1909)) {
         $$lcssa$i874 = $1908;
         break L1278;
        }
       }
       if ((label|0) == 2034) {
        $4973 = ___cxa_find_matching_catch()|0;
        $4974 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4974;$eh$lpad$body$indexZ2D = $4973;
        break L12;
       }
       $1910 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1910>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1910|0),(20008|0),(386|0));
       $1911 = __THREW__; __THREW__ = 0;
       $1912 = $1911&1;
       if ($1912) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i874 = $1901;
      }
     } while(0);
     $1913 = (($$lcssa$i874) + 4|0);
     HEAP8[$1913>>0] = 0;
     HEAP32[$$lcssa$i874>>2] = ((880 + 8|0));
     $1914 = HEAP32[$agg$result>>2]|0;
     $1915 = (($1914) + 500|0);
     HEAP32[$1915>>2] = $$lcssa$i874;
     $1916 = (_malloc(8)|0);
     $1917 = ($1916|0)==(0|0);
     L1288: do {
      if ($1917) {
       while(1) {
        $1918 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1918+0)|0);
        $1919 = ($1918|0)==(0);
        if ($1919) {
         break;
        }
        $1920 = $1918;
        __THREW__ = 0;
        invoke_v($1920|0);
        $1921 = __THREW__; __THREW__ = 0;
        $1922 = $1921&1;
        if ($1922) {
         label = 2033;
         break;
        }
        $1923 = (_malloc(8)|0);
        $1924 = ($1923|0)==(0|0);
        if (!($1924)) {
         $$lcssa$i881 = $1923;
         break L1288;
        }
       }
       if ((label|0) == 2033) {
        $4971 = ___cxa_find_matching_catch()|0;
        $4972 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4972;$eh$lpad$body$indexZ2D = $4971;
        break L12;
       }
       $1925 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1925>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1925|0),(20008|0),(386|0));
       $1926 = __THREW__; __THREW__ = 0;
       $1927 = $1926&1;
       if ($1927) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i881 = $1916;
      }
     } while(0);
     $1928 = (($$lcssa$i881) + 4|0);
     HEAP8[$1928>>0] = 0;
     HEAP32[$$lcssa$i881>>2] = ((880 + 8|0));
     $1929 = HEAP32[$agg$result>>2]|0;
     $1930 = (($1929) + 504|0);
     HEAP32[$1930>>2] = $$lcssa$i881;
     $1931 = (_malloc(8)|0);
     $1932 = ($1931|0)==(0|0);
     L1298: do {
      if ($1932) {
       while(1) {
        $1933 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1933+0)|0);
        $1934 = ($1933|0)==(0);
        if ($1934) {
         break;
        }
        $1935 = $1933;
        __THREW__ = 0;
        invoke_v($1935|0);
        $1936 = __THREW__; __THREW__ = 0;
        $1937 = $1936&1;
        if ($1937) {
         label = 2032;
         break;
        }
        $1938 = (_malloc(8)|0);
        $1939 = ($1938|0)==(0|0);
        if (!($1939)) {
         $$lcssa$i888 = $1938;
         break L1298;
        }
       }
       if ((label|0) == 2032) {
        $4969 = ___cxa_find_matching_catch()|0;
        $4970 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4970;$eh$lpad$body$indexZ2D = $4969;
        break L12;
       }
       $1940 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1940>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1940|0),(20008|0),(386|0));
       $1941 = __THREW__; __THREW__ = 0;
       $1942 = $1941&1;
       if ($1942) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i888 = $1931;
      }
     } while(0);
     $1943 = (($$lcssa$i888) + 4|0);
     HEAP8[$1943>>0] = 0;
     HEAP32[$$lcssa$i888>>2] = ((880 + 8|0));
     $1944 = HEAP32[$agg$result>>2]|0;
     $1945 = (($1944) + 508|0);
     HEAP32[$1945>>2] = $$lcssa$i888;
     $1946 = (_malloc(8)|0);
     $1947 = ($1946|0)==(0|0);
     L1308: do {
      if ($1947) {
       while(1) {
        $1948 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1948+0)|0);
        $1949 = ($1948|0)==(0);
        if ($1949) {
         break;
        }
        $1950 = $1948;
        __THREW__ = 0;
        invoke_v($1950|0);
        $1951 = __THREW__; __THREW__ = 0;
        $1952 = $1951&1;
        if ($1952) {
         label = 2031;
         break;
        }
        $1953 = (_malloc(8)|0);
        $1954 = ($1953|0)==(0|0);
        if (!($1954)) {
         $$lcssa$i895 = $1953;
         break L1308;
        }
       }
       if ((label|0) == 2031) {
        $4967 = ___cxa_find_matching_catch()|0;
        $4968 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4968;$eh$lpad$body$indexZ2D = $4967;
        break L12;
       }
       $1955 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1955>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1955|0),(20008|0),(386|0));
       $1956 = __THREW__; __THREW__ = 0;
       $1957 = $1956&1;
       if ($1957) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i895 = $1946;
      }
     } while(0);
     $1958 = (($$lcssa$i895) + 4|0);
     HEAP8[$1958>>0] = 0;
     HEAP32[$$lcssa$i895>>2] = ((880 + 8|0));
     $1959 = HEAP32[$agg$result>>2]|0;
     $1960 = (($1959) + 512|0);
     HEAP32[$1960>>2] = $$lcssa$i895;
     $1961 = (_malloc(8)|0);
     $1962 = ($1961|0)==(0|0);
     L1318: do {
      if ($1962) {
       while(1) {
        $1963 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1963+0)|0);
        $1964 = ($1963|0)==(0);
        if ($1964) {
         break;
        }
        $1965 = $1963;
        __THREW__ = 0;
        invoke_v($1965|0);
        $1966 = __THREW__; __THREW__ = 0;
        $1967 = $1966&1;
        if ($1967) {
         label = 2030;
         break;
        }
        $1968 = (_malloc(8)|0);
        $1969 = ($1968|0)==(0|0);
        if (!($1969)) {
         $$lcssa$i902 = $1968;
         break L1318;
        }
       }
       if ((label|0) == 2030) {
        $4965 = ___cxa_find_matching_catch()|0;
        $4966 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4966;$eh$lpad$body$indexZ2D = $4965;
        break L12;
       }
       $1970 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1970>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1970|0),(20008|0),(386|0));
       $1971 = __THREW__; __THREW__ = 0;
       $1972 = $1971&1;
       if ($1972) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i902 = $1961;
      }
     } while(0);
     $1973 = (($$lcssa$i902) + 4|0);
     HEAP8[$1973>>0] = 0;
     HEAP32[$$lcssa$i902>>2] = ((880 + 8|0));
     $1974 = HEAP32[$agg$result>>2]|0;
     $1975 = (($1974) + 516|0);
     HEAP32[$1975>>2] = $$lcssa$i902;
     $1976 = (_malloc(8)|0);
     $1977 = ($1976|0)==(0|0);
     L1328: do {
      if ($1977) {
       while(1) {
        $1978 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1978+0)|0);
        $1979 = ($1978|0)==(0);
        if ($1979) {
         break;
        }
        $1980 = $1978;
        __THREW__ = 0;
        invoke_v($1980|0);
        $1981 = __THREW__; __THREW__ = 0;
        $1982 = $1981&1;
        if ($1982) {
         label = 2029;
         break;
        }
        $1983 = (_malloc(8)|0);
        $1984 = ($1983|0)==(0|0);
        if (!($1984)) {
         $$lcssa$i909 = $1983;
         break L1328;
        }
       }
       if ((label|0) == 2029) {
        $4963 = ___cxa_find_matching_catch()|0;
        $4964 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4964;$eh$lpad$body$indexZ2D = $4963;
        break L12;
       }
       $1985 = (___cxa_allocate_exception(4)|0);
       HEAP32[$1985>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($1985|0),(20008|0),(386|0));
       $1986 = __THREW__; __THREW__ = 0;
       $1987 = $1986&1;
       if ($1987) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i909 = $1976;
      }
     } while(0);
     $1988 = (($$lcssa$i909) + 4|0);
     HEAP8[$1988>>0] = 0;
     HEAP32[$$lcssa$i909>>2] = ((880 + 8|0));
     $1989 = HEAP32[$agg$result>>2]|0;
     $1990 = (($1989) + 520|0);
     HEAP32[$1990>>2] = $$lcssa$i909;
     $1991 = (_malloc(8)|0);
     $1992 = ($1991|0)==(0|0);
     L1338: do {
      if ($1992) {
       while(1) {
        $1993 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($1993+0)|0);
        $1994 = ($1993|0)==(0);
        if ($1994) {
         break;
        }
        $1995 = $1993;
        __THREW__ = 0;
        invoke_v($1995|0);
        $1996 = __THREW__; __THREW__ = 0;
        $1997 = $1996&1;
        if ($1997) {
         label = 2028;
         break;
        }
        $1998 = (_malloc(8)|0);
        $1999 = ($1998|0)==(0|0);
        if (!($1999)) {
         $$lcssa$i916 = $1998;
         break L1338;
        }
       }
       if ((label|0) == 2028) {
        $4961 = ___cxa_find_matching_catch()|0;
        $4962 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4962;$eh$lpad$body$indexZ2D = $4961;
        break L12;
       }
       $2000 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2000>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2000|0),(20008|0),(386|0));
       $2001 = __THREW__; __THREW__ = 0;
       $2002 = $2001&1;
       if ($2002) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i916 = $1991;
      }
     } while(0);
     $2003 = (($$lcssa$i916) + 4|0);
     HEAP8[$2003>>0] = 0;
     HEAP32[$$lcssa$i916>>2] = ((880 + 8|0));
     $2004 = HEAP32[$agg$result>>2]|0;
     $2005 = (($2004) + 524|0);
     HEAP32[$2005>>2] = $$lcssa$i916;
     $2006 = (_malloc(8)|0);
     $2007 = ($2006|0)==(0|0);
     L1348: do {
      if ($2007) {
       while(1) {
        $2008 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2008+0)|0);
        $2009 = ($2008|0)==(0);
        if ($2009) {
         break;
        }
        $2010 = $2008;
        __THREW__ = 0;
        invoke_v($2010|0);
        $2011 = __THREW__; __THREW__ = 0;
        $2012 = $2011&1;
        if ($2012) {
         label = 2027;
         break;
        }
        $2013 = (_malloc(8)|0);
        $2014 = ($2013|0)==(0|0);
        if (!($2014)) {
         $$lcssa$i923 = $2013;
         break L1348;
        }
       }
       if ((label|0) == 2027) {
        $4959 = ___cxa_find_matching_catch()|0;
        $4960 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4960;$eh$lpad$body$indexZ2D = $4959;
        break L12;
       }
       $2015 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2015>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2015|0),(20008|0),(386|0));
       $2016 = __THREW__; __THREW__ = 0;
       $2017 = $2016&1;
       if ($2017) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i923 = $2006;
      }
     } while(0);
     $2018 = (($$lcssa$i923) + 4|0);
     HEAP8[$2018>>0] = 0;
     HEAP32[$$lcssa$i923>>2] = ((880 + 8|0));
     $2019 = HEAP32[$agg$result>>2]|0;
     $2020 = (($2019) + 528|0);
     HEAP32[$2020>>2] = $$lcssa$i923;
     $2021 = (_malloc(8)|0);
     $2022 = ($2021|0)==(0|0);
     L1358: do {
      if ($2022) {
       while(1) {
        $2023 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2023+0)|0);
        $2024 = ($2023|0)==(0);
        if ($2024) {
         break;
        }
        $2025 = $2023;
        __THREW__ = 0;
        invoke_v($2025|0);
        $2026 = __THREW__; __THREW__ = 0;
        $2027 = $2026&1;
        if ($2027) {
         label = 2026;
         break;
        }
        $2028 = (_malloc(8)|0);
        $2029 = ($2028|0)==(0|0);
        if (!($2029)) {
         $$lcssa$i930 = $2028;
         break L1358;
        }
       }
       if ((label|0) == 2026) {
        $4957 = ___cxa_find_matching_catch()|0;
        $4958 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4958;$eh$lpad$body$indexZ2D = $4957;
        break L12;
       }
       $2030 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2030>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2030|0),(20008|0),(386|0));
       $2031 = __THREW__; __THREW__ = 0;
       $2032 = $2031&1;
       if ($2032) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i930 = $2021;
      }
     } while(0);
     $2033 = (($$lcssa$i930) + 4|0);
     HEAP8[$2033>>0] = 0;
     HEAP32[$$lcssa$i930>>2] = ((880 + 8|0));
     $2034 = HEAP32[$agg$result>>2]|0;
     $2035 = (($2034) + 532|0);
     HEAP32[$2035>>2] = $$lcssa$i930;
     $2036 = (_malloc(8)|0);
     $2037 = ($2036|0)==(0|0);
     L1368: do {
      if ($2037) {
       while(1) {
        $2038 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2038+0)|0);
        $2039 = ($2038|0)==(0);
        if ($2039) {
         break;
        }
        $2040 = $2038;
        __THREW__ = 0;
        invoke_v($2040|0);
        $2041 = __THREW__; __THREW__ = 0;
        $2042 = $2041&1;
        if ($2042) {
         label = 2025;
         break;
        }
        $2043 = (_malloc(8)|0);
        $2044 = ($2043|0)==(0|0);
        if (!($2044)) {
         $$lcssa$i937 = $2043;
         break L1368;
        }
       }
       if ((label|0) == 2025) {
        $4955 = ___cxa_find_matching_catch()|0;
        $4956 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4956;$eh$lpad$body$indexZ2D = $4955;
        break L12;
       }
       $2045 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2045>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2045|0),(20008|0),(386|0));
       $2046 = __THREW__; __THREW__ = 0;
       $2047 = $2046&1;
       if ($2047) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i937 = $2036;
      }
     } while(0);
     $2048 = (($$lcssa$i937) + 4|0);
     HEAP8[$2048>>0] = 0;
     HEAP32[$$lcssa$i937>>2] = ((880 + 8|0));
     $2049 = HEAP32[$agg$result>>2]|0;
     $2050 = (($2049) + 536|0);
     HEAP32[$2050>>2] = $$lcssa$i937;
     $2051 = (_malloc(8)|0);
     $2052 = ($2051|0)==(0|0);
     L1378: do {
      if ($2052) {
       while(1) {
        $2053 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2053+0)|0);
        $2054 = ($2053|0)==(0);
        if ($2054) {
         break;
        }
        $2055 = $2053;
        __THREW__ = 0;
        invoke_v($2055|0);
        $2056 = __THREW__; __THREW__ = 0;
        $2057 = $2056&1;
        if ($2057) {
         label = 2024;
         break;
        }
        $2058 = (_malloc(8)|0);
        $2059 = ($2058|0)==(0|0);
        if (!($2059)) {
         $$lcssa$i944 = $2058;
         break L1378;
        }
       }
       if ((label|0) == 2024) {
        $4953 = ___cxa_find_matching_catch()|0;
        $4954 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4954;$eh$lpad$body$indexZ2D = $4953;
        break L12;
       }
       $2060 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2060>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2060|0),(20008|0),(386|0));
       $2061 = __THREW__; __THREW__ = 0;
       $2062 = $2061&1;
       if ($2062) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i944 = $2051;
      }
     } while(0);
     $2063 = (($$lcssa$i944) + 4|0);
     HEAP8[$2063>>0] = 0;
     HEAP32[$$lcssa$i944>>2] = ((880 + 8|0));
     $2064 = HEAP32[$agg$result>>2]|0;
     $2065 = (($2064) + 540|0);
     HEAP32[$2065>>2] = $$lcssa$i944;
     $2066 = (_malloc(8)|0);
     $2067 = ($2066|0)==(0|0);
     L1388: do {
      if ($2067) {
       while(1) {
        $2068 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2068+0)|0);
        $2069 = ($2068|0)==(0);
        if ($2069) {
         break;
        }
        $2070 = $2068;
        __THREW__ = 0;
        invoke_v($2070|0);
        $2071 = __THREW__; __THREW__ = 0;
        $2072 = $2071&1;
        if ($2072) {
         label = 2023;
         break;
        }
        $2073 = (_malloc(8)|0);
        $2074 = ($2073|0)==(0|0);
        if (!($2074)) {
         $$lcssa$i951 = $2073;
         break L1388;
        }
       }
       if ((label|0) == 2023) {
        $4951 = ___cxa_find_matching_catch()|0;
        $4952 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4952;$eh$lpad$body$indexZ2D = $4951;
        break L12;
       }
       $2075 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2075>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2075|0),(20008|0),(386|0));
       $2076 = __THREW__; __THREW__ = 0;
       $2077 = $2076&1;
       if ($2077) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i951 = $2066;
      }
     } while(0);
     $2078 = (($$lcssa$i951) + 4|0);
     HEAP8[$2078>>0] = 0;
     HEAP32[$$lcssa$i951>>2] = ((880 + 8|0));
     $2079 = HEAP32[$agg$result>>2]|0;
     $2080 = (($2079) + 544|0);
     HEAP32[$2080>>2] = $$lcssa$i951;
     $2081 = (_malloc(8)|0);
     $2082 = ($2081|0)==(0|0);
     L1398: do {
      if ($2082) {
       while(1) {
        $2083 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2083+0)|0);
        $2084 = ($2083|0)==(0);
        if ($2084) {
         break;
        }
        $2085 = $2083;
        __THREW__ = 0;
        invoke_v($2085|0);
        $2086 = __THREW__; __THREW__ = 0;
        $2087 = $2086&1;
        if ($2087) {
         label = 2022;
         break;
        }
        $2088 = (_malloc(8)|0);
        $2089 = ($2088|0)==(0|0);
        if (!($2089)) {
         $$lcssa$i958 = $2088;
         break L1398;
        }
       }
       if ((label|0) == 2022) {
        $4949 = ___cxa_find_matching_catch()|0;
        $4950 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4950;$eh$lpad$body$indexZ2D = $4949;
        break L12;
       }
       $2090 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2090>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2090|0),(20008|0),(386|0));
       $2091 = __THREW__; __THREW__ = 0;
       $2092 = $2091&1;
       if ($2092) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i958 = $2081;
      }
     } while(0);
     $2093 = (($$lcssa$i958) + 4|0);
     HEAP8[$2093>>0] = 0;
     HEAP32[$$lcssa$i958>>2] = ((880 + 8|0));
     $2094 = HEAP32[$agg$result>>2]|0;
     $2095 = (($2094) + 548|0);
     HEAP32[$2095>>2] = $$lcssa$i958;
     $2096 = (_malloc(8)|0);
     $2097 = ($2096|0)==(0|0);
     L1408: do {
      if ($2097) {
       while(1) {
        $2098 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2098+0)|0);
        $2099 = ($2098|0)==(0);
        if ($2099) {
         break;
        }
        $2100 = $2098;
        __THREW__ = 0;
        invoke_v($2100|0);
        $2101 = __THREW__; __THREW__ = 0;
        $2102 = $2101&1;
        if ($2102) {
         label = 2021;
         break;
        }
        $2103 = (_malloc(8)|0);
        $2104 = ($2103|0)==(0|0);
        if (!($2104)) {
         $$lcssa$i965 = $2103;
         break L1408;
        }
       }
       if ((label|0) == 2021) {
        $4947 = ___cxa_find_matching_catch()|0;
        $4948 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4948;$eh$lpad$body$indexZ2D = $4947;
        break L12;
       }
       $2105 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2105>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2105|0),(20008|0),(386|0));
       $2106 = __THREW__; __THREW__ = 0;
       $2107 = $2106&1;
       if ($2107) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i965 = $2096;
      }
     } while(0);
     $2108 = (($$lcssa$i965) + 4|0);
     HEAP8[$2108>>0] = 0;
     HEAP32[$$lcssa$i965>>2] = ((880 + 8|0));
     $2109 = HEAP32[$agg$result>>2]|0;
     $2110 = (($2109) + 552|0);
     HEAP32[$2110>>2] = $$lcssa$i965;
     $2111 = (_malloc(8)|0);
     $2112 = ($2111|0)==(0|0);
     L1418: do {
      if ($2112) {
       while(1) {
        $2113 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2113+0)|0);
        $2114 = ($2113|0)==(0);
        if ($2114) {
         break;
        }
        $2115 = $2113;
        __THREW__ = 0;
        invoke_v($2115|0);
        $2116 = __THREW__; __THREW__ = 0;
        $2117 = $2116&1;
        if ($2117) {
         label = 2020;
         break;
        }
        $2118 = (_malloc(8)|0);
        $2119 = ($2118|0)==(0|0);
        if (!($2119)) {
         $$lcssa$i972 = $2118;
         break L1418;
        }
       }
       if ((label|0) == 2020) {
        $4945 = ___cxa_find_matching_catch()|0;
        $4946 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4946;$eh$lpad$body$indexZ2D = $4945;
        break L12;
       }
       $2120 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2120>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2120|0),(20008|0),(386|0));
       $2121 = __THREW__; __THREW__ = 0;
       $2122 = $2121&1;
       if ($2122) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i972 = $2111;
      }
     } while(0);
     $2123 = (($$lcssa$i972) + 4|0);
     HEAP8[$2123>>0] = 0;
     HEAP32[$$lcssa$i972>>2] = ((880 + 8|0));
     $2124 = HEAP32[$agg$result>>2]|0;
     $2125 = (($2124) + 556|0);
     HEAP32[$2125>>2] = $$lcssa$i972;
     $2126 = (_malloc(8)|0);
     $2127 = ($2126|0)==(0|0);
     L1428: do {
      if ($2127) {
       while(1) {
        $2128 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2128+0)|0);
        $2129 = ($2128|0)==(0);
        if ($2129) {
         break;
        }
        $2130 = $2128;
        __THREW__ = 0;
        invoke_v($2130|0);
        $2131 = __THREW__; __THREW__ = 0;
        $2132 = $2131&1;
        if ($2132) {
         label = 2019;
         break;
        }
        $2133 = (_malloc(8)|0);
        $2134 = ($2133|0)==(0|0);
        if (!($2134)) {
         $$lcssa$i979 = $2133;
         break L1428;
        }
       }
       if ((label|0) == 2019) {
        $4943 = ___cxa_find_matching_catch()|0;
        $4944 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4944;$eh$lpad$body$indexZ2D = $4943;
        break L12;
       }
       $2135 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2135>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2135|0),(20008|0),(386|0));
       $2136 = __THREW__; __THREW__ = 0;
       $2137 = $2136&1;
       if ($2137) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i979 = $2126;
      }
     } while(0);
     $2138 = (($$lcssa$i979) + 4|0);
     HEAP8[$2138>>0] = 0;
     HEAP32[$$lcssa$i979>>2] = ((880 + 8|0));
     $2139 = HEAP32[$agg$result>>2]|0;
     $2140 = (($2139) + 560|0);
     HEAP32[$2140>>2] = $$lcssa$i979;
     $2141 = (_malloc(8)|0);
     $2142 = ($2141|0)==(0|0);
     L1438: do {
      if ($2142) {
       while(1) {
        $2143 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2143+0)|0);
        $2144 = ($2143|0)==(0);
        if ($2144) {
         break;
        }
        $2145 = $2143;
        __THREW__ = 0;
        invoke_v($2145|0);
        $2146 = __THREW__; __THREW__ = 0;
        $2147 = $2146&1;
        if ($2147) {
         label = 2018;
         break;
        }
        $2148 = (_malloc(8)|0);
        $2149 = ($2148|0)==(0|0);
        if (!($2149)) {
         $$lcssa$i986 = $2148;
         break L1438;
        }
       }
       if ((label|0) == 2018) {
        $4941 = ___cxa_find_matching_catch()|0;
        $4942 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4942;$eh$lpad$body$indexZ2D = $4941;
        break L12;
       }
       $2150 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2150>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2150|0),(20008|0),(386|0));
       $2151 = __THREW__; __THREW__ = 0;
       $2152 = $2151&1;
       if ($2152) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i986 = $2141;
      }
     } while(0);
     $2153 = (($$lcssa$i986) + 4|0);
     HEAP8[$2153>>0] = 0;
     HEAP32[$$lcssa$i986>>2] = ((880 + 8|0));
     $2154 = HEAP32[$agg$result>>2]|0;
     $2155 = (($2154) + 564|0);
     HEAP32[$2155>>2] = $$lcssa$i986;
     $2156 = (_malloc(8)|0);
     $2157 = ($2156|0)==(0|0);
     L1448: do {
      if ($2157) {
       while(1) {
        $2158 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2158+0)|0);
        $2159 = ($2158|0)==(0);
        if ($2159) {
         break;
        }
        $2160 = $2158;
        __THREW__ = 0;
        invoke_v($2160|0);
        $2161 = __THREW__; __THREW__ = 0;
        $2162 = $2161&1;
        if ($2162) {
         label = 2017;
         break;
        }
        $2163 = (_malloc(8)|0);
        $2164 = ($2163|0)==(0|0);
        if (!($2164)) {
         $$lcssa$i993 = $2163;
         break L1448;
        }
       }
       if ((label|0) == 2017) {
        $4939 = ___cxa_find_matching_catch()|0;
        $4940 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4940;$eh$lpad$body$indexZ2D = $4939;
        break L12;
       }
       $2165 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2165>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2165|0),(20008|0),(386|0));
       $2166 = __THREW__; __THREW__ = 0;
       $2167 = $2166&1;
       if ($2167) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i993 = $2156;
      }
     } while(0);
     $2168 = (($$lcssa$i993) + 4|0);
     HEAP8[$2168>>0] = 0;
     HEAP32[$$lcssa$i993>>2] = ((880 + 8|0));
     $2169 = HEAP32[$agg$result>>2]|0;
     $2170 = (($2169) + 568|0);
     HEAP32[$2170>>2] = $$lcssa$i993;
     $2171 = (_malloc(8)|0);
     $2172 = ($2171|0)==(0|0);
     L1458: do {
      if ($2172) {
       while(1) {
        $2173 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2173+0)|0);
        $2174 = ($2173|0)==(0);
        if ($2174) {
         break;
        }
        $2175 = $2173;
        __THREW__ = 0;
        invoke_v($2175|0);
        $2176 = __THREW__; __THREW__ = 0;
        $2177 = $2176&1;
        if ($2177) {
         label = 2016;
         break;
        }
        $2178 = (_malloc(8)|0);
        $2179 = ($2178|0)==(0|0);
        if (!($2179)) {
         $$lcssa$i1000 = $2178;
         break L1458;
        }
       }
       if ((label|0) == 2016) {
        $4937 = ___cxa_find_matching_catch()|0;
        $4938 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4938;$eh$lpad$body$indexZ2D = $4937;
        break L12;
       }
       $2180 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2180>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2180|0),(20008|0),(386|0));
       $2181 = __THREW__; __THREW__ = 0;
       $2182 = $2181&1;
       if ($2182) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1000 = $2171;
      }
     } while(0);
     $2183 = (($$lcssa$i1000) + 4|0);
     HEAP8[$2183>>0] = 0;
     HEAP32[$$lcssa$i1000>>2] = ((880 + 8|0));
     $2184 = HEAP32[$agg$result>>2]|0;
     $2185 = (($2184) + 572|0);
     HEAP32[$2185>>2] = $$lcssa$i1000;
     $2186 = (_malloc(8)|0);
     $2187 = ($2186|0)==(0|0);
     L1468: do {
      if ($2187) {
       while(1) {
        $2188 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2188+0)|0);
        $2189 = ($2188|0)==(0);
        if ($2189) {
         break;
        }
        $2190 = $2188;
        __THREW__ = 0;
        invoke_v($2190|0);
        $2191 = __THREW__; __THREW__ = 0;
        $2192 = $2191&1;
        if ($2192) {
         label = 2015;
         break;
        }
        $2193 = (_malloc(8)|0);
        $2194 = ($2193|0)==(0|0);
        if (!($2194)) {
         $$lcssa$i1007 = $2193;
         break L1468;
        }
       }
       if ((label|0) == 2015) {
        $4935 = ___cxa_find_matching_catch()|0;
        $4936 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4936;$eh$lpad$body$indexZ2D = $4935;
        break L12;
       }
       $2195 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2195>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2195|0),(20008|0),(386|0));
       $2196 = __THREW__; __THREW__ = 0;
       $2197 = $2196&1;
       if ($2197) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1007 = $2186;
      }
     } while(0);
     $2198 = (($$lcssa$i1007) + 4|0);
     HEAP8[$2198>>0] = 0;
     HEAP32[$$lcssa$i1007>>2] = ((880 + 8|0));
     $2199 = HEAP32[$agg$result>>2]|0;
     $2200 = (($2199) + 576|0);
     HEAP32[$2200>>2] = $$lcssa$i1007;
     $2201 = (_malloc(8)|0);
     $2202 = ($2201|0)==(0|0);
     L1478: do {
      if ($2202) {
       while(1) {
        $2203 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2203+0)|0);
        $2204 = ($2203|0)==(0);
        if ($2204) {
         break;
        }
        $2205 = $2203;
        __THREW__ = 0;
        invoke_v($2205|0);
        $2206 = __THREW__; __THREW__ = 0;
        $2207 = $2206&1;
        if ($2207) {
         label = 2014;
         break;
        }
        $2208 = (_malloc(8)|0);
        $2209 = ($2208|0)==(0|0);
        if (!($2209)) {
         $$lcssa$i1014 = $2208;
         break L1478;
        }
       }
       if ((label|0) == 2014) {
        $4933 = ___cxa_find_matching_catch()|0;
        $4934 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4934;$eh$lpad$body$indexZ2D = $4933;
        break L12;
       }
       $2210 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2210>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2210|0),(20008|0),(386|0));
       $2211 = __THREW__; __THREW__ = 0;
       $2212 = $2211&1;
       if ($2212) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1014 = $2201;
      }
     } while(0);
     $2213 = (($$lcssa$i1014) + 4|0);
     HEAP8[$2213>>0] = 0;
     HEAP32[$$lcssa$i1014>>2] = ((880 + 8|0));
     $2214 = HEAP32[$agg$result>>2]|0;
     $2215 = (($2214) + 580|0);
     HEAP32[$2215>>2] = $$lcssa$i1014;
     $2216 = (_malloc(8)|0);
     $2217 = ($2216|0)==(0|0);
     L1488: do {
      if ($2217) {
       while(1) {
        $2218 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2218+0)|0);
        $2219 = ($2218|0)==(0);
        if ($2219) {
         break;
        }
        $2220 = $2218;
        __THREW__ = 0;
        invoke_v($2220|0);
        $2221 = __THREW__; __THREW__ = 0;
        $2222 = $2221&1;
        if ($2222) {
         label = 2013;
         break;
        }
        $2223 = (_malloc(8)|0);
        $2224 = ($2223|0)==(0|0);
        if (!($2224)) {
         $$lcssa$i1021 = $2223;
         break L1488;
        }
       }
       if ((label|0) == 2013) {
        $4931 = ___cxa_find_matching_catch()|0;
        $4932 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4932;$eh$lpad$body$indexZ2D = $4931;
        break L12;
       }
       $2225 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2225>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2225|0),(20008|0),(386|0));
       $2226 = __THREW__; __THREW__ = 0;
       $2227 = $2226&1;
       if ($2227) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1021 = $2216;
      }
     } while(0);
     $2228 = (($$lcssa$i1021) + 4|0);
     HEAP8[$2228>>0] = 0;
     HEAP32[$$lcssa$i1021>>2] = ((880 + 8|0));
     $2229 = HEAP32[$agg$result>>2]|0;
     $2230 = (($2229) + 584|0);
     HEAP32[$2230>>2] = $$lcssa$i1021;
     $2231 = (_malloc(8)|0);
     $2232 = ($2231|0)==(0|0);
     L1498: do {
      if ($2232) {
       while(1) {
        $2233 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2233+0)|0);
        $2234 = ($2233|0)==(0);
        if ($2234) {
         break;
        }
        $2235 = $2233;
        __THREW__ = 0;
        invoke_v($2235|0);
        $2236 = __THREW__; __THREW__ = 0;
        $2237 = $2236&1;
        if ($2237) {
         label = 2012;
         break;
        }
        $2238 = (_malloc(8)|0);
        $2239 = ($2238|0)==(0|0);
        if (!($2239)) {
         $$lcssa$i1028 = $2238;
         break L1498;
        }
       }
       if ((label|0) == 2012) {
        $4929 = ___cxa_find_matching_catch()|0;
        $4930 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4930;$eh$lpad$body$indexZ2D = $4929;
        break L12;
       }
       $2240 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2240>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2240|0),(20008|0),(386|0));
       $2241 = __THREW__; __THREW__ = 0;
       $2242 = $2241&1;
       if ($2242) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1028 = $2231;
      }
     } while(0);
     $2243 = (($$lcssa$i1028) + 4|0);
     HEAP8[$2243>>0] = 0;
     HEAP32[$$lcssa$i1028>>2] = ((880 + 8|0));
     $2244 = HEAP32[$agg$result>>2]|0;
     $2245 = (($2244) + 588|0);
     HEAP32[$2245>>2] = $$lcssa$i1028;
     $2246 = (_malloc(8)|0);
     $2247 = ($2246|0)==(0|0);
     L1508: do {
      if ($2247) {
       while(1) {
        $2248 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2248+0)|0);
        $2249 = ($2248|0)==(0);
        if ($2249) {
         break;
        }
        $2250 = $2248;
        __THREW__ = 0;
        invoke_v($2250|0);
        $2251 = __THREW__; __THREW__ = 0;
        $2252 = $2251&1;
        if ($2252) {
         label = 2011;
         break;
        }
        $2253 = (_malloc(8)|0);
        $2254 = ($2253|0)==(0|0);
        if (!($2254)) {
         $$lcssa$i1035 = $2253;
         break L1508;
        }
       }
       if ((label|0) == 2011) {
        $4927 = ___cxa_find_matching_catch()|0;
        $4928 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4928;$eh$lpad$body$indexZ2D = $4927;
        break L12;
       }
       $2255 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2255>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2255|0),(20008|0),(386|0));
       $2256 = __THREW__; __THREW__ = 0;
       $2257 = $2256&1;
       if ($2257) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1035 = $2246;
      }
     } while(0);
     $2258 = (($$lcssa$i1035) + 4|0);
     HEAP8[$2258>>0] = 0;
     HEAP32[$$lcssa$i1035>>2] = ((880 + 8|0));
     $2259 = HEAP32[$agg$result>>2]|0;
     $2260 = (($2259) + 592|0);
     HEAP32[$2260>>2] = $$lcssa$i1035;
     $2261 = (_malloc(8)|0);
     $2262 = ($2261|0)==(0|0);
     L1518: do {
      if ($2262) {
       while(1) {
        $2263 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2263+0)|0);
        $2264 = ($2263|0)==(0);
        if ($2264) {
         break;
        }
        $2265 = $2263;
        __THREW__ = 0;
        invoke_v($2265|0);
        $2266 = __THREW__; __THREW__ = 0;
        $2267 = $2266&1;
        if ($2267) {
         label = 2010;
         break;
        }
        $2268 = (_malloc(8)|0);
        $2269 = ($2268|0)==(0|0);
        if (!($2269)) {
         $$lcssa$i1042 = $2268;
         break L1518;
        }
       }
       if ((label|0) == 2010) {
        $4925 = ___cxa_find_matching_catch()|0;
        $4926 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4926;$eh$lpad$body$indexZ2D = $4925;
        break L12;
       }
       $2270 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2270>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2270|0),(20008|0),(386|0));
       $2271 = __THREW__; __THREW__ = 0;
       $2272 = $2271&1;
       if ($2272) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1042 = $2261;
      }
     } while(0);
     $2273 = (($$lcssa$i1042) + 4|0);
     HEAP8[$2273>>0] = 0;
     HEAP32[$$lcssa$i1042>>2] = ((880 + 8|0));
     $2274 = HEAP32[$agg$result>>2]|0;
     $2275 = (($2274) + 596|0);
     HEAP32[$2275>>2] = $$lcssa$i1042;
     $2276 = (_malloc(8)|0);
     $2277 = ($2276|0)==(0|0);
     L1528: do {
      if ($2277) {
       while(1) {
        $2278 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2278+0)|0);
        $2279 = ($2278|0)==(0);
        if ($2279) {
         break;
        }
        $2280 = $2278;
        __THREW__ = 0;
        invoke_v($2280|0);
        $2281 = __THREW__; __THREW__ = 0;
        $2282 = $2281&1;
        if ($2282) {
         label = 2009;
         break;
        }
        $2283 = (_malloc(8)|0);
        $2284 = ($2283|0)==(0|0);
        if (!($2284)) {
         $$lcssa$i1049 = $2283;
         break L1528;
        }
       }
       if ((label|0) == 2009) {
        $4923 = ___cxa_find_matching_catch()|0;
        $4924 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4924;$eh$lpad$body$indexZ2D = $4923;
        break L12;
       }
       $2285 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2285>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2285|0),(20008|0),(386|0));
       $2286 = __THREW__; __THREW__ = 0;
       $2287 = $2286&1;
       if ($2287) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1049 = $2276;
      }
     } while(0);
     $2288 = (($$lcssa$i1049) + 4|0);
     HEAP8[$2288>>0] = 0;
     HEAP32[$$lcssa$i1049>>2] = ((880 + 8|0));
     $2289 = HEAP32[$agg$result>>2]|0;
     $2290 = (($2289) + 600|0);
     HEAP32[$2290>>2] = $$lcssa$i1049;
     $2291 = (_malloc(8)|0);
     $2292 = ($2291|0)==(0|0);
     L1538: do {
      if ($2292) {
       while(1) {
        $2293 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2293+0)|0);
        $2294 = ($2293|0)==(0);
        if ($2294) {
         break;
        }
        $2295 = $2293;
        __THREW__ = 0;
        invoke_v($2295|0);
        $2296 = __THREW__; __THREW__ = 0;
        $2297 = $2296&1;
        if ($2297) {
         label = 2008;
         break;
        }
        $2298 = (_malloc(8)|0);
        $2299 = ($2298|0)==(0|0);
        if (!($2299)) {
         $$lcssa$i1056 = $2298;
         break L1538;
        }
       }
       if ((label|0) == 2008) {
        $4921 = ___cxa_find_matching_catch()|0;
        $4922 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4922;$eh$lpad$body$indexZ2D = $4921;
        break L12;
       }
       $2300 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2300>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2300|0),(20008|0),(386|0));
       $2301 = __THREW__; __THREW__ = 0;
       $2302 = $2301&1;
       if ($2302) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1056 = $2291;
      }
     } while(0);
     $2303 = (($$lcssa$i1056) + 4|0);
     HEAP8[$2303>>0] = 0;
     HEAP32[$$lcssa$i1056>>2] = ((880 + 8|0));
     $2304 = HEAP32[$agg$result>>2]|0;
     $2305 = (($2304) + 604|0);
     HEAP32[$2305>>2] = $$lcssa$i1056;
     $2306 = (_malloc(8)|0);
     $2307 = ($2306|0)==(0|0);
     L1548: do {
      if ($2307) {
       while(1) {
        $2308 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2308+0)|0);
        $2309 = ($2308|0)==(0);
        if ($2309) {
         break;
        }
        $2310 = $2308;
        __THREW__ = 0;
        invoke_v($2310|0);
        $2311 = __THREW__; __THREW__ = 0;
        $2312 = $2311&1;
        if ($2312) {
         label = 2007;
         break;
        }
        $2313 = (_malloc(8)|0);
        $2314 = ($2313|0)==(0|0);
        if (!($2314)) {
         $$lcssa$i1063 = $2313;
         break L1548;
        }
       }
       if ((label|0) == 2007) {
        $4919 = ___cxa_find_matching_catch()|0;
        $4920 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4920;$eh$lpad$body$indexZ2D = $4919;
        break L12;
       }
       $2315 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2315>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2315|0),(20008|0),(386|0));
       $2316 = __THREW__; __THREW__ = 0;
       $2317 = $2316&1;
       if ($2317) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1063 = $2306;
      }
     } while(0);
     $2318 = (($$lcssa$i1063) + 4|0);
     HEAP8[$2318>>0] = 0;
     HEAP32[$$lcssa$i1063>>2] = ((880 + 8|0));
     $2319 = HEAP32[$agg$result>>2]|0;
     $2320 = (($2319) + 608|0);
     HEAP32[$2320>>2] = $$lcssa$i1063;
     $2321 = (_malloc(8)|0);
     $2322 = ($2321|0)==(0|0);
     L1558: do {
      if ($2322) {
       while(1) {
        $2323 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2323+0)|0);
        $2324 = ($2323|0)==(0);
        if ($2324) {
         break;
        }
        $2325 = $2323;
        __THREW__ = 0;
        invoke_v($2325|0);
        $2326 = __THREW__; __THREW__ = 0;
        $2327 = $2326&1;
        if ($2327) {
         label = 2006;
         break;
        }
        $2328 = (_malloc(8)|0);
        $2329 = ($2328|0)==(0|0);
        if (!($2329)) {
         $$lcssa$i1070 = $2328;
         break L1558;
        }
       }
       if ((label|0) == 2006) {
        $4917 = ___cxa_find_matching_catch()|0;
        $4918 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4918;$eh$lpad$body$indexZ2D = $4917;
        break L12;
       }
       $2330 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2330>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2330|0),(20008|0),(386|0));
       $2331 = __THREW__; __THREW__ = 0;
       $2332 = $2331&1;
       if ($2332) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1070 = $2321;
      }
     } while(0);
     $2333 = (($$lcssa$i1070) + 4|0);
     HEAP8[$2333>>0] = 0;
     HEAP32[$$lcssa$i1070>>2] = ((880 + 8|0));
     $2334 = HEAP32[$agg$result>>2]|0;
     $2335 = (($2334) + 612|0);
     HEAP32[$2335>>2] = $$lcssa$i1070;
     $2336 = (_malloc(8)|0);
     $2337 = ($2336|0)==(0|0);
     L1568: do {
      if ($2337) {
       while(1) {
        $2338 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2338+0)|0);
        $2339 = ($2338|0)==(0);
        if ($2339) {
         break;
        }
        $2340 = $2338;
        __THREW__ = 0;
        invoke_v($2340|0);
        $2341 = __THREW__; __THREW__ = 0;
        $2342 = $2341&1;
        if ($2342) {
         label = 2005;
         break;
        }
        $2343 = (_malloc(8)|0);
        $2344 = ($2343|0)==(0|0);
        if (!($2344)) {
         $$lcssa$i1077 = $2343;
         break L1568;
        }
       }
       if ((label|0) == 2005) {
        $4915 = ___cxa_find_matching_catch()|0;
        $4916 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4916;$eh$lpad$body$indexZ2D = $4915;
        break L12;
       }
       $2345 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2345>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2345|0),(20008|0),(386|0));
       $2346 = __THREW__; __THREW__ = 0;
       $2347 = $2346&1;
       if ($2347) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1077 = $2336;
      }
     } while(0);
     $2348 = (($$lcssa$i1077) + 4|0);
     HEAP8[$2348>>0] = 0;
     HEAP32[$$lcssa$i1077>>2] = ((880 + 8|0));
     $2349 = HEAP32[$agg$result>>2]|0;
     $2350 = (($2349) + 616|0);
     HEAP32[$2350>>2] = $$lcssa$i1077;
     $2351 = (_malloc(8)|0);
     $2352 = ($2351|0)==(0|0);
     L1578: do {
      if ($2352) {
       while(1) {
        $2353 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2353+0)|0);
        $2354 = ($2353|0)==(0);
        if ($2354) {
         break;
        }
        $2355 = $2353;
        __THREW__ = 0;
        invoke_v($2355|0);
        $2356 = __THREW__; __THREW__ = 0;
        $2357 = $2356&1;
        if ($2357) {
         label = 2004;
         break;
        }
        $2358 = (_malloc(8)|0);
        $2359 = ($2358|0)==(0|0);
        if (!($2359)) {
         $$lcssa$i1084 = $2358;
         break L1578;
        }
       }
       if ((label|0) == 2004) {
        $4913 = ___cxa_find_matching_catch()|0;
        $4914 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4914;$eh$lpad$body$indexZ2D = $4913;
        break L12;
       }
       $2360 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2360>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2360|0),(20008|0),(386|0));
       $2361 = __THREW__; __THREW__ = 0;
       $2362 = $2361&1;
       if ($2362) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1084 = $2351;
      }
     } while(0);
     $2363 = (($$lcssa$i1084) + 4|0);
     HEAP8[$2363>>0] = 0;
     HEAP32[$$lcssa$i1084>>2] = ((880 + 8|0));
     $2364 = HEAP32[$agg$result>>2]|0;
     $2365 = (($2364) + 620|0);
     HEAP32[$2365>>2] = $$lcssa$i1084;
     $2366 = (_malloc(8)|0);
     $2367 = ($2366|0)==(0|0);
     L1588: do {
      if ($2367) {
       while(1) {
        $2368 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2368+0)|0);
        $2369 = ($2368|0)==(0);
        if ($2369) {
         break;
        }
        $2370 = $2368;
        __THREW__ = 0;
        invoke_v($2370|0);
        $2371 = __THREW__; __THREW__ = 0;
        $2372 = $2371&1;
        if ($2372) {
         label = 2003;
         break;
        }
        $2373 = (_malloc(8)|0);
        $2374 = ($2373|0)==(0|0);
        if (!($2374)) {
         $$lcssa$i1091 = $2373;
         break L1588;
        }
       }
       if ((label|0) == 2003) {
        $4911 = ___cxa_find_matching_catch()|0;
        $4912 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4912;$eh$lpad$body$indexZ2D = $4911;
        break L12;
       }
       $2375 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2375>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2375|0),(20008|0),(386|0));
       $2376 = __THREW__; __THREW__ = 0;
       $2377 = $2376&1;
       if ($2377) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1091 = $2366;
      }
     } while(0);
     $2378 = (($$lcssa$i1091) + 4|0);
     HEAP8[$2378>>0] = 0;
     HEAP32[$$lcssa$i1091>>2] = ((880 + 8|0));
     $2379 = HEAP32[$agg$result>>2]|0;
     $2380 = (($2379) + 624|0);
     HEAP32[$2380>>2] = $$lcssa$i1091;
     $2381 = (_malloc(8)|0);
     $2382 = ($2381|0)==(0|0);
     L1598: do {
      if ($2382) {
       while(1) {
        $2383 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2383+0)|0);
        $2384 = ($2383|0)==(0);
        if ($2384) {
         break;
        }
        $2385 = $2383;
        __THREW__ = 0;
        invoke_v($2385|0);
        $2386 = __THREW__; __THREW__ = 0;
        $2387 = $2386&1;
        if ($2387) {
         label = 2002;
         break;
        }
        $2388 = (_malloc(8)|0);
        $2389 = ($2388|0)==(0|0);
        if (!($2389)) {
         $$lcssa$i1098 = $2388;
         break L1598;
        }
       }
       if ((label|0) == 2002) {
        $4909 = ___cxa_find_matching_catch()|0;
        $4910 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4910;$eh$lpad$body$indexZ2D = $4909;
        break L12;
       }
       $2390 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2390>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2390|0),(20008|0),(386|0));
       $2391 = __THREW__; __THREW__ = 0;
       $2392 = $2391&1;
       if ($2392) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1098 = $2381;
      }
     } while(0);
     $2393 = (($$lcssa$i1098) + 4|0);
     HEAP8[$2393>>0] = 0;
     HEAP32[$$lcssa$i1098>>2] = ((880 + 8|0));
     $2394 = HEAP32[$agg$result>>2]|0;
     $2395 = (($2394) + 628|0);
     HEAP32[$2395>>2] = $$lcssa$i1098;
     $2396 = (_malloc(8)|0);
     $2397 = ($2396|0)==(0|0);
     L1608: do {
      if ($2397) {
       while(1) {
        $2398 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2398+0)|0);
        $2399 = ($2398|0)==(0);
        if ($2399) {
         break;
        }
        $2400 = $2398;
        __THREW__ = 0;
        invoke_v($2400|0);
        $2401 = __THREW__; __THREW__ = 0;
        $2402 = $2401&1;
        if ($2402) {
         label = 2001;
         break;
        }
        $2403 = (_malloc(8)|0);
        $2404 = ($2403|0)==(0|0);
        if (!($2404)) {
         $$lcssa$i1105 = $2403;
         break L1608;
        }
       }
       if ((label|0) == 2001) {
        $4907 = ___cxa_find_matching_catch()|0;
        $4908 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4908;$eh$lpad$body$indexZ2D = $4907;
        break L12;
       }
       $2405 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2405>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2405|0),(20008|0),(386|0));
       $2406 = __THREW__; __THREW__ = 0;
       $2407 = $2406&1;
       if ($2407) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1105 = $2396;
      }
     } while(0);
     $2408 = (($$lcssa$i1105) + 4|0);
     HEAP8[$2408>>0] = 0;
     HEAP32[$$lcssa$i1105>>2] = ((880 + 8|0));
     $2409 = HEAP32[$agg$result>>2]|0;
     $2410 = (($2409) + 632|0);
     HEAP32[$2410>>2] = $$lcssa$i1105;
     $2411 = (_malloc(8)|0);
     $2412 = ($2411|0)==(0|0);
     L1618: do {
      if ($2412) {
       while(1) {
        $2413 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2413+0)|0);
        $2414 = ($2413|0)==(0);
        if ($2414) {
         break;
        }
        $2415 = $2413;
        __THREW__ = 0;
        invoke_v($2415|0);
        $2416 = __THREW__; __THREW__ = 0;
        $2417 = $2416&1;
        if ($2417) {
         label = 2000;
         break;
        }
        $2418 = (_malloc(8)|0);
        $2419 = ($2418|0)==(0|0);
        if (!($2419)) {
         $$lcssa$i1112 = $2418;
         break L1618;
        }
       }
       if ((label|0) == 2000) {
        $4905 = ___cxa_find_matching_catch()|0;
        $4906 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4906;$eh$lpad$body$indexZ2D = $4905;
        break L12;
       }
       $2420 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2420>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2420|0),(20008|0),(386|0));
       $2421 = __THREW__; __THREW__ = 0;
       $2422 = $2421&1;
       if ($2422) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1112 = $2411;
      }
     } while(0);
     $2423 = (($$lcssa$i1112) + 4|0);
     HEAP8[$2423>>0] = 0;
     HEAP32[$$lcssa$i1112>>2] = ((880 + 8|0));
     $2424 = HEAP32[$agg$result>>2]|0;
     $2425 = (($2424) + 636|0);
     HEAP32[$2425>>2] = $$lcssa$i1112;
     $2426 = (_malloc(8)|0);
     $2427 = ($2426|0)==(0|0);
     L1628: do {
      if ($2427) {
       while(1) {
        $2428 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2428+0)|0);
        $2429 = ($2428|0)==(0);
        if ($2429) {
         break;
        }
        $2430 = $2428;
        __THREW__ = 0;
        invoke_v($2430|0);
        $2431 = __THREW__; __THREW__ = 0;
        $2432 = $2431&1;
        if ($2432) {
         label = 1999;
         break;
        }
        $2433 = (_malloc(8)|0);
        $2434 = ($2433|0)==(0|0);
        if (!($2434)) {
         $$lcssa$i1119 = $2433;
         break L1628;
        }
       }
       if ((label|0) == 1999) {
        $4903 = ___cxa_find_matching_catch()|0;
        $4904 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4904;$eh$lpad$body$indexZ2D = $4903;
        break L12;
       }
       $2435 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2435>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2435|0),(20008|0),(386|0));
       $2436 = __THREW__; __THREW__ = 0;
       $2437 = $2436&1;
       if ($2437) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1119 = $2426;
      }
     } while(0);
     $2438 = (($$lcssa$i1119) + 4|0);
     HEAP8[$2438>>0] = 0;
     HEAP32[$$lcssa$i1119>>2] = ((880 + 8|0));
     $2439 = HEAP32[$agg$result>>2]|0;
     $2440 = (($2439) + 640|0);
     HEAP32[$2440>>2] = $$lcssa$i1119;
     $2441 = (_malloc(8)|0);
     $2442 = ($2441|0)==(0|0);
     L1638: do {
      if ($2442) {
       while(1) {
        $2443 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2443+0)|0);
        $2444 = ($2443|0)==(0);
        if ($2444) {
         break;
        }
        $2445 = $2443;
        __THREW__ = 0;
        invoke_v($2445|0);
        $2446 = __THREW__; __THREW__ = 0;
        $2447 = $2446&1;
        if ($2447) {
         label = 1998;
         break;
        }
        $2448 = (_malloc(8)|0);
        $2449 = ($2448|0)==(0|0);
        if (!($2449)) {
         $$lcssa$i1126 = $2448;
         break L1638;
        }
       }
       if ((label|0) == 1998) {
        $4901 = ___cxa_find_matching_catch()|0;
        $4902 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4902;$eh$lpad$body$indexZ2D = $4901;
        break L12;
       }
       $2450 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2450>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2450|0),(20008|0),(386|0));
       $2451 = __THREW__; __THREW__ = 0;
       $2452 = $2451&1;
       if ($2452) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1126 = $2441;
      }
     } while(0);
     $2453 = (($$lcssa$i1126) + 4|0);
     HEAP8[$2453>>0] = 0;
     HEAP32[$$lcssa$i1126>>2] = ((880 + 8|0));
     $2454 = HEAP32[$agg$result>>2]|0;
     $2455 = (($2454) + 644|0);
     HEAP32[$2455>>2] = $$lcssa$i1126;
     $2456 = (_malloc(8)|0);
     $2457 = ($2456|0)==(0|0);
     L1648: do {
      if ($2457) {
       while(1) {
        $2458 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2458+0)|0);
        $2459 = ($2458|0)==(0);
        if ($2459) {
         break;
        }
        $2460 = $2458;
        __THREW__ = 0;
        invoke_v($2460|0);
        $2461 = __THREW__; __THREW__ = 0;
        $2462 = $2461&1;
        if ($2462) {
         label = 1997;
         break;
        }
        $2463 = (_malloc(8)|0);
        $2464 = ($2463|0)==(0|0);
        if (!($2464)) {
         $$lcssa$i1133 = $2463;
         break L1648;
        }
       }
       if ((label|0) == 1997) {
        $4899 = ___cxa_find_matching_catch()|0;
        $4900 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4900;$eh$lpad$body$indexZ2D = $4899;
        break L12;
       }
       $2465 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2465>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2465|0),(20008|0),(386|0));
       $2466 = __THREW__; __THREW__ = 0;
       $2467 = $2466&1;
       if ($2467) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1133 = $2456;
      }
     } while(0);
     $2468 = (($$lcssa$i1133) + 4|0);
     HEAP8[$2468>>0] = 0;
     HEAP32[$$lcssa$i1133>>2] = ((880 + 8|0));
     $2469 = HEAP32[$agg$result>>2]|0;
     $2470 = (($2469) + 648|0);
     HEAP32[$2470>>2] = $$lcssa$i1133;
     $2471 = (_malloc(8)|0);
     $2472 = ($2471|0)==(0|0);
     L1658: do {
      if ($2472) {
       while(1) {
        $2473 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2473+0)|0);
        $2474 = ($2473|0)==(0);
        if ($2474) {
         break;
        }
        $2475 = $2473;
        __THREW__ = 0;
        invoke_v($2475|0);
        $2476 = __THREW__; __THREW__ = 0;
        $2477 = $2476&1;
        if ($2477) {
         label = 1996;
         break;
        }
        $2478 = (_malloc(8)|0);
        $2479 = ($2478|0)==(0|0);
        if (!($2479)) {
         $$lcssa$i1140 = $2478;
         break L1658;
        }
       }
       if ((label|0) == 1996) {
        $4897 = ___cxa_find_matching_catch()|0;
        $4898 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4898;$eh$lpad$body$indexZ2D = $4897;
        break L12;
       }
       $2480 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2480>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2480|0),(20008|0),(386|0));
       $2481 = __THREW__; __THREW__ = 0;
       $2482 = $2481&1;
       if ($2482) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1140 = $2471;
      }
     } while(0);
     $2483 = (($$lcssa$i1140) + 4|0);
     HEAP8[$2483>>0] = 0;
     HEAP32[$$lcssa$i1140>>2] = ((880 + 8|0));
     $2484 = HEAP32[$agg$result>>2]|0;
     $2485 = (($2484) + 652|0);
     HEAP32[$2485>>2] = $$lcssa$i1140;
     $2486 = (_malloc(8)|0);
     $2487 = ($2486|0)==(0|0);
     L1668: do {
      if ($2487) {
       while(1) {
        $2488 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2488+0)|0);
        $2489 = ($2488|0)==(0);
        if ($2489) {
         break;
        }
        $2490 = $2488;
        __THREW__ = 0;
        invoke_v($2490|0);
        $2491 = __THREW__; __THREW__ = 0;
        $2492 = $2491&1;
        if ($2492) {
         label = 1995;
         break;
        }
        $2493 = (_malloc(8)|0);
        $2494 = ($2493|0)==(0|0);
        if (!($2494)) {
         $$lcssa$i1147 = $2493;
         break L1668;
        }
       }
       if ((label|0) == 1995) {
        $4895 = ___cxa_find_matching_catch()|0;
        $4896 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4896;$eh$lpad$body$indexZ2D = $4895;
        break L12;
       }
       $2495 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2495>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2495|0),(20008|0),(386|0));
       $2496 = __THREW__; __THREW__ = 0;
       $2497 = $2496&1;
       if ($2497) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1147 = $2486;
      }
     } while(0);
     $2498 = (($$lcssa$i1147) + 4|0);
     HEAP8[$2498>>0] = 0;
     HEAP32[$$lcssa$i1147>>2] = ((880 + 8|0));
     $2499 = HEAP32[$agg$result>>2]|0;
     $2500 = (($2499) + 656|0);
     HEAP32[$2500>>2] = $$lcssa$i1147;
     $2501 = (_malloc(8)|0);
     $2502 = ($2501|0)==(0|0);
     L1678: do {
      if ($2502) {
       while(1) {
        $2503 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2503+0)|0);
        $2504 = ($2503|0)==(0);
        if ($2504) {
         break;
        }
        $2505 = $2503;
        __THREW__ = 0;
        invoke_v($2505|0);
        $2506 = __THREW__; __THREW__ = 0;
        $2507 = $2506&1;
        if ($2507) {
         label = 1994;
         break;
        }
        $2508 = (_malloc(8)|0);
        $2509 = ($2508|0)==(0|0);
        if (!($2509)) {
         $$lcssa$i1154 = $2508;
         break L1678;
        }
       }
       if ((label|0) == 1994) {
        $4893 = ___cxa_find_matching_catch()|0;
        $4894 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4894;$eh$lpad$body$indexZ2D = $4893;
        break L12;
       }
       $2510 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2510>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2510|0),(20008|0),(386|0));
       $2511 = __THREW__; __THREW__ = 0;
       $2512 = $2511&1;
       if ($2512) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1154 = $2501;
      }
     } while(0);
     $2513 = (($$lcssa$i1154) + 4|0);
     HEAP8[$2513>>0] = 0;
     HEAP32[$$lcssa$i1154>>2] = ((880 + 8|0));
     $2514 = HEAP32[$agg$result>>2]|0;
     $2515 = (($2514) + 660|0);
     HEAP32[$2515>>2] = $$lcssa$i1154;
     $2516 = (_malloc(8)|0);
     $2517 = ($2516|0)==(0|0);
     L1688: do {
      if ($2517) {
       while(1) {
        $2518 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2518+0)|0);
        $2519 = ($2518|0)==(0);
        if ($2519) {
         break;
        }
        $2520 = $2518;
        __THREW__ = 0;
        invoke_v($2520|0);
        $2521 = __THREW__; __THREW__ = 0;
        $2522 = $2521&1;
        if ($2522) {
         label = 1993;
         break;
        }
        $2523 = (_malloc(8)|0);
        $2524 = ($2523|0)==(0|0);
        if (!($2524)) {
         $$lcssa$i1161 = $2523;
         break L1688;
        }
       }
       if ((label|0) == 1993) {
        $4891 = ___cxa_find_matching_catch()|0;
        $4892 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4892;$eh$lpad$body$indexZ2D = $4891;
        break L12;
       }
       $2525 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2525>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2525|0),(20008|0),(386|0));
       $2526 = __THREW__; __THREW__ = 0;
       $2527 = $2526&1;
       if ($2527) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1161 = $2516;
      }
     } while(0);
     $2528 = (($$lcssa$i1161) + 4|0);
     HEAP8[$2528>>0] = 0;
     HEAP32[$$lcssa$i1161>>2] = ((880 + 8|0));
     $2529 = HEAP32[$agg$result>>2]|0;
     $2530 = (($2529) + 664|0);
     HEAP32[$2530>>2] = $$lcssa$i1161;
     $2531 = (_malloc(8)|0);
     $2532 = ($2531|0)==(0|0);
     L1698: do {
      if ($2532) {
       while(1) {
        $2533 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2533+0)|0);
        $2534 = ($2533|0)==(0);
        if ($2534) {
         break;
        }
        $2535 = $2533;
        __THREW__ = 0;
        invoke_v($2535|0);
        $2536 = __THREW__; __THREW__ = 0;
        $2537 = $2536&1;
        if ($2537) {
         label = 1992;
         break;
        }
        $2538 = (_malloc(8)|0);
        $2539 = ($2538|0)==(0|0);
        if (!($2539)) {
         $$lcssa$i1168 = $2538;
         break L1698;
        }
       }
       if ((label|0) == 1992) {
        $4889 = ___cxa_find_matching_catch()|0;
        $4890 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4890;$eh$lpad$body$indexZ2D = $4889;
        break L12;
       }
       $2540 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2540>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2540|0),(20008|0),(386|0));
       $2541 = __THREW__; __THREW__ = 0;
       $2542 = $2541&1;
       if ($2542) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1168 = $2531;
      }
     } while(0);
     $2543 = (($$lcssa$i1168) + 4|0);
     HEAP8[$2543>>0] = 0;
     HEAP32[$$lcssa$i1168>>2] = ((880 + 8|0));
     $2544 = HEAP32[$agg$result>>2]|0;
     $2545 = (($2544) + 668|0);
     HEAP32[$2545>>2] = $$lcssa$i1168;
     $2546 = (_malloc(8)|0);
     $2547 = ($2546|0)==(0|0);
     L1708: do {
      if ($2547) {
       while(1) {
        $2548 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2548+0)|0);
        $2549 = ($2548|0)==(0);
        if ($2549) {
         break;
        }
        $2550 = $2548;
        __THREW__ = 0;
        invoke_v($2550|0);
        $2551 = __THREW__; __THREW__ = 0;
        $2552 = $2551&1;
        if ($2552) {
         label = 1991;
         break;
        }
        $2553 = (_malloc(8)|0);
        $2554 = ($2553|0)==(0|0);
        if (!($2554)) {
         $$lcssa$i1175 = $2553;
         break L1708;
        }
       }
       if ((label|0) == 1991) {
        $4887 = ___cxa_find_matching_catch()|0;
        $4888 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4888;$eh$lpad$body$indexZ2D = $4887;
        break L12;
       }
       $2555 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2555>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2555|0),(20008|0),(386|0));
       $2556 = __THREW__; __THREW__ = 0;
       $2557 = $2556&1;
       if ($2557) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1175 = $2546;
      }
     } while(0);
     $2558 = (($$lcssa$i1175) + 4|0);
     HEAP8[$2558>>0] = 0;
     HEAP32[$$lcssa$i1175>>2] = ((880 + 8|0));
     $2559 = HEAP32[$agg$result>>2]|0;
     $2560 = (($2559) + 672|0);
     HEAP32[$2560>>2] = $$lcssa$i1175;
     $2561 = (_malloc(8)|0);
     $2562 = ($2561|0)==(0|0);
     L1718: do {
      if ($2562) {
       while(1) {
        $2563 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2563+0)|0);
        $2564 = ($2563|0)==(0);
        if ($2564) {
         break;
        }
        $2565 = $2563;
        __THREW__ = 0;
        invoke_v($2565|0);
        $2566 = __THREW__; __THREW__ = 0;
        $2567 = $2566&1;
        if ($2567) {
         label = 1990;
         break;
        }
        $2568 = (_malloc(8)|0);
        $2569 = ($2568|0)==(0|0);
        if (!($2569)) {
         $$lcssa$i1182 = $2568;
         break L1718;
        }
       }
       if ((label|0) == 1990) {
        $4885 = ___cxa_find_matching_catch()|0;
        $4886 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4886;$eh$lpad$body$indexZ2D = $4885;
        break L12;
       }
       $2570 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2570>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2570|0),(20008|0),(386|0));
       $2571 = __THREW__; __THREW__ = 0;
       $2572 = $2571&1;
       if ($2572) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1182 = $2561;
      }
     } while(0);
     $2573 = (($$lcssa$i1182) + 4|0);
     HEAP8[$2573>>0] = 0;
     HEAP32[$$lcssa$i1182>>2] = ((880 + 8|0));
     $2574 = HEAP32[$agg$result>>2]|0;
     $2575 = (($2574) + 676|0);
     HEAP32[$2575>>2] = $$lcssa$i1182;
     $2576 = (_malloc(8)|0);
     $2577 = ($2576|0)==(0|0);
     L1728: do {
      if ($2577) {
       while(1) {
        $2578 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2578+0)|0);
        $2579 = ($2578|0)==(0);
        if ($2579) {
         break;
        }
        $2580 = $2578;
        __THREW__ = 0;
        invoke_v($2580|0);
        $2581 = __THREW__; __THREW__ = 0;
        $2582 = $2581&1;
        if ($2582) {
         label = 1989;
         break;
        }
        $2583 = (_malloc(8)|0);
        $2584 = ($2583|0)==(0|0);
        if (!($2584)) {
         $$lcssa$i1189 = $2583;
         break L1728;
        }
       }
       if ((label|0) == 1989) {
        $4883 = ___cxa_find_matching_catch()|0;
        $4884 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4884;$eh$lpad$body$indexZ2D = $4883;
        break L12;
       }
       $2585 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2585>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2585|0),(20008|0),(386|0));
       $2586 = __THREW__; __THREW__ = 0;
       $2587 = $2586&1;
       if ($2587) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1189 = $2576;
      }
     } while(0);
     $2588 = (($$lcssa$i1189) + 4|0);
     HEAP8[$2588>>0] = 0;
     HEAP32[$$lcssa$i1189>>2] = ((880 + 8|0));
     $2589 = HEAP32[$agg$result>>2]|0;
     $2590 = (($2589) + 680|0);
     HEAP32[$2590>>2] = $$lcssa$i1189;
     $2591 = (_malloc(8)|0);
     $2592 = ($2591|0)==(0|0);
     L1738: do {
      if ($2592) {
       while(1) {
        $2593 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2593+0)|0);
        $2594 = ($2593|0)==(0);
        if ($2594) {
         break;
        }
        $2595 = $2593;
        __THREW__ = 0;
        invoke_v($2595|0);
        $2596 = __THREW__; __THREW__ = 0;
        $2597 = $2596&1;
        if ($2597) {
         label = 1988;
         break;
        }
        $2598 = (_malloc(8)|0);
        $2599 = ($2598|0)==(0|0);
        if (!($2599)) {
         $$lcssa$i1196 = $2598;
         break L1738;
        }
       }
       if ((label|0) == 1988) {
        $4881 = ___cxa_find_matching_catch()|0;
        $4882 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4882;$eh$lpad$body$indexZ2D = $4881;
        break L12;
       }
       $2600 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2600>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2600|0),(20008|0),(386|0));
       $2601 = __THREW__; __THREW__ = 0;
       $2602 = $2601&1;
       if ($2602) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1196 = $2591;
      }
     } while(0);
     $2603 = (($$lcssa$i1196) + 4|0);
     HEAP8[$2603>>0] = 0;
     HEAP32[$$lcssa$i1196>>2] = ((880 + 8|0));
     $2604 = HEAP32[$agg$result>>2]|0;
     $2605 = (($2604) + 684|0);
     HEAP32[$2605>>2] = $$lcssa$i1196;
     $2606 = (_malloc(8)|0);
     $2607 = ($2606|0)==(0|0);
     L1748: do {
      if ($2607) {
       while(1) {
        $2608 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2608+0)|0);
        $2609 = ($2608|0)==(0);
        if ($2609) {
         break;
        }
        $2610 = $2608;
        __THREW__ = 0;
        invoke_v($2610|0);
        $2611 = __THREW__; __THREW__ = 0;
        $2612 = $2611&1;
        if ($2612) {
         label = 1987;
         break;
        }
        $2613 = (_malloc(8)|0);
        $2614 = ($2613|0)==(0|0);
        if (!($2614)) {
         $$lcssa$i1203 = $2613;
         break L1748;
        }
       }
       if ((label|0) == 1987) {
        $4879 = ___cxa_find_matching_catch()|0;
        $4880 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4880;$eh$lpad$body$indexZ2D = $4879;
        break L12;
       }
       $2615 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2615>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2615|0),(20008|0),(386|0));
       $2616 = __THREW__; __THREW__ = 0;
       $2617 = $2616&1;
       if ($2617) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1203 = $2606;
      }
     } while(0);
     $2618 = (($$lcssa$i1203) + 4|0);
     HEAP8[$2618>>0] = 0;
     HEAP32[$$lcssa$i1203>>2] = ((880 + 8|0));
     $2619 = HEAP32[$agg$result>>2]|0;
     $2620 = (($2619) + 688|0);
     HEAP32[$2620>>2] = $$lcssa$i1203;
     $2621 = (_malloc(8)|0);
     $2622 = ($2621|0)==(0|0);
     L1758: do {
      if ($2622) {
       while(1) {
        $2623 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2623+0)|0);
        $2624 = ($2623|0)==(0);
        if ($2624) {
         break;
        }
        $2625 = $2623;
        __THREW__ = 0;
        invoke_v($2625|0);
        $2626 = __THREW__; __THREW__ = 0;
        $2627 = $2626&1;
        if ($2627) {
         label = 1986;
         break;
        }
        $2628 = (_malloc(8)|0);
        $2629 = ($2628|0)==(0|0);
        if (!($2629)) {
         $$lcssa$i1210 = $2628;
         break L1758;
        }
       }
       if ((label|0) == 1986) {
        $4877 = ___cxa_find_matching_catch()|0;
        $4878 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4878;$eh$lpad$body$indexZ2D = $4877;
        break L12;
       }
       $2630 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2630>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2630|0),(20008|0),(386|0));
       $2631 = __THREW__; __THREW__ = 0;
       $2632 = $2631&1;
       if ($2632) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1210 = $2621;
      }
     } while(0);
     $2633 = (($$lcssa$i1210) + 4|0);
     HEAP8[$2633>>0] = 0;
     HEAP32[$$lcssa$i1210>>2] = ((880 + 8|0));
     $2634 = HEAP32[$agg$result>>2]|0;
     $2635 = (($2634) + 692|0);
     HEAP32[$2635>>2] = $$lcssa$i1210;
     $2636 = (_malloc(8)|0);
     $2637 = ($2636|0)==(0|0);
     L1768: do {
      if ($2637) {
       while(1) {
        $2638 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2638+0)|0);
        $2639 = ($2638|0)==(0);
        if ($2639) {
         break;
        }
        $2640 = $2638;
        __THREW__ = 0;
        invoke_v($2640|0);
        $2641 = __THREW__; __THREW__ = 0;
        $2642 = $2641&1;
        if ($2642) {
         label = 1985;
         break;
        }
        $2643 = (_malloc(8)|0);
        $2644 = ($2643|0)==(0|0);
        if (!($2644)) {
         $$lcssa$i1217 = $2643;
         break L1768;
        }
       }
       if ((label|0) == 1985) {
        $4875 = ___cxa_find_matching_catch()|0;
        $4876 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4876;$eh$lpad$body$indexZ2D = $4875;
        break L12;
       }
       $2645 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2645>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2645|0),(20008|0),(386|0));
       $2646 = __THREW__; __THREW__ = 0;
       $2647 = $2646&1;
       if ($2647) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1217 = $2636;
      }
     } while(0);
     $2648 = (($$lcssa$i1217) + 4|0);
     HEAP8[$2648>>0] = 0;
     HEAP32[$$lcssa$i1217>>2] = ((880 + 8|0));
     $2649 = HEAP32[$agg$result>>2]|0;
     $2650 = (($2649) + 696|0);
     HEAP32[$2650>>2] = $$lcssa$i1217;
     $2651 = (_malloc(8)|0);
     $2652 = ($2651|0)==(0|0);
     L1778: do {
      if ($2652) {
       while(1) {
        $2653 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2653+0)|0);
        $2654 = ($2653|0)==(0);
        if ($2654) {
         break;
        }
        $2655 = $2653;
        __THREW__ = 0;
        invoke_v($2655|0);
        $2656 = __THREW__; __THREW__ = 0;
        $2657 = $2656&1;
        if ($2657) {
         label = 1984;
         break;
        }
        $2658 = (_malloc(8)|0);
        $2659 = ($2658|0)==(0|0);
        if (!($2659)) {
         $$lcssa$i1224 = $2658;
         break L1778;
        }
       }
       if ((label|0) == 1984) {
        $4873 = ___cxa_find_matching_catch()|0;
        $4874 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4874;$eh$lpad$body$indexZ2D = $4873;
        break L12;
       }
       $2660 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2660>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2660|0),(20008|0),(386|0));
       $2661 = __THREW__; __THREW__ = 0;
       $2662 = $2661&1;
       if ($2662) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1224 = $2651;
      }
     } while(0);
     $2663 = (($$lcssa$i1224) + 4|0);
     HEAP8[$2663>>0] = 0;
     HEAP32[$$lcssa$i1224>>2] = ((880 + 8|0));
     $2664 = HEAP32[$agg$result>>2]|0;
     $2665 = (($2664) + 700|0);
     HEAP32[$2665>>2] = $$lcssa$i1224;
     $2666 = (_malloc(8)|0);
     $2667 = ($2666|0)==(0|0);
     L1788: do {
      if ($2667) {
       while(1) {
        $2668 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2668+0)|0);
        $2669 = ($2668|0)==(0);
        if ($2669) {
         break;
        }
        $2670 = $2668;
        __THREW__ = 0;
        invoke_v($2670|0);
        $2671 = __THREW__; __THREW__ = 0;
        $2672 = $2671&1;
        if ($2672) {
         label = 1983;
         break;
        }
        $2673 = (_malloc(8)|0);
        $2674 = ($2673|0)==(0|0);
        if (!($2674)) {
         $$lcssa$i1231 = $2673;
         break L1788;
        }
       }
       if ((label|0) == 1983) {
        $4871 = ___cxa_find_matching_catch()|0;
        $4872 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4872;$eh$lpad$body$indexZ2D = $4871;
        break L12;
       }
       $2675 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2675>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2675|0),(20008|0),(386|0));
       $2676 = __THREW__; __THREW__ = 0;
       $2677 = $2676&1;
       if ($2677) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1231 = $2666;
      }
     } while(0);
     $2678 = (($$lcssa$i1231) + 4|0);
     HEAP8[$2678>>0] = 0;
     HEAP32[$$lcssa$i1231>>2] = ((880 + 8|0));
     $2679 = HEAP32[$agg$result>>2]|0;
     $2680 = (($2679) + 704|0);
     HEAP32[$2680>>2] = $$lcssa$i1231;
     $2681 = (_malloc(8)|0);
     $2682 = ($2681|0)==(0|0);
     L1798: do {
      if ($2682) {
       while(1) {
        $2683 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2683+0)|0);
        $2684 = ($2683|0)==(0);
        if ($2684) {
         break;
        }
        $2685 = $2683;
        __THREW__ = 0;
        invoke_v($2685|0);
        $2686 = __THREW__; __THREW__ = 0;
        $2687 = $2686&1;
        if ($2687) {
         label = 1982;
         break;
        }
        $2688 = (_malloc(8)|0);
        $2689 = ($2688|0)==(0|0);
        if (!($2689)) {
         $$lcssa$i1238 = $2688;
         break L1798;
        }
       }
       if ((label|0) == 1982) {
        $4869 = ___cxa_find_matching_catch()|0;
        $4870 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4870;$eh$lpad$body$indexZ2D = $4869;
        break L12;
       }
       $2690 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2690>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2690|0),(20008|0),(386|0));
       $2691 = __THREW__; __THREW__ = 0;
       $2692 = $2691&1;
       if ($2692) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1238 = $2681;
      }
     } while(0);
     $2693 = (($$lcssa$i1238) + 4|0);
     HEAP8[$2693>>0] = 0;
     HEAP32[$$lcssa$i1238>>2] = ((880 + 8|0));
     $2694 = HEAP32[$agg$result>>2]|0;
     $2695 = (($2694) + 708|0);
     HEAP32[$2695>>2] = $$lcssa$i1238;
     $2696 = (_malloc(8)|0);
     $2697 = ($2696|0)==(0|0);
     L1808: do {
      if ($2697) {
       while(1) {
        $2698 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2698+0)|0);
        $2699 = ($2698|0)==(0);
        if ($2699) {
         break;
        }
        $2700 = $2698;
        __THREW__ = 0;
        invoke_v($2700|0);
        $2701 = __THREW__; __THREW__ = 0;
        $2702 = $2701&1;
        if ($2702) {
         label = 1981;
         break;
        }
        $2703 = (_malloc(8)|0);
        $2704 = ($2703|0)==(0|0);
        if (!($2704)) {
         $$lcssa$i1245 = $2703;
         break L1808;
        }
       }
       if ((label|0) == 1981) {
        $4867 = ___cxa_find_matching_catch()|0;
        $4868 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4868;$eh$lpad$body$indexZ2D = $4867;
        break L12;
       }
       $2705 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2705>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2705|0),(20008|0),(386|0));
       $2706 = __THREW__; __THREW__ = 0;
       $2707 = $2706&1;
       if ($2707) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1245 = $2696;
      }
     } while(0);
     $2708 = (($$lcssa$i1245) + 4|0);
     HEAP8[$2708>>0] = 0;
     HEAP32[$$lcssa$i1245>>2] = ((880 + 8|0));
     $2709 = HEAP32[$agg$result>>2]|0;
     $2710 = (($2709) + 712|0);
     HEAP32[$2710>>2] = $$lcssa$i1245;
     $2711 = (_malloc(8)|0);
     $2712 = ($2711|0)==(0|0);
     L1818: do {
      if ($2712) {
       while(1) {
        $2713 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2713+0)|0);
        $2714 = ($2713|0)==(0);
        if ($2714) {
         break;
        }
        $2715 = $2713;
        __THREW__ = 0;
        invoke_v($2715|0);
        $2716 = __THREW__; __THREW__ = 0;
        $2717 = $2716&1;
        if ($2717) {
         label = 1980;
         break;
        }
        $2718 = (_malloc(8)|0);
        $2719 = ($2718|0)==(0|0);
        if (!($2719)) {
         $$lcssa$i1252 = $2718;
         break L1818;
        }
       }
       if ((label|0) == 1980) {
        $4865 = ___cxa_find_matching_catch()|0;
        $4866 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4866;$eh$lpad$body$indexZ2D = $4865;
        break L12;
       }
       $2720 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2720>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2720|0),(20008|0),(386|0));
       $2721 = __THREW__; __THREW__ = 0;
       $2722 = $2721&1;
       if ($2722) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1252 = $2711;
      }
     } while(0);
     $2723 = (($$lcssa$i1252) + 4|0);
     HEAP8[$2723>>0] = 0;
     HEAP32[$$lcssa$i1252>>2] = ((880 + 8|0));
     $2724 = HEAP32[$agg$result>>2]|0;
     $2725 = (($2724) + 716|0);
     HEAP32[$2725>>2] = $$lcssa$i1252;
     $2726 = (_malloc(8)|0);
     $2727 = ($2726|0)==(0|0);
     L1828: do {
      if ($2727) {
       while(1) {
        $2728 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2728+0)|0);
        $2729 = ($2728|0)==(0);
        if ($2729) {
         break;
        }
        $2730 = $2728;
        __THREW__ = 0;
        invoke_v($2730|0);
        $2731 = __THREW__; __THREW__ = 0;
        $2732 = $2731&1;
        if ($2732) {
         label = 1979;
         break;
        }
        $2733 = (_malloc(8)|0);
        $2734 = ($2733|0)==(0|0);
        if (!($2734)) {
         $$lcssa$i1259 = $2733;
         break L1828;
        }
       }
       if ((label|0) == 1979) {
        $4863 = ___cxa_find_matching_catch()|0;
        $4864 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4864;$eh$lpad$body$indexZ2D = $4863;
        break L12;
       }
       $2735 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2735>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2735|0),(20008|0),(386|0));
       $2736 = __THREW__; __THREW__ = 0;
       $2737 = $2736&1;
       if ($2737) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1259 = $2726;
      }
     } while(0);
     $2738 = (($$lcssa$i1259) + 4|0);
     HEAP8[$2738>>0] = 0;
     HEAP32[$$lcssa$i1259>>2] = ((880 + 8|0));
     $2739 = HEAP32[$agg$result>>2]|0;
     $2740 = (($2739) + 720|0);
     HEAP32[$2740>>2] = $$lcssa$i1259;
     $2741 = (_malloc(8)|0);
     $2742 = ($2741|0)==(0|0);
     L1838: do {
      if ($2742) {
       while(1) {
        $2743 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2743+0)|0);
        $2744 = ($2743|0)==(0);
        if ($2744) {
         break;
        }
        $2745 = $2743;
        __THREW__ = 0;
        invoke_v($2745|0);
        $2746 = __THREW__; __THREW__ = 0;
        $2747 = $2746&1;
        if ($2747) {
         label = 1978;
         break;
        }
        $2748 = (_malloc(8)|0);
        $2749 = ($2748|0)==(0|0);
        if (!($2749)) {
         $$lcssa$i1266 = $2748;
         break L1838;
        }
       }
       if ((label|0) == 1978) {
        $4861 = ___cxa_find_matching_catch()|0;
        $4862 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4862;$eh$lpad$body$indexZ2D = $4861;
        break L12;
       }
       $2750 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2750>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2750|0),(20008|0),(386|0));
       $2751 = __THREW__; __THREW__ = 0;
       $2752 = $2751&1;
       if ($2752) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1266 = $2741;
      }
     } while(0);
     $2753 = (($$lcssa$i1266) + 4|0);
     HEAP8[$2753>>0] = 0;
     HEAP32[$$lcssa$i1266>>2] = ((880 + 8|0));
     $2754 = HEAP32[$agg$result>>2]|0;
     $2755 = (($2754) + 724|0);
     HEAP32[$2755>>2] = $$lcssa$i1266;
     $2756 = (_malloc(8)|0);
     $2757 = ($2756|0)==(0|0);
     L1848: do {
      if ($2757) {
       while(1) {
        $2758 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2758+0)|0);
        $2759 = ($2758|0)==(0);
        if ($2759) {
         break;
        }
        $2760 = $2758;
        __THREW__ = 0;
        invoke_v($2760|0);
        $2761 = __THREW__; __THREW__ = 0;
        $2762 = $2761&1;
        if ($2762) {
         label = 1977;
         break;
        }
        $2763 = (_malloc(8)|0);
        $2764 = ($2763|0)==(0|0);
        if (!($2764)) {
         $$lcssa$i1273 = $2763;
         break L1848;
        }
       }
       if ((label|0) == 1977) {
        $4859 = ___cxa_find_matching_catch()|0;
        $4860 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4860;$eh$lpad$body$indexZ2D = $4859;
        break L12;
       }
       $2765 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2765>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2765|0),(20008|0),(386|0));
       $2766 = __THREW__; __THREW__ = 0;
       $2767 = $2766&1;
       if ($2767) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1273 = $2756;
      }
     } while(0);
     $2768 = (($$lcssa$i1273) + 4|0);
     HEAP8[$2768>>0] = 0;
     HEAP32[$$lcssa$i1273>>2] = ((880 + 8|0));
     $2769 = HEAP32[$agg$result>>2]|0;
     $2770 = (($2769) + 728|0);
     HEAP32[$2770>>2] = $$lcssa$i1273;
     $2771 = (_malloc(8)|0);
     $2772 = ($2771|0)==(0|0);
     L1858: do {
      if ($2772) {
       while(1) {
        $2773 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2773+0)|0);
        $2774 = ($2773|0)==(0);
        if ($2774) {
         break;
        }
        $2775 = $2773;
        __THREW__ = 0;
        invoke_v($2775|0);
        $2776 = __THREW__; __THREW__ = 0;
        $2777 = $2776&1;
        if ($2777) {
         label = 1976;
         break;
        }
        $2778 = (_malloc(8)|0);
        $2779 = ($2778|0)==(0|0);
        if (!($2779)) {
         $$lcssa$i1280 = $2778;
         break L1858;
        }
       }
       if ((label|0) == 1976) {
        $4857 = ___cxa_find_matching_catch()|0;
        $4858 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4858;$eh$lpad$body$indexZ2D = $4857;
        break L12;
       }
       $2780 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2780>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2780|0),(20008|0),(386|0));
       $2781 = __THREW__; __THREW__ = 0;
       $2782 = $2781&1;
       if ($2782) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1280 = $2771;
      }
     } while(0);
     $2783 = (($$lcssa$i1280) + 4|0);
     HEAP8[$2783>>0] = 0;
     HEAP32[$$lcssa$i1280>>2] = ((880 + 8|0));
     $2784 = HEAP32[$agg$result>>2]|0;
     $2785 = (($2784) + 732|0);
     HEAP32[$2785>>2] = $$lcssa$i1280;
     $2786 = (_malloc(8)|0);
     $2787 = ($2786|0)==(0|0);
     L1868: do {
      if ($2787) {
       while(1) {
        $2788 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2788+0)|0);
        $2789 = ($2788|0)==(0);
        if ($2789) {
         break;
        }
        $2790 = $2788;
        __THREW__ = 0;
        invoke_v($2790|0);
        $2791 = __THREW__; __THREW__ = 0;
        $2792 = $2791&1;
        if ($2792) {
         label = 1975;
         break;
        }
        $2793 = (_malloc(8)|0);
        $2794 = ($2793|0)==(0|0);
        if (!($2794)) {
         $$lcssa$i1287 = $2793;
         break L1868;
        }
       }
       if ((label|0) == 1975) {
        $4855 = ___cxa_find_matching_catch()|0;
        $4856 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4856;$eh$lpad$body$indexZ2D = $4855;
        break L12;
       }
       $2795 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2795>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2795|0),(20008|0),(386|0));
       $2796 = __THREW__; __THREW__ = 0;
       $2797 = $2796&1;
       if ($2797) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1287 = $2786;
      }
     } while(0);
     $2798 = (($$lcssa$i1287) + 4|0);
     HEAP8[$2798>>0] = 0;
     HEAP32[$$lcssa$i1287>>2] = ((880 + 8|0));
     $2799 = HEAP32[$agg$result>>2]|0;
     $2800 = (($2799) + 736|0);
     HEAP32[$2800>>2] = $$lcssa$i1287;
     $2801 = (_malloc(8)|0);
     $2802 = ($2801|0)==(0|0);
     L1878: do {
      if ($2802) {
       while(1) {
        $2803 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2803+0)|0);
        $2804 = ($2803|0)==(0);
        if ($2804) {
         break;
        }
        $2805 = $2803;
        __THREW__ = 0;
        invoke_v($2805|0);
        $2806 = __THREW__; __THREW__ = 0;
        $2807 = $2806&1;
        if ($2807) {
         label = 1974;
         break;
        }
        $2808 = (_malloc(8)|0);
        $2809 = ($2808|0)==(0|0);
        if (!($2809)) {
         $$lcssa$i1294 = $2808;
         break L1878;
        }
       }
       if ((label|0) == 1974) {
        $4853 = ___cxa_find_matching_catch()|0;
        $4854 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4854;$eh$lpad$body$indexZ2D = $4853;
        break L12;
       }
       $2810 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2810>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2810|0),(20008|0),(386|0));
       $2811 = __THREW__; __THREW__ = 0;
       $2812 = $2811&1;
       if ($2812) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1294 = $2801;
      }
     } while(0);
     $2813 = (($$lcssa$i1294) + 4|0);
     HEAP8[$2813>>0] = 0;
     HEAP32[$$lcssa$i1294>>2] = ((472 + 8|0));
     $2814 = HEAP32[$agg$result>>2]|0;
     $2815 = (($2814) + 740|0);
     HEAP32[$2815>>2] = $$lcssa$i1294;
     $2816 = (_malloc(8)|0);
     $2817 = ($2816|0)==(0|0);
     L1888: do {
      if ($2817) {
       while(1) {
        $2818 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2818+0)|0);
        $2819 = ($2818|0)==(0);
        if ($2819) {
         break;
        }
        $2820 = $2818;
        __THREW__ = 0;
        invoke_v($2820|0);
        $2821 = __THREW__; __THREW__ = 0;
        $2822 = $2821&1;
        if ($2822) {
         label = 1973;
         break;
        }
        $2823 = (_malloc(8)|0);
        $2824 = ($2823|0)==(0|0);
        if (!($2824)) {
         $$lcssa$i1301 = $2823;
         break L1888;
        }
       }
       if ((label|0) == 1973) {
        $4851 = ___cxa_find_matching_catch()|0;
        $4852 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4852;$eh$lpad$body$indexZ2D = $4851;
        break L12;
       }
       $2825 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2825>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2825|0),(20008|0),(386|0));
       $2826 = __THREW__; __THREW__ = 0;
       $2827 = $2826&1;
       if ($2827) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1301 = $2816;
      }
     } while(0);
     $2828 = (($$lcssa$i1301) + 4|0);
     HEAP8[$2828>>0] = 1;
     HEAP32[$$lcssa$i1301>>2] = ((1096 + 8|0));
     $2829 = HEAP32[$agg$result>>2]|0;
     $2830 = (($2829) + 744|0);
     HEAP32[$2830>>2] = $$lcssa$i1301;
     $2831 = (_malloc(8)|0);
     $2832 = ($2831|0)==(0|0);
     L1898: do {
      if ($2832) {
       while(1) {
        $2833 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2833+0)|0);
        $2834 = ($2833|0)==(0);
        if ($2834) {
         break;
        }
        $2835 = $2833;
        __THREW__ = 0;
        invoke_v($2835|0);
        $2836 = __THREW__; __THREW__ = 0;
        $2837 = $2836&1;
        if ($2837) {
         label = 1972;
         break;
        }
        $2838 = (_malloc(8)|0);
        $2839 = ($2838|0)==(0|0);
        if (!($2839)) {
         $$lcssa$i1308 = $2838;
         break L1898;
        }
       }
       if ((label|0) == 1972) {
        $4849 = ___cxa_find_matching_catch()|0;
        $4850 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4850;$eh$lpad$body$indexZ2D = $4849;
        break L12;
       }
       $2840 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2840>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2840|0),(20008|0),(386|0));
       $2841 = __THREW__; __THREW__ = 0;
       $2842 = $2841&1;
       if ($2842) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1308 = $2831;
      }
     } while(0);
     $2843 = (($$lcssa$i1308) + 4|0);
     HEAP8[$2843>>0] = 1;
     HEAP32[$$lcssa$i1308>>2] = ((1096 + 8|0));
     $2844 = HEAP32[$agg$result>>2]|0;
     $2845 = (($2844) + 748|0);
     HEAP32[$2845>>2] = $$lcssa$i1308;
     $2846 = (_malloc(8)|0);
     $2847 = ($2846|0)==(0|0);
     L1908: do {
      if ($2847) {
       while(1) {
        $2848 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2848+0)|0);
        $2849 = ($2848|0)==(0);
        if ($2849) {
         break;
        }
        $2850 = $2848;
        __THREW__ = 0;
        invoke_v($2850|0);
        $2851 = __THREW__; __THREW__ = 0;
        $2852 = $2851&1;
        if ($2852) {
         label = 1971;
         break;
        }
        $2853 = (_malloc(8)|0);
        $2854 = ($2853|0)==(0|0);
        if (!($2854)) {
         $$lcssa$i1315 = $2853;
         break L1908;
        }
       }
       if ((label|0) == 1971) {
        $4847 = ___cxa_find_matching_catch()|0;
        $4848 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4848;$eh$lpad$body$indexZ2D = $4847;
        break L12;
       }
       $2855 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2855>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2855|0),(20008|0),(386|0));
       $2856 = __THREW__; __THREW__ = 0;
       $2857 = $2856&1;
       if ($2857) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1315 = $2846;
      }
     } while(0);
     $2858 = (($$lcssa$i1315) + 4|0);
     HEAP8[$2858>>0] = 0;
     HEAP32[$$lcssa$i1315>>2] = ((472 + 8|0));
     $2859 = HEAP32[$agg$result>>2]|0;
     $2860 = (($2859) + 752|0);
     HEAP32[$2860>>2] = $$lcssa$i1315;
     $2861 = (_malloc(8)|0);
     $2862 = ($2861|0)==(0|0);
     L1918: do {
      if ($2862) {
       while(1) {
        $2863 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2863+0)|0);
        $2864 = ($2863|0)==(0);
        if ($2864) {
         break;
        }
        $2865 = $2863;
        __THREW__ = 0;
        invoke_v($2865|0);
        $2866 = __THREW__; __THREW__ = 0;
        $2867 = $2866&1;
        if ($2867) {
         label = 1970;
         break;
        }
        $2868 = (_malloc(8)|0);
        $2869 = ($2868|0)==(0|0);
        if (!($2869)) {
         $$lcssa$i1322 = $2868;
         break L1918;
        }
       }
       if ((label|0) == 1970) {
        $4845 = ___cxa_find_matching_catch()|0;
        $4846 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4846;$eh$lpad$body$indexZ2D = $4845;
        break L12;
       }
       $2870 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2870>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2870|0),(20008|0),(386|0));
       $2871 = __THREW__; __THREW__ = 0;
       $2872 = $2871&1;
       if ($2872) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1322 = $2861;
      }
     } while(0);
     $2873 = (($$lcssa$i1322) + 4|0);
     HEAP8[$2873>>0] = 0;
     HEAP32[$$lcssa$i1322>>2] = ((472 + 8|0));
     $2874 = HEAP32[$agg$result>>2]|0;
     $2875 = (($2874) + 756|0);
     HEAP32[$2875>>2] = $$lcssa$i1322;
     $2876 = (_malloc(8)|0);
     $2877 = ($2876|0)==(0|0);
     L1928: do {
      if ($2877) {
       while(1) {
        $2878 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2878+0)|0);
        $2879 = ($2878|0)==(0);
        if ($2879) {
         break;
        }
        $2880 = $2878;
        __THREW__ = 0;
        invoke_v($2880|0);
        $2881 = __THREW__; __THREW__ = 0;
        $2882 = $2881&1;
        if ($2882) {
         label = 1969;
         break;
        }
        $2883 = (_malloc(8)|0);
        $2884 = ($2883|0)==(0|0);
        if (!($2884)) {
         $$lcssa$i1329 = $2883;
         break L1928;
        }
       }
       if ((label|0) == 1969) {
        $4843 = ___cxa_find_matching_catch()|0;
        $4844 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4844;$eh$lpad$body$indexZ2D = $4843;
        break L12;
       }
       $2885 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2885>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2885|0),(20008|0),(386|0));
       $2886 = __THREW__; __THREW__ = 0;
       $2887 = $2886&1;
       if ($2887) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1329 = $2876;
      }
     } while(0);
     $2888 = (($$lcssa$i1329) + 4|0);
     HEAP8[$2888>>0] = 1;
     HEAP32[$$lcssa$i1329>>2] = ((1048 + 8|0));
     $2889 = HEAP32[$agg$result>>2]|0;
     $2890 = (($2889) + 760|0);
     HEAP32[$2890>>2] = $$lcssa$i1329;
     $2891 = (_malloc(8)|0);
     $2892 = ($2891|0)==(0|0);
     L1938: do {
      if ($2892) {
       while(1) {
        $2893 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2893+0)|0);
        $2894 = ($2893|0)==(0);
        if ($2894) {
         break;
        }
        $2895 = $2893;
        __THREW__ = 0;
        invoke_v($2895|0);
        $2896 = __THREW__; __THREW__ = 0;
        $2897 = $2896&1;
        if ($2897) {
         label = 1968;
         break;
        }
        $2898 = (_malloc(8)|0);
        $2899 = ($2898|0)==(0|0);
        if (!($2899)) {
         $$lcssa$i1336 = $2898;
         break L1938;
        }
       }
       if ((label|0) == 1968) {
        $4841 = ___cxa_find_matching_catch()|0;
        $4842 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4842;$eh$lpad$body$indexZ2D = $4841;
        break L12;
       }
       $2900 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2900>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2900|0),(20008|0),(386|0));
       $2901 = __THREW__; __THREW__ = 0;
       $2902 = $2901&1;
       if ($2902) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1336 = $2891;
      }
     } while(0);
     $2903 = (($$lcssa$i1336) + 4|0);
     HEAP8[$2903>>0] = 0;
     HEAP32[$$lcssa$i1336>>2] = ((520 + 8|0));
     $2904 = HEAP32[$agg$result>>2]|0;
     $2905 = (($2904) + 764|0);
     HEAP32[$2905>>2] = $$lcssa$i1336;
     $2906 = (_malloc(8)|0);
     $2907 = ($2906|0)==(0|0);
     L1948: do {
      if ($2907) {
       while(1) {
        $2908 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2908+0)|0);
        $2909 = ($2908|0)==(0);
        if ($2909) {
         break;
        }
        $2910 = $2908;
        __THREW__ = 0;
        invoke_v($2910|0);
        $2911 = __THREW__; __THREW__ = 0;
        $2912 = $2911&1;
        if ($2912) {
         label = 1967;
         break;
        }
        $2913 = (_malloc(8)|0);
        $2914 = ($2913|0)==(0|0);
        if (!($2914)) {
         $$lcssa$i1343 = $2913;
         break L1948;
        }
       }
       if ((label|0) == 1967) {
        $4839 = ___cxa_find_matching_catch()|0;
        $4840 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4840;$eh$lpad$body$indexZ2D = $4839;
        break L12;
       }
       $2915 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2915>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2915|0),(20008|0),(386|0));
       $2916 = __THREW__; __THREW__ = 0;
       $2917 = $2916&1;
       if ($2917) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1343 = $2906;
      }
     } while(0);
     $2918 = (($$lcssa$i1343) + 4|0);
     HEAP8[$2918>>0] = 0;
     HEAP32[$$lcssa$i1343>>2] = ((472 + 8|0));
     $2919 = HEAP32[$agg$result>>2]|0;
     $2920 = (($2919) + 768|0);
     HEAP32[$2920>>2] = $$lcssa$i1343;
     $2921 = (_malloc(8)|0);
     $2922 = ($2921|0)==(0|0);
     L1958: do {
      if ($2922) {
       while(1) {
        $2923 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2923+0)|0);
        $2924 = ($2923|0)==(0);
        if ($2924) {
         break;
        }
        $2925 = $2923;
        __THREW__ = 0;
        invoke_v($2925|0);
        $2926 = __THREW__; __THREW__ = 0;
        $2927 = $2926&1;
        if ($2927) {
         label = 1966;
         break;
        }
        $2928 = (_malloc(8)|0);
        $2929 = ($2928|0)==(0|0);
        if (!($2929)) {
         $$lcssa$i1350 = $2928;
         break L1958;
        }
       }
       if ((label|0) == 1966) {
        $4837 = ___cxa_find_matching_catch()|0;
        $4838 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4838;$eh$lpad$body$indexZ2D = $4837;
        break L12;
       }
       $2930 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2930>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2930|0),(20008|0),(386|0));
       $2931 = __THREW__; __THREW__ = 0;
       $2932 = $2931&1;
       if ($2932) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1350 = $2921;
      }
     } while(0);
     $2933 = (($$lcssa$i1350) + 4|0);
     HEAP8[$2933>>0] = 0;
     HEAP32[$$lcssa$i1350>>2] = ((472 + 8|0));
     $2934 = HEAP32[$agg$result>>2]|0;
     $2935 = (($2934) + 772|0);
     HEAP32[$2935>>2] = $$lcssa$i1350;
     $2936 = (_malloc(8)|0);
     $2937 = ($2936|0)==(0|0);
     L1968: do {
      if ($2937) {
       while(1) {
        $2938 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2938+0)|0);
        $2939 = ($2938|0)==(0);
        if ($2939) {
         break;
        }
        $2940 = $2938;
        __THREW__ = 0;
        invoke_v($2940|0);
        $2941 = __THREW__; __THREW__ = 0;
        $2942 = $2941&1;
        if ($2942) {
         label = 1965;
         break;
        }
        $2943 = (_malloc(8)|0);
        $2944 = ($2943|0)==(0|0);
        if (!($2944)) {
         $$lcssa$i1357 = $2943;
         break L1968;
        }
       }
       if ((label|0) == 1965) {
        $4835 = ___cxa_find_matching_catch()|0;
        $4836 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4836;$eh$lpad$body$indexZ2D = $4835;
        break L12;
       }
       $2945 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2945>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2945|0),(20008|0),(386|0));
       $2946 = __THREW__; __THREW__ = 0;
       $2947 = $2946&1;
       if ($2947) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1357 = $2936;
      }
     } while(0);
     $2948 = (($$lcssa$i1357) + 4|0);
     HEAP8[$2948>>0] = 0;
     HEAP32[$$lcssa$i1357>>2] = ((472 + 8|0));
     $2949 = HEAP32[$agg$result>>2]|0;
     $2950 = (($2949) + 776|0);
     HEAP32[$2950>>2] = $$lcssa$i1357;
     $2951 = (_malloc(8)|0);
     $2952 = ($2951|0)==(0|0);
     L1978: do {
      if ($2952) {
       while(1) {
        $2953 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2953+0)|0);
        $2954 = ($2953|0)==(0);
        if ($2954) {
         break;
        }
        $2955 = $2953;
        __THREW__ = 0;
        invoke_v($2955|0);
        $2956 = __THREW__; __THREW__ = 0;
        $2957 = $2956&1;
        if ($2957) {
         label = 1964;
         break;
        }
        $2958 = (_malloc(8)|0);
        $2959 = ($2958|0)==(0|0);
        if (!($2959)) {
         $$lcssa$i1364 = $2958;
         break L1978;
        }
       }
       if ((label|0) == 1964) {
        $4833 = ___cxa_find_matching_catch()|0;
        $4834 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4834;$eh$lpad$body$indexZ2D = $4833;
        break L12;
       }
       $2960 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2960>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2960|0),(20008|0),(386|0));
       $2961 = __THREW__; __THREW__ = 0;
       $2962 = $2961&1;
       if ($2962) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1364 = $2951;
      }
     } while(0);
     $2963 = (($$lcssa$i1364) + 4|0);
     HEAP8[$2963>>0] = 0;
     HEAP32[$$lcssa$i1364>>2] = ((472 + 8|0));
     $2964 = HEAP32[$agg$result>>2]|0;
     $2965 = (($2964) + 780|0);
     HEAP32[$2965>>2] = $$lcssa$i1364;
     $2966 = (_malloc(8)|0);
     $2967 = ($2966|0)==(0|0);
     L1988: do {
      if ($2967) {
       while(1) {
        $2968 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2968+0)|0);
        $2969 = ($2968|0)==(0);
        if ($2969) {
         break;
        }
        $2970 = $2968;
        __THREW__ = 0;
        invoke_v($2970|0);
        $2971 = __THREW__; __THREW__ = 0;
        $2972 = $2971&1;
        if ($2972) {
         label = 1963;
         break;
        }
        $2973 = (_malloc(8)|0);
        $2974 = ($2973|0)==(0|0);
        if (!($2974)) {
         $$lcssa$i1371 = $2973;
         break L1988;
        }
       }
       if ((label|0) == 1963) {
        $4831 = ___cxa_find_matching_catch()|0;
        $4832 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4832;$eh$lpad$body$indexZ2D = $4831;
        break L12;
       }
       $2975 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2975>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2975|0),(20008|0),(386|0));
       $2976 = __THREW__; __THREW__ = 0;
       $2977 = $2976&1;
       if ($2977) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1371 = $2966;
      }
     } while(0);
     $2978 = (($$lcssa$i1371) + 4|0);
     HEAP8[$2978>>0] = 0;
     HEAP32[$$lcssa$i1371>>2] = ((472 + 8|0));
     $2979 = HEAP32[$agg$result>>2]|0;
     $2980 = (($2979) + 784|0);
     HEAP32[$2980>>2] = $$lcssa$i1371;
     $2981 = (_malloc(8)|0);
     $2982 = ($2981|0)==(0|0);
     L1998: do {
      if ($2982) {
       while(1) {
        $2983 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2983+0)|0);
        $2984 = ($2983|0)==(0);
        if ($2984) {
         break;
        }
        $2985 = $2983;
        __THREW__ = 0;
        invoke_v($2985|0);
        $2986 = __THREW__; __THREW__ = 0;
        $2987 = $2986&1;
        if ($2987) {
         label = 1962;
         break;
        }
        $2988 = (_malloc(8)|0);
        $2989 = ($2988|0)==(0|0);
        if (!($2989)) {
         $$lcssa$i1378 = $2988;
         break L1998;
        }
       }
       if ((label|0) == 1962) {
        $4829 = ___cxa_find_matching_catch()|0;
        $4830 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4830;$eh$lpad$body$indexZ2D = $4829;
        break L12;
       }
       $2990 = (___cxa_allocate_exception(4)|0);
       HEAP32[$2990>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($2990|0),(20008|0),(386|0));
       $2991 = __THREW__; __THREW__ = 0;
       $2992 = $2991&1;
       if ($2992) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1378 = $2981;
      }
     } while(0);
     $2993 = (($$lcssa$i1378) + 4|0);
     HEAP8[$2993>>0] = 1;
     HEAP32[$$lcssa$i1378>>2] = ((1048 + 8|0));
     $2994 = HEAP32[$agg$result>>2]|0;
     $2995 = (($2994) + 788|0);
     HEAP32[$2995>>2] = $$lcssa$i1378;
     $2996 = (_malloc(8)|0);
     $2997 = ($2996|0)==(0|0);
     L2008: do {
      if ($2997) {
       while(1) {
        $2998 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2998+0)|0);
        $2999 = ($2998|0)==(0);
        if ($2999) {
         break;
        }
        $3000 = $2998;
        __THREW__ = 0;
        invoke_v($3000|0);
        $3001 = __THREW__; __THREW__ = 0;
        $3002 = $3001&1;
        if ($3002) {
         label = 1961;
         break;
        }
        $3003 = (_malloc(8)|0);
        $3004 = ($3003|0)==(0|0);
        if (!($3004)) {
         $$lcssa$i1385 = $3003;
         break L2008;
        }
       }
       if ((label|0) == 1961) {
        $4827 = ___cxa_find_matching_catch()|0;
        $4828 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4828;$eh$lpad$body$indexZ2D = $4827;
        break L12;
       }
       $3005 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3005>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3005|0),(20008|0),(386|0));
       $3006 = __THREW__; __THREW__ = 0;
       $3007 = $3006&1;
       if ($3007) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1385 = $2996;
      }
     } while(0);
     $3008 = (($$lcssa$i1385) + 4|0);
     HEAP8[$3008>>0] = 0;
     HEAP32[$$lcssa$i1385>>2] = ((520 + 8|0));
     $3009 = HEAP32[$agg$result>>2]|0;
     $3010 = (($3009) + 792|0);
     HEAP32[$3010>>2] = $$lcssa$i1385;
     $3011 = (_malloc(8)|0);
     $3012 = ($3011|0)==(0|0);
     L2018: do {
      if ($3012) {
       while(1) {
        $3013 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3013+0)|0);
        $3014 = ($3013|0)==(0);
        if ($3014) {
         break;
        }
        $3015 = $3013;
        __THREW__ = 0;
        invoke_v($3015|0);
        $3016 = __THREW__; __THREW__ = 0;
        $3017 = $3016&1;
        if ($3017) {
         label = 1960;
         break;
        }
        $3018 = (_malloc(8)|0);
        $3019 = ($3018|0)==(0|0);
        if (!($3019)) {
         $$lcssa$i1392 = $3018;
         break L2018;
        }
       }
       if ((label|0) == 1960) {
        $4825 = ___cxa_find_matching_catch()|0;
        $4826 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4826;$eh$lpad$body$indexZ2D = $4825;
        break L12;
       }
       $3020 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3020>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3020|0),(20008|0),(386|0));
       $3021 = __THREW__; __THREW__ = 0;
       $3022 = $3021&1;
       if ($3022) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1392 = $3011;
      }
     } while(0);
     $3023 = (($$lcssa$i1392) + 4|0);
     HEAP8[$3023>>0] = 0;
     HEAP32[$$lcssa$i1392>>2] = ((472 + 8|0));
     $3024 = HEAP32[$agg$result>>2]|0;
     $3025 = (($3024) + 796|0);
     HEAP32[$3025>>2] = $$lcssa$i1392;
     $3026 = (_malloc(8)|0);
     $3027 = ($3026|0)==(0|0);
     L2028: do {
      if ($3027) {
       while(1) {
        $3028 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3028+0)|0);
        $3029 = ($3028|0)==(0);
        if ($3029) {
         break;
        }
        $3030 = $3028;
        __THREW__ = 0;
        invoke_v($3030|0);
        $3031 = __THREW__; __THREW__ = 0;
        $3032 = $3031&1;
        if ($3032) {
         label = 1959;
         break;
        }
        $3033 = (_malloc(8)|0);
        $3034 = ($3033|0)==(0|0);
        if (!($3034)) {
         $$lcssa$i1399 = $3033;
         break L2028;
        }
       }
       if ((label|0) == 1959) {
        $4823 = ___cxa_find_matching_catch()|0;
        $4824 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4824;$eh$lpad$body$indexZ2D = $4823;
        break L12;
       }
       $3035 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3035>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3035|0),(20008|0),(386|0));
       $3036 = __THREW__; __THREW__ = 0;
       $3037 = $3036&1;
       if ($3037) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1399 = $3026;
      }
     } while(0);
     $3038 = (($$lcssa$i1399) + 4|0);
     HEAP8[$3038>>0] = 0;
     HEAP32[$$lcssa$i1399>>2] = ((472 + 8|0));
     $3039 = HEAP32[$agg$result>>2]|0;
     $3040 = (($3039) + 800|0);
     HEAP32[$3040>>2] = $$lcssa$i1399;
     $3041 = (_malloc(8)|0);
     $3042 = ($3041|0)==(0|0);
     L2038: do {
      if ($3042) {
       while(1) {
        $3043 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3043+0)|0);
        $3044 = ($3043|0)==(0);
        if ($3044) {
         break;
        }
        $3045 = $3043;
        __THREW__ = 0;
        invoke_v($3045|0);
        $3046 = __THREW__; __THREW__ = 0;
        $3047 = $3046&1;
        if ($3047) {
         label = 1958;
         break;
        }
        $3048 = (_malloc(8)|0);
        $3049 = ($3048|0)==(0|0);
        if (!($3049)) {
         $$lcssa$i1406 = $3048;
         break L2038;
        }
       }
       if ((label|0) == 1958) {
        $4821 = ___cxa_find_matching_catch()|0;
        $4822 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4822;$eh$lpad$body$indexZ2D = $4821;
        break L12;
       }
       $3050 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3050>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3050|0),(20008|0),(386|0));
       $3051 = __THREW__; __THREW__ = 0;
       $3052 = $3051&1;
       if ($3052) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1406 = $3041;
      }
     } while(0);
     $3053 = (($$lcssa$i1406) + 4|0);
     HEAP8[$3053>>0] = 0;
     HEAP32[$$lcssa$i1406>>2] = ((520 + 8|0));
     $3054 = HEAP32[$agg$result>>2]|0;
     $3055 = (($3054) + 804|0);
     HEAP32[$3055>>2] = $$lcssa$i1406;
     $3056 = (_malloc(8)|0);
     $3057 = ($3056|0)==(0|0);
     L2048: do {
      if ($3057) {
       while(1) {
        $3058 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3058+0)|0);
        $3059 = ($3058|0)==(0);
        if ($3059) {
         break;
        }
        $3060 = $3058;
        __THREW__ = 0;
        invoke_v($3060|0);
        $3061 = __THREW__; __THREW__ = 0;
        $3062 = $3061&1;
        if ($3062) {
         label = 1957;
         break;
        }
        $3063 = (_malloc(8)|0);
        $3064 = ($3063|0)==(0|0);
        if (!($3064)) {
         $$lcssa$i1413 = $3063;
         break L2048;
        }
       }
       if ((label|0) == 1957) {
        $4819 = ___cxa_find_matching_catch()|0;
        $4820 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4820;$eh$lpad$body$indexZ2D = $4819;
        break L12;
       }
       $3065 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3065>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3065|0),(20008|0),(386|0));
       $3066 = __THREW__; __THREW__ = 0;
       $3067 = $3066&1;
       if ($3067) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1413 = $3056;
      }
     } while(0);
     $3068 = (($$lcssa$i1413) + 4|0);
     HEAP8[$3068>>0] = 0;
     HEAP32[$$lcssa$i1413>>2] = ((520 + 8|0));
     $3069 = HEAP32[$agg$result>>2]|0;
     $3070 = (($3069) + 808|0);
     HEAP32[$3070>>2] = $$lcssa$i1413;
     $3071 = (_malloc(8)|0);
     $3072 = ($3071|0)==(0|0);
     L2058: do {
      if ($3072) {
       while(1) {
        $3073 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3073+0)|0);
        $3074 = ($3073|0)==(0);
        if ($3074) {
         break;
        }
        $3075 = $3073;
        __THREW__ = 0;
        invoke_v($3075|0);
        $3076 = __THREW__; __THREW__ = 0;
        $3077 = $3076&1;
        if ($3077) {
         label = 1956;
         break;
        }
        $3078 = (_malloc(8)|0);
        $3079 = ($3078|0)==(0|0);
        if (!($3079)) {
         $$lcssa$i1420 = $3078;
         break L2058;
        }
       }
       if ((label|0) == 1956) {
        $4817 = ___cxa_find_matching_catch()|0;
        $4818 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4818;$eh$lpad$body$indexZ2D = $4817;
        break L12;
       }
       $3080 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3080>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3080|0),(20008|0),(386|0));
       $3081 = __THREW__; __THREW__ = 0;
       $3082 = $3081&1;
       if ($3082) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1420 = $3071;
      }
     } while(0);
     $3083 = (($$lcssa$i1420) + 4|0);
     HEAP8[$3083>>0] = 0;
     HEAP32[$$lcssa$i1420>>2] = ((520 + 8|0));
     $3084 = HEAP32[$agg$result>>2]|0;
     $3085 = (($3084) + 812|0);
     HEAP32[$3085>>2] = $$lcssa$i1420;
     $3086 = (_malloc(8)|0);
     $3087 = ($3086|0)==(0|0);
     L2068: do {
      if ($3087) {
       while(1) {
        $3088 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3088+0)|0);
        $3089 = ($3088|0)==(0);
        if ($3089) {
         break;
        }
        $3090 = $3088;
        __THREW__ = 0;
        invoke_v($3090|0);
        $3091 = __THREW__; __THREW__ = 0;
        $3092 = $3091&1;
        if ($3092) {
         label = 1955;
         break;
        }
        $3093 = (_malloc(8)|0);
        $3094 = ($3093|0)==(0|0);
        if (!($3094)) {
         $$lcssa$i1427 = $3093;
         break L2068;
        }
       }
       if ((label|0) == 1955) {
        $4815 = ___cxa_find_matching_catch()|0;
        $4816 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4816;$eh$lpad$body$indexZ2D = $4815;
        break L12;
       }
       $3095 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3095>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3095|0),(20008|0),(386|0));
       $3096 = __THREW__; __THREW__ = 0;
       $3097 = $3096&1;
       if ($3097) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1427 = $3086;
      }
     } while(0);
     $3098 = (($$lcssa$i1427) + 4|0);
     HEAP8[$3098>>0] = 0;
     HEAP32[$$lcssa$i1427>>2] = ((520 + 8|0));
     $3099 = HEAP32[$agg$result>>2]|0;
     $3100 = (($3099) + 816|0);
     HEAP32[$3100>>2] = $$lcssa$i1427;
     $3101 = (_malloc(8)|0);
     $3102 = ($3101|0)==(0|0);
     L2078: do {
      if ($3102) {
       while(1) {
        $3103 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3103+0)|0);
        $3104 = ($3103|0)==(0);
        if ($3104) {
         break;
        }
        $3105 = $3103;
        __THREW__ = 0;
        invoke_v($3105|0);
        $3106 = __THREW__; __THREW__ = 0;
        $3107 = $3106&1;
        if ($3107) {
         label = 1954;
         break;
        }
        $3108 = (_malloc(8)|0);
        $3109 = ($3108|0)==(0|0);
        if (!($3109)) {
         $$lcssa$i1434 = $3108;
         break L2078;
        }
       }
       if ((label|0) == 1954) {
        $4813 = ___cxa_find_matching_catch()|0;
        $4814 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4814;$eh$lpad$body$indexZ2D = $4813;
        break L12;
       }
       $3110 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3110>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3110|0),(20008|0),(386|0));
       $3111 = __THREW__; __THREW__ = 0;
       $3112 = $3111&1;
       if ($3112) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1434 = $3101;
      }
     } while(0);
     $3113 = (($$lcssa$i1434) + 4|0);
     HEAP8[$3113>>0] = 0;
     HEAP32[$$lcssa$i1434>>2] = ((520 + 8|0));
     $3114 = HEAP32[$agg$result>>2]|0;
     $3115 = (($3114) + 820|0);
     HEAP32[$3115>>2] = $$lcssa$i1434;
     $3116 = (_malloc(8)|0);
     $3117 = ($3116|0)==(0|0);
     L2088: do {
      if ($3117) {
       while(1) {
        $3118 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3118+0)|0);
        $3119 = ($3118|0)==(0);
        if ($3119) {
         break;
        }
        $3120 = $3118;
        __THREW__ = 0;
        invoke_v($3120|0);
        $3121 = __THREW__; __THREW__ = 0;
        $3122 = $3121&1;
        if ($3122) {
         label = 1953;
         break;
        }
        $3123 = (_malloc(8)|0);
        $3124 = ($3123|0)==(0|0);
        if (!($3124)) {
         $$lcssa$i1441 = $3123;
         break L2088;
        }
       }
       if ((label|0) == 1953) {
        $4811 = ___cxa_find_matching_catch()|0;
        $4812 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4812;$eh$lpad$body$indexZ2D = $4811;
        break L12;
       }
       $3125 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3125>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3125|0),(20008|0),(386|0));
       $3126 = __THREW__; __THREW__ = 0;
       $3127 = $3126&1;
       if ($3127) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1441 = $3116;
      }
     } while(0);
     $3128 = (($$lcssa$i1441) + 4|0);
     HEAP8[$3128>>0] = 0;
     HEAP32[$$lcssa$i1441>>2] = ((472 + 8|0));
     $3129 = HEAP32[$agg$result>>2]|0;
     $3130 = (($3129) + 824|0);
     HEAP32[$3130>>2] = $$lcssa$i1441;
     $3131 = (_malloc(8)|0);
     $3132 = ($3131|0)==(0|0);
     L2098: do {
      if ($3132) {
       while(1) {
        $3133 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3133+0)|0);
        $3134 = ($3133|0)==(0);
        if ($3134) {
         break;
        }
        $3135 = $3133;
        __THREW__ = 0;
        invoke_v($3135|0);
        $3136 = __THREW__; __THREW__ = 0;
        $3137 = $3136&1;
        if ($3137) {
         label = 1952;
         break;
        }
        $3138 = (_malloc(8)|0);
        $3139 = ($3138|0)==(0|0);
        if (!($3139)) {
         $$lcssa$i1448 = $3138;
         break L2098;
        }
       }
       if ((label|0) == 1952) {
        $4809 = ___cxa_find_matching_catch()|0;
        $4810 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4810;$eh$lpad$body$indexZ2D = $4809;
        break L12;
       }
       $3140 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3140>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3140|0),(20008|0),(386|0));
       $3141 = __THREW__; __THREW__ = 0;
       $3142 = $3141&1;
       if ($3142) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1448 = $3131;
      }
     } while(0);
     $3143 = (($$lcssa$i1448) + 4|0);
     HEAP8[$3143>>0] = 0;
     HEAP32[$$lcssa$i1448>>2] = ((472 + 8|0));
     $3144 = HEAP32[$agg$result>>2]|0;
     $3145 = (($3144) + 828|0);
     HEAP32[$3145>>2] = $$lcssa$i1448;
     $3146 = (_malloc(8)|0);
     $3147 = ($3146|0)==(0|0);
     L2108: do {
      if ($3147) {
       while(1) {
        $3148 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3148+0)|0);
        $3149 = ($3148|0)==(0);
        if ($3149) {
         break;
        }
        $3150 = $3148;
        __THREW__ = 0;
        invoke_v($3150|0);
        $3151 = __THREW__; __THREW__ = 0;
        $3152 = $3151&1;
        if ($3152) {
         label = 1951;
         break;
        }
        $3153 = (_malloc(8)|0);
        $3154 = ($3153|0)==(0|0);
        if (!($3154)) {
         $$lcssa$i1455 = $3153;
         break L2108;
        }
       }
       if ((label|0) == 1951) {
        $4807 = ___cxa_find_matching_catch()|0;
        $4808 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4808;$eh$lpad$body$indexZ2D = $4807;
        break L12;
       }
       $3155 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3155>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3155|0),(20008|0),(386|0));
       $3156 = __THREW__; __THREW__ = 0;
       $3157 = $3156&1;
       if ($3157) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1455 = $3146;
      }
     } while(0);
     $3158 = (($$lcssa$i1455) + 4|0);
     HEAP8[$3158>>0] = 0;
     HEAP32[$$lcssa$i1455>>2] = ((472 + 8|0));
     $3159 = HEAP32[$agg$result>>2]|0;
     $3160 = (($3159) + 832|0);
     HEAP32[$3160>>2] = $$lcssa$i1455;
     $3161 = (_malloc(8)|0);
     $3162 = ($3161|0)==(0|0);
     L2118: do {
      if ($3162) {
       while(1) {
        $3163 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3163+0)|0);
        $3164 = ($3163|0)==(0);
        if ($3164) {
         break;
        }
        $3165 = $3163;
        __THREW__ = 0;
        invoke_v($3165|0);
        $3166 = __THREW__; __THREW__ = 0;
        $3167 = $3166&1;
        if ($3167) {
         label = 1950;
         break;
        }
        $3168 = (_malloc(8)|0);
        $3169 = ($3168|0)==(0|0);
        if (!($3169)) {
         $$lcssa$i1462 = $3168;
         break L2118;
        }
       }
       if ((label|0) == 1950) {
        $4805 = ___cxa_find_matching_catch()|0;
        $4806 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4806;$eh$lpad$body$indexZ2D = $4805;
        break L12;
       }
       $3170 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3170>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3170|0),(20008|0),(386|0));
       $3171 = __THREW__; __THREW__ = 0;
       $3172 = $3171&1;
       if ($3172) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1462 = $3161;
      }
     } while(0);
     $3173 = (($$lcssa$i1462) + 4|0);
     HEAP8[$3173>>0] = 0;
     HEAP32[$$lcssa$i1462>>2] = ((472 + 8|0));
     $3174 = HEAP32[$agg$result>>2]|0;
     $3175 = (($3174) + 836|0);
     HEAP32[$3175>>2] = $$lcssa$i1462;
     $3176 = (_malloc(8)|0);
     $3177 = ($3176|0)==(0|0);
     L2128: do {
      if ($3177) {
       while(1) {
        $3178 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3178+0)|0);
        $3179 = ($3178|0)==(0);
        if ($3179) {
         break;
        }
        $3180 = $3178;
        __THREW__ = 0;
        invoke_v($3180|0);
        $3181 = __THREW__; __THREW__ = 0;
        $3182 = $3181&1;
        if ($3182) {
         label = 1949;
         break;
        }
        $3183 = (_malloc(8)|0);
        $3184 = ($3183|0)==(0|0);
        if (!($3184)) {
         $$lcssa$i1469 = $3183;
         break L2128;
        }
       }
       if ((label|0) == 1949) {
        $4803 = ___cxa_find_matching_catch()|0;
        $4804 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4804;$eh$lpad$body$indexZ2D = $4803;
        break L12;
       }
       $3185 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3185>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3185|0),(20008|0),(386|0));
       $3186 = __THREW__; __THREW__ = 0;
       $3187 = $3186&1;
       if ($3187) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1469 = $3176;
      }
     } while(0);
     $3188 = (($$lcssa$i1469) + 4|0);
     HEAP8[$3188>>0] = 1;
     HEAP32[$$lcssa$i1469>>2] = ((832 + 8|0));
     $3189 = HEAP32[$agg$result>>2]|0;
     $3190 = (($3189) + 840|0);
     HEAP32[$3190>>2] = $$lcssa$i1469;
     $3191 = (_malloc(8)|0);
     $3192 = ($3191|0)==(0|0);
     L2138: do {
      if ($3192) {
       while(1) {
        $3193 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3193+0)|0);
        $3194 = ($3193|0)==(0);
        if ($3194) {
         break;
        }
        $3195 = $3193;
        __THREW__ = 0;
        invoke_v($3195|0);
        $3196 = __THREW__; __THREW__ = 0;
        $3197 = $3196&1;
        if ($3197) {
         label = 1948;
         break;
        }
        $3198 = (_malloc(8)|0);
        $3199 = ($3198|0)==(0|0);
        if (!($3199)) {
         $$lcssa$i1476 = $3198;
         break L2138;
        }
       }
       if ((label|0) == 1948) {
        $4801 = ___cxa_find_matching_catch()|0;
        $4802 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4802;$eh$lpad$body$indexZ2D = $4801;
        break L12;
       }
       $3200 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3200>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3200|0),(20008|0),(386|0));
       $3201 = __THREW__; __THREW__ = 0;
       $3202 = $3201&1;
       if ($3202) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1476 = $3191;
      }
     } while(0);
     $3203 = (($$lcssa$i1476) + 4|0);
     HEAP8[$3203>>0] = 1;
     HEAP32[$$lcssa$i1476>>2] = ((832 + 8|0));
     $3204 = HEAP32[$agg$result>>2]|0;
     $3205 = (($3204) + 844|0);
     HEAP32[$3205>>2] = $$lcssa$i1476;
     $3206 = (_malloc(8)|0);
     $3207 = ($3206|0)==(0|0);
     L2148: do {
      if ($3207) {
       while(1) {
        $3208 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3208+0)|0);
        $3209 = ($3208|0)==(0);
        if ($3209) {
         break;
        }
        $3210 = $3208;
        __THREW__ = 0;
        invoke_v($3210|0);
        $3211 = __THREW__; __THREW__ = 0;
        $3212 = $3211&1;
        if ($3212) {
         label = 1947;
         break;
        }
        $3213 = (_malloc(8)|0);
        $3214 = ($3213|0)==(0|0);
        if (!($3214)) {
         $$lcssa$i1483 = $3213;
         break L2148;
        }
       }
       if ((label|0) == 1947) {
        $4799 = ___cxa_find_matching_catch()|0;
        $4800 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4800;$eh$lpad$body$indexZ2D = $4799;
        break L12;
       }
       $3215 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3215>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3215|0),(20008|0),(386|0));
       $3216 = __THREW__; __THREW__ = 0;
       $3217 = $3216&1;
       if ($3217) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1483 = $3206;
      }
     } while(0);
     $3218 = (($$lcssa$i1483) + 4|0);
     HEAP8[$3218>>0] = 0;
     HEAP32[$$lcssa$i1483>>2] = ((520 + 8|0));
     $3219 = HEAP32[$agg$result>>2]|0;
     $3220 = (($3219) + 848|0);
     HEAP32[$3220>>2] = $$lcssa$i1483;
     $3221 = (_malloc(8)|0);
     $3222 = ($3221|0)==(0|0);
     L2158: do {
      if ($3222) {
       while(1) {
        $3223 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3223+0)|0);
        $3224 = ($3223|0)==(0);
        if ($3224) {
         break;
        }
        $3225 = $3223;
        __THREW__ = 0;
        invoke_v($3225|0);
        $3226 = __THREW__; __THREW__ = 0;
        $3227 = $3226&1;
        if ($3227) {
         label = 1946;
         break;
        }
        $3228 = (_malloc(8)|0);
        $3229 = ($3228|0)==(0|0);
        if (!($3229)) {
         $$lcssa$i1490 = $3228;
         break L2158;
        }
       }
       if ((label|0) == 1946) {
        $4797 = ___cxa_find_matching_catch()|0;
        $4798 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4798;$eh$lpad$body$indexZ2D = $4797;
        break L12;
       }
       $3230 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3230>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3230|0),(20008|0),(386|0));
       $3231 = __THREW__; __THREW__ = 0;
       $3232 = $3231&1;
       if ($3232) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1490 = $3221;
      }
     } while(0);
     $3233 = (($$lcssa$i1490) + 4|0);
     HEAP8[$3233>>0] = 0;
     HEAP32[$$lcssa$i1490>>2] = ((472 + 8|0));
     $3234 = HEAP32[$agg$result>>2]|0;
     $3235 = (($3234) + 852|0);
     HEAP32[$3235>>2] = $$lcssa$i1490;
     $3236 = (_malloc(8)|0);
     $3237 = ($3236|0)==(0|0);
     L2168: do {
      if ($3237) {
       while(1) {
        $3238 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3238+0)|0);
        $3239 = ($3238|0)==(0);
        if ($3239) {
         break;
        }
        $3240 = $3238;
        __THREW__ = 0;
        invoke_v($3240|0);
        $3241 = __THREW__; __THREW__ = 0;
        $3242 = $3241&1;
        if ($3242) {
         label = 1945;
         break;
        }
        $3243 = (_malloc(8)|0);
        $3244 = ($3243|0)==(0|0);
        if (!($3244)) {
         $$lcssa$i1497 = $3243;
         break L2168;
        }
       }
       if ((label|0) == 1945) {
        $4795 = ___cxa_find_matching_catch()|0;
        $4796 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4796;$eh$lpad$body$indexZ2D = $4795;
        break L12;
       }
       $3245 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3245>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3245|0),(20008|0),(386|0));
       $3246 = __THREW__; __THREW__ = 0;
       $3247 = $3246&1;
       if ($3247) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1497 = $3236;
      }
     } while(0);
     $3248 = (($$lcssa$i1497) + 4|0);
     HEAP8[$3248>>0] = 0;
     HEAP32[$$lcssa$i1497>>2] = ((472 + 8|0));
     $3249 = HEAP32[$agg$result>>2]|0;
     $3250 = (($3249) + 856|0);
     HEAP32[$3250>>2] = $$lcssa$i1497;
     $3251 = (_malloc(8)|0);
     $3252 = ($3251|0)==(0|0);
     L2178: do {
      if ($3252) {
       while(1) {
        $3253 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3253+0)|0);
        $3254 = ($3253|0)==(0);
        if ($3254) {
         break;
        }
        $3255 = $3253;
        __THREW__ = 0;
        invoke_v($3255|0);
        $3256 = __THREW__; __THREW__ = 0;
        $3257 = $3256&1;
        if ($3257) {
         label = 1944;
         break;
        }
        $3258 = (_malloc(8)|0);
        $3259 = ($3258|0)==(0|0);
        if (!($3259)) {
         $$lcssa$i1504 = $3258;
         break L2178;
        }
       }
       if ((label|0) == 1944) {
        $4793 = ___cxa_find_matching_catch()|0;
        $4794 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4794;$eh$lpad$body$indexZ2D = $4793;
        break L12;
       }
       $3260 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3260>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3260|0),(20008|0),(386|0));
       $3261 = __THREW__; __THREW__ = 0;
       $3262 = $3261&1;
       if ($3262) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1504 = $3251;
      }
     } while(0);
     $3263 = (($$lcssa$i1504) + 4|0);
     HEAP8[$3263>>0] = 0;
     HEAP32[$$lcssa$i1504>>2] = ((472 + 8|0));
     $3264 = HEAP32[$agg$result>>2]|0;
     $3265 = (($3264) + 860|0);
     HEAP32[$3265>>2] = $$lcssa$i1504;
     $3266 = (_malloc(8)|0);
     $3267 = ($3266|0)==(0|0);
     L2188: do {
      if ($3267) {
       while(1) {
        $3268 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3268+0)|0);
        $3269 = ($3268|0)==(0);
        if ($3269) {
         break;
        }
        $3270 = $3268;
        __THREW__ = 0;
        invoke_v($3270|0);
        $3271 = __THREW__; __THREW__ = 0;
        $3272 = $3271&1;
        if ($3272) {
         label = 1943;
         break;
        }
        $3273 = (_malloc(8)|0);
        $3274 = ($3273|0)==(0|0);
        if (!($3274)) {
         $$lcssa$i1511 = $3273;
         break L2188;
        }
       }
       if ((label|0) == 1943) {
        $4791 = ___cxa_find_matching_catch()|0;
        $4792 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4792;$eh$lpad$body$indexZ2D = $4791;
        break L12;
       }
       $3275 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3275>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3275|0),(20008|0),(386|0));
       $3276 = __THREW__; __THREW__ = 0;
       $3277 = $3276&1;
       if ($3277) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1511 = $3266;
      }
     } while(0);
     $3278 = (($$lcssa$i1511) + 4|0);
     HEAP8[$3278>>0] = 0;
     HEAP32[$$lcssa$i1511>>2] = ((520 + 8|0));
     $3279 = HEAP32[$agg$result>>2]|0;
     $3280 = (($3279) + 864|0);
     HEAP32[$3280>>2] = $$lcssa$i1511;
     $3281 = (_malloc(8)|0);
     $3282 = ($3281|0)==(0|0);
     L2198: do {
      if ($3282) {
       while(1) {
        $3283 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3283+0)|0);
        $3284 = ($3283|0)==(0);
        if ($3284) {
         break;
        }
        $3285 = $3283;
        __THREW__ = 0;
        invoke_v($3285|0);
        $3286 = __THREW__; __THREW__ = 0;
        $3287 = $3286&1;
        if ($3287) {
         label = 1942;
         break;
        }
        $3288 = (_malloc(8)|0);
        $3289 = ($3288|0)==(0|0);
        if (!($3289)) {
         $$lcssa$i1518 = $3288;
         break L2198;
        }
       }
       if ((label|0) == 1942) {
        $4789 = ___cxa_find_matching_catch()|0;
        $4790 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4790;$eh$lpad$body$indexZ2D = $4789;
        break L12;
       }
       $3290 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3290>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3290|0),(20008|0),(386|0));
       $3291 = __THREW__; __THREW__ = 0;
       $3292 = $3291&1;
       if ($3292) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1518 = $3281;
      }
     } while(0);
     $3293 = (($$lcssa$i1518) + 4|0);
     HEAP8[$3293>>0] = 0;
     HEAP32[$$lcssa$i1518>>2] = ((472 + 8|0));
     $3294 = HEAP32[$agg$result>>2]|0;
     $3295 = (($3294) + 868|0);
     HEAP32[$3295>>2] = $$lcssa$i1518;
     $3296 = (_malloc(8)|0);
     $3297 = ($3296|0)==(0|0);
     L2208: do {
      if ($3297) {
       while(1) {
        $3298 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3298+0)|0);
        $3299 = ($3298|0)==(0);
        if ($3299) {
         break;
        }
        $3300 = $3298;
        __THREW__ = 0;
        invoke_v($3300|0);
        $3301 = __THREW__; __THREW__ = 0;
        $3302 = $3301&1;
        if ($3302) {
         label = 1941;
         break;
        }
        $3303 = (_malloc(8)|0);
        $3304 = ($3303|0)==(0|0);
        if (!($3304)) {
         $$lcssa$i1525 = $3303;
         break L2208;
        }
       }
       if ((label|0) == 1941) {
        $4787 = ___cxa_find_matching_catch()|0;
        $4788 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4788;$eh$lpad$body$indexZ2D = $4787;
        break L12;
       }
       $3305 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3305>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3305|0),(20008|0),(386|0));
       $3306 = __THREW__; __THREW__ = 0;
       $3307 = $3306&1;
       if ($3307) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1525 = $3296;
      }
     } while(0);
     $3308 = (($$lcssa$i1525) + 4|0);
     HEAP8[$3308>>0] = 0;
     HEAP32[$$lcssa$i1525>>2] = ((520 + 8|0));
     $3309 = HEAP32[$agg$result>>2]|0;
     $3310 = (($3309) + 872|0);
     HEAP32[$3310>>2] = $$lcssa$i1525;
     $3311 = (_malloc(8)|0);
     $3312 = ($3311|0)==(0|0);
     L2218: do {
      if ($3312) {
       while(1) {
        $3313 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3313+0)|0);
        $3314 = ($3313|0)==(0);
        if ($3314) {
         break;
        }
        $3315 = $3313;
        __THREW__ = 0;
        invoke_v($3315|0);
        $3316 = __THREW__; __THREW__ = 0;
        $3317 = $3316&1;
        if ($3317) {
         label = 1940;
         break;
        }
        $3318 = (_malloc(8)|0);
        $3319 = ($3318|0)==(0|0);
        if (!($3319)) {
         $$lcssa$i1532 = $3318;
         break L2218;
        }
       }
       if ((label|0) == 1940) {
        $4785 = ___cxa_find_matching_catch()|0;
        $4786 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4786;$eh$lpad$body$indexZ2D = $4785;
        break L12;
       }
       $3320 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3320>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3320|0),(20008|0),(386|0));
       $3321 = __THREW__; __THREW__ = 0;
       $3322 = $3321&1;
       if ($3322) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1532 = $3311;
      }
     } while(0);
     $3323 = (($$lcssa$i1532) + 4|0);
     HEAP8[$3323>>0] = 0;
     HEAP32[$$lcssa$i1532>>2] = ((520 + 8|0));
     $3324 = HEAP32[$agg$result>>2]|0;
     $3325 = (($3324) + 876|0);
     HEAP32[$3325>>2] = $$lcssa$i1532;
     $3326 = (_malloc(8)|0);
     $3327 = ($3326|0)==(0|0);
     L2228: do {
      if ($3327) {
       while(1) {
        $3328 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3328+0)|0);
        $3329 = ($3328|0)==(0);
        if ($3329) {
         break;
        }
        $3330 = $3328;
        __THREW__ = 0;
        invoke_v($3330|0);
        $3331 = __THREW__; __THREW__ = 0;
        $3332 = $3331&1;
        if ($3332) {
         label = 1939;
         break;
        }
        $3333 = (_malloc(8)|0);
        $3334 = ($3333|0)==(0|0);
        if (!($3334)) {
         $$lcssa$i1539 = $3333;
         break L2228;
        }
       }
       if ((label|0) == 1939) {
        $4783 = ___cxa_find_matching_catch()|0;
        $4784 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4784;$eh$lpad$body$indexZ2D = $4783;
        break L12;
       }
       $3335 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3335>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3335|0),(20008|0),(386|0));
       $3336 = __THREW__; __THREW__ = 0;
       $3337 = $3336&1;
       if ($3337) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1539 = $3326;
      }
     } while(0);
     $3338 = (($$lcssa$i1539) + 4|0);
     HEAP8[$3338>>0] = 0;
     HEAP32[$$lcssa$i1539>>2] = ((472 + 8|0));
     $3339 = HEAP32[$agg$result>>2]|0;
     $3340 = (($3339) + 880|0);
     HEAP32[$3340>>2] = $$lcssa$i1539;
     $3341 = (_malloc(8)|0);
     $3342 = ($3341|0)==(0|0);
     L2238: do {
      if ($3342) {
       while(1) {
        $3343 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3343+0)|0);
        $3344 = ($3343|0)==(0);
        if ($3344) {
         break;
        }
        $3345 = $3343;
        __THREW__ = 0;
        invoke_v($3345|0);
        $3346 = __THREW__; __THREW__ = 0;
        $3347 = $3346&1;
        if ($3347) {
         label = 1938;
         break;
        }
        $3348 = (_malloc(8)|0);
        $3349 = ($3348|0)==(0|0);
        if (!($3349)) {
         $$lcssa$i1546 = $3348;
         break L2238;
        }
       }
       if ((label|0) == 1938) {
        $4781 = ___cxa_find_matching_catch()|0;
        $4782 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4782;$eh$lpad$body$indexZ2D = $4781;
        break L12;
       }
       $3350 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3350>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3350|0),(20008|0),(386|0));
       $3351 = __THREW__; __THREW__ = 0;
       $3352 = $3351&1;
       if ($3352) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1546 = $3341;
      }
     } while(0);
     $3353 = (($$lcssa$i1546) + 4|0);
     HEAP8[$3353>>0] = 0;
     HEAP32[$$lcssa$i1546>>2] = ((472 + 8|0));
     $3354 = HEAP32[$agg$result>>2]|0;
     $3355 = (($3354) + 884|0);
     HEAP32[$3355>>2] = $$lcssa$i1546;
     $3356 = (_malloc(8)|0);
     $3357 = ($3356|0)==(0|0);
     L2248: do {
      if ($3357) {
       while(1) {
        $3358 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3358+0)|0);
        $3359 = ($3358|0)==(0);
        if ($3359) {
         break;
        }
        $3360 = $3358;
        __THREW__ = 0;
        invoke_v($3360|0);
        $3361 = __THREW__; __THREW__ = 0;
        $3362 = $3361&1;
        if ($3362) {
         label = 1937;
         break;
        }
        $3363 = (_malloc(8)|0);
        $3364 = ($3363|0)==(0|0);
        if (!($3364)) {
         $$lcssa$i1553 = $3363;
         break L2248;
        }
       }
       if ((label|0) == 1937) {
        $4779 = ___cxa_find_matching_catch()|0;
        $4780 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4780;$eh$lpad$body$indexZ2D = $4779;
        break L12;
       }
       $3365 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3365>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3365|0),(20008|0),(386|0));
       $3366 = __THREW__; __THREW__ = 0;
       $3367 = $3366&1;
       if ($3367) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1553 = $3356;
      }
     } while(0);
     $3368 = (($$lcssa$i1553) + 4|0);
     HEAP8[$3368>>0] = 0;
     HEAP32[$$lcssa$i1553>>2] = ((472 + 8|0));
     $3369 = HEAP32[$agg$result>>2]|0;
     $3370 = (($3369) + 888|0);
     HEAP32[$3370>>2] = $$lcssa$i1553;
     $3371 = (_malloc(8)|0);
     $3372 = ($3371|0)==(0|0);
     L2258: do {
      if ($3372) {
       while(1) {
        $3373 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3373+0)|0);
        $3374 = ($3373|0)==(0);
        if ($3374) {
         break;
        }
        $3375 = $3373;
        __THREW__ = 0;
        invoke_v($3375|0);
        $3376 = __THREW__; __THREW__ = 0;
        $3377 = $3376&1;
        if ($3377) {
         label = 1936;
         break;
        }
        $3378 = (_malloc(8)|0);
        $3379 = ($3378|0)==(0|0);
        if (!($3379)) {
         $$lcssa$i1560 = $3378;
         break L2258;
        }
       }
       if ((label|0) == 1936) {
        $4777 = ___cxa_find_matching_catch()|0;
        $4778 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4778;$eh$lpad$body$indexZ2D = $4777;
        break L12;
       }
       $3380 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3380>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3380|0),(20008|0),(386|0));
       $3381 = __THREW__; __THREW__ = 0;
       $3382 = $3381&1;
       if ($3382) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1560 = $3371;
      }
     } while(0);
     $3383 = (($$lcssa$i1560) + 4|0);
     HEAP8[$3383>>0] = 0;
     HEAP32[$$lcssa$i1560>>2] = ((472 + 8|0));
     $3384 = HEAP32[$agg$result>>2]|0;
     $3385 = (($3384) + 892|0);
     HEAP32[$3385>>2] = $$lcssa$i1560;
     $3386 = (_malloc(8)|0);
     $3387 = ($3386|0)==(0|0);
     L2268: do {
      if ($3387) {
       while(1) {
        $3388 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3388+0)|0);
        $3389 = ($3388|0)==(0);
        if ($3389) {
         break;
        }
        $3390 = $3388;
        __THREW__ = 0;
        invoke_v($3390|0);
        $3391 = __THREW__; __THREW__ = 0;
        $3392 = $3391&1;
        if ($3392) {
         label = 1935;
         break;
        }
        $3393 = (_malloc(8)|0);
        $3394 = ($3393|0)==(0|0);
        if (!($3394)) {
         $$lcssa$i1567 = $3393;
         break L2268;
        }
       }
       if ((label|0) == 1935) {
        $4775 = ___cxa_find_matching_catch()|0;
        $4776 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4776;$eh$lpad$body$indexZ2D = $4775;
        break L12;
       }
       $3395 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3395>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3395|0),(20008|0),(386|0));
       $3396 = __THREW__; __THREW__ = 0;
       $3397 = $3396&1;
       if ($3397) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1567 = $3386;
      }
     } while(0);
     $3398 = (($$lcssa$i1567) + 4|0);
     HEAP8[$3398>>0] = 0;
     HEAP32[$$lcssa$i1567>>2] = ((472 + 8|0));
     $3399 = HEAP32[$agg$result>>2]|0;
     $3400 = (($3399) + 896|0);
     HEAP32[$3400>>2] = $$lcssa$i1567;
     $3401 = (_malloc(8)|0);
     $3402 = ($3401|0)==(0|0);
     L2278: do {
      if ($3402) {
       while(1) {
        $3403 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3403+0)|0);
        $3404 = ($3403|0)==(0);
        if ($3404) {
         break;
        }
        $3405 = $3403;
        __THREW__ = 0;
        invoke_v($3405|0);
        $3406 = __THREW__; __THREW__ = 0;
        $3407 = $3406&1;
        if ($3407) {
         label = 1934;
         break;
        }
        $3408 = (_malloc(8)|0);
        $3409 = ($3408|0)==(0|0);
        if (!($3409)) {
         $$lcssa$i1574 = $3408;
         break L2278;
        }
       }
       if ((label|0) == 1934) {
        $4773 = ___cxa_find_matching_catch()|0;
        $4774 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4774;$eh$lpad$body$indexZ2D = $4773;
        break L12;
       }
       $3410 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3410>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3410|0),(20008|0),(386|0));
       $3411 = __THREW__; __THREW__ = 0;
       $3412 = $3411&1;
       if ($3412) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1574 = $3401;
      }
     } while(0);
     $3413 = (($$lcssa$i1574) + 4|0);
     HEAP8[$3413>>0] = 0;
     HEAP32[$$lcssa$i1574>>2] = ((520 + 8|0));
     $3414 = HEAP32[$agg$result>>2]|0;
     $3415 = (($3414) + 900|0);
     HEAP32[$3415>>2] = $$lcssa$i1574;
     $3416 = (_malloc(8)|0);
     $3417 = ($3416|0)==(0|0);
     L2288: do {
      if ($3417) {
       while(1) {
        $3418 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3418+0)|0);
        $3419 = ($3418|0)==(0);
        if ($3419) {
         break;
        }
        $3420 = $3418;
        __THREW__ = 0;
        invoke_v($3420|0);
        $3421 = __THREW__; __THREW__ = 0;
        $3422 = $3421&1;
        if ($3422) {
         label = 1933;
         break;
        }
        $3423 = (_malloc(8)|0);
        $3424 = ($3423|0)==(0|0);
        if (!($3424)) {
         $$lcssa$i1581 = $3423;
         break L2288;
        }
       }
       if ((label|0) == 1933) {
        $4771 = ___cxa_find_matching_catch()|0;
        $4772 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4772;$eh$lpad$body$indexZ2D = $4771;
        break L12;
       }
       $3425 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3425>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3425|0),(20008|0),(386|0));
       $3426 = __THREW__; __THREW__ = 0;
       $3427 = $3426&1;
       if ($3427) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1581 = $3416;
      }
     } while(0);
     $3428 = (($$lcssa$i1581) + 4|0);
     HEAP8[$3428>>0] = 0;
     HEAP32[$$lcssa$i1581>>2] = ((520 + 8|0));
     $3429 = HEAP32[$agg$result>>2]|0;
     $3430 = (($3429) + 904|0);
     HEAP32[$3430>>2] = $$lcssa$i1581;
     $3431 = (_malloc(8)|0);
     $3432 = ($3431|0)==(0|0);
     L2298: do {
      if ($3432) {
       while(1) {
        $3433 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3433+0)|0);
        $3434 = ($3433|0)==(0);
        if ($3434) {
         break;
        }
        $3435 = $3433;
        __THREW__ = 0;
        invoke_v($3435|0);
        $3436 = __THREW__; __THREW__ = 0;
        $3437 = $3436&1;
        if ($3437) {
         label = 1932;
         break;
        }
        $3438 = (_malloc(8)|0);
        $3439 = ($3438|0)==(0|0);
        if (!($3439)) {
         $$lcssa$i1588 = $3438;
         break L2298;
        }
       }
       if ((label|0) == 1932) {
        $4769 = ___cxa_find_matching_catch()|0;
        $4770 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4770;$eh$lpad$body$indexZ2D = $4769;
        break L12;
       }
       $3440 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3440>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3440|0),(20008|0),(386|0));
       $3441 = __THREW__; __THREW__ = 0;
       $3442 = $3441&1;
       if ($3442) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1588 = $3431;
      }
     } while(0);
     $3443 = (($$lcssa$i1588) + 4|0);
     HEAP8[$3443>>0] = 0;
     HEAP32[$$lcssa$i1588>>2] = ((624 + 8|0));
     $3444 = HEAP32[$agg$result>>2]|0;
     $3445 = (($3444) + 908|0);
     HEAP32[$3445>>2] = $$lcssa$i1588;
     $3446 = (_malloc(8)|0);
     $3447 = ($3446|0)==(0|0);
     L2308: do {
      if ($3447) {
       while(1) {
        $3448 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3448+0)|0);
        $3449 = ($3448|0)==(0);
        if ($3449) {
         break;
        }
        $3450 = $3448;
        __THREW__ = 0;
        invoke_v($3450|0);
        $3451 = __THREW__; __THREW__ = 0;
        $3452 = $3451&1;
        if ($3452) {
         label = 1931;
         break;
        }
        $3453 = (_malloc(8)|0);
        $3454 = ($3453|0)==(0|0);
        if (!($3454)) {
         $$lcssa$i1595 = $3453;
         break L2308;
        }
       }
       if ((label|0) == 1931) {
        $4767 = ___cxa_find_matching_catch()|0;
        $4768 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4768;$eh$lpad$body$indexZ2D = $4767;
        break L12;
       }
       $3455 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3455>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3455|0),(20008|0),(386|0));
       $3456 = __THREW__; __THREW__ = 0;
       $3457 = $3456&1;
       if ($3457) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1595 = $3446;
      }
     } while(0);
     $3458 = (($$lcssa$i1595) + 4|0);
     HEAP8[$3458>>0] = 0;
     HEAP32[$$lcssa$i1595>>2] = ((624 + 8|0));
     $3459 = HEAP32[$agg$result>>2]|0;
     $3460 = (($3459) + 912|0);
     HEAP32[$3460>>2] = $$lcssa$i1595;
     $3461 = (_malloc(8)|0);
     $3462 = ($3461|0)==(0|0);
     L2318: do {
      if ($3462) {
       while(1) {
        $3463 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3463+0)|0);
        $3464 = ($3463|0)==(0);
        if ($3464) {
         break;
        }
        $3465 = $3463;
        __THREW__ = 0;
        invoke_v($3465|0);
        $3466 = __THREW__; __THREW__ = 0;
        $3467 = $3466&1;
        if ($3467) {
         label = 1930;
         break;
        }
        $3468 = (_malloc(8)|0);
        $3469 = ($3468|0)==(0|0);
        if (!($3469)) {
         $$lcssa$i1602 = $3468;
         break L2318;
        }
       }
       if ((label|0) == 1930) {
        $4765 = ___cxa_find_matching_catch()|0;
        $4766 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4766;$eh$lpad$body$indexZ2D = $4765;
        break L12;
       }
       $3470 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3470>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3470|0),(20008|0),(386|0));
       $3471 = __THREW__; __THREW__ = 0;
       $3472 = $3471&1;
       if ($3472) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1602 = $3461;
      }
     } while(0);
     $3473 = (($$lcssa$i1602) + 4|0);
     HEAP8[$3473>>0] = 0;
     HEAP32[$$lcssa$i1602>>2] = ((624 + 8|0));
     $3474 = HEAP32[$agg$result>>2]|0;
     $3475 = (($3474) + 916|0);
     HEAP32[$3475>>2] = $$lcssa$i1602;
     $3476 = (_malloc(8)|0);
     $3477 = ($3476|0)==(0|0);
     L2328: do {
      if ($3477) {
       while(1) {
        $3478 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3478+0)|0);
        $3479 = ($3478|0)==(0);
        if ($3479) {
         break;
        }
        $3480 = $3478;
        __THREW__ = 0;
        invoke_v($3480|0);
        $3481 = __THREW__; __THREW__ = 0;
        $3482 = $3481&1;
        if ($3482) {
         label = 1929;
         break;
        }
        $3483 = (_malloc(8)|0);
        $3484 = ($3483|0)==(0|0);
        if (!($3484)) {
         $$lcssa$i1609 = $3483;
         break L2328;
        }
       }
       if ((label|0) == 1929) {
        $4763 = ___cxa_find_matching_catch()|0;
        $4764 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4764;$eh$lpad$body$indexZ2D = $4763;
        break L12;
       }
       $3485 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3485>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3485|0),(20008|0),(386|0));
       $3486 = __THREW__; __THREW__ = 0;
       $3487 = $3486&1;
       if ($3487) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1609 = $3476;
      }
     } while(0);
     $3488 = (($$lcssa$i1609) + 4|0);
     HEAP8[$3488>>0] = 0;
     HEAP32[$$lcssa$i1609>>2] = ((624 + 8|0));
     $3489 = HEAP32[$agg$result>>2]|0;
     $3490 = (($3489) + 920|0);
     HEAP32[$3490>>2] = $$lcssa$i1609;
     $3491 = (_malloc(8)|0);
     $3492 = ($3491|0)==(0|0);
     L2338: do {
      if ($3492) {
       while(1) {
        $3493 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3493+0)|0);
        $3494 = ($3493|0)==(0);
        if ($3494) {
         break;
        }
        $3495 = $3493;
        __THREW__ = 0;
        invoke_v($3495|0);
        $3496 = __THREW__; __THREW__ = 0;
        $3497 = $3496&1;
        if ($3497) {
         label = 1928;
         break;
        }
        $3498 = (_malloc(8)|0);
        $3499 = ($3498|0)==(0|0);
        if (!($3499)) {
         $$lcssa$i1616 = $3498;
         break L2338;
        }
       }
       if ((label|0) == 1928) {
        $4761 = ___cxa_find_matching_catch()|0;
        $4762 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4762;$eh$lpad$body$indexZ2D = $4761;
        break L12;
       }
       $3500 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3500>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3500|0),(20008|0),(386|0));
       $3501 = __THREW__; __THREW__ = 0;
       $3502 = $3501&1;
       if ($3502) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1616 = $3491;
      }
     } while(0);
     $3503 = (($$lcssa$i1616) + 4|0);
     HEAP8[$3503>>0] = 0;
     HEAP32[$$lcssa$i1616>>2] = ((624 + 8|0));
     $3504 = HEAP32[$agg$result>>2]|0;
     $3505 = (($3504) + 924|0);
     HEAP32[$3505>>2] = $$lcssa$i1616;
     $3506 = (_malloc(8)|0);
     $3507 = ($3506|0)==(0|0);
     L2348: do {
      if ($3507) {
       while(1) {
        $3508 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3508+0)|0);
        $3509 = ($3508|0)==(0);
        if ($3509) {
         break;
        }
        $3510 = $3508;
        __THREW__ = 0;
        invoke_v($3510|0);
        $3511 = __THREW__; __THREW__ = 0;
        $3512 = $3511&1;
        if ($3512) {
         label = 1927;
         break;
        }
        $3513 = (_malloc(8)|0);
        $3514 = ($3513|0)==(0|0);
        if (!($3514)) {
         $$lcssa$i1623 = $3513;
         break L2348;
        }
       }
       if ((label|0) == 1927) {
        $4759 = ___cxa_find_matching_catch()|0;
        $4760 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4760;$eh$lpad$body$indexZ2D = $4759;
        break L12;
       }
       $3515 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3515>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3515|0),(20008|0),(386|0));
       $3516 = __THREW__; __THREW__ = 0;
       $3517 = $3516&1;
       if ($3517) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1623 = $3506;
      }
     } while(0);
     $3518 = (($$lcssa$i1623) + 4|0);
     HEAP8[$3518>>0] = 0;
     HEAP32[$$lcssa$i1623>>2] = ((520 + 8|0));
     $3519 = HEAP32[$agg$result>>2]|0;
     $3520 = (($3519) + 928|0);
     HEAP32[$3520>>2] = $$lcssa$i1623;
     $3521 = (_malloc(8)|0);
     $3522 = ($3521|0)==(0|0);
     L2358: do {
      if ($3522) {
       while(1) {
        $3523 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3523+0)|0);
        $3524 = ($3523|0)==(0);
        if ($3524) {
         break;
        }
        $3525 = $3523;
        __THREW__ = 0;
        invoke_v($3525|0);
        $3526 = __THREW__; __THREW__ = 0;
        $3527 = $3526&1;
        if ($3527) {
         label = 1926;
         break;
        }
        $3528 = (_malloc(8)|0);
        $3529 = ($3528|0)==(0|0);
        if (!($3529)) {
         $$lcssa$i1630 = $3528;
         break L2358;
        }
       }
       if ((label|0) == 1926) {
        $4757 = ___cxa_find_matching_catch()|0;
        $4758 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4758;$eh$lpad$body$indexZ2D = $4757;
        break L12;
       }
       $3530 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3530>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3530|0),(20008|0),(386|0));
       $3531 = __THREW__; __THREW__ = 0;
       $3532 = $3531&1;
       if ($3532) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1630 = $3521;
      }
     } while(0);
     $3533 = (($$lcssa$i1630) + 4|0);
     HEAP8[$3533>>0] = 0;
     HEAP32[$$lcssa$i1630>>2] = ((520 + 8|0));
     $3534 = HEAP32[$agg$result>>2]|0;
     $3535 = (($3534) + 932|0);
     HEAP32[$3535>>2] = $$lcssa$i1630;
     $3536 = (_malloc(8)|0);
     $3537 = ($3536|0)==(0|0);
     L2368: do {
      if ($3537) {
       while(1) {
        $3538 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3538+0)|0);
        $3539 = ($3538|0)==(0);
        if ($3539) {
         break;
        }
        $3540 = $3538;
        __THREW__ = 0;
        invoke_v($3540|0);
        $3541 = __THREW__; __THREW__ = 0;
        $3542 = $3541&1;
        if ($3542) {
         label = 1925;
         break;
        }
        $3543 = (_malloc(8)|0);
        $3544 = ($3543|0)==(0|0);
        if (!($3544)) {
         $$lcssa$i1637 = $3543;
         break L2368;
        }
       }
       if ((label|0) == 1925) {
        $4755 = ___cxa_find_matching_catch()|0;
        $4756 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4756;$eh$lpad$body$indexZ2D = $4755;
        break L12;
       }
       $3545 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3545>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3545|0),(20008|0),(386|0));
       $3546 = __THREW__; __THREW__ = 0;
       $3547 = $3546&1;
       if ($3547) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1637 = $3536;
      }
     } while(0);
     $3548 = (($$lcssa$i1637) + 4|0);
     HEAP32[$$lcssa$i1637>>2] = ((320 + 8|0));
     HEAP8[$3548>>0] = 1;
     $3549 = HEAP32[$agg$result>>2]|0;
     $3550 = (($3549) + 936|0);
     HEAP32[$3550>>2] = $$lcssa$i1637;
     $3551 = (_malloc(8)|0);
     $3552 = ($3551|0)==(0|0);
     L2378: do {
      if ($3552) {
       while(1) {
        $3553 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3553+0)|0);
        $3554 = ($3553|0)==(0);
        if ($3554) {
         break;
        }
        $3555 = $3553;
        __THREW__ = 0;
        invoke_v($3555|0);
        $3556 = __THREW__; __THREW__ = 0;
        $3557 = $3556&1;
        if ($3557) {
         label = 1924;
         break;
        }
        $3558 = (_malloc(8)|0);
        $3559 = ($3558|0)==(0|0);
        if (!($3559)) {
         $$lcssa$i1644 = $3558;
         break L2378;
        }
       }
       if ((label|0) == 1924) {
        $4753 = ___cxa_find_matching_catch()|0;
        $4754 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4754;$eh$lpad$body$indexZ2D = $4753;
        break L12;
       }
       $3560 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3560>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3560|0),(20008|0),(386|0));
       $3561 = __THREW__; __THREW__ = 0;
       $3562 = $3561&1;
       if ($3562) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1644 = $3551;
      }
     } while(0);
     $3563 = (($$lcssa$i1644) + 4|0);
     HEAP32[$$lcssa$i1644>>2] = ((320 + 8|0));
     HEAP8[$3563>>0] = 1;
     $3564 = HEAP32[$agg$result>>2]|0;
     $3565 = (($3564) + 940|0);
     HEAP32[$3565>>2] = $$lcssa$i1644;
     $3566 = (_malloc(8)|0);
     $3567 = ($3566|0)==(0|0);
     L2388: do {
      if ($3567) {
       while(1) {
        $3568 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3568+0)|0);
        $3569 = ($3568|0)==(0);
        if ($3569) {
         break;
        }
        $3570 = $3568;
        __THREW__ = 0;
        invoke_v($3570|0);
        $3571 = __THREW__; __THREW__ = 0;
        $3572 = $3571&1;
        if ($3572) {
         label = 1923;
         break;
        }
        $3573 = (_malloc(8)|0);
        $3574 = ($3573|0)==(0|0);
        if (!($3574)) {
         $$lcssa$i1651 = $3573;
         break L2388;
        }
       }
       if ((label|0) == 1923) {
        $4751 = ___cxa_find_matching_catch()|0;
        $4752 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4752;$eh$lpad$body$indexZ2D = $4751;
        break L12;
       }
       $3575 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3575>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3575|0),(20008|0),(386|0));
       $3576 = __THREW__; __THREW__ = 0;
       $3577 = $3576&1;
       if ($3577) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1651 = $3566;
      }
     } while(0);
     $3578 = (($$lcssa$i1651) + 4|0);
     HEAP32[$$lcssa$i1651>>2] = ((320 + 8|0));
     HEAP8[$3578>>0] = 1;
     $3579 = HEAP32[$agg$result>>2]|0;
     $3580 = (($3579) + 944|0);
     HEAP32[$3580>>2] = $$lcssa$i1651;
     $3581 = (_malloc(8)|0);
     $3582 = ($3581|0)==(0|0);
     L2398: do {
      if ($3582) {
       while(1) {
        $3583 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3583+0)|0);
        $3584 = ($3583|0)==(0);
        if ($3584) {
         break;
        }
        $3585 = $3583;
        __THREW__ = 0;
        invoke_v($3585|0);
        $3586 = __THREW__; __THREW__ = 0;
        $3587 = $3586&1;
        if ($3587) {
         label = 1922;
         break;
        }
        $3588 = (_malloc(8)|0);
        $3589 = ($3588|0)==(0|0);
        if (!($3589)) {
         $$lcssa$i1658 = $3588;
         break L2398;
        }
       }
       if ((label|0) == 1922) {
        $4749 = ___cxa_find_matching_catch()|0;
        $4750 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4750;$eh$lpad$body$indexZ2D = $4749;
        break L12;
       }
       $3590 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3590>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3590|0),(20008|0),(386|0));
       $3591 = __THREW__; __THREW__ = 0;
       $3592 = $3591&1;
       if ($3592) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1658 = $3581;
      }
     } while(0);
     $3593 = (($$lcssa$i1658) + 4|0);
     HEAP32[$$lcssa$i1658>>2] = ((320 + 8|0));
     HEAP8[$3593>>0] = 1;
     $3594 = HEAP32[$agg$result>>2]|0;
     $3595 = (($3594) + 948|0);
     HEAP32[$3595>>2] = $$lcssa$i1658;
     $3596 = (_malloc(8)|0);
     $3597 = ($3596|0)==(0|0);
     L2408: do {
      if ($3597) {
       while(1) {
        $3598 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3598+0)|0);
        $3599 = ($3598|0)==(0);
        if ($3599) {
         break;
        }
        $3600 = $3598;
        __THREW__ = 0;
        invoke_v($3600|0);
        $3601 = __THREW__; __THREW__ = 0;
        $3602 = $3601&1;
        if ($3602) {
         label = 1921;
         break;
        }
        $3603 = (_malloc(8)|0);
        $3604 = ($3603|0)==(0|0);
        if (!($3604)) {
         $$lcssa$i1665 = $3603;
         break L2408;
        }
       }
       if ((label|0) == 1921) {
        $4747 = ___cxa_find_matching_catch()|0;
        $4748 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4748;$eh$lpad$body$indexZ2D = $4747;
        break L12;
       }
       $3605 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3605>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3605|0),(20008|0),(386|0));
       $3606 = __THREW__; __THREW__ = 0;
       $3607 = $3606&1;
       if ($3607) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1665 = $3596;
      }
     } while(0);
     $3608 = (($$lcssa$i1665) + 4|0);
     HEAP32[$$lcssa$i1665>>2] = ((320 + 8|0));
     HEAP8[$3608>>0] = 1;
     $3609 = HEAP32[$agg$result>>2]|0;
     $3610 = (($3609) + 952|0);
     HEAP32[$3610>>2] = $$lcssa$i1665;
     $3611 = (_malloc(8)|0);
     $3612 = ($3611|0)==(0|0);
     L2418: do {
      if ($3612) {
       while(1) {
        $3613 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3613+0)|0);
        $3614 = ($3613|0)==(0);
        if ($3614) {
         break;
        }
        $3615 = $3613;
        __THREW__ = 0;
        invoke_v($3615|0);
        $3616 = __THREW__; __THREW__ = 0;
        $3617 = $3616&1;
        if ($3617) {
         label = 1920;
         break;
        }
        $3618 = (_malloc(8)|0);
        $3619 = ($3618|0)==(0|0);
        if (!($3619)) {
         $$lcssa$i1672 = $3618;
         break L2418;
        }
       }
       if ((label|0) == 1920) {
        $4745 = ___cxa_find_matching_catch()|0;
        $4746 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4746;$eh$lpad$body$indexZ2D = $4745;
        break L12;
       }
       $3620 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3620>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3620|0),(20008|0),(386|0));
       $3621 = __THREW__; __THREW__ = 0;
       $3622 = $3621&1;
       if ($3622) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1672 = $3611;
      }
     } while(0);
     $3623 = (($$lcssa$i1672) + 4|0);
     HEAP8[$3623>>0] = 0;
     HEAP32[$$lcssa$i1672>>2] = ((520 + 8|0));
     $3624 = HEAP32[$agg$result>>2]|0;
     $3625 = (($3624) + 956|0);
     HEAP32[$3625>>2] = $$lcssa$i1672;
     $3626 = (_malloc(8)|0);
     $3627 = ($3626|0)==(0|0);
     L2428: do {
      if ($3627) {
       while(1) {
        $3628 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3628+0)|0);
        $3629 = ($3628|0)==(0);
        if ($3629) {
         break;
        }
        $3630 = $3628;
        __THREW__ = 0;
        invoke_v($3630|0);
        $3631 = __THREW__; __THREW__ = 0;
        $3632 = $3631&1;
        if ($3632) {
         label = 1919;
         break;
        }
        $3633 = (_malloc(8)|0);
        $3634 = ($3633|0)==(0|0);
        if (!($3634)) {
         $$lcssa$i1679 = $3633;
         break L2428;
        }
       }
       if ((label|0) == 1919) {
        $4743 = ___cxa_find_matching_catch()|0;
        $4744 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4744;$eh$lpad$body$indexZ2D = $4743;
        break L12;
       }
       $3635 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3635>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3635|0),(20008|0),(386|0));
       $3636 = __THREW__; __THREW__ = 0;
       $3637 = $3636&1;
       if ($3637) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1679 = $3626;
      }
     } while(0);
     $3638 = (($$lcssa$i1679) + 4|0);
     HEAP8[$3638>>0] = 0;
     HEAP32[$$lcssa$i1679>>2] = ((520 + 8|0));
     $3639 = HEAP32[$agg$result>>2]|0;
     $3640 = (($3639) + 960|0);
     HEAP32[$3640>>2] = $$lcssa$i1679;
     $3641 = (_malloc(8)|0);
     $3642 = ($3641|0)==(0|0);
     L2438: do {
      if ($3642) {
       while(1) {
        $3643 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3643+0)|0);
        $3644 = ($3643|0)==(0);
        if ($3644) {
         break;
        }
        $3645 = $3643;
        __THREW__ = 0;
        invoke_v($3645|0);
        $3646 = __THREW__; __THREW__ = 0;
        $3647 = $3646&1;
        if ($3647) {
         label = 1918;
         break;
        }
        $3648 = (_malloc(8)|0);
        $3649 = ($3648|0)==(0|0);
        if (!($3649)) {
         $$lcssa$i1686 = $3648;
         break L2438;
        }
       }
       if ((label|0) == 1918) {
        $4741 = ___cxa_find_matching_catch()|0;
        $4742 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4742;$eh$lpad$body$indexZ2D = $4741;
        break L12;
       }
       $3650 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3650>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3650|0),(20008|0),(386|0));
       $3651 = __THREW__; __THREW__ = 0;
       $3652 = $3651&1;
       if ($3652) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1686 = $3641;
      }
     } while(0);
     $3653 = (($$lcssa$i1686) + 4|0);
     HEAP8[$3653>>0] = 0;
     HEAP32[$$lcssa$i1686>>2] = ((680 + 8|0));
     $3654 = HEAP32[$agg$result>>2]|0;
     $3655 = (($3654) + 964|0);
     HEAP32[$3655>>2] = $$lcssa$i1686;
     $3656 = (_malloc(8)|0);
     $3657 = ($3656|0)==(0|0);
     L2448: do {
      if ($3657) {
       while(1) {
        $3658 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3658+0)|0);
        $3659 = ($3658|0)==(0);
        if ($3659) {
         break;
        }
        $3660 = $3658;
        __THREW__ = 0;
        invoke_v($3660|0);
        $3661 = __THREW__; __THREW__ = 0;
        $3662 = $3661&1;
        if ($3662) {
         label = 1917;
         break;
        }
        $3663 = (_malloc(8)|0);
        $3664 = ($3663|0)==(0|0);
        if (!($3664)) {
         $$lcssa$i1693 = $3663;
         break L2448;
        }
       }
       if ((label|0) == 1917) {
        $4739 = ___cxa_find_matching_catch()|0;
        $4740 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4740;$eh$lpad$body$indexZ2D = $4739;
        break L12;
       }
       $3665 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3665>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3665|0),(20008|0),(386|0));
       $3666 = __THREW__; __THREW__ = 0;
       $3667 = $3666&1;
       if ($3667) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1693 = $3656;
      }
     } while(0);
     $3668 = (($$lcssa$i1693) + 4|0);
     HEAP8[$3668>>0] = 0;
     HEAP32[$$lcssa$i1693>>2] = ((680 + 8|0));
     $3669 = HEAP32[$agg$result>>2]|0;
     $3670 = (($3669) + 968|0);
     HEAP32[$3670>>2] = $$lcssa$i1693;
     $3671 = (_malloc(8)|0);
     $3672 = ($3671|0)==(0|0);
     L2458: do {
      if ($3672) {
       while(1) {
        $3673 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3673+0)|0);
        $3674 = ($3673|0)==(0);
        if ($3674) {
         break;
        }
        $3675 = $3673;
        __THREW__ = 0;
        invoke_v($3675|0);
        $3676 = __THREW__; __THREW__ = 0;
        $3677 = $3676&1;
        if ($3677) {
         label = 1916;
         break;
        }
        $3678 = (_malloc(8)|0);
        $3679 = ($3678|0)==(0|0);
        if (!($3679)) {
         $$lcssa$i1700 = $3678;
         break L2458;
        }
       }
       if ((label|0) == 1916) {
        $4737 = ___cxa_find_matching_catch()|0;
        $4738 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4738;$eh$lpad$body$indexZ2D = $4737;
        break L12;
       }
       $3680 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3680>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3680|0),(20008|0),(386|0));
       $3681 = __THREW__; __THREW__ = 0;
       $3682 = $3681&1;
       if ($3682) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1700 = $3671;
      }
     } while(0);
     $3683 = (($$lcssa$i1700) + 4|0);
     HEAP8[$3683>>0] = 0;
     HEAP32[$$lcssa$i1700>>2] = ((680 + 8|0));
     $3684 = HEAP32[$agg$result>>2]|0;
     $3685 = (($3684) + 972|0);
     HEAP32[$3685>>2] = $$lcssa$i1700;
     $3686 = (_malloc(8)|0);
     $3687 = ($3686|0)==(0|0);
     L2468: do {
      if ($3687) {
       while(1) {
        $3688 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3688+0)|0);
        $3689 = ($3688|0)==(0);
        if ($3689) {
         break;
        }
        $3690 = $3688;
        __THREW__ = 0;
        invoke_v($3690|0);
        $3691 = __THREW__; __THREW__ = 0;
        $3692 = $3691&1;
        if ($3692) {
         label = 1915;
         break;
        }
        $3693 = (_malloc(8)|0);
        $3694 = ($3693|0)==(0|0);
        if (!($3694)) {
         $$lcssa$i1707 = $3693;
         break L2468;
        }
       }
       if ((label|0) == 1915) {
        $4735 = ___cxa_find_matching_catch()|0;
        $4736 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4736;$eh$lpad$body$indexZ2D = $4735;
        break L12;
       }
       $3695 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3695>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3695|0),(20008|0),(386|0));
       $3696 = __THREW__; __THREW__ = 0;
       $3697 = $3696&1;
       if ($3697) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1707 = $3686;
      }
     } while(0);
     $3698 = (($$lcssa$i1707) + 4|0);
     HEAP8[$3698>>0] = 0;
     HEAP32[$$lcssa$i1707>>2] = ((680 + 8|0));
     $3699 = HEAP32[$agg$result>>2]|0;
     $3700 = (($3699) + 976|0);
     HEAP32[$3700>>2] = $$lcssa$i1707;
     $3701 = (_malloc(8)|0);
     $3702 = ($3701|0)==(0|0);
     L2478: do {
      if ($3702) {
       while(1) {
        $3703 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3703+0)|0);
        $3704 = ($3703|0)==(0);
        if ($3704) {
         break;
        }
        $3705 = $3703;
        __THREW__ = 0;
        invoke_v($3705|0);
        $3706 = __THREW__; __THREW__ = 0;
        $3707 = $3706&1;
        if ($3707) {
         label = 1914;
         break;
        }
        $3708 = (_malloc(8)|0);
        $3709 = ($3708|0)==(0|0);
        if (!($3709)) {
         $$lcssa$i1714 = $3708;
         break L2478;
        }
       }
       if ((label|0) == 1914) {
        $4733 = ___cxa_find_matching_catch()|0;
        $4734 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4734;$eh$lpad$body$indexZ2D = $4733;
        break L12;
       }
       $3710 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3710>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3710|0),(20008|0),(386|0));
       $3711 = __THREW__; __THREW__ = 0;
       $3712 = $3711&1;
       if ($3712) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1714 = $3701;
      }
     } while(0);
     $3713 = (($$lcssa$i1714) + 4|0);
     HEAP8[$3713>>0] = 0;
     HEAP32[$$lcssa$i1714>>2] = ((680 + 8|0));
     $3714 = HEAP32[$agg$result>>2]|0;
     $3715 = (($3714) + 980|0);
     HEAP32[$3715>>2] = $$lcssa$i1714;
     $3716 = (_malloc(8)|0);
     $3717 = ($3716|0)==(0|0);
     L2488: do {
      if ($3717) {
       while(1) {
        $3718 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3718+0)|0);
        $3719 = ($3718|0)==(0);
        if ($3719) {
         break;
        }
        $3720 = $3718;
        __THREW__ = 0;
        invoke_v($3720|0);
        $3721 = __THREW__; __THREW__ = 0;
        $3722 = $3721&1;
        if ($3722) {
         label = 1913;
         break;
        }
        $3723 = (_malloc(8)|0);
        $3724 = ($3723|0)==(0|0);
        if (!($3724)) {
         $$lcssa$i1721 = $3723;
         break L2488;
        }
       }
       if ((label|0) == 1913) {
        $4731 = ___cxa_find_matching_catch()|0;
        $4732 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4732;$eh$lpad$body$indexZ2D = $4731;
        break L12;
       }
       $3725 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3725>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3725|0),(20008|0),(386|0));
       $3726 = __THREW__; __THREW__ = 0;
       $3727 = $3726&1;
       if ($3727) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1721 = $3716;
      }
     } while(0);
     $3728 = (($$lcssa$i1721) + 4|0);
     HEAP8[$3728>>0] = 0;
     HEAP32[$$lcssa$i1721>>2] = ((520 + 8|0));
     $3729 = HEAP32[$agg$result>>2]|0;
     $3730 = (($3729) + 984|0);
     HEAP32[$3730>>2] = $$lcssa$i1721;
     $3731 = (_malloc(8)|0);
     $3732 = ($3731|0)==(0|0);
     L2498: do {
      if ($3732) {
       while(1) {
        $3733 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3733+0)|0);
        $3734 = ($3733|0)==(0);
        if ($3734) {
         break;
        }
        $3735 = $3733;
        __THREW__ = 0;
        invoke_v($3735|0);
        $3736 = __THREW__; __THREW__ = 0;
        $3737 = $3736&1;
        if ($3737) {
         label = 1912;
         break;
        }
        $3738 = (_malloc(8)|0);
        $3739 = ($3738|0)==(0|0);
        if (!($3739)) {
         $$lcssa$i1728 = $3738;
         break L2498;
        }
       }
       if ((label|0) == 1912) {
        $4729 = ___cxa_find_matching_catch()|0;
        $4730 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4730;$eh$lpad$body$indexZ2D = $4729;
        break L12;
       }
       $3740 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3740>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3740|0),(20008|0),(386|0));
       $3741 = __THREW__; __THREW__ = 0;
       $3742 = $3741&1;
       if ($3742) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1728 = $3731;
      }
     } while(0);
     $3743 = (($$lcssa$i1728) + 4|0);
     HEAP8[$3743>>0] = 0;
     HEAP32[$$lcssa$i1728>>2] = ((520 + 8|0));
     $3744 = HEAP32[$agg$result>>2]|0;
     $3745 = (($3744) + 988|0);
     HEAP32[$3745>>2] = $$lcssa$i1728;
     $3746 = (_malloc(8)|0);
     $3747 = ($3746|0)==(0|0);
     L2508: do {
      if ($3747) {
       while(1) {
        $3748 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3748+0)|0);
        $3749 = ($3748|0)==(0);
        if ($3749) {
         break;
        }
        $3750 = $3748;
        __THREW__ = 0;
        invoke_v($3750|0);
        $3751 = __THREW__; __THREW__ = 0;
        $3752 = $3751&1;
        if ($3752) {
         label = 1911;
         break;
        }
        $3753 = (_malloc(8)|0);
        $3754 = ($3753|0)==(0|0);
        if (!($3754)) {
         $$lcssa$i1735 = $3753;
         break L2508;
        }
       }
       if ((label|0) == 1911) {
        $4727 = ___cxa_find_matching_catch()|0;
        $4728 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4728;$eh$lpad$body$indexZ2D = $4727;
        break L12;
       }
       $3755 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3755>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3755|0),(20008|0),(386|0));
       $3756 = __THREW__; __THREW__ = 0;
       $3757 = $3756&1;
       if ($3757) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1735 = $3746;
      }
     } while(0);
     $3758 = (($$lcssa$i1735) + 4|0);
     HEAP8[$3758>>0] = 0;
     HEAP32[$$lcssa$i1735>>2] = ((472 + 8|0));
     $3759 = HEAP32[$agg$result>>2]|0;
     $3760 = (($3759) + 992|0);
     HEAP32[$3760>>2] = $$lcssa$i1735;
     $3761 = (_malloc(8)|0);
     $3762 = ($3761|0)==(0|0);
     L2518: do {
      if ($3762) {
       while(1) {
        $3763 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3763+0)|0);
        $3764 = ($3763|0)==(0);
        if ($3764) {
         break;
        }
        $3765 = $3763;
        __THREW__ = 0;
        invoke_v($3765|0);
        $3766 = __THREW__; __THREW__ = 0;
        $3767 = $3766&1;
        if ($3767) {
         label = 1910;
         break;
        }
        $3768 = (_malloc(8)|0);
        $3769 = ($3768|0)==(0|0);
        if (!($3769)) {
         $$lcssa$i1742 = $3768;
         break L2518;
        }
       }
       if ((label|0) == 1910) {
        $4725 = ___cxa_find_matching_catch()|0;
        $4726 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4726;$eh$lpad$body$indexZ2D = $4725;
        break L12;
       }
       $3770 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3770>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3770|0),(20008|0),(386|0));
       $3771 = __THREW__; __THREW__ = 0;
       $3772 = $3771&1;
       if ($3772) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1742 = $3761;
      }
     } while(0);
     $3773 = (($$lcssa$i1742) + 4|0);
     HEAP8[$3773>>0] = 0;
     HEAP32[$$lcssa$i1742>>2] = ((472 + 8|0));
     $3774 = HEAP32[$agg$result>>2]|0;
     $3775 = (($3774) + 996|0);
     HEAP32[$3775>>2] = $$lcssa$i1742;
     $3776 = (_malloc(8)|0);
     $3777 = ($3776|0)==(0|0);
     L2528: do {
      if ($3777) {
       while(1) {
        $3778 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3778+0)|0);
        $3779 = ($3778|0)==(0);
        if ($3779) {
         break;
        }
        $3780 = $3778;
        __THREW__ = 0;
        invoke_v($3780|0);
        $3781 = __THREW__; __THREW__ = 0;
        $3782 = $3781&1;
        if ($3782) {
         label = 1909;
         break;
        }
        $3783 = (_malloc(8)|0);
        $3784 = ($3783|0)==(0|0);
        if (!($3784)) {
         $$lcssa$i1749 = $3783;
         break L2528;
        }
       }
       if ((label|0) == 1909) {
        $4723 = ___cxa_find_matching_catch()|0;
        $4724 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4724;$eh$lpad$body$indexZ2D = $4723;
        break L12;
       }
       $3785 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3785>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3785|0),(20008|0),(386|0));
       $3786 = __THREW__; __THREW__ = 0;
       $3787 = $3786&1;
       if ($3787) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1749 = $3776;
      }
     } while(0);
     $3788 = (($$lcssa$i1749) + 4|0);
     HEAP8[$3788>>0] = 0;
     HEAP32[$$lcssa$i1749>>2] = ((472 + 8|0));
     $3789 = HEAP32[$agg$result>>2]|0;
     $3790 = (($3789) + 1000|0);
     HEAP32[$3790>>2] = $$lcssa$i1749;
     $3791 = (_malloc(8)|0);
     $3792 = ($3791|0)==(0|0);
     L2538: do {
      if ($3792) {
       while(1) {
        $3793 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3793+0)|0);
        $3794 = ($3793|0)==(0);
        if ($3794) {
         break;
        }
        $3795 = $3793;
        __THREW__ = 0;
        invoke_v($3795|0);
        $3796 = __THREW__; __THREW__ = 0;
        $3797 = $3796&1;
        if ($3797) {
         label = 1908;
         break;
        }
        $3798 = (_malloc(8)|0);
        $3799 = ($3798|0)==(0|0);
        if (!($3799)) {
         $$lcssa$i1756 = $3798;
         break L2538;
        }
       }
       if ((label|0) == 1908) {
        $4721 = ___cxa_find_matching_catch()|0;
        $4722 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4722;$eh$lpad$body$indexZ2D = $4721;
        break L12;
       }
       $3800 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3800>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3800|0),(20008|0),(386|0));
       $3801 = __THREW__; __THREW__ = 0;
       $3802 = $3801&1;
       if ($3802) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1756 = $3791;
      }
     } while(0);
     $3803 = (($$lcssa$i1756) + 4|0);
     HEAP8[$3803>>0] = 0;
     HEAP32[$$lcssa$i1756>>2] = ((472 + 8|0));
     $3804 = HEAP32[$agg$result>>2]|0;
     $3805 = (($3804) + 1004|0);
     HEAP32[$3805>>2] = $$lcssa$i1756;
     $3806 = (_malloc(8)|0);
     $3807 = ($3806|0)==(0|0);
     L2548: do {
      if ($3807) {
       while(1) {
        $3808 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3808+0)|0);
        $3809 = ($3808|0)==(0);
        if ($3809) {
         break;
        }
        $3810 = $3808;
        __THREW__ = 0;
        invoke_v($3810|0);
        $3811 = __THREW__; __THREW__ = 0;
        $3812 = $3811&1;
        if ($3812) {
         label = 1907;
         break;
        }
        $3813 = (_malloc(8)|0);
        $3814 = ($3813|0)==(0|0);
        if (!($3814)) {
         $$lcssa$i1763 = $3813;
         break L2548;
        }
       }
       if ((label|0) == 1907) {
        $4719 = ___cxa_find_matching_catch()|0;
        $4720 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4720;$eh$lpad$body$indexZ2D = $4719;
        break L12;
       }
       $3815 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3815>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3815|0),(20008|0),(386|0));
       $3816 = __THREW__; __THREW__ = 0;
       $3817 = $3816&1;
       if ($3817) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1763 = $3806;
      }
     } while(0);
     $3818 = (($$lcssa$i1763) + 4|0);
     HEAP8[$3818>>0] = 1;
     HEAP32[$$lcssa$i1763>>2] = ((784 + 8|0));
     $3819 = HEAP32[$agg$result>>2]|0;
     $3820 = (($3819) + 1008|0);
     HEAP32[$3820>>2] = $$lcssa$i1763;
     $3821 = (_malloc(8)|0);
     $3822 = ($3821|0)==(0|0);
     L2558: do {
      if ($3822) {
       while(1) {
        $3823 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3823+0)|0);
        $3824 = ($3823|0)==(0);
        if ($3824) {
         break;
        }
        $3825 = $3823;
        __THREW__ = 0;
        invoke_v($3825|0);
        $3826 = __THREW__; __THREW__ = 0;
        $3827 = $3826&1;
        if ($3827) {
         label = 1906;
         break;
        }
        $3828 = (_malloc(8)|0);
        $3829 = ($3828|0)==(0|0);
        if (!($3829)) {
         $$lcssa$i1770 = $3828;
         break L2558;
        }
       }
       if ((label|0) == 1906) {
        $4717 = ___cxa_find_matching_catch()|0;
        $4718 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4718;$eh$lpad$body$indexZ2D = $4717;
        break L12;
       }
       $3830 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3830>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3830|0),(20008|0),(386|0));
       $3831 = __THREW__; __THREW__ = 0;
       $3832 = $3831&1;
       if ($3832) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1770 = $3821;
      }
     } while(0);
     $3833 = (($$lcssa$i1770) + 4|0);
     HEAP8[$3833>>0] = 0;
     HEAP32[$$lcssa$i1770>>2] = ((520 + 8|0));
     $3834 = HEAP32[$agg$result>>2]|0;
     $3835 = (($3834) + 1012|0);
     HEAP32[$3835>>2] = $$lcssa$i1770;
     $3836 = (_malloc(8)|0);
     $3837 = ($3836|0)==(0|0);
     L2568: do {
      if ($3837) {
       while(1) {
        $3838 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3838+0)|0);
        $3839 = ($3838|0)==(0);
        if ($3839) {
         break;
        }
        $3840 = $3838;
        __THREW__ = 0;
        invoke_v($3840|0);
        $3841 = __THREW__; __THREW__ = 0;
        $3842 = $3841&1;
        if ($3842) {
         label = 1905;
         break;
        }
        $3843 = (_malloc(8)|0);
        $3844 = ($3843|0)==(0|0);
        if (!($3844)) {
         $$lcssa$i1777 = $3843;
         break L2568;
        }
       }
       if ((label|0) == 1905) {
        $4715 = ___cxa_find_matching_catch()|0;
        $4716 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4716;$eh$lpad$body$indexZ2D = $4715;
        break L12;
       }
       $3845 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3845>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3845|0),(20008|0),(386|0));
       $3846 = __THREW__; __THREW__ = 0;
       $3847 = $3846&1;
       if ($3847) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1777 = $3836;
      }
     } while(0);
     $3848 = (($$lcssa$i1777) + 4|0);
     HEAP8[$3848>>0] = 0;
     HEAP32[$$lcssa$i1777>>2] = ((520 + 8|0));
     $3849 = HEAP32[$agg$result>>2]|0;
     $3850 = (($3849) + 1016|0);
     HEAP32[$3850>>2] = $$lcssa$i1777;
     $3851 = (_malloc(8)|0);
     $3852 = ($3851|0)==(0|0);
     L2578: do {
      if ($3852) {
       while(1) {
        $3853 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3853+0)|0);
        $3854 = ($3853|0)==(0);
        if ($3854) {
         break;
        }
        $3855 = $3853;
        __THREW__ = 0;
        invoke_v($3855|0);
        $3856 = __THREW__; __THREW__ = 0;
        $3857 = $3856&1;
        if ($3857) {
         label = 1904;
         break;
        }
        $3858 = (_malloc(8)|0);
        $3859 = ($3858|0)==(0|0);
        if (!($3859)) {
         $$lcssa$i1784 = $3858;
         break L2578;
        }
       }
       if ((label|0) == 1904) {
        $4713 = ___cxa_find_matching_catch()|0;
        $4714 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4714;$eh$lpad$body$indexZ2D = $4713;
        break L12;
       }
       $3860 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3860>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3860|0),(20008|0),(386|0));
       $3861 = __THREW__; __THREW__ = 0;
       $3862 = $3861&1;
       if ($3862) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1784 = $3851;
      }
     } while(0);
     $3863 = (($$lcssa$i1784) + 4|0);
     HEAP8[$3863>>0] = 0;
     HEAP32[$$lcssa$i1784>>2] = ((472 + 8|0));
     $3864 = HEAP32[$agg$result>>2]|0;
     $3865 = (($3864) + 1020|0);
     HEAP32[$3865>>2] = $$lcssa$i1784;
     $3866 = (_malloc(8)|0);
     $3867 = ($3866|0)==(0|0);
     L2588: do {
      if ($3867) {
       while(1) {
        $3868 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3868+0)|0);
        $3869 = ($3868|0)==(0);
        if ($3869) {
         break;
        }
        $3870 = $3868;
        __THREW__ = 0;
        invoke_v($3870|0);
        $3871 = __THREW__; __THREW__ = 0;
        $3872 = $3871&1;
        if ($3872) {
         label = 1903;
         break;
        }
        $3873 = (_malloc(8)|0);
        $3874 = ($3873|0)==(0|0);
        if (!($3874)) {
         $$lcssa$i1791 = $3873;
         break L2588;
        }
       }
       if ((label|0) == 1903) {
        $4711 = ___cxa_find_matching_catch()|0;
        $4712 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4712;$eh$lpad$body$indexZ2D = $4711;
        break L12;
       }
       $3875 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3875>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3875|0),(20008|0),(386|0));
       $3876 = __THREW__; __THREW__ = 0;
       $3877 = $3876&1;
       if ($3877) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1791 = $3866;
      }
     } while(0);
     $3878 = (($$lcssa$i1791) + 4|0);
     HEAP8[$3878>>0] = 0;
     HEAP32[$$lcssa$i1791>>2] = ((472 + 8|0));
     $3879 = HEAP32[$agg$result>>2]|0;
     $3880 = (($3879) + 1024|0);
     HEAP32[$3880>>2] = $$lcssa$i1791;
     $3881 = (_malloc(8)|0);
     $3882 = ($3881|0)==(0|0);
     L2598: do {
      if ($3882) {
       while(1) {
        $3883 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3883+0)|0);
        $3884 = ($3883|0)==(0);
        if ($3884) {
         break;
        }
        $3885 = $3883;
        __THREW__ = 0;
        invoke_v($3885|0);
        $3886 = __THREW__; __THREW__ = 0;
        $3887 = $3886&1;
        if ($3887) {
         label = 1902;
         break;
        }
        $3888 = (_malloc(8)|0);
        $3889 = ($3888|0)==(0|0);
        if (!($3889)) {
         $$lcssa$i1798 = $3888;
         break L2598;
        }
       }
       if ((label|0) == 1902) {
        $4709 = ___cxa_find_matching_catch()|0;
        $4710 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4710;$eh$lpad$body$indexZ2D = $4709;
        break L12;
       }
       $3890 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3890>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3890|0),(20008|0),(386|0));
       $3891 = __THREW__; __THREW__ = 0;
       $3892 = $3891&1;
       if ($3892) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1798 = $3881;
      }
     } while(0);
     $3893 = (($$lcssa$i1798) + 4|0);
     HEAP8[$3893>>0] = 0;
     HEAP32[$$lcssa$i1798>>2] = ((472 + 8|0));
     $3894 = HEAP32[$agg$result>>2]|0;
     $3895 = (($3894) + 1028|0);
     HEAP32[$3895>>2] = $$lcssa$i1798;
     $3896 = (_malloc(8)|0);
     $3897 = ($3896|0)==(0|0);
     L2608: do {
      if ($3897) {
       while(1) {
        $3898 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3898+0)|0);
        $3899 = ($3898|0)==(0);
        if ($3899) {
         break;
        }
        $3900 = $3898;
        __THREW__ = 0;
        invoke_v($3900|0);
        $3901 = __THREW__; __THREW__ = 0;
        $3902 = $3901&1;
        if ($3902) {
         label = 1901;
         break;
        }
        $3903 = (_malloc(8)|0);
        $3904 = ($3903|0)==(0|0);
        if (!($3904)) {
         $$lcssa$i1805 = $3903;
         break L2608;
        }
       }
       if ((label|0) == 1901) {
        $4707 = ___cxa_find_matching_catch()|0;
        $4708 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4708;$eh$lpad$body$indexZ2D = $4707;
        break L12;
       }
       $3905 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3905>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3905|0),(20008|0),(386|0));
       $3906 = __THREW__; __THREW__ = 0;
       $3907 = $3906&1;
       if ($3907) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1805 = $3896;
      }
     } while(0);
     $3908 = (($$lcssa$i1805) + 4|0);
     HEAP8[$3908>>0] = 0;
     HEAP32[$$lcssa$i1805>>2] = ((472 + 8|0));
     $3909 = HEAP32[$agg$result>>2]|0;
     $3910 = (($3909) + 1032|0);
     HEAP32[$3910>>2] = $$lcssa$i1805;
     $3911 = (_malloc(8)|0);
     $3912 = ($3911|0)==(0|0);
     L2618: do {
      if ($3912) {
       while(1) {
        $3913 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3913+0)|0);
        $3914 = ($3913|0)==(0);
        if ($3914) {
         break;
        }
        $3915 = $3913;
        __THREW__ = 0;
        invoke_v($3915|0);
        $3916 = __THREW__; __THREW__ = 0;
        $3917 = $3916&1;
        if ($3917) {
         label = 1900;
         break;
        }
        $3918 = (_malloc(8)|0);
        $3919 = ($3918|0)==(0|0);
        if (!($3919)) {
         $$lcssa$i1812 = $3918;
         break L2618;
        }
       }
       if ((label|0) == 1900) {
        $4705 = ___cxa_find_matching_catch()|0;
        $4706 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4706;$eh$lpad$body$indexZ2D = $4705;
        break L12;
       }
       $3920 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3920>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3920|0),(20008|0),(386|0));
       $3921 = __THREW__; __THREW__ = 0;
       $3922 = $3921&1;
       if ($3922) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1812 = $3911;
      }
     } while(0);
     $3923 = (($$lcssa$i1812) + 4|0);
     HEAP8[$3923>>0] = 0;
     HEAP32[$$lcssa$i1812>>2] = ((472 + 8|0));
     $3924 = HEAP32[$agg$result>>2]|0;
     $3925 = (($3924) + 1036|0);
     HEAP32[$3925>>2] = $$lcssa$i1812;
     $3926 = (_malloc(8)|0);
     $3927 = ($3926|0)==(0|0);
     L2628: do {
      if ($3927) {
       while(1) {
        $3928 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3928+0)|0);
        $3929 = ($3928|0)==(0);
        if ($3929) {
         break;
        }
        $3930 = $3928;
        __THREW__ = 0;
        invoke_v($3930|0);
        $3931 = __THREW__; __THREW__ = 0;
        $3932 = $3931&1;
        if ($3932) {
         label = 1899;
         break;
        }
        $3933 = (_malloc(8)|0);
        $3934 = ($3933|0)==(0|0);
        if (!($3934)) {
         $$lcssa$i1819 = $3933;
         break L2628;
        }
       }
       if ((label|0) == 1899) {
        $4703 = ___cxa_find_matching_catch()|0;
        $4704 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4704;$eh$lpad$body$indexZ2D = $4703;
        break L12;
       }
       $3935 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3935>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3935|0),(20008|0),(386|0));
       $3936 = __THREW__; __THREW__ = 0;
       $3937 = $3936&1;
       if ($3937) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1819 = $3926;
      }
     } while(0);
     $3938 = (($$lcssa$i1819) + 4|0);
     HEAP8[$3938>>0] = 0;
     HEAP32[$$lcssa$i1819>>2] = ((520 + 8|0));
     $3939 = HEAP32[$agg$result>>2]|0;
     $3940 = (($3939) + 1040|0);
     HEAP32[$3940>>2] = $$lcssa$i1819;
     $3941 = (_malloc(8)|0);
     $3942 = ($3941|0)==(0|0);
     L2638: do {
      if ($3942) {
       while(1) {
        $3943 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3943+0)|0);
        $3944 = ($3943|0)==(0);
        if ($3944) {
         break;
        }
        $3945 = $3943;
        __THREW__ = 0;
        invoke_v($3945|0);
        $3946 = __THREW__; __THREW__ = 0;
        $3947 = $3946&1;
        if ($3947) {
         label = 1898;
         break;
        }
        $3948 = (_malloc(8)|0);
        $3949 = ($3948|0)==(0|0);
        if (!($3949)) {
         $$lcssa$i1826 = $3948;
         break L2638;
        }
       }
       if ((label|0) == 1898) {
        $4701 = ___cxa_find_matching_catch()|0;
        $4702 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4702;$eh$lpad$body$indexZ2D = $4701;
        break L12;
       }
       $3950 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3950>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3950|0),(20008|0),(386|0));
       $3951 = __THREW__; __THREW__ = 0;
       $3952 = $3951&1;
       if ($3952) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1826 = $3941;
      }
     } while(0);
     $3953 = (($$lcssa$i1826) + 4|0);
     HEAP8[$3953>>0] = 0;
     HEAP32[$$lcssa$i1826>>2] = ((520 + 8|0));
     $3954 = HEAP32[$agg$result>>2]|0;
     $3955 = (($3954) + 1044|0);
     HEAP32[$3955>>2] = $$lcssa$i1826;
     $3956 = (_malloc(8)|0);
     $3957 = ($3956|0)==(0|0);
     L2648: do {
      if ($3957) {
       while(1) {
        $3958 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3958+0)|0);
        $3959 = ($3958|0)==(0);
        if ($3959) {
         break;
        }
        $3960 = $3958;
        __THREW__ = 0;
        invoke_v($3960|0);
        $3961 = __THREW__; __THREW__ = 0;
        $3962 = $3961&1;
        if ($3962) {
         label = 1897;
         break;
        }
        $3963 = (_malloc(8)|0);
        $3964 = ($3963|0)==(0|0);
        if (!($3964)) {
         $$lcssa$i1833 = $3963;
         break L2648;
        }
       }
       if ((label|0) == 1897) {
        $4699 = ___cxa_find_matching_catch()|0;
        $4700 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4700;$eh$lpad$body$indexZ2D = $4699;
        break L12;
       }
       $3965 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3965>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3965|0),(20008|0),(386|0));
       $3966 = __THREW__; __THREW__ = 0;
       $3967 = $3966&1;
       if ($3967) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1833 = $3956;
      }
     } while(0);
     $3968 = (($$lcssa$i1833) + 4|0);
     HEAP8[$3968>>0] = 0;
     HEAP32[$$lcssa$i1833>>2] = ((472 + 8|0));
     $3969 = HEAP32[$agg$result>>2]|0;
     $3970 = (($3969) + 1048|0);
     HEAP32[$3970>>2] = $$lcssa$i1833;
     $3971 = (_malloc(8)|0);
     $3972 = ($3971|0)==(0|0);
     L2658: do {
      if ($3972) {
       while(1) {
        $3973 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3973+0)|0);
        $3974 = ($3973|0)==(0);
        if ($3974) {
         break;
        }
        $3975 = $3973;
        __THREW__ = 0;
        invoke_v($3975|0);
        $3976 = __THREW__; __THREW__ = 0;
        $3977 = $3976&1;
        if ($3977) {
         label = 1896;
         break;
        }
        $3978 = (_malloc(8)|0);
        $3979 = ($3978|0)==(0|0);
        if (!($3979)) {
         $$lcssa$i1840 = $3978;
         break L2658;
        }
       }
       if ((label|0) == 1896) {
        $4697 = ___cxa_find_matching_catch()|0;
        $4698 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4698;$eh$lpad$body$indexZ2D = $4697;
        break L12;
       }
       $3980 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3980>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3980|0),(20008|0),(386|0));
       $3981 = __THREW__; __THREW__ = 0;
       $3982 = $3981&1;
       if ($3982) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1840 = $3971;
      }
     } while(0);
     $3983 = (($$lcssa$i1840) + 4|0);
     HEAP8[$3983>>0] = 0;
     HEAP32[$$lcssa$i1840>>2] = ((472 + 8|0));
     $3984 = HEAP32[$agg$result>>2]|0;
     $3985 = (($3984) + 1052|0);
     HEAP32[$3985>>2] = $$lcssa$i1840;
     $3986 = (_malloc(8)|0);
     $3987 = ($3986|0)==(0|0);
     L2668: do {
      if ($3987) {
       while(1) {
        $3988 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3988+0)|0);
        $3989 = ($3988|0)==(0);
        if ($3989) {
         break;
        }
        $3990 = $3988;
        __THREW__ = 0;
        invoke_v($3990|0);
        $3991 = __THREW__; __THREW__ = 0;
        $3992 = $3991&1;
        if ($3992) {
         label = 1895;
         break;
        }
        $3993 = (_malloc(8)|0);
        $3994 = ($3993|0)==(0|0);
        if (!($3994)) {
         $$lcssa$i1847 = $3993;
         break L2668;
        }
       }
       if ((label|0) == 1895) {
        $4695 = ___cxa_find_matching_catch()|0;
        $4696 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4696;$eh$lpad$body$indexZ2D = $4695;
        break L12;
       }
       $3995 = (___cxa_allocate_exception(4)|0);
       HEAP32[$3995>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($3995|0),(20008|0),(386|0));
       $3996 = __THREW__; __THREW__ = 0;
       $3997 = $3996&1;
       if ($3997) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1847 = $3986;
      }
     } while(0);
     $3998 = (($$lcssa$i1847) + 4|0);
     HEAP8[$3998>>0] = 0;
     HEAP32[$$lcssa$i1847>>2] = ((472 + 8|0));
     $3999 = HEAP32[$agg$result>>2]|0;
     $4000 = (($3999) + 1056|0);
     HEAP32[$4000>>2] = $$lcssa$i1847;
     $4001 = (_malloc(8)|0);
     $4002 = ($4001|0)==(0|0);
     L2678: do {
      if ($4002) {
       while(1) {
        $4003 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4003+0)|0);
        $4004 = ($4003|0)==(0);
        if ($4004) {
         break;
        }
        $4005 = $4003;
        __THREW__ = 0;
        invoke_v($4005|0);
        $4006 = __THREW__; __THREW__ = 0;
        $4007 = $4006&1;
        if ($4007) {
         label = 1894;
         break;
        }
        $4008 = (_malloc(8)|0);
        $4009 = ($4008|0)==(0|0);
        if (!($4009)) {
         $$lcssa$i1854 = $4008;
         break L2678;
        }
       }
       if ((label|0) == 1894) {
        $4693 = ___cxa_find_matching_catch()|0;
        $4694 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4694;$eh$lpad$body$indexZ2D = $4693;
        break L12;
       }
       $4010 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4010>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4010|0),(20008|0),(386|0));
       $4011 = __THREW__; __THREW__ = 0;
       $4012 = $4011&1;
       if ($4012) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1854 = $4001;
      }
     } while(0);
     $4013 = (($$lcssa$i1854) + 4|0);
     HEAP8[$4013>>0] = 0;
     HEAP32[$$lcssa$i1854>>2] = ((472 + 8|0));
     $4014 = HEAP32[$agg$result>>2]|0;
     $4015 = (($4014) + 1060|0);
     HEAP32[$4015>>2] = $$lcssa$i1854;
     $4016 = (_malloc(8)|0);
     $4017 = ($4016|0)==(0|0);
     L2688: do {
      if ($4017) {
       while(1) {
        $4018 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4018+0)|0);
        $4019 = ($4018|0)==(0);
        if ($4019) {
         break;
        }
        $4020 = $4018;
        __THREW__ = 0;
        invoke_v($4020|0);
        $4021 = __THREW__; __THREW__ = 0;
        $4022 = $4021&1;
        if ($4022) {
         label = 1893;
         break;
        }
        $4023 = (_malloc(8)|0);
        $4024 = ($4023|0)==(0|0);
        if (!($4024)) {
         $$lcssa$i1861 = $4023;
         break L2688;
        }
       }
       if ((label|0) == 1893) {
        $4691 = ___cxa_find_matching_catch()|0;
        $4692 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4692;$eh$lpad$body$indexZ2D = $4691;
        break L12;
       }
       $4025 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4025>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4025|0),(20008|0),(386|0));
       $4026 = __THREW__; __THREW__ = 0;
       $4027 = $4026&1;
       if ($4027) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1861 = $4016;
      }
     } while(0);
     $4028 = (($$lcssa$i1861) + 4|0);
     HEAP8[$4028>>0] = 0;
     HEAP32[$$lcssa$i1861>>2] = ((472 + 8|0));
     $4029 = HEAP32[$agg$result>>2]|0;
     $4030 = (($4029) + 1064|0);
     HEAP32[$4030>>2] = $$lcssa$i1861;
     $4031 = (_malloc(8)|0);
     $4032 = ($4031|0)==(0|0);
     L2698: do {
      if ($4032) {
       while(1) {
        $4033 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4033+0)|0);
        $4034 = ($4033|0)==(0);
        if ($4034) {
         break;
        }
        $4035 = $4033;
        __THREW__ = 0;
        invoke_v($4035|0);
        $4036 = __THREW__; __THREW__ = 0;
        $4037 = $4036&1;
        if ($4037) {
         label = 1892;
         break;
        }
        $4038 = (_malloc(8)|0);
        $4039 = ($4038|0)==(0|0);
        if (!($4039)) {
         $$lcssa$i1868 = $4038;
         break L2698;
        }
       }
       if ((label|0) == 1892) {
        $4689 = ___cxa_find_matching_catch()|0;
        $4690 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4690;$eh$lpad$body$indexZ2D = $4689;
        break L12;
       }
       $4040 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4040>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4040|0),(20008|0),(386|0));
       $4041 = __THREW__; __THREW__ = 0;
       $4042 = $4041&1;
       if ($4042) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1868 = $4031;
      }
     } while(0);
     $4043 = (($$lcssa$i1868) + 4|0);
     HEAP8[$4043>>0] = 0;
     HEAP32[$$lcssa$i1868>>2] = ((520 + 8|0));
     $4044 = HEAP32[$agg$result>>2]|0;
     $4045 = (($4044) + 1068|0);
     HEAP32[$4045>>2] = $$lcssa$i1868;
     $4046 = (_malloc(8)|0);
     $4047 = ($4046|0)==(0|0);
     L2708: do {
      if ($4047) {
       while(1) {
        $4048 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4048+0)|0);
        $4049 = ($4048|0)==(0);
        if ($4049) {
         break;
        }
        $4050 = $4048;
        __THREW__ = 0;
        invoke_v($4050|0);
        $4051 = __THREW__; __THREW__ = 0;
        $4052 = $4051&1;
        if ($4052) {
         label = 1891;
         break;
        }
        $4053 = (_malloc(8)|0);
        $4054 = ($4053|0)==(0|0);
        if (!($4054)) {
         $$lcssa$i1875 = $4053;
         break L2708;
        }
       }
       if ((label|0) == 1891) {
        $4687 = ___cxa_find_matching_catch()|0;
        $4688 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4688;$eh$lpad$body$indexZ2D = $4687;
        break L12;
       }
       $4055 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4055>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4055|0),(20008|0),(386|0));
       $4056 = __THREW__; __THREW__ = 0;
       $4057 = $4056&1;
       if ($4057) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1875 = $4046;
      }
     } while(0);
     $4058 = (($$lcssa$i1875) + 4|0);
     HEAP8[$4058>>0] = 0;
     HEAP32[$$lcssa$i1875>>2] = ((520 + 8|0));
     $4059 = HEAP32[$agg$result>>2]|0;
     $4060 = (($4059) + 1072|0);
     HEAP32[$4060>>2] = $$lcssa$i1875;
     $4061 = (_malloc(8)|0);
     $4062 = ($4061|0)==(0|0);
     L2718: do {
      if ($4062) {
       while(1) {
        $4063 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4063+0)|0);
        $4064 = ($4063|0)==(0);
        if ($4064) {
         break;
        }
        $4065 = $4063;
        __THREW__ = 0;
        invoke_v($4065|0);
        $4066 = __THREW__; __THREW__ = 0;
        $4067 = $4066&1;
        if ($4067) {
         label = 1890;
         break;
        }
        $4068 = (_malloc(8)|0);
        $4069 = ($4068|0)==(0|0);
        if (!($4069)) {
         $$lcssa$i1882 = $4068;
         break L2718;
        }
       }
       if ((label|0) == 1890) {
        $4685 = ___cxa_find_matching_catch()|0;
        $4686 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4686;$eh$lpad$body$indexZ2D = $4685;
        break L12;
       }
       $4070 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4070>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4070|0),(20008|0),(386|0));
       $4071 = __THREW__; __THREW__ = 0;
       $4072 = $4071&1;
       if ($4072) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1882 = $4061;
      }
     } while(0);
     $4073 = (($$lcssa$i1882) + 4|0);
     HEAP8[$4073>>0] = 0;
     HEAP32[$$lcssa$i1882>>2] = ((472 + 8|0));
     $4074 = HEAP32[$agg$result>>2]|0;
     $4075 = (($4074) + 1076|0);
     HEAP32[$4075>>2] = $$lcssa$i1882;
     $4076 = (_malloc(8)|0);
     $4077 = ($4076|0)==(0|0);
     L2728: do {
      if ($4077) {
       while(1) {
        $4078 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4078+0)|0);
        $4079 = ($4078|0)==(0);
        if ($4079) {
         break;
        }
        $4080 = $4078;
        __THREW__ = 0;
        invoke_v($4080|0);
        $4081 = __THREW__; __THREW__ = 0;
        $4082 = $4081&1;
        if ($4082) {
         label = 1889;
         break;
        }
        $4083 = (_malloc(8)|0);
        $4084 = ($4083|0)==(0|0);
        if (!($4084)) {
         $$lcssa$i1889 = $4083;
         break L2728;
        }
       }
       if ((label|0) == 1889) {
        $4683 = ___cxa_find_matching_catch()|0;
        $4684 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4684;$eh$lpad$body$indexZ2D = $4683;
        break L12;
       }
       $4085 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4085>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4085|0),(20008|0),(386|0));
       $4086 = __THREW__; __THREW__ = 0;
       $4087 = $4086&1;
       if ($4087) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1889 = $4076;
      }
     } while(0);
     $4088 = (($$lcssa$i1889) + 4|0);
     HEAP8[$4088>>0] = 0;
     HEAP32[$$lcssa$i1889>>2] = ((472 + 8|0));
     $4089 = HEAP32[$agg$result>>2]|0;
     $4090 = (($4089) + 1080|0);
     HEAP32[$4090>>2] = $$lcssa$i1889;
     $4091 = (_malloc(8)|0);
     $4092 = ($4091|0)==(0|0);
     L2738: do {
      if ($4092) {
       while(1) {
        $4093 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4093+0)|0);
        $4094 = ($4093|0)==(0);
        if ($4094) {
         break;
        }
        $4095 = $4093;
        __THREW__ = 0;
        invoke_v($4095|0);
        $4096 = __THREW__; __THREW__ = 0;
        $4097 = $4096&1;
        if ($4097) {
         label = 1888;
         break;
        }
        $4098 = (_malloc(8)|0);
        $4099 = ($4098|0)==(0|0);
        if (!($4099)) {
         $$lcssa$i1896 = $4098;
         break L2738;
        }
       }
       if ((label|0) == 1888) {
        $4681 = ___cxa_find_matching_catch()|0;
        $4682 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4682;$eh$lpad$body$indexZ2D = $4681;
        break L12;
       }
       $4100 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4100>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4100|0),(20008|0),(386|0));
       $4101 = __THREW__; __THREW__ = 0;
       $4102 = $4101&1;
       if ($4102) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1896 = $4091;
      }
     } while(0);
     $4103 = (($$lcssa$i1896) + 4|0);
     HEAP8[$4103>>0] = 0;
     HEAP32[$$lcssa$i1896>>2] = ((472 + 8|0));
     $4104 = HEAP32[$agg$result>>2]|0;
     $4105 = (($4104) + 1084|0);
     HEAP32[$4105>>2] = $$lcssa$i1896;
     $4106 = (_malloc(8)|0);
     $4107 = ($4106|0)==(0|0);
     L2748: do {
      if ($4107) {
       while(1) {
        $4108 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4108+0)|0);
        $4109 = ($4108|0)==(0);
        if ($4109) {
         break;
        }
        $4110 = $4108;
        __THREW__ = 0;
        invoke_v($4110|0);
        $4111 = __THREW__; __THREW__ = 0;
        $4112 = $4111&1;
        if ($4112) {
         label = 1887;
         break;
        }
        $4113 = (_malloc(8)|0);
        $4114 = ($4113|0)==(0|0);
        if (!($4114)) {
         $$lcssa$i1903 = $4113;
         break L2748;
        }
       }
       if ((label|0) == 1887) {
        $4679 = ___cxa_find_matching_catch()|0;
        $4680 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4680;$eh$lpad$body$indexZ2D = $4679;
        break L12;
       }
       $4115 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4115>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4115|0),(20008|0),(386|0));
       $4116 = __THREW__; __THREW__ = 0;
       $4117 = $4116&1;
       if ($4117) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1903 = $4106;
      }
     } while(0);
     $4118 = (($$lcssa$i1903) + 4|0);
     HEAP8[$4118>>0] = 0;
     HEAP32[$$lcssa$i1903>>2] = ((472 + 8|0));
     $4119 = HEAP32[$agg$result>>2]|0;
     $4120 = (($4119) + 1088|0);
     HEAP32[$4120>>2] = $$lcssa$i1903;
     $4121 = (_malloc(8)|0);
     $4122 = ($4121|0)==(0|0);
     L2758: do {
      if ($4122) {
       while(1) {
        $4123 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4123+0)|0);
        $4124 = ($4123|0)==(0);
        if ($4124) {
         break;
        }
        $4125 = $4123;
        __THREW__ = 0;
        invoke_v($4125|0);
        $4126 = __THREW__; __THREW__ = 0;
        $4127 = $4126&1;
        if ($4127) {
         label = 1886;
         break;
        }
        $4128 = (_malloc(8)|0);
        $4129 = ($4128|0)==(0|0);
        if (!($4129)) {
         $$lcssa$i1910 = $4128;
         break L2758;
        }
       }
       if ((label|0) == 1886) {
        $4677 = ___cxa_find_matching_catch()|0;
        $4678 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4678;$eh$lpad$body$indexZ2D = $4677;
        break L12;
       }
       $4130 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4130>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4130|0),(20008|0),(386|0));
       $4131 = __THREW__; __THREW__ = 0;
       $4132 = $4131&1;
       if ($4132) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1910 = $4121;
      }
     } while(0);
     $4133 = (($$lcssa$i1910) + 4|0);
     HEAP8[$4133>>0] = 0;
     HEAP32[$$lcssa$i1910>>2] = ((472 + 8|0));
     $4134 = HEAP32[$agg$result>>2]|0;
     $4135 = (($4134) + 1092|0);
     HEAP32[$4135>>2] = $$lcssa$i1910;
     $4136 = (_malloc(8)|0);
     $4137 = ($4136|0)==(0|0);
     L2768: do {
      if ($4137) {
       while(1) {
        $4138 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4138+0)|0);
        $4139 = ($4138|0)==(0);
        if ($4139) {
         break;
        }
        $4140 = $4138;
        __THREW__ = 0;
        invoke_v($4140|0);
        $4141 = __THREW__; __THREW__ = 0;
        $4142 = $4141&1;
        if ($4142) {
         label = 1885;
         break;
        }
        $4143 = (_malloc(8)|0);
        $4144 = ($4143|0)==(0|0);
        if (!($4144)) {
         $$lcssa$i1917 = $4143;
         break L2768;
        }
       }
       if ((label|0) == 1885) {
        $4675 = ___cxa_find_matching_catch()|0;
        $4676 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4676;$eh$lpad$body$indexZ2D = $4675;
        break L12;
       }
       $4145 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4145>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4145|0),(20008|0),(386|0));
       $4146 = __THREW__; __THREW__ = 0;
       $4147 = $4146&1;
       if ($4147) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1917 = $4136;
      }
     } while(0);
     $4148 = (($$lcssa$i1917) + 4|0);
     HEAP8[$4148>>0] = 0;
     HEAP32[$$lcssa$i1917>>2] = ((520 + 8|0));
     $4149 = HEAP32[$agg$result>>2]|0;
     $4150 = (($4149) + 1096|0);
     HEAP32[$4150>>2] = $$lcssa$i1917;
     $4151 = (_malloc(8)|0);
     $4152 = ($4151|0)==(0|0);
     L2778: do {
      if ($4152) {
       while(1) {
        $4153 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4153+0)|0);
        $4154 = ($4153|0)==(0);
        if ($4154) {
         break;
        }
        $4155 = $4153;
        __THREW__ = 0;
        invoke_v($4155|0);
        $4156 = __THREW__; __THREW__ = 0;
        $4157 = $4156&1;
        if ($4157) {
         label = 1884;
         break;
        }
        $4158 = (_malloc(8)|0);
        $4159 = ($4158|0)==(0|0);
        if (!($4159)) {
         $$lcssa$i1924 = $4158;
         break L2778;
        }
       }
       if ((label|0) == 1884) {
        $4673 = ___cxa_find_matching_catch()|0;
        $4674 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4674;$eh$lpad$body$indexZ2D = $4673;
        break L12;
       }
       $4160 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4160>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4160|0),(20008|0),(386|0));
       $4161 = __THREW__; __THREW__ = 0;
       $4162 = $4161&1;
       if ($4162) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1924 = $4151;
      }
     } while(0);
     $4163 = (($$lcssa$i1924) + 4|0);
     HEAP8[$4163>>0] = 0;
     HEAP32[$$lcssa$i1924>>2] = ((520 + 8|0));
     $4164 = HEAP32[$agg$result>>2]|0;
     $4165 = (($4164) + 1100|0);
     HEAP32[$4165>>2] = $$lcssa$i1924;
     $4166 = (_malloc(8)|0);
     $4167 = ($4166|0)==(0|0);
     L2788: do {
      if ($4167) {
       while(1) {
        $4168 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4168+0)|0);
        $4169 = ($4168|0)==(0);
        if ($4169) {
         break;
        }
        $4170 = $4168;
        __THREW__ = 0;
        invoke_v($4170|0);
        $4171 = __THREW__; __THREW__ = 0;
        $4172 = $4171&1;
        if ($4172) {
         label = 1883;
         break;
        }
        $4173 = (_malloc(8)|0);
        $4174 = ($4173|0)==(0|0);
        if (!($4174)) {
         $$lcssa$i1931 = $4173;
         break L2788;
        }
       }
       if ((label|0) == 1883) {
        $4671 = ___cxa_find_matching_catch()|0;
        $4672 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4672;$eh$lpad$body$indexZ2D = $4671;
        break L12;
       }
       $4175 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4175>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4175|0),(20008|0),(386|0));
       $4176 = __THREW__; __THREW__ = 0;
       $4177 = $4176&1;
       if ($4177) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1931 = $4166;
      }
     } while(0);
     $4178 = (($$lcssa$i1931) + 4|0);
     HEAP8[$4178>>0] = 1;
     HEAP32[$$lcssa$i1931>>2] = ((936 + 8|0));
     $4179 = HEAP32[$agg$result>>2]|0;
     $4180 = (($4179) + 1104|0);
     HEAP32[$4180>>2] = $$lcssa$i1931;
     $4181 = (_malloc(8)|0);
     $4182 = ($4181|0)==(0|0);
     L2798: do {
      if ($4182) {
       while(1) {
        $4183 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4183+0)|0);
        $4184 = ($4183|0)==(0);
        if ($4184) {
         break;
        }
        $4185 = $4183;
        __THREW__ = 0;
        invoke_v($4185|0);
        $4186 = __THREW__; __THREW__ = 0;
        $4187 = $4186&1;
        if ($4187) {
         label = 1882;
         break;
        }
        $4188 = (_malloc(8)|0);
        $4189 = ($4188|0)==(0|0);
        if (!($4189)) {
         $$lcssa$i1938 = $4188;
         break L2798;
        }
       }
       if ((label|0) == 1882) {
        $4669 = ___cxa_find_matching_catch()|0;
        $4670 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4670;$eh$lpad$body$indexZ2D = $4669;
        break L12;
       }
       $4190 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4190>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4190|0),(20008|0),(386|0));
       $4191 = __THREW__; __THREW__ = 0;
       $4192 = $4191&1;
       if ($4192) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1938 = $4181;
      }
     } while(0);
     $4193 = (($$lcssa$i1938) + 4|0);
     HEAP8[$4193>>0] = 0;
     HEAP32[$$lcssa$i1938>>2] = ((520 + 8|0));
     $4194 = HEAP32[$agg$result>>2]|0;
     $4195 = (($4194) + 1108|0);
     HEAP32[$4195>>2] = $$lcssa$i1938;
     $4196 = (_malloc(8)|0);
     $4197 = ($4196|0)==(0|0);
     L2808: do {
      if ($4197) {
       while(1) {
        $4198 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4198+0)|0);
        $4199 = ($4198|0)==(0);
        if ($4199) {
         break;
        }
        $4200 = $4198;
        __THREW__ = 0;
        invoke_v($4200|0);
        $4201 = __THREW__; __THREW__ = 0;
        $4202 = $4201&1;
        if ($4202) {
         label = 1881;
         break;
        }
        $4203 = (_malloc(8)|0);
        $4204 = ($4203|0)==(0|0);
        if (!($4204)) {
         $$lcssa$i1945 = $4203;
         break L2808;
        }
       }
       if ((label|0) == 1881) {
        $4667 = ___cxa_find_matching_catch()|0;
        $4668 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4668;$eh$lpad$body$indexZ2D = $4667;
        break L12;
       }
       $4205 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4205>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4205|0),(20008|0),(386|0));
       $4206 = __THREW__; __THREW__ = 0;
       $4207 = $4206&1;
       if ($4207) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1945 = $4196;
      }
     } while(0);
     $4208 = (($$lcssa$i1945) + 4|0);
     HEAP8[$4208>>0] = 0;
     HEAP32[$$lcssa$i1945>>2] = ((472 + 8|0));
     $4209 = HEAP32[$agg$result>>2]|0;
     $4210 = (($4209) + 1112|0);
     HEAP32[$4210>>2] = $$lcssa$i1945;
     $4211 = (_malloc(8)|0);
     $4212 = ($4211|0)==(0|0);
     L2818: do {
      if ($4212) {
       while(1) {
        $4213 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4213+0)|0);
        $4214 = ($4213|0)==(0);
        if ($4214) {
         break;
        }
        $4215 = $4213;
        __THREW__ = 0;
        invoke_v($4215|0);
        $4216 = __THREW__; __THREW__ = 0;
        $4217 = $4216&1;
        if ($4217) {
         label = 1880;
         break;
        }
        $4218 = (_malloc(8)|0);
        $4219 = ($4218|0)==(0|0);
        if (!($4219)) {
         $$lcssa$i1952 = $4218;
         break L2818;
        }
       }
       if ((label|0) == 1880) {
        $4665 = ___cxa_find_matching_catch()|0;
        $4666 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4666;$eh$lpad$body$indexZ2D = $4665;
        break L12;
       }
       $4220 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4220>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4220|0),(20008|0),(386|0));
       $4221 = __THREW__; __THREW__ = 0;
       $4222 = $4221&1;
       if ($4222) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1952 = $4211;
      }
     } while(0);
     $4223 = (($$lcssa$i1952) + 4|0);
     HEAP8[$4223>>0] = 1;
     HEAP32[$$lcssa$i1952>>2] = ((936 + 8|0));
     $4224 = HEAP32[$agg$result>>2]|0;
     $4225 = (($4224) + 1116|0);
     HEAP32[$4225>>2] = $$lcssa$i1952;
     $4226 = (_malloc(8)|0);
     $4227 = ($4226|0)==(0|0);
     L2828: do {
      if ($4227) {
       while(1) {
        $4228 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4228+0)|0);
        $4229 = ($4228|0)==(0);
        if ($4229) {
         break;
        }
        $4230 = $4228;
        __THREW__ = 0;
        invoke_v($4230|0);
        $4231 = __THREW__; __THREW__ = 0;
        $4232 = $4231&1;
        if ($4232) {
         label = 1879;
         break;
        }
        $4233 = (_malloc(8)|0);
        $4234 = ($4233|0)==(0|0);
        if (!($4234)) {
         $$lcssa$i1959 = $4233;
         break L2828;
        }
       }
       if ((label|0) == 1879) {
        $4663 = ___cxa_find_matching_catch()|0;
        $4664 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4664;$eh$lpad$body$indexZ2D = $4663;
        break L12;
       }
       $4235 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4235>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4235|0),(20008|0),(386|0));
       $4236 = __THREW__; __THREW__ = 0;
       $4237 = $4236&1;
       if ($4237) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1959 = $4226;
      }
     } while(0);
     $4238 = (($$lcssa$i1959) + 4|0);
     HEAP8[$4238>>0] = 0;
     HEAP32[$$lcssa$i1959>>2] = ((472 + 8|0));
     $4239 = HEAP32[$agg$result>>2]|0;
     $4240 = (($4239) + 1120|0);
     HEAP32[$4240>>2] = $$lcssa$i1959;
     $4241 = (_malloc(8)|0);
     $4242 = ($4241|0)==(0|0);
     L2838: do {
      if ($4242) {
       while(1) {
        $4243 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4243+0)|0);
        $4244 = ($4243|0)==(0);
        if ($4244) {
         break;
        }
        $4245 = $4243;
        __THREW__ = 0;
        invoke_v($4245|0);
        $4246 = __THREW__; __THREW__ = 0;
        $4247 = $4246&1;
        if ($4247) {
         label = 1878;
         break;
        }
        $4248 = (_malloc(8)|0);
        $4249 = ($4248|0)==(0|0);
        if (!($4249)) {
         $$lcssa$i1966 = $4248;
         break L2838;
        }
       }
       if ((label|0) == 1878) {
        $4661 = ___cxa_find_matching_catch()|0;
        $4662 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4662;$eh$lpad$body$indexZ2D = $4661;
        break L12;
       }
       $4250 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4250>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4250|0),(20008|0),(386|0));
       $4251 = __THREW__; __THREW__ = 0;
       $4252 = $4251&1;
       if ($4252) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1966 = $4241;
      }
     } while(0);
     $4253 = (($$lcssa$i1966) + 4|0);
     HEAP8[$4253>>0] = 0;
     HEAP32[$$lcssa$i1966>>2] = ((520 + 8|0));
     $4254 = HEAP32[$agg$result>>2]|0;
     $4255 = (($4254) + 1124|0);
     HEAP32[$4255>>2] = $$lcssa$i1966;
     $4256 = (_malloc(8)|0);
     $4257 = ($4256|0)==(0|0);
     L2848: do {
      if ($4257) {
       while(1) {
        $4258 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4258+0)|0);
        $4259 = ($4258|0)==(0);
        if ($4259) {
         break;
        }
        $4260 = $4258;
        __THREW__ = 0;
        invoke_v($4260|0);
        $4261 = __THREW__; __THREW__ = 0;
        $4262 = $4261&1;
        if ($4262) {
         label = 1877;
         break;
        }
        $4263 = (_malloc(8)|0);
        $4264 = ($4263|0)==(0|0);
        if (!($4264)) {
         $$lcssa$i1973 = $4263;
         break L2848;
        }
       }
       if ((label|0) == 1877) {
        $4659 = ___cxa_find_matching_catch()|0;
        $4660 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4660;$eh$lpad$body$indexZ2D = $4659;
        break L12;
       }
       $4265 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4265>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4265|0),(20008|0),(386|0));
       $4266 = __THREW__; __THREW__ = 0;
       $4267 = $4266&1;
       if ($4267) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1973 = $4256;
      }
     } while(0);
     $4268 = (($$lcssa$i1973) + 4|0);
     HEAP8[$4268>>0] = 0;
     HEAP32[$$lcssa$i1973>>2] = ((520 + 8|0));
     $4269 = HEAP32[$agg$result>>2]|0;
     $4270 = (($4269) + 1128|0);
     HEAP32[$4270>>2] = $$lcssa$i1973;
     $4271 = (_malloc(8)|0);
     $4272 = ($4271|0)==(0|0);
     L2858: do {
      if ($4272) {
       while(1) {
        $4273 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4273+0)|0);
        $4274 = ($4273|0)==(0);
        if ($4274) {
         break;
        }
        $4275 = $4273;
        __THREW__ = 0;
        invoke_v($4275|0);
        $4276 = __THREW__; __THREW__ = 0;
        $4277 = $4276&1;
        if ($4277) {
         label = 1876;
         break;
        }
        $4278 = (_malloc(8)|0);
        $4279 = ($4278|0)==(0|0);
        if (!($4279)) {
         $$lcssa$i1980 = $4278;
         break L2858;
        }
       }
       if ((label|0) == 1876) {
        $4657 = ___cxa_find_matching_catch()|0;
        $4658 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4658;$eh$lpad$body$indexZ2D = $4657;
        break L12;
       }
       $4280 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4280>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4280|0),(20008|0),(386|0));
       $4281 = __THREW__; __THREW__ = 0;
       $4282 = $4281&1;
       if ($4282) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1980 = $4271;
      }
     } while(0);
     $4283 = (($$lcssa$i1980) + 4|0);
     HEAP8[$4283>>0] = 0;
     HEAP32[$$lcssa$i1980>>2] = ((624 + 8|0));
     $4284 = HEAP32[$agg$result>>2]|0;
     $4285 = (($4284) + 1132|0);
     HEAP32[$4285>>2] = $$lcssa$i1980;
     $4286 = (_malloc(8)|0);
     $4287 = ($4286|0)==(0|0);
     L2868: do {
      if ($4287) {
       while(1) {
        $4288 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4288+0)|0);
        $4289 = ($4288|0)==(0);
        if ($4289) {
         break;
        }
        $4290 = $4288;
        __THREW__ = 0;
        invoke_v($4290|0);
        $4291 = __THREW__; __THREW__ = 0;
        $4292 = $4291&1;
        if ($4292) {
         label = 1875;
         break;
        }
        $4293 = (_malloc(8)|0);
        $4294 = ($4293|0)==(0|0);
        if (!($4294)) {
         $$lcssa$i1987 = $4293;
         break L2868;
        }
       }
       if ((label|0) == 1875) {
        $4655 = ___cxa_find_matching_catch()|0;
        $4656 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4656;$eh$lpad$body$indexZ2D = $4655;
        break L12;
       }
       $4295 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4295>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4295|0),(20008|0),(386|0));
       $4296 = __THREW__; __THREW__ = 0;
       $4297 = $4296&1;
       if ($4297) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1987 = $4286;
      }
     } while(0);
     $4298 = (($$lcssa$i1987) + 4|0);
     HEAP8[$4298>>0] = 0;
     HEAP32[$$lcssa$i1987>>2] = ((624 + 8|0));
     $4299 = HEAP32[$agg$result>>2]|0;
     $4300 = (($4299) + 1136|0);
     HEAP32[$4300>>2] = $$lcssa$i1987;
     $4301 = (_malloc(8)|0);
     $4302 = ($4301|0)==(0|0);
     L2878: do {
      if ($4302) {
       while(1) {
        $4303 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4303+0)|0);
        $4304 = ($4303|0)==(0);
        if ($4304) {
         break;
        }
        $4305 = $4303;
        __THREW__ = 0;
        invoke_v($4305|0);
        $4306 = __THREW__; __THREW__ = 0;
        $4307 = $4306&1;
        if ($4307) {
         label = 1874;
         break;
        }
        $4308 = (_malloc(8)|0);
        $4309 = ($4308|0)==(0|0);
        if (!($4309)) {
         $$lcssa$i1994 = $4308;
         break L2878;
        }
       }
       if ((label|0) == 1874) {
        $4653 = ___cxa_find_matching_catch()|0;
        $4654 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4654;$eh$lpad$body$indexZ2D = $4653;
        break L12;
       }
       $4310 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4310>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4310|0),(20008|0),(386|0));
       $4311 = __THREW__; __THREW__ = 0;
       $4312 = $4311&1;
       if ($4312) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i1994 = $4301;
      }
     } while(0);
     $4313 = (($$lcssa$i1994) + 4|0);
     HEAP8[$4313>>0] = 0;
     HEAP32[$$lcssa$i1994>>2] = ((624 + 8|0));
     $4314 = HEAP32[$agg$result>>2]|0;
     $4315 = (($4314) + 1140|0);
     HEAP32[$4315>>2] = $$lcssa$i1994;
     $4316 = (_malloc(8)|0);
     $4317 = ($4316|0)==(0|0);
     L2888: do {
      if ($4317) {
       while(1) {
        $4318 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4318+0)|0);
        $4319 = ($4318|0)==(0);
        if ($4319) {
         break;
        }
        $4320 = $4318;
        __THREW__ = 0;
        invoke_v($4320|0);
        $4321 = __THREW__; __THREW__ = 0;
        $4322 = $4321&1;
        if ($4322) {
         label = 1873;
         break;
        }
        $4323 = (_malloc(8)|0);
        $4324 = ($4323|0)==(0|0);
        if (!($4324)) {
         $$lcssa$i2001 = $4323;
         break L2888;
        }
       }
       if ((label|0) == 1873) {
        $4651 = ___cxa_find_matching_catch()|0;
        $4652 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4652;$eh$lpad$body$indexZ2D = $4651;
        break L12;
       }
       $4325 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4325>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4325|0),(20008|0),(386|0));
       $4326 = __THREW__; __THREW__ = 0;
       $4327 = $4326&1;
       if ($4327) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2001 = $4316;
      }
     } while(0);
     $4328 = (($$lcssa$i2001) + 4|0);
     HEAP8[$4328>>0] = 0;
     HEAP32[$$lcssa$i2001>>2] = ((624 + 8|0));
     $4329 = HEAP32[$agg$result>>2]|0;
     $4330 = (($4329) + 1144|0);
     HEAP32[$4330>>2] = $$lcssa$i2001;
     $4331 = (_malloc(8)|0);
     $4332 = ($4331|0)==(0|0);
     L2898: do {
      if ($4332) {
       while(1) {
        $4333 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4333+0)|0);
        $4334 = ($4333|0)==(0);
        if ($4334) {
         break;
        }
        $4335 = $4333;
        __THREW__ = 0;
        invoke_v($4335|0);
        $4336 = __THREW__; __THREW__ = 0;
        $4337 = $4336&1;
        if ($4337) {
         label = 1872;
         break;
        }
        $4338 = (_malloc(8)|0);
        $4339 = ($4338|0)==(0|0);
        if (!($4339)) {
         $$lcssa$i2008 = $4338;
         break L2898;
        }
       }
       if ((label|0) == 1872) {
        $4649 = ___cxa_find_matching_catch()|0;
        $4650 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4650;$eh$lpad$body$indexZ2D = $4649;
        break L12;
       }
       $4340 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4340>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4340|0),(20008|0),(386|0));
       $4341 = __THREW__; __THREW__ = 0;
       $4342 = $4341&1;
       if ($4342) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2008 = $4331;
      }
     } while(0);
     $4343 = (($$lcssa$i2008) + 4|0);
     HEAP8[$4343>>0] = 0;
     HEAP32[$$lcssa$i2008>>2] = ((624 + 8|0));
     $4344 = HEAP32[$agg$result>>2]|0;
     $4345 = (($4344) + 1148|0);
     HEAP32[$4345>>2] = $$lcssa$i2008;
     $4346 = (_malloc(8)|0);
     $4347 = ($4346|0)==(0|0);
     L2908: do {
      if ($4347) {
       while(1) {
        $4348 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4348+0)|0);
        $4349 = ($4348|0)==(0);
        if ($4349) {
         break;
        }
        $4350 = $4348;
        __THREW__ = 0;
        invoke_v($4350|0);
        $4351 = __THREW__; __THREW__ = 0;
        $4352 = $4351&1;
        if ($4352) {
         label = 1871;
         break;
        }
        $4353 = (_malloc(8)|0);
        $4354 = ($4353|0)==(0|0);
        if (!($4354)) {
         $$lcssa$i2015 = $4353;
         break L2908;
        }
       }
       if ((label|0) == 1871) {
        $4647 = ___cxa_find_matching_catch()|0;
        $4648 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4648;$eh$lpad$body$indexZ2D = $4647;
        break L12;
       }
       $4355 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4355>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4355|0),(20008|0),(386|0));
       $4356 = __THREW__; __THREW__ = 0;
       $4357 = $4356&1;
       if ($4357) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2015 = $4346;
      }
     } while(0);
     $4358 = (($$lcssa$i2015) + 4|0);
     HEAP8[$4358>>0] = 0;
     HEAP32[$$lcssa$i2015>>2] = ((520 + 8|0));
     $4359 = HEAP32[$agg$result>>2]|0;
     $4360 = (($4359) + 1152|0);
     HEAP32[$4360>>2] = $$lcssa$i2015;
     $4361 = (_malloc(8)|0);
     $4362 = ($4361|0)==(0|0);
     L2918: do {
      if ($4362) {
       while(1) {
        $4363 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4363+0)|0);
        $4364 = ($4363|0)==(0);
        if ($4364) {
         break;
        }
        $4365 = $4363;
        __THREW__ = 0;
        invoke_v($4365|0);
        $4366 = __THREW__; __THREW__ = 0;
        $4367 = $4366&1;
        if ($4367) {
         label = 1870;
         break;
        }
        $4368 = (_malloc(8)|0);
        $4369 = ($4368|0)==(0|0);
        if (!($4369)) {
         $$lcssa$i2022 = $4368;
         break L2918;
        }
       }
       if ((label|0) == 1870) {
        $4645 = ___cxa_find_matching_catch()|0;
        $4646 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4646;$eh$lpad$body$indexZ2D = $4645;
        break L12;
       }
       $4370 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4370>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4370|0),(20008|0),(386|0));
       $4371 = __THREW__; __THREW__ = 0;
       $4372 = $4371&1;
       if ($4372) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2022 = $4361;
      }
     } while(0);
     $4373 = (($$lcssa$i2022) + 4|0);
     HEAP8[$4373>>0] = 0;
     HEAP32[$$lcssa$i2022>>2] = ((520 + 8|0));
     $4374 = HEAP32[$agg$result>>2]|0;
     $4375 = (($4374) + 1156|0);
     HEAP32[$4375>>2] = $$lcssa$i2022;
     $4376 = (_malloc(8)|0);
     $4377 = ($4376|0)==(0|0);
     L2928: do {
      if ($4377) {
       while(1) {
        $4378 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4378+0)|0);
        $4379 = ($4378|0)==(0);
        if ($4379) {
         break;
        }
        $4380 = $4378;
        __THREW__ = 0;
        invoke_v($4380|0);
        $4381 = __THREW__; __THREW__ = 0;
        $4382 = $4381&1;
        if ($4382) {
         label = 1869;
         break;
        }
        $4383 = (_malloc(8)|0);
        $4384 = ($4383|0)==(0|0);
        if (!($4384)) {
         $$lcssa$i2029 = $4383;
         break L2928;
        }
       }
       if ((label|0) == 1869) {
        $4643 = ___cxa_find_matching_catch()|0;
        $4644 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4644;$eh$lpad$body$indexZ2D = $4643;
        break L12;
       }
       $4385 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4385>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4385|0),(20008|0),(386|0));
       $4386 = __THREW__; __THREW__ = 0;
       $4387 = $4386&1;
       if ($4387) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2029 = $4376;
      }
     } while(0);
     $4388 = (($$lcssa$i2029) + 4|0);
     HEAP32[$$lcssa$i2029>>2] = ((320 + 8|0));
     HEAP8[$4388>>0] = 1;
     $4389 = HEAP32[$agg$result>>2]|0;
     $4390 = (($4389) + 1160|0);
     HEAP32[$4390>>2] = $$lcssa$i2029;
     $4391 = (_malloc(8)|0);
     $4392 = ($4391|0)==(0|0);
     L2938: do {
      if ($4392) {
       while(1) {
        $4393 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4393+0)|0);
        $4394 = ($4393|0)==(0);
        if ($4394) {
         break;
        }
        $4395 = $4393;
        __THREW__ = 0;
        invoke_v($4395|0);
        $4396 = __THREW__; __THREW__ = 0;
        $4397 = $4396&1;
        if ($4397) {
         label = 1868;
         break;
        }
        $4398 = (_malloc(8)|0);
        $4399 = ($4398|0)==(0|0);
        if (!($4399)) {
         $$lcssa$i2036 = $4398;
         break L2938;
        }
       }
       if ((label|0) == 1868) {
        $4641 = ___cxa_find_matching_catch()|0;
        $4642 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4642;$eh$lpad$body$indexZ2D = $4641;
        break L12;
       }
       $4400 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4400>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4400|0),(20008|0),(386|0));
       $4401 = __THREW__; __THREW__ = 0;
       $4402 = $4401&1;
       if ($4402) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2036 = $4391;
      }
     } while(0);
     $4403 = (($$lcssa$i2036) + 4|0);
     HEAP32[$$lcssa$i2036>>2] = ((320 + 8|0));
     HEAP8[$4403>>0] = 1;
     $4404 = HEAP32[$agg$result>>2]|0;
     $4405 = (($4404) + 1164|0);
     HEAP32[$4405>>2] = $$lcssa$i2036;
     $4406 = (_malloc(8)|0);
     $4407 = ($4406|0)==(0|0);
     L2948: do {
      if ($4407) {
       while(1) {
        $4408 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4408+0)|0);
        $4409 = ($4408|0)==(0);
        if ($4409) {
         break;
        }
        $4410 = $4408;
        __THREW__ = 0;
        invoke_v($4410|0);
        $4411 = __THREW__; __THREW__ = 0;
        $4412 = $4411&1;
        if ($4412) {
         label = 1867;
         break;
        }
        $4413 = (_malloc(8)|0);
        $4414 = ($4413|0)==(0|0);
        if (!($4414)) {
         $$lcssa$i2043 = $4413;
         break L2948;
        }
       }
       if ((label|0) == 1867) {
        $4639 = ___cxa_find_matching_catch()|0;
        $4640 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4640;$eh$lpad$body$indexZ2D = $4639;
        break L12;
       }
       $4415 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4415>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4415|0),(20008|0),(386|0));
       $4416 = __THREW__; __THREW__ = 0;
       $4417 = $4416&1;
       if ($4417) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2043 = $4406;
      }
     } while(0);
     $4418 = (($$lcssa$i2043) + 4|0);
     HEAP32[$$lcssa$i2043>>2] = ((320 + 8|0));
     HEAP8[$4418>>0] = 1;
     $4419 = HEAP32[$agg$result>>2]|0;
     $4420 = (($4419) + 1168|0);
     HEAP32[$4420>>2] = $$lcssa$i2043;
     $4421 = (_malloc(8)|0);
     $4422 = ($4421|0)==(0|0);
     L2958: do {
      if ($4422) {
       while(1) {
        $4423 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4423+0)|0);
        $4424 = ($4423|0)==(0);
        if ($4424) {
         break;
        }
        $4425 = $4423;
        __THREW__ = 0;
        invoke_v($4425|0);
        $4426 = __THREW__; __THREW__ = 0;
        $4427 = $4426&1;
        if ($4427) {
         label = 1866;
         break;
        }
        $4428 = (_malloc(8)|0);
        $4429 = ($4428|0)==(0|0);
        if (!($4429)) {
         $$lcssa$i2050 = $4428;
         break L2958;
        }
       }
       if ((label|0) == 1866) {
        $4637 = ___cxa_find_matching_catch()|0;
        $4638 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4638;$eh$lpad$body$indexZ2D = $4637;
        break L12;
       }
       $4430 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4430>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4430|0),(20008|0),(386|0));
       $4431 = __THREW__; __THREW__ = 0;
       $4432 = $4431&1;
       if ($4432) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2050 = $4421;
      }
     } while(0);
     $4433 = (($$lcssa$i2050) + 4|0);
     HEAP32[$$lcssa$i2050>>2] = ((320 + 8|0));
     HEAP8[$4433>>0] = 1;
     $4434 = HEAP32[$agg$result>>2]|0;
     $4435 = (($4434) + 1172|0);
     HEAP32[$4435>>2] = $$lcssa$i2050;
     $4436 = (_malloc(8)|0);
     $4437 = ($4436|0)==(0|0);
     L2968: do {
      if ($4437) {
       while(1) {
        $4438 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4438+0)|0);
        $4439 = ($4438|0)==(0);
        if ($4439) {
         break;
        }
        $4440 = $4438;
        __THREW__ = 0;
        invoke_v($4440|0);
        $4441 = __THREW__; __THREW__ = 0;
        $4442 = $4441&1;
        if ($4442) {
         label = 1865;
         break;
        }
        $4443 = (_malloc(8)|0);
        $4444 = ($4443|0)==(0|0);
        if (!($4444)) {
         $$lcssa$i2057 = $4443;
         break L2968;
        }
       }
       if ((label|0) == 1865) {
        $4635 = ___cxa_find_matching_catch()|0;
        $4636 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4636;$eh$lpad$body$indexZ2D = $4635;
        break L12;
       }
       $4445 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4445>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4445|0),(20008|0),(386|0));
       $4446 = __THREW__; __THREW__ = 0;
       $4447 = $4446&1;
       if ($4447) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2057 = $4436;
      }
     } while(0);
     $4448 = (($$lcssa$i2057) + 4|0);
     HEAP32[$$lcssa$i2057>>2] = ((320 + 8|0));
     HEAP8[$4448>>0] = 1;
     $4449 = HEAP32[$agg$result>>2]|0;
     $4450 = (($4449) + 1176|0);
     HEAP32[$4450>>2] = $$lcssa$i2057;
     $4451 = (_malloc(8)|0);
     $4452 = ($4451|0)==(0|0);
     L2978: do {
      if ($4452) {
       while(1) {
        $4453 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4453+0)|0);
        $4454 = ($4453|0)==(0);
        if ($4454) {
         break;
        }
        $4455 = $4453;
        __THREW__ = 0;
        invoke_v($4455|0);
        $4456 = __THREW__; __THREW__ = 0;
        $4457 = $4456&1;
        if ($4457) {
         label = 1864;
         break;
        }
        $4458 = (_malloc(8)|0);
        $4459 = ($4458|0)==(0|0);
        if (!($4459)) {
         $$lcssa$i2064 = $4458;
         break L2978;
        }
       }
       if ((label|0) == 1864) {
        $4633 = ___cxa_find_matching_catch()|0;
        $4634 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4634;$eh$lpad$body$indexZ2D = $4633;
        break L12;
       }
       $4460 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4460>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4460|0),(20008|0),(386|0));
       $4461 = __THREW__; __THREW__ = 0;
       $4462 = $4461&1;
       if ($4462) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2064 = $4451;
      }
     } while(0);
     $4463 = (($$lcssa$i2064) + 4|0);
     HEAP8[$4463>>0] = 0;
     HEAP32[$$lcssa$i2064>>2] = ((880 + 8|0));
     $4464 = HEAP32[$agg$result>>2]|0;
     $4465 = (($4464) + 1180|0);
     HEAP32[$4465>>2] = $$lcssa$i2064;
     $4466 = (_malloc(8)|0);
     $4467 = ($4466|0)==(0|0);
     L2988: do {
      if ($4467) {
       while(1) {
        $4468 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4468+0)|0);
        $4469 = ($4468|0)==(0);
        if ($4469) {
         break;
        }
        $4470 = $4468;
        __THREW__ = 0;
        invoke_v($4470|0);
        $4471 = __THREW__; __THREW__ = 0;
        $4472 = $4471&1;
        if ($4472) {
         label = 1863;
         break;
        }
        $4473 = (_malloc(8)|0);
        $4474 = ($4473|0)==(0|0);
        if (!($4474)) {
         $$lcssa$i2071 = $4473;
         break L2988;
        }
       }
       if ((label|0) == 1863) {
        $4631 = ___cxa_find_matching_catch()|0;
        $4632 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4632;$eh$lpad$body$indexZ2D = $4631;
        break L12;
       }
       $4475 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4475>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4475|0),(20008|0),(386|0));
       $4476 = __THREW__; __THREW__ = 0;
       $4477 = $4476&1;
       if ($4477) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2071 = $4466;
      }
     } while(0);
     $4478 = (($$lcssa$i2071) + 4|0);
     HEAP8[$4478>>0] = 0;
     HEAP32[$$lcssa$i2071>>2] = ((880 + 8|0));
     $4479 = HEAP32[$agg$result>>2]|0;
     $4480 = (($4479) + 1184|0);
     HEAP32[$4480>>2] = $$lcssa$i2071;
     $4481 = (_malloc(8)|0);
     $4482 = ($4481|0)==(0|0);
     L2998: do {
      if ($4482) {
       while(1) {
        $4483 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4483+0)|0);
        $4484 = ($4483|0)==(0);
        if ($4484) {
         break;
        }
        $4485 = $4483;
        __THREW__ = 0;
        invoke_v($4485|0);
        $4486 = __THREW__; __THREW__ = 0;
        $4487 = $4486&1;
        if ($4487) {
         label = 1862;
         break;
        }
        $4488 = (_malloc(8)|0);
        $4489 = ($4488|0)==(0|0);
        if (!($4489)) {
         $$lcssa$i2078 = $4488;
         break L2998;
        }
       }
       if ((label|0) == 1862) {
        $4629 = ___cxa_find_matching_catch()|0;
        $4630 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4630;$eh$lpad$body$indexZ2D = $4629;
        break L12;
       }
       $4490 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4490>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4490|0),(20008|0),(386|0));
       $4491 = __THREW__; __THREW__ = 0;
       $4492 = $4491&1;
       if ($4492) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2078 = $4481;
      }
     } while(0);
     $4493 = (($$lcssa$i2078) + 4|0);
     HEAP8[$4493>>0] = 0;
     HEAP32[$$lcssa$i2078>>2] = ((880 + 8|0));
     $4494 = HEAP32[$agg$result>>2]|0;
     $4495 = (($4494) + 1188|0);
     HEAP32[$4495>>2] = $$lcssa$i2078;
     $4496 = (_malloc(8)|0);
     $4497 = ($4496|0)==(0|0);
     L3008: do {
      if ($4497) {
       while(1) {
        $4498 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4498+0)|0);
        $4499 = ($4498|0)==(0);
        if ($4499) {
         break;
        }
        $4500 = $4498;
        __THREW__ = 0;
        invoke_v($4500|0);
        $4501 = __THREW__; __THREW__ = 0;
        $4502 = $4501&1;
        if ($4502) {
         label = 1861;
         break;
        }
        $4503 = (_malloc(8)|0);
        $4504 = ($4503|0)==(0|0);
        if (!($4504)) {
         $$lcssa$i2085 = $4503;
         break L3008;
        }
       }
       if ((label|0) == 1861) {
        $4627 = ___cxa_find_matching_catch()|0;
        $4628 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4628;$eh$lpad$body$indexZ2D = $4627;
        break L12;
       }
       $4505 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4505>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4505|0),(20008|0),(386|0));
       $4506 = __THREW__; __THREW__ = 0;
       $4507 = $4506&1;
       if ($4507) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2085 = $4496;
      }
     } while(0);
     $4508 = (($$lcssa$i2085) + 4|0);
     HEAP8[$4508>>0] = 0;
     HEAP32[$$lcssa$i2085>>2] = ((880 + 8|0));
     $4509 = HEAP32[$agg$result>>2]|0;
     $4510 = (($4509) + 1192|0);
     HEAP32[$4510>>2] = $$lcssa$i2085;
     $4511 = (_malloc(8)|0);
     $4512 = ($4511|0)==(0|0);
     L3018: do {
      if ($4512) {
       while(1) {
        $4513 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4513+0)|0);
        $4514 = ($4513|0)==(0);
        if ($4514) {
         break;
        }
        $4515 = $4513;
        __THREW__ = 0;
        invoke_v($4515|0);
        $4516 = __THREW__; __THREW__ = 0;
        $4517 = $4516&1;
        if ($4517) {
         label = 1860;
         break;
        }
        $4518 = (_malloc(8)|0);
        $4519 = ($4518|0)==(0|0);
        if (!($4519)) {
         $$lcssa$i2092 = $4518;
         break L3018;
        }
       }
       if ((label|0) == 1860) {
        $4625 = ___cxa_find_matching_catch()|0;
        $4626 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4626;$eh$lpad$body$indexZ2D = $4625;
        break L12;
       }
       $4520 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4520>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4520|0),(20008|0),(386|0));
       $4521 = __THREW__; __THREW__ = 0;
       $4522 = $4521&1;
       if ($4522) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2092 = $4511;
      }
     } while(0);
     $4523 = (($$lcssa$i2092) + 4|0);
     HEAP8[$4523>>0] = 0;
     HEAP32[$$lcssa$i2092>>2] = ((880 + 8|0));
     $4524 = HEAP32[$agg$result>>2]|0;
     $4525 = (($4524) + 1196|0);
     HEAP32[$4525>>2] = $$lcssa$i2092;
     $4526 = (_malloc(8)|0);
     $4527 = ($4526|0)==(0|0);
     L3028: do {
      if ($4527) {
       while(1) {
        $4528 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4528+0)|0);
        $4529 = ($4528|0)==(0);
        if ($4529) {
         break;
        }
        $4530 = $4528;
        __THREW__ = 0;
        invoke_v($4530|0);
        $4531 = __THREW__; __THREW__ = 0;
        $4532 = $4531&1;
        if ($4532) {
         label = 1859;
         break;
        }
        $4533 = (_malloc(8)|0);
        $4534 = ($4533|0)==(0|0);
        if (!($4534)) {
         $$lcssa$i2099 = $4533;
         break L3028;
        }
       }
       if ((label|0) == 1859) {
        $4623 = ___cxa_find_matching_catch()|0;
        $4624 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4624;$eh$lpad$body$indexZ2D = $4623;
        break L12;
       }
       $4535 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4535>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4535|0),(20008|0),(386|0));
       $4536 = __THREW__; __THREW__ = 0;
       $4537 = $4536&1;
       if ($4537) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2099 = $4526;
      }
     } while(0);
     $4538 = (($$lcssa$i2099) + 4|0);
     HEAP8[$4538>>0] = 0;
     HEAP32[$$lcssa$i2099>>2] = ((880 + 8|0));
     $4539 = HEAP32[$agg$result>>2]|0;
     $4540 = (($4539) + 1200|0);
     HEAP32[$4540>>2] = $$lcssa$i2099;
     $4541 = (_malloc(8)|0);
     $4542 = ($4541|0)==(0|0);
     L3038: do {
      if ($4542) {
       while(1) {
        $4543 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4543+0)|0);
        $4544 = ($4543|0)==(0);
        if ($4544) {
         break;
        }
        $4545 = $4543;
        __THREW__ = 0;
        invoke_v($4545|0);
        $4546 = __THREW__; __THREW__ = 0;
        $4547 = $4546&1;
        if ($4547) {
         label = 1858;
         break;
        }
        $4548 = (_malloc(8)|0);
        $4549 = ($4548|0)==(0|0);
        if (!($4549)) {
         $$lcssa$i2106 = $4548;
         break L3038;
        }
       }
       if ((label|0) == 1858) {
        $4621 = ___cxa_find_matching_catch()|0;
        $4622 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4622;$eh$lpad$body$indexZ2D = $4621;
        break L12;
       }
       $4550 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4550>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4550|0),(20008|0),(386|0));
       $4551 = __THREW__; __THREW__ = 0;
       $4552 = $4551&1;
       if ($4552) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2106 = $4541;
      }
     } while(0);
     $4553 = (($$lcssa$i2106) + 4|0);
     HEAP8[$4553>>0] = 0;
     HEAP32[$$lcssa$i2106>>2] = ((880 + 8|0));
     $4554 = HEAP32[$agg$result>>2]|0;
     $4555 = (($4554) + 1204|0);
     HEAP32[$4555>>2] = $$lcssa$i2106;
     $4556 = (_malloc(8)|0);
     $4557 = ($4556|0)==(0|0);
     L3048: do {
      if ($4557) {
       while(1) {
        $4558 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4558+0)|0);
        $4559 = ($4558|0)==(0);
        if ($4559) {
         break;
        }
        $4560 = $4558;
        __THREW__ = 0;
        invoke_v($4560|0);
        $4561 = __THREW__; __THREW__ = 0;
        $4562 = $4561&1;
        if ($4562) {
         label = 1857;
         break;
        }
        $4563 = (_malloc(8)|0);
        $4564 = ($4563|0)==(0|0);
        if (!($4564)) {
         $$lcssa$i2113 = $4563;
         break L3048;
        }
       }
       if ((label|0) == 1857) {
        $4619 = ___cxa_find_matching_catch()|0;
        $4620 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4620;$eh$lpad$body$indexZ2D = $4619;
        break L12;
       }
       $4565 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4565>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4565|0),(20008|0),(386|0));
       $4566 = __THREW__; __THREW__ = 0;
       $4567 = $4566&1;
       if ($4567) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2113 = $4556;
      }
     } while(0);
     $4568 = (($$lcssa$i2113) + 4|0);
     HEAP8[$4568>>0] = 0;
     HEAP32[$$lcssa$i2113>>2] = ((880 + 8|0));
     $4569 = HEAP32[$agg$result>>2]|0;
     $4570 = (($4569) + 1208|0);
     HEAP32[$4570>>2] = $$lcssa$i2113;
     $4571 = (_malloc(8)|0);
     $4572 = ($4571|0)==(0|0);
     L3058: do {
      if ($4572) {
       while(1) {
        $4573 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4573+0)|0);
        $4574 = ($4573|0)==(0);
        if ($4574) {
         break;
        }
        $4575 = $4573;
        __THREW__ = 0;
        invoke_v($4575|0);
        $4576 = __THREW__; __THREW__ = 0;
        $4577 = $4576&1;
        if ($4577) {
         label = 1856;
         break;
        }
        $4578 = (_malloc(8)|0);
        $4579 = ($4578|0)==(0|0);
        if (!($4579)) {
         $$lcssa$i2120 = $4578;
         break L3058;
        }
       }
       if ((label|0) == 1856) {
        $4617 = ___cxa_find_matching_catch()|0;
        $4618 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4618;$eh$lpad$body$indexZ2D = $4617;
        break L12;
       }
       $4580 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4580>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4580|0),(20008|0),(386|0));
       $4581 = __THREW__; __THREW__ = 0;
       $4582 = $4581&1;
       if ($4582) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2120 = $4571;
      }
     } while(0);
     $4583 = (($$lcssa$i2120) + 4|0);
     HEAP8[$4583>>0] = 0;
     HEAP32[$$lcssa$i2120>>2] = ((880 + 8|0));
     $4584 = HEAP32[$agg$result>>2]|0;
     $4585 = (($4584) + 1212|0);
     HEAP32[$4585>>2] = $$lcssa$i2120;
     $4586 = (_malloc(8)|0);
     $4587 = ($4586|0)==(0|0);
     L3068: do {
      if ($4587) {
       while(1) {
        $4588 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4588+0)|0);
        $4589 = ($4588|0)==(0);
        if ($4589) {
         break;
        }
        $4590 = $4588;
        __THREW__ = 0;
        invoke_v($4590|0);
        $4591 = __THREW__; __THREW__ = 0;
        $4592 = $4591&1;
        if ($4592) {
         label = 1855;
         break;
        }
        $4593 = (_malloc(8)|0);
        $4594 = ($4593|0)==(0|0);
        if (!($4594)) {
         $$lcssa$i2127 = $4593;
         break L3068;
        }
       }
       if ((label|0) == 1855) {
        $4615 = ___cxa_find_matching_catch()|0;
        $4616 = tempRet0;
        $eh$lpad$body$index4213Z2D = $4616;$eh$lpad$body$indexZ2D = $4615;
        break L12;
       }
       $4595 = (___cxa_allocate_exception(4)|0);
       HEAP32[$4595>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($4595|0),(20008|0),(386|0));
       $4596 = __THREW__; __THREW__ = 0;
       $4597 = $4596&1;
       if ($4597) {
        break L36;
       }
       // unreachable;
      } else {
       $$lcssa$i2127 = $4586;
      }
     } while(0);
     $4598 = (($$lcssa$i2127) + 4|0);
     HEAP8[$4598>>0] = 0;
     HEAP32[$$lcssa$i2127>>2] = ((880 + 8|0));
     $4599 = HEAP32[$agg$result>>2]|0;
     $4600 = (($4599) + 1216|0);
     HEAP32[$4600>>2] = $$lcssa$i2127;
     $4601 = (_malloc(8)|0);
     $4602 = ($4601|0)==(0|0);
     if (!($4602)) {
      $$lcssa$i2134 = $4601;
      $5227 = (($$lcssa$i2134) + 4|0);
      HEAP8[$5227>>0] = 0;
      HEAP32[$$lcssa$i2134>>2] = ((880 + 8|0));
      $5228 = HEAP32[$agg$result>>2]|0;
      $5229 = (($5228) + 1220|0);
      HEAP32[$5229>>2] = $$lcssa$i2134;
      STACKTOP = sp;return;
     }
     while(1) {
      $4603 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($4603+0)|0);
      $4604 = ($4603|0)==(0);
      if ($4604) {
       label = 1852;
       break;
      }
      $4605 = $4603;
      __THREW__ = 0;
      invoke_v($4605|0);
      $4606 = __THREW__; __THREW__ = 0;
      $4607 = $4606&1;
      if ($4607) {
       label = 1854;
       break;
      }
      $4608 = (_malloc(8)|0);
      $4609 = ($4608|0)==(0|0);
      if (!($4609)) {
       $$lcssa$i2134 = $4608;
       label = 2161;
       break;
      }
     }
     if ((label|0) == 1852) {
      $4610 = (___cxa_allocate_exception(4)|0);
      HEAP32[$4610>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($4610|0),(20008|0),(386|0));
      $4611 = __THREW__; __THREW__ = 0;
      $4612 = $4611&1;
      if ($4612) {
       break;
      }
      // unreachable;
     }
     else if ((label|0) == 1854) {
      $4613 = ___cxa_find_matching_catch()|0;
      $4614 = tempRet0;
      $eh$lpad$body$index4213Z2D = $4614;$eh$lpad$body$indexZ2D = $4613;
      break L12;
     }
     else if ((label|0) == 2161) {
      $5227 = (($$lcssa$i2134) + 4|0);
      HEAP8[$5227>>0] = 0;
      HEAP32[$$lcssa$i2134>>2] = ((880 + 8|0));
      $5228 = HEAP32[$agg$result>>2]|0;
      $5229 = (($5228) + 1220|0);
      HEAP32[$5229>>2] = $$lcssa$i2134;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $5225 = ___cxa_find_matching_catch()|0;
   $5226 = tempRet0;
   $eh$lpad$body$index4213Z2D = $5226;$eh$lpad$body$indexZ2D = $5225;
  }
 } while(0);
 $5230 = HEAP32[$agg$result>>2]|0;
 $5231 = (($agg$result) + 4|0);
 $5232 = HEAP32[$5231>>2]|0;
 $__begin$i$sroa$0$0 = $5230;
 while(1) {
  $5233 = ($__begin$i$sroa$0$0|0)==($5232|0);
  if ($5233) {
   break;
  }
  $5234 = HEAP32[$__begin$i$sroa$0$0>>2]|0;
  $5235 = ($5234|0)==(0|0);
  if (!($5235)) {
   $5236 = HEAP32[$5234>>2]|0;
   $5237 = (($5236) + 4|0);
   $5238 = HEAP32[$5237>>2]|0;
   FUNCTION_TABLE_vi[$5238 & 1023]($5234);
  }
  $5239 = (($__begin$i$sroa$0$0) + 4|0);
  $__begin$i$sroa$0$0 = $5239;
 }
 $5240 = ($5230|0)==(0|0);
 if ($5240) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 } else {
  $5242 = $5232;
 }
 while(1) {
  $5241 = ($5230|0)==($5242|0);
  if ($5241) {
   break;
  }
  $5243 = (($5242) + -4|0);
  HEAP32[$0>>2] = $5243;
  $5242 = $5243;
 }
 _free($5230);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNK8MonthDay9get_indexEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN3popD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN3popD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN4pokaD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4pokaD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN8vacationD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN8vacationD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN8vacation11call_optionEP4heroi($this,$_hero,$day) {
 $this = $this|0;
 $_hero = $_hero|0;
 $day = $day|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN11lecendpartyD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN11lecendpartyD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN9facepartyD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN9facepartyD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN2mtD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN2mtD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN13lecstartpartyD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN13lecstartpartyD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($this,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__nd|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$__nd>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($this,$1);
 $2 = (($__nd) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($this,$3);
 $4 = (($__nd) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = (($__nd) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
 }
 _free($__nd);
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $$0 = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__x|0)==($__root|0);
 $1 = (($__x) + 12|0);
 $2 = $0&1;
 HEAP8[$1>>0] = $2;
 $$0 = $__x;
 while(1) {
  $3 = ($$0|0)==($__root|0);
  if ($3) {
   label = 37;
   break;
  }
  $4 = (($$0) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 & 1;
  $9 = ($8<<24>>24)==(0);
  if (!($9)) {
   label = 37;
   break;
  }
  $10 = (($5) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($5|0)==($12|0);
  if ($13) {
   $14 = (($11) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    label = 7;
    break;
   }
   $17 = (($15) + 12|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if (!($20)) {
    label = 7;
    break;
   }
   HEAP8[$6>>0] = 1;
   $50 = ($11|0)==($__root|0);
   $51 = (($11) + 12|0);
   $52 = $50&1;
   HEAP8[$51>>0] = $52;
   HEAP8[$17>>0] = 1;
   $$0 = $11;
   continue;
  } else {
   $53 = ($12|0)==(0|0);
   if ($53) {
    label = 23;
    break;
   }
   $54 = (($12) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55 & 1;
   $57 = ($56<<24>>24)==(0);
   if (!($57)) {
    label = 23;
    break;
   }
   HEAP8[$6>>0] = 1;
   $85 = ($11|0)==($__root|0);
   $86 = (($11) + 12|0);
   $87 = $85&1;
   HEAP8[$86>>0] = $87;
   HEAP8[$54>>0] = 1;
   $$0 = $11;
   continue;
  }
 }
 if ((label|0) == 7) {
  $21 = HEAP32[$5>>2]|0;
  $22 = ($$0|0)==($21|0);
  if ($22) {
   $35 = $5;$37 = $11;
  } else {
   $23 = (($5) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$23>>2] = $25;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $29 = $11;
   } else {
    $27 = (($25) + 8|0);
    HEAP32[$27>>2] = $5;
    $$pre6 = HEAP32[$10>>2]|0;
    $29 = $$pre6;
   }
   $28 = (($24) + 8|0);
   HEAP32[$28>>2] = $29;
   $30 = HEAP32[$10>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($5|0)==($31|0);
   if ($32) {
    HEAP32[$30>>2] = $24;
   } else {
    $33 = (($30) + 4|0);
    HEAP32[$33>>2] = $24;
   }
   HEAP32[$24>>2] = $5;
   HEAP32[$10>>2] = $24;
   $$pre = HEAP32[$28>>2]|0;
   $35 = $24;$37 = $$pre;
  }
  $34 = (($35) + 12|0);
  HEAP8[$34>>0] = 1;
  $36 = (($37) + 12|0);
  HEAP8[$36>>0] = 0;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$37>>2] = $40;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   $42 = (($40) + 8|0);
   HEAP32[$42>>2] = $37;
  }
  $43 = (($37) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($38) + 8|0);
  HEAP32[$45>>2] = $44;
  $46 = HEAP32[$43>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($37|0)==($47|0);
  if ($48) {
   HEAP32[$46>>2] = $38;
  } else {
   $49 = (($46) + 4|0);
   HEAP32[$49>>2] = $38;
  }
  HEAP32[$39>>2] = $37;
  HEAP32[$43>>2] = $38;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 23) {
  $58 = HEAP32[$5>>2]|0;
  $59 = ($$0|0)==($58|0);
  if ($59) {
   $60 = (($$0) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   HEAP32[$5>>2] = $61;
   $62 = ($61|0)==(0|0);
   if ($62) {
    $64 = $11;
   } else {
    $63 = (($61) + 8|0);
    HEAP32[$63>>2] = $5;
    $$pre7 = HEAP32[$10>>2]|0;
    $64 = $$pre7;
   }
   HEAP32[$4>>2] = $64;
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($5|0)==($66|0);
   if ($67) {
    HEAP32[$65>>2] = $$0;
   } else {
    $68 = (($65) + 4|0);
    HEAP32[$68>>2] = $$0;
   }
   HEAP32[$60>>2] = $5;
   HEAP32[$10>>2] = $$0;
   $$pre8 = HEAP32[$4>>2]|0;
   $70 = $$0;$72 = $$pre8;
  } else {
   $70 = $5;$72 = $11;
  }
  $69 = (($70) + 12|0);
  HEAP8[$69>>0] = 1;
  $71 = (($72) + 12|0);
  HEAP8[$71>>0] = 0;
  $73 = (($72) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$74>>2]|0;
  HEAP32[$73>>2] = $75;
  $76 = ($75|0)==(0|0);
  if (!($76)) {
   $77 = (($75) + 8|0);
   HEAP32[$77>>2] = $72;
  }
  $78 = (($72) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($74) + 8|0);
  HEAP32[$80>>2] = $79;
  $81 = HEAP32[$78>>2]|0;
  $82 = HEAP32[$81>>2]|0;
  $83 = ($72|0)==($82|0);
  if ($83) {
   HEAP32[$81>>2] = $74;
  } else {
   $84 = (($81) + 4|0);
   HEAP32[$84>>2] = $74;
  }
  HEAP32[$74>>2] = $72;
  HEAP32[$78>>2] = $74;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 37) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalISB_EERPNS_16__tree_node_baseIPvEESN_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$03$i = 0, $$03$i3 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__nd$0$in = 0, $l$04$i = 0, $l$04$i2 = 0, $r$05$i = 0, $r$05$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $78 = (($this) + 4|0);
  HEAP32[$__parent>>2] = $78;
  $$0 = $78;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP8[$__v>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 $6 = (($__v) + 1|0);
 $7 = (($__v) + 1|0);
 $8 = (($__v) + 8|0);
 $9 = (($__v) + 4|0);
 $10 = (($__v) + 8|0);
 $11 = (($__v) + 4|0);
 $__nd$0$in = $1;
 L5: while(1) {
  $12 = (($__nd$0$in) + 16|0);
  if ($5) {
   $14 = $3&255;
   $15 = $14 >>> 1;
   $29 = $15;
  } else {
   $13 = HEAP32[$11>>2]|0;
   $29 = $13;
  }
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 & 1;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $21 = $16&255;
   $22 = $21 >>> 1;
   $28 = $22;
  } else {
   $19 = (($__nd$0$in) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $28 = $20;
  }
  if ($5) {
   $79 = $6;
  } else {
   $23 = HEAP32[$10>>2]|0;
   $79 = $23;
  }
  if ($18) {
   $26 = (($12) + 1|0);
   $80 = $26;
  } else {
   $24 = (($__nd$0$in) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $80 = $25;
  }
  $27 = ($28>>>0)<($29>>>0);
  $$ = $27 ? $28 : $29;
  $30 = ($$|0)==(0);
  L22: do {
   if ($30) {
    label = 18;
   } else {
    $$03$i = $$;$l$04$i = $79;$r$05$i = $80;
    while(1) {
     $31 = HEAP8[$l$04$i>>0]|0;
     $32 = HEAP8[$r$05$i>>0]|0;
     $33 = ($31<<24>>24)==($32<<24>>24);
     if (!($33)) {
      break;
     }
     $34 = (($$03$i) + -1)|0;
     $35 = (($l$04$i) + 1|0);
     $36 = (($r$05$i) + 1|0);
     $37 = ($34|0)==(0);
     if ($37) {
      label = 18;
      break L22;
     } else {
      $$03$i = $34;$l$04$i = $35;$r$05$i = $36;
     }
    }
    $38 = ($31<<24>>24)==($32<<24>>24);
    if ($38) {
     label = 18;
    } else {
     $40 = $31&255;
     $41 = $32&255;
     $42 = (($40) - ($41))|0;
     $43 = ($42|0)<(0);
     if ($43) {
      label = 20;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   $39 = ($29>>>0)<($28>>>0);
   if ($39) {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $44 = HEAP32[$__nd$0$in>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    label = 21;
    break;
   } else {
    $__nd$0$in = $44;
    continue;
   }
  }
  if ($18) {
   $48 = $16&255;
   $49 = $48 >>> 1;
   $59 = $49;
  } else {
   $46 = (($__nd$0$in) + 20|0);
   $47 = HEAP32[$46>>2]|0;
   $59 = $47;
  }
  if ($5) {
   $51 = $3&255;
   $52 = $51 >>> 1;
   $58 = $52;
  } else {
   $50 = HEAP32[$9>>2]|0;
   $58 = $50;
  }
  if ($18) {
   $55 = (($12) + 1|0);
   $81 = $55;
  } else {
   $53 = (($__nd$0$in) + 24|0);
   $54 = HEAP32[$53>>2]|0;
   $81 = $54;
  }
  if ($5) {
   $82 = $7;
  } else {
   $56 = HEAP32[$8>>2]|0;
   $82 = $56;
  }
  $57 = ($58>>>0)<($59>>>0);
  $$9 = $57 ? $58 : $59;
  $60 = ($$9|0)==(0);
  L48: do {
   if ($60) {
    label = 37;
   } else {
    $$03$i3 = $$9;$l$04$i2 = $81;$r$05$i1 = $82;
    while(1) {
     $61 = HEAP8[$l$04$i2>>0]|0;
     $62 = HEAP8[$r$05$i1>>0]|0;
     $63 = ($61<<24>>24)==($62<<24>>24);
     if (!($63)) {
      break;
     }
     $64 = (($$03$i3) + -1)|0;
     $65 = (($l$04$i2) + 1|0);
     $66 = (($r$05$i1) + 1|0);
     $67 = ($64|0)==(0);
     if ($67) {
      label = 37;
      break L48;
     } else {
      $$03$i3 = $64;$l$04$i2 = $65;$r$05$i1 = $66;
     }
    }
    $68 = ($61<<24>>24)==($62<<24>>24);
    if ($68) {
     label = 37;
    } else {
     $70 = $61&255;
     $71 = $62&255;
     $72 = (($70) - ($71))|0;
     $73 = ($72|0)<(0);
     if (!($73)) {
      label = 41;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 37) {
   label = 0;
   $69 = ($59>>>0)<($58>>>0);
   if (!($69)) {
    label = 41;
    break;
   }
  }
  $74 = (($__nd$0$in) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(0|0);
  if ($76) {
   label = 40;
   break;
  } else {
   $__nd$0$in = $75;
  }
 }
 if ((label|0) == 21) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__nd$0$in;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 40) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $77 = (($__nd$0$in) + 4|0);
  $$0 = $77;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 41) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__parent;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11TitleEffectEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $$ = 0, $$0 = 0, $$03$i = 0, $$03$i3 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__nd$0$in = 0, $l$04$i = 0, $l$04$i2 = 0, $r$05$i = 0, $r$05$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $78 = (($this) + 4|0);
  HEAP32[$__parent>>2] = $78;
  $$0 = $78;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP8[$__v>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 $6 = (($__v) + 1|0);
 $7 = (($__v) + 1|0);
 $8 = (($__v) + 8|0);
 $9 = (($__v) + 4|0);
 $10 = (($__v) + 8|0);
 $11 = (($__v) + 4|0);
 $__nd$0$in = $1;
 L5: while(1) {
  $12 = (($__nd$0$in) + 16|0);
  if ($5) {
   $14 = $3&255;
   $15 = $14 >>> 1;
   $29 = $15;
  } else {
   $13 = HEAP32[$11>>2]|0;
   $29 = $13;
  }
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 & 1;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $21 = $16&255;
   $22 = $21 >>> 1;
   $28 = $22;
  } else {
   $19 = (($__nd$0$in) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $28 = $20;
  }
  if ($5) {
   $79 = $6;
  } else {
   $23 = HEAP32[$10>>2]|0;
   $79 = $23;
  }
  if ($18) {
   $26 = (($12) + 1|0);
   $80 = $26;
  } else {
   $24 = (($__nd$0$in) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $80 = $25;
  }
  $27 = ($28>>>0)<($29>>>0);
  $$ = $27 ? $28 : $29;
  $30 = ($$|0)==(0);
  L22: do {
   if ($30) {
    label = 18;
   } else {
    $$03$i = $$;$l$04$i = $79;$r$05$i = $80;
    while(1) {
     $31 = HEAP8[$l$04$i>>0]|0;
     $32 = HEAP8[$r$05$i>>0]|0;
     $33 = ($31<<24>>24)==($32<<24>>24);
     if (!($33)) {
      break;
     }
     $34 = (($$03$i) + -1)|0;
     $35 = (($l$04$i) + 1|0);
     $36 = (($r$05$i) + 1|0);
     $37 = ($34|0)==(0);
     if ($37) {
      label = 18;
      break L22;
     } else {
      $$03$i = $34;$l$04$i = $35;$r$05$i = $36;
     }
    }
    $38 = ($31<<24>>24)==($32<<24>>24);
    if ($38) {
     label = 18;
    } else {
     $40 = $31&255;
     $41 = $32&255;
     $42 = (($40) - ($41))|0;
     $43 = ($42|0)<(0);
     if ($43) {
      label = 20;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   $39 = ($29>>>0)<($28>>>0);
   if ($39) {
    label = 20;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   $44 = HEAP32[$__nd$0$in>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    label = 21;
    break;
   } else {
    $__nd$0$in = $44;
    continue;
   }
  }
  if ($18) {
   $48 = $16&255;
   $49 = $48 >>> 1;
   $59 = $49;
  } else {
   $46 = (($__nd$0$in) + 20|0);
   $47 = HEAP32[$46>>2]|0;
   $59 = $47;
  }
  if ($5) {
   $51 = $3&255;
   $52 = $51 >>> 1;
   $58 = $52;
  } else {
   $50 = HEAP32[$9>>2]|0;
   $58 = $50;
  }
  if ($18) {
   $55 = (($12) + 1|0);
   $81 = $55;
  } else {
   $53 = (($__nd$0$in) + 24|0);
   $54 = HEAP32[$53>>2]|0;
   $81 = $54;
  }
  if ($5) {
   $82 = $7;
  } else {
   $56 = HEAP32[$8>>2]|0;
   $82 = $56;
  }
  $57 = ($58>>>0)<($59>>>0);
  $$9 = $57 ? $58 : $59;
  $60 = ($$9|0)==(0);
  L48: do {
   if ($60) {
    label = 37;
   } else {
    $$03$i3 = $$9;$l$04$i2 = $81;$r$05$i1 = $82;
    while(1) {
     $61 = HEAP8[$l$04$i2>>0]|0;
     $62 = HEAP8[$r$05$i1>>0]|0;
     $63 = ($61<<24>>24)==($62<<24>>24);
     if (!($63)) {
      break;
     }
     $64 = (($$03$i3) + -1)|0;
     $65 = (($l$04$i2) + 1|0);
     $66 = (($r$05$i1) + 1|0);
     $67 = ($64|0)==(0);
     if ($67) {
      label = 37;
      break L48;
     } else {
      $$03$i3 = $64;$l$04$i2 = $65;$r$05$i1 = $66;
     }
    }
    $68 = ($61<<24>>24)==($62<<24>>24);
    if ($68) {
     label = 37;
    } else {
     $70 = $61&255;
     $71 = $62&255;
     $72 = (($70) - ($71))|0;
     $73 = ($72|0)<(0);
     if (!($73)) {
      label = 41;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 37) {
   label = 0;
   $69 = ($59>>>0)<($58>>>0);
   if (!($69)) {
    label = 41;
    break;
   }
  }
  $74 = (($__nd$0$in) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(0|0);
  if ($76) {
   label = 40;
   break;
  } else {
   $__nd$0$in = $75;
  }
 }
 if ((label|0) == 21) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__nd$0$in;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 40) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $77 = (($__nd$0$in) + 4|0);
  $$0 = $77;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 41) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__parent;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __GLOBAL__I_a() {
 var $$ = 0, $$0 = 0, $$018 = 0, $$019 = 0, $$019$ph$ph$ph$ph$ph$ph$ph = 0, $$021 = 0, $$022 = 0, $$023 = 0, $$03$i3$i$i$i$i = 0, $$initlist$$i = 0, $$lcssa$i$i = 0, $$lcssa$i$i$i$i = 0, $$lcssa$i18$i = 0, $$lcssa$i29$i = 0, $$lcssa$i40$i = 0, $$lcssa$i51$i = 0, $$lcssa$i6$i$i$i = 0, $$lcssa$i62$i = 0, $$lcssa$i73$i = 0, $$pre = 0;
 var $$pre58 = 0, $$size$i$i = 0, $$size$i$i$i$i = 0, $$size$i16$i = 0, $$size$i27$i = 0, $$size$i38$i = 0, $$size$i49$i = 0, $$size$i60$i = 0, $$size$i71$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h$i$i$sroa$0$0 = 0, $__p$0$i$i = 0, $__p$0$i$i$i$i = 0, $__p$0$i11$i = 0, $__p$0$i23$i = 0, $__p$0$i34$i = 0, $__p$0$i45$i = 0, $__p$0$i56$i = 0;
 var $__p$0$i67$i = 0, $__parent$i$i$i = 0, $__prior$i$i$i$i$sroa$0$0 = 0, $__r$i$i$i$0 = 0, $eh$lpad$body$i$index67Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $l$04$i2$i$i$i$i = 0, $lpad$phi30$index = 0, $lpad$phi30$index60 = 0, $lpad$phi37$index = 0, $lpad$phi37$index80 = 0, $r$05$i1$i$i$i$i = 0, $storemerge$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__parent$i$i$i = sp + 112|0;
 $$initlist$$i = sp;
 $0 = (_strlen((2176|0))|0);
 $1 = ($0>>>0)>(4294967279);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   invoke_v(429);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if ($3) {
    $$019$ph$ph$ph$ph$ph$ph$ph = $$initlist$$i;
    label = 162;
   } else {
    // unreachable;
   }
  } else {
   $4 = ($0>>>0)<(11);
   if ($4) {
    $5 = $0 << 1;
    $6 = $5&255;
    HEAP8[$$initlist$$i>>0] = $6;
    $7 = (($$initlist$$i) + 1|0);
    $__p$0$i$i = $7;
   } else {
    $8 = (($0) + 16)|0;
    $9 = $8 & -16;
    $10 = ($9|0)==(0);
    $$size$i$i = $10 ? 1 : $9;
    $11 = (_malloc($$size$i$i)|0);
    $12 = ($11|0)==(0|0);
    L6: do {
     if ($12) {
      while(1) {
       $13 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($13+0)|0);
       $14 = ($13|0)==(0);
       if ($14) {
        break;
       }
       $15 = $13;
       __THREW__ = 0;
       invoke_v($15|0);
       $16 = __THREW__; __THREW__ = 0;
       $17 = $16&1;
       if ($17) {
        label = 161;
        break;
       }
       $18 = (_malloc($$size$i$i)|0);
       $19 = ($18|0)==(0|0);
       if (!($19)) {
        $$lcssa$i$i = $18;
        break L6;
       }
      }
      if ((label|0) == 161) {
       $360 = ___cxa_find_matching_catch()|0;
       $361 = tempRet0;
       $$019 = $$initlist$$i;$lpad$phi37$index = $360;$lpad$phi37$index80 = $361;
       break L1;
      }
      $20 = (___cxa_allocate_exception(4)|0);
      HEAP32[$20>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($20|0),(20008|0),(386|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $$019$ph$ph$ph$ph$ph$ph$ph = $$initlist$$i;
       label = 162;
       break L1;
      }
      // unreachable;
     } else {
      $$lcssa$i$i = $11;
     }
    } while(0);
    $23 = (($$initlist$$i) + 8|0);
    HEAP32[$23>>2] = $$lcssa$i$i;
    $24 = $9 | 1;
    HEAP32[$$initlist$$i>>2] = $24;
    $25 = (($$initlist$$i) + 4|0);
    HEAP32[$25>>2] = $0;
    $__p$0$i$i = $$lcssa$i$i;
   }
   _memcpy(($__p$0$i$i|0),(2176|0),($0|0))|0;
   $26 = (($__p$0$i$i) + ($0)|0);
   HEAP8[$26>>0] = 0;
   $27 = (($$initlist$$i) + 12|0);
   HEAP32[$27>>2] = 1168;
   $28 = (($$initlist$$i) + 16|0);
   $29 = (_strlen((2192|0))|0);
   $30 = ($29>>>0)>(4294967279);
   if ($30) {
    __THREW__ = 0;
    invoke_v(429);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $$019$ph$ph$ph$ph$ph$ph$ph = $28;
     label = 162;
     break;
    }
    // unreachable;
   }
   $33 = ($29>>>0)<(11);
   if ($33) {
    $34 = $29 << 1;
    $35 = $34&255;
    HEAP8[$28>>0] = $35;
    $36 = (($28) + 1|0);
    $__p$0$i11$i = $36;
   } else {
    $37 = (($29) + 16)|0;
    $38 = $37 & -16;
    $39 = ($38|0)==(0);
    $$size$i16$i = $39 ? 1 : $38;
    $40 = (_malloc($$size$i16$i)|0);
    $41 = ($40|0)==(0|0);
    L23: do {
     if ($41) {
      while(1) {
       $42 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($42+0)|0);
       $43 = ($42|0)==(0);
       if ($43) {
        break;
       }
       $44 = $42;
       __THREW__ = 0;
       invoke_v($44|0);
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 160;
        break;
       }
       $47 = (_malloc($$size$i16$i)|0);
       $48 = ($47|0)==(0|0);
       if (!($48)) {
        $$lcssa$i18$i = $47;
        break L23;
       }
      }
      if ((label|0) == 160) {
       $358 = ___cxa_find_matching_catch()|0;
       $359 = tempRet0;
       $$019 = $28;$lpad$phi37$index = $358;$lpad$phi37$index80 = $359;
       break L1;
      }
      $49 = (___cxa_allocate_exception(4)|0);
      HEAP32[$49>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($49|0),(20008|0),(386|0));
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       $$019$ph$ph$ph$ph$ph$ph$ph = $28;
       label = 162;
       break L1;
      }
      // unreachable;
     } else {
      $$lcssa$i18$i = $40;
     }
    } while(0);
    $52 = (($$initlist$$i) + 24|0);
    HEAP32[$52>>2] = $$lcssa$i18$i;
    $53 = $38 | 1;
    HEAP32[$28>>2] = $53;
    $54 = (($$initlist$$i) + 20|0);
    HEAP32[$54>>2] = $29;
    $__p$0$i11$i = $$lcssa$i18$i;
   }
   _memcpy(($__p$0$i11$i|0),(2192|0),($29|0))|0;
   $55 = (($__p$0$i11$i) + ($29)|0);
   HEAP8[$55>>0] = 0;
   $56 = (($$initlist$$i) + 28|0);
   HEAP32[$56>>2] = 1312;
   $57 = (($$initlist$$i) + 32|0);
   $58 = (_strlen((2208|0))|0);
   $59 = ($58>>>0)>(4294967279);
   if ($59) {
    __THREW__ = 0;
    invoke_v(429);
    $60 = __THREW__; __THREW__ = 0;
    $61 = $60&1;
    if ($61) {
     $$019$ph$ph$ph$ph$ph$ph$ph = $57;
     label = 162;
     break;
    }
    // unreachable;
   }
   $62 = ($58>>>0)<(11);
   if ($62) {
    $63 = $58 << 1;
    $64 = $63&255;
    HEAP8[$57>>0] = $64;
    $65 = (($57) + 1|0);
    $__p$0$i23$i = $65;
   } else {
    $66 = (($58) + 16)|0;
    $67 = $66 & -16;
    $68 = ($67|0)==(0);
    $$size$i27$i = $68 ? 1 : $67;
    $69 = (_malloc($$size$i27$i)|0);
    $70 = ($69|0)==(0|0);
    L42: do {
     if ($70) {
      while(1) {
       $71 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($71+0)|0);
       $72 = ($71|0)==(0);
       if ($72) {
        break;
       }
       $73 = $71;
       __THREW__ = 0;
       invoke_v($73|0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        label = 159;
        break;
       }
       $76 = (_malloc($$size$i27$i)|0);
       $77 = ($76|0)==(0|0);
       if (!($77)) {
        $$lcssa$i29$i = $76;
        break L42;
       }
      }
      if ((label|0) == 159) {
       $356 = ___cxa_find_matching_catch()|0;
       $357 = tempRet0;
       $$019 = $57;$lpad$phi37$index = $356;$lpad$phi37$index80 = $357;
       break L1;
      }
      $78 = (___cxa_allocate_exception(4)|0);
      HEAP32[$78>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($78|0),(20008|0),(386|0));
      $79 = __THREW__; __THREW__ = 0;
      $80 = $79&1;
      if ($80) {
       $$019$ph$ph$ph$ph$ph$ph$ph = $57;
       label = 162;
       break L1;
      }
      // unreachable;
     } else {
      $$lcssa$i29$i = $69;
     }
    } while(0);
    $81 = (($$initlist$$i) + 40|0);
    HEAP32[$81>>2] = $$lcssa$i29$i;
    $82 = $67 | 1;
    HEAP32[$57>>2] = $82;
    $83 = (($$initlist$$i) + 36|0);
    HEAP32[$83>>2] = $58;
    $__p$0$i23$i = $$lcssa$i29$i;
   }
   _memcpy(($__p$0$i23$i|0),(2208|0),($58|0))|0;
   $84 = (($__p$0$i23$i) + ($58)|0);
   HEAP8[$84>>0] = 0;
   $85 = (($$initlist$$i) + 44|0);
   HEAP32[$85>>2] = 1456;
   $86 = (($$initlist$$i) + 48|0);
   $87 = (_strlen((2224|0))|0);
   $88 = ($87>>>0)>(4294967279);
   if ($88) {
    __THREW__ = 0;
    invoke_v(429);
    $89 = __THREW__; __THREW__ = 0;
    $90 = $89&1;
    if ($90) {
     $$019$ph$ph$ph$ph$ph$ph$ph = $86;
     label = 162;
     break;
    }
    // unreachable;
   }
   $91 = ($87>>>0)<(11);
   if ($91) {
    $92 = $87 << 1;
    $93 = $92&255;
    HEAP8[$86>>0] = $93;
    $94 = (($86) + 1|0);
    $__p$0$i34$i = $94;
   } else {
    $95 = (($87) + 16)|0;
    $96 = $95 & -16;
    $97 = ($96|0)==(0);
    $$size$i38$i = $97 ? 1 : $96;
    $98 = (_malloc($$size$i38$i)|0);
    $99 = ($98|0)==(0|0);
    L59: do {
     if ($99) {
      while(1) {
       $100 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($100+0)|0);
       $101 = ($100|0)==(0);
       if ($101) {
        break;
       }
       $102 = $100;
       __THREW__ = 0;
       invoke_v($102|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 158;
        break;
       }
       $105 = (_malloc($$size$i38$i)|0);
       $106 = ($105|0)==(0|0);
       if (!($106)) {
        $$lcssa$i40$i = $105;
        break L59;
       }
      }
      if ((label|0) == 158) {
       $354 = ___cxa_find_matching_catch()|0;
       $355 = tempRet0;
       $$019 = $86;$lpad$phi37$index = $354;$lpad$phi37$index80 = $355;
       break L1;
      }
      $107 = (___cxa_allocate_exception(4)|0);
      HEAP32[$107>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($107|0),(20008|0),(386|0));
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if ($109) {
       $$019$ph$ph$ph$ph$ph$ph$ph = $86;
       label = 162;
       break L1;
      }
      // unreachable;
     } else {
      $$lcssa$i40$i = $98;
     }
    } while(0);
    $110 = (($$initlist$$i) + 56|0);
    HEAP32[$110>>2] = $$lcssa$i40$i;
    $111 = $96 | 1;
    HEAP32[$86>>2] = $111;
    $112 = (($$initlist$$i) + 52|0);
    HEAP32[$112>>2] = $87;
    $__p$0$i34$i = $$lcssa$i40$i;
   }
   _memcpy(($__p$0$i34$i|0),(2224|0),($87|0))|0;
   $113 = (($__p$0$i34$i) + ($87)|0);
   HEAP8[$113>>0] = 0;
   $114 = (($$initlist$$i) + 60|0);
   HEAP32[$114>>2] = 1600;
   $115 = (($$initlist$$i) + 64|0);
   $116 = (_strlen((2232|0))|0);
   $117 = ($116>>>0)>(4294967279);
   if ($117) {
    __THREW__ = 0;
    invoke_v(429);
    $118 = __THREW__; __THREW__ = 0;
    $119 = $118&1;
    if ($119) {
     $$019$ph$ph$ph$ph$ph$ph$ph = $115;
     label = 162;
     break;
    }
    // unreachable;
   }
   $120 = ($116>>>0)<(11);
   if ($120) {
    $121 = $116 << 1;
    $122 = $121&255;
    HEAP8[$115>>0] = $122;
    $123 = (($115) + 1|0);
    $__p$0$i45$i = $123;
   } else {
    $124 = (($116) + 16)|0;
    $125 = $124 & -16;
    $126 = ($125|0)==(0);
    $$size$i49$i = $126 ? 1 : $125;
    $127 = (_malloc($$size$i49$i)|0);
    $128 = ($127|0)==(0|0);
    L78: do {
     if ($128) {
      while(1) {
       $129 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($129+0)|0);
       $130 = ($129|0)==(0);
       if ($130) {
        break;
       }
       $131 = $129;
       __THREW__ = 0;
       invoke_v($131|0);
       $132 = __THREW__; __THREW__ = 0;
       $133 = $132&1;
       if ($133) {
        label = 157;
        break;
       }
       $134 = (_malloc($$size$i49$i)|0);
       $135 = ($134|0)==(0|0);
       if (!($135)) {
        $$lcssa$i51$i = $134;
        break L78;
       }
      }
      if ((label|0) == 157) {
       $352 = ___cxa_find_matching_catch()|0;
       $353 = tempRet0;
       $$019 = $115;$lpad$phi37$index = $352;$lpad$phi37$index80 = $353;
       break L1;
      }
      $136 = (___cxa_allocate_exception(4)|0);
      HEAP32[$136>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($136|0),(20008|0),(386|0));
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       $$019$ph$ph$ph$ph$ph$ph$ph = $115;
       label = 162;
       break L1;
      }
      // unreachable;
     } else {
      $$lcssa$i51$i = $127;
     }
    } while(0);
    $139 = (($$initlist$$i) + 72|0);
    HEAP32[$139>>2] = $$lcssa$i51$i;
    $140 = $125 | 1;
    HEAP32[$115>>2] = $140;
    $141 = (($$initlist$$i) + 68|0);
    HEAP32[$141>>2] = $116;
    $__p$0$i45$i = $$lcssa$i51$i;
   }
   _memcpy(($__p$0$i45$i|0),(2232|0),($116|0))|0;
   $142 = (($__p$0$i45$i) + ($116)|0);
   HEAP8[$142>>0] = 0;
   $143 = (($$initlist$$i) + 76|0);
   HEAP32[$143>>2] = 1744;
   $144 = (($$initlist$$i) + 80|0);
   $145 = (_strlen((2240|0))|0);
   $146 = ($145>>>0)>(4294967279);
   if ($146) {
    __THREW__ = 0;
    invoke_v(429);
    $147 = __THREW__; __THREW__ = 0;
    $148 = $147&1;
    if ($148) {
     $$019$ph$ph$ph$ph$ph$ph$ph = $144;
     label = 162;
     break;
    }
    // unreachable;
   }
   $149 = ($145>>>0)<(11);
   if ($149) {
    $150 = $145 << 1;
    $151 = $150&255;
    HEAP8[$144>>0] = $151;
    $152 = (($144) + 1|0);
    $__p$0$i56$i = $152;
   } else {
    $153 = (($145) + 16)|0;
    $154 = $153 & -16;
    $155 = ($154|0)==(0);
    $$size$i60$i = $155 ? 1 : $154;
    $156 = (_malloc($$size$i60$i)|0);
    $157 = ($156|0)==(0|0);
    L95: do {
     if ($157) {
      while(1) {
       $158 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($158+0)|0);
       $159 = ($158|0)==(0);
       if ($159) {
        break;
       }
       $160 = $158;
       __THREW__ = 0;
       invoke_v($160|0);
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if ($162) {
        label = 156;
        break;
       }
       $163 = (_malloc($$size$i60$i)|0);
       $164 = ($163|0)==(0|0);
       if (!($164)) {
        $$lcssa$i62$i = $163;
        break L95;
       }
      }
      if ((label|0) == 156) {
       $350 = ___cxa_find_matching_catch()|0;
       $351 = tempRet0;
       $$019 = $144;$lpad$phi37$index = $350;$lpad$phi37$index80 = $351;
       break L1;
      }
      $165 = (___cxa_allocate_exception(4)|0);
      HEAP32[$165>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($165|0),(20008|0),(386|0));
      $166 = __THREW__; __THREW__ = 0;
      $167 = $166&1;
      if ($167) {
       $$019$ph$ph$ph$ph$ph$ph$ph = $144;
       label = 162;
       break L1;
      }
      // unreachable;
     } else {
      $$lcssa$i62$i = $156;
     }
    } while(0);
    $168 = (($$initlist$$i) + 88|0);
    HEAP32[$168>>2] = $$lcssa$i62$i;
    $169 = $154 | 1;
    HEAP32[$144>>2] = $169;
    $170 = (($$initlist$$i) + 84|0);
    HEAP32[$170>>2] = $145;
    $__p$0$i56$i = $$lcssa$i62$i;
   }
   _memcpy(($__p$0$i56$i|0),(2240|0),($145|0))|0;
   $171 = (($__p$0$i56$i) + ($145)|0);
   HEAP8[$171>>0] = 0;
   $172 = (($$initlist$$i) + 92|0);
   HEAP32[$172>>2] = 1888;
   $173 = (($$initlist$$i) + 96|0);
   $174 = (_strlen((2264|0))|0);
   $175 = ($174>>>0)>(4294967279);
   if ($175) {
    __THREW__ = 0;
    invoke_v(429);
    $176 = __THREW__; __THREW__ = 0;
    $177 = $176&1;
    if ($177) {
     $$019$ph$ph$ph$ph$ph$ph$ph = $173;
     label = 162;
     break;
    }
    // unreachable;
   }
   $178 = ($174>>>0)<(11);
   if ($178) {
    $179 = $174 << 1;
    $180 = $179&255;
    HEAP8[$173>>0] = $180;
    $181 = (($173) + 1|0);
    $__p$0$i67$i = $181;
   } else {
    $182 = (($174) + 16)|0;
    $183 = $182 & -16;
    $184 = ($183|0)==(0);
    $$size$i71$i = $184 ? 1 : $183;
    $185 = (_malloc($$size$i71$i)|0);
    $186 = ($185|0)==(0|0);
    L114: do {
     if ($186) {
      while(1) {
       $187 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($187+0)|0);
       $188 = ($187|0)==(0);
       if ($188) {
        break;
       }
       $189 = $187;
       __THREW__ = 0;
       invoke_v($189|0);
       $190 = __THREW__; __THREW__ = 0;
       $191 = $190&1;
       if ($191) {
        label = 155;
        break;
       }
       $192 = (_malloc($$size$i71$i)|0);
       $193 = ($192|0)==(0|0);
       if (!($193)) {
        $$lcssa$i73$i = $192;
        break L114;
       }
      }
      if ((label|0) == 155) {
       $348 = ___cxa_find_matching_catch()|0;
       $349 = tempRet0;
       $$019 = $173;$lpad$phi37$index = $348;$lpad$phi37$index80 = $349;
       break L1;
      }
      $194 = (___cxa_allocate_exception(4)|0);
      HEAP32[$194>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($194|0),(20008|0),(386|0));
      $195 = __THREW__; __THREW__ = 0;
      $196 = $195&1;
      if ($196) {
       $$019$ph$ph$ph$ph$ph$ph$ph = $173;
       label = 162;
       break L1;
      }
      // unreachable;
     } else {
      $$lcssa$i73$i = $185;
     }
    } while(0);
    $197 = (($$initlist$$i) + 104|0);
    HEAP32[$197>>2] = $$lcssa$i73$i;
    $198 = $183 | 1;
    HEAP32[$173>>2] = $198;
    $199 = (($$initlist$$i) + 100|0);
    HEAP32[$199>>2] = $174;
    $__p$0$i67$i = $$lcssa$i73$i;
   }
   _memcpy(($__p$0$i67$i|0),(2264|0),($174|0))|0;
   $200 = (($__p$0$i67$i) + ($174)|0);
   HEAP8[$200>>0] = 0;
   $201 = (($$initlist$$i) + 108|0);
   HEAP32[$201>>2] = 2032;
   HEAP32[((1152 + 4|0))>>2] = 0;
   HEAP32[((1152 + 8|0))>>2] = 0;
   HEAP32[1152>>2] = ((1152 + 4|0));
   $202 = (($$initlist$$i) + 112|0);
   $$023 = $$initlist$$i;
   L125: while(1) {
    $203 = ($$023|0)==($202|0);
    if ($203) {
     label = 151;
     break;
    }
    $204 = (_malloc(32)|0);
    $205 = ($204|0)==(0|0);
    if ($205) {
     while(1) {
      $206 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($206+0)|0);
      $207 = ($206|0)==(0);
      if ($207) {
       label = 91;
       break L125;
      }
      $208 = $206;
      __THREW__ = 0;
      invoke_v($208|0);
      $209 = __THREW__; __THREW__ = 0;
      $210 = $209&1;
      if ($210) {
       label = 148;
       break L125;
      }
      $211 = (_malloc(32)|0);
      $212 = ($211|0)==(0|0);
      if (!($212)) {
       $$lcssa$i$i$i$i = $211;
       break;
      }
     }
    } else {
     $$lcssa$i$i$i$i = $204;
    }
    $216 = (($$lcssa$i$i$i$i) + 16|0);
    $217 = HEAP8[$$023>>0]|0;
    $218 = $217 & 1;
    $219 = ($218<<24>>24)==(0);
    if ($219) {
     ;HEAP32[$216+0>>2]=HEAP32[$$023+0>>2]|0;HEAP32[$216+4>>2]=HEAP32[$$023+4>>2]|0;HEAP32[$216+8>>2]=HEAP32[$$023+8>>2]|0;
    } else {
     $220 = (($$023) + 8|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($$023) + 4|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ($223>>>0)>(4294967279);
     if ($224) {
      label = 96;
      break;
     }
     $227 = ($223>>>0)<(11);
     if ($227) {
      $228 = $223 << 1;
      $229 = $228&255;
      HEAP8[$216>>0] = $229;
      $230 = (($$lcssa$i$i$i$i) + 17|0);
      $__p$0$i$i$i$i = $230;
     } else {
      $231 = (($223) + 16)|0;
      $232 = $231 & -16;
      $233 = ($232|0)==(0);
      $$size$i$i$i$i = $233 ? 1 : $232;
      $234 = (_malloc($$size$i$i$i$i)|0);
      $235 = ($234|0)==(0|0);
      if ($235) {
       while(1) {
        $236 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($236+0)|0);
        $237 = ($236|0)==(0);
        if ($237) {
         label = 104;
         break L125;
        }
        $238 = $236;
        __THREW__ = 0;
        invoke_v($238|0);
        $239 = __THREW__; __THREW__ = 0;
        $240 = $239&1;
        if ($240) {
         label = 108;
         break L125;
        }
        $241 = (_malloc($$size$i$i$i$i)|0);
        $242 = ($241|0)==(0|0);
        if (!($242)) {
         $$lcssa$i6$i$i$i = $241;
         break;
        }
       }
      } else {
       $$lcssa$i6$i$i$i = $234;
      }
      $246 = (($$lcssa$i$i$i$i) + 24|0);
      HEAP32[$246>>2] = $$lcssa$i6$i$i$i;
      $247 = $232 | 1;
      HEAP32[$216>>2] = $247;
      $248 = (($$lcssa$i$i$i$i) + 20|0);
      HEAP32[$248>>2] = $223;
      $__p$0$i$i$i$i = $$lcssa$i6$i$i$i;
     }
     _memcpy(($__p$0$i$i$i$i|0),($221|0),($223|0))|0;
     $249 = (($__p$0$i$i$i$i) + ($223)|0);
     HEAP8[$249>>0] = 0;
    }
    $255 = (($$lcssa$i$i$i$i) + 28|0);
    $256 = (($$023) + 12|0);
    $257 = HEAP32[$256>>2]|0;
    HEAP32[$255>>2] = $257;
    $258 = (($$lcssa$i$i$i$i) + 16|0);
    $259 = HEAP32[1152>>2]|0;
    $260 = ($259|0)==(((1152 + 4|0))|0);
    $$pre58 = HEAP32[((1152 + 4|0))>>2]|0;
    L149: do {
     if ($260) {
      $309 = $$pre58;$__prior$i$i$i$i$sroa$0$0 = ((1152 + 4|0));
      label = 134;
     } else {
      $261 = ($$pre58|0)==(0|0);
      if ($261) {
       $$021 = ((1152 + 4|0));
       while(1) {
        $265 = (($$021) + 8|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = HEAP32[$266>>2]|0;
        $268 = ($$021|0)==($267|0);
        if ($268) {
         $$021 = $266;
        } else {
         $270 = $266;
         break;
        }
       }
      } else {
       $storemerge$i$i$i$i$i = $$pre58;
       while(1) {
        $262 = (($storemerge$i$i$i$i$i) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ($263|0)==(0|0);
        if ($264) {
         $270 = $storemerge$i$i$i$i$i;
         break;
        } else {
         $storemerge$i$i$i$i$i = $263;
        }
       }
      }
      $269 = (($270) + 16|0);
      $271 = HEAP8[$269>>0]|0;
      $272 = $271 & 1;
      $273 = ($272<<24>>24)==(0);
      if ($273) {
       $276 = $271&255;
       $277 = $276 >>> 1;
       $293 = $277;
      } else {
       $274 = (($270) + 20|0);
       $275 = HEAP32[$274>>2]|0;
       $293 = $275;
      }
      $278 = HEAP8[$258>>0]|0;
      $279 = $278 & 1;
      $280 = ($279<<24>>24)==(0);
      if ($280) {
       $283 = $278&255;
       $284 = $283 >>> 1;
       $292 = $284;
      } else {
       $281 = (($$lcssa$i$i$i$i) + 20|0);
       $282 = HEAP32[$281>>2]|0;
       $292 = $282;
      }
      if ($273) {
       $287 = (($269) + 1|0);
       $381 = $287;
      } else {
       $285 = (($270) + 24|0);
       $286 = HEAP32[$285>>2]|0;
       $381 = $286;
      }
      if ($280) {
       $290 = (($$lcssa$i$i$i$i) + 17|0);
       $382 = $290;
      } else {
       $288 = (($$lcssa$i$i$i$i) + 24|0);
       $289 = HEAP32[$288>>2]|0;
       $382 = $289;
      }
      $291 = ($292>>>0)<($293>>>0);
      $$ = $291 ? $292 : $293;
      $294 = ($$|0)==(0);
      L173: do {
       if ($294) {
        label = 132;
       } else {
        $$03$i3$i$i$i$i = $$;$l$04$i2$i$i$i$i = $381;$r$05$i1$i$i$i$i = $382;
        while(1) {
         $295 = HEAP8[$l$04$i2$i$i$i$i>>0]|0;
         $296 = HEAP8[$r$05$i1$i$i$i$i>>0]|0;
         $297 = ($295<<24>>24)==($296<<24>>24);
         if (!($297)) {
          break;
         }
         $298 = (($$03$i3$i$i$i$i) + -1)|0;
         $299 = (($l$04$i2$i$i$i$i) + 1|0);
         $300 = (($r$05$i1$i$i$i$i) + 1|0);
         $301 = ($298|0)==(0);
         if ($301) {
          label = 132;
          break L173;
         } else {
          $$03$i3$i$i$i$i = $298;$l$04$i2$i$i$i$i = $299;$r$05$i1$i$i$i$i = $300;
         }
        }
        $302 = ($295<<24>>24)==($296<<24>>24);
        if ($302) {
         label = 132;
         break;
        }
        $304 = $295&255;
        $305 = $296&255;
        $306 = (($304) - ($305))|0;
        $307 = ($306|0)<(0);
        if ($307) {
         $309 = $$pre58;$__prior$i$i$i$i$sroa$0$0 = $270;
         label = 134;
         break L149;
        }
       }
      } while(0);
      if ((label|0) == 132) {
       label = 0;
       $303 = ($293>>>0)<($292>>>0);
       if ($303) {
        $309 = $$pre58;$__prior$i$i$i$i$sroa$0$0 = $270;
        label = 134;
        break;
       }
      }
      $311 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalISB_EERPNS_16__tree_node_baseIPvEESN_RKT_(1152,$__parent$i$i$i,$258)|0);
      $$022 = $311;
     }
    } while(0);
    do {
     if ((label|0) == 134) {
      label = 0;
      $308 = ($309|0)==(0|0);
      if ($308) {
       HEAP32[$__parent$i$i$i>>2] = ((1152 + 4|0));
       $$022 = ((1152 + 4|0));
       break;
      } else {
       HEAP32[$__parent$i$i$i>>2] = $__prior$i$i$i$i$sroa$0$0;
       $310 = (($__prior$i$i$i$i$sroa$0$0) + 4|0);
       $$022 = $310;
       break;
      }
     }
    } while(0);
    $312 = HEAP32[$$022>>2]|0;
    $313 = ($312|0)==(0|0);
    do {
     if ($313) {
      $314 = HEAP32[$__parent$i$i$i>>2]|0;
      HEAP32[$$lcssa$i$i$i$i>>2] = 0;
      $315 = (($$lcssa$i$i$i$i) + 4|0);
      HEAP32[$315>>2] = 0;
      $316 = (($$lcssa$i$i$i$i) + 8|0);
      HEAP32[$316>>2] = $314;
      HEAP32[$$022>>2] = $$lcssa$i$i$i$i;
      $317 = HEAP32[1152>>2]|0;
      $318 = HEAP32[$317>>2]|0;
      $319 = ($318|0)==(0|0);
      if ($319) {
       $321 = $$lcssa$i$i$i$i;
      } else {
       HEAP32[1152>>2] = $318;
       $$pre = HEAP32[$$022>>2]|0;
       $321 = $$pre;
      }
      $320 = HEAP32[((1152 + 4|0))>>2]|0;
      __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($320,$321);
      $322 = HEAP32[((1152 + 8|0))>>2]|0;
      $323 = (($322) + 1)|0;
      HEAP32[((1152 + 8|0))>>2] = $323;
     } else {
      $__r$i$i$i$0 = $312;
      $324 = ($__r$i$i$i$0|0)==($$lcssa$i$i$i$i|0);
      if ($324) {
       break;
      } else {
       $__h$i$i$sroa$0$0 = $$lcssa$i$i$i$i;
      }
      $325 = ($__h$i$i$sroa$0$0|0)==(0|0);
      if ($325) {
       break;
      }
      $326 = (($__h$i$i$sroa$0$0) + 16|0);
      $327 = HEAP8[$326>>0]|0;
      $328 = $327 & 1;
      $329 = ($328<<24>>24)==(0);
      if (!($329)) {
       $330 = (($__h$i$i$sroa$0$0) + 24|0);
       $331 = HEAP32[$330>>2]|0;
       _free($331);
      }
      _free($__h$i$i$sroa$0$0);
     }
    } while(0);
    $332 = (($$023) + 16|0);
    $$023 = $332;
   }
   do {
    if ((label|0) == 91) {
     $213 = (___cxa_allocate_exception(4)|0);
     HEAP32[$213>>2] = ((19952 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($213|0),(20008|0),(386|0));
     $214 = __THREW__; __THREW__ = 0;
     $215 = $214&1;
     if ($215) {
      $335 = ___cxa_find_matching_catch()|0;
      $336 = tempRet0;
      $eh$lpad$body$i$index67Z2D = $336;$eh$lpad$body$i$indexZ2D = $335;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 96) {
     __THREW__ = 0;
     invoke_v(429);
     $225 = __THREW__; __THREW__ = 0;
     $226 = $225&1;
     if ($226) {
      label = 109;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 104) {
     $243 = (___cxa_allocate_exception(4)|0);
     HEAP32[$243>>2] = ((19952 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($243|0),(20008|0),(386|0));
     $244 = __THREW__; __THREW__ = 0;
     $245 = $244&1;
     if ($245) {
      label = 109;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 108) {
     $250 = ___cxa_find_matching_catch()|0;
     $251 = tempRet0;
     $lpad$phi30$index = $250;$lpad$phi30$index60 = $251;
     label = 110;
    }
    else if ((label|0) == 148) {
     $333 = ___cxa_find_matching_catch()|0;
     $334 = tempRet0;
     $eh$lpad$body$i$index67Z2D = $334;$eh$lpad$body$i$indexZ2D = $333;
    }
    else if ((label|0) == 151) {
     (___cxa_atexit((430|0),(1152|0),(___dso_handle|0))|0);
     $339 = (($$initlist$$i) + 112|0);
     $341 = $339;
     while(1) {
      $340 = (($341) + -16|0);
      $342 = HEAP8[$340>>0]|0;
      $343 = $342 & 1;
      $344 = ($343<<24>>24)==(0);
      if (!($344)) {
       $345 = (($341) + -8|0);
       $346 = HEAP32[$345>>2]|0;
       _free($346);
      }
      $347 = ($340|0)==($$initlist$$i|0);
      if ($347) {
       break;
      } else {
       $341 = $340;
      }
     }
     STACKTOP = sp;return;
    }
   } while(0);
   if ((label|0) == 109) {
    $252 = ___cxa_find_matching_catch()|0;
    $253 = tempRet0;
    $lpad$phi30$index = $252;$lpad$phi30$index60 = $253;
    label = 110;
   }
   if ((label|0) == 110) {
    $254 = ($$lcssa$i$i$i$i|0)==(0|0);
    if ($254) {
     $eh$lpad$body$i$index67Z2D = $lpad$phi30$index60;$eh$lpad$body$i$indexZ2D = $lpad$phi30$index;
    } else {
     _free($$lcssa$i$i$i$i);
     $eh$lpad$body$i$index67Z2D = $lpad$phi30$index60;$eh$lpad$body$i$indexZ2D = $lpad$phi30$index;
    }
   }
   $337 = HEAP32[((1152 + 4|0))>>2]|0;
   __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE(1152,$337);
   $338 = (($$initlist$$i) + 112|0);
   $374 = $338;
   while(1) {
    $373 = (($374) + -16|0);
    $375 = HEAP8[$373>>0]|0;
    $376 = $375 & 1;
    $377 = ($376<<24>>24)==(0);
    if (!($377)) {
     $378 = (($374) + -8|0);
     $379 = HEAP32[$378>>2]|0;
     _free($379);
    }
    $380 = ($373|0)==($$initlist$$i|0);
    if ($380) {
     $$0 = $eh$lpad$body$i$index67Z2D;$$018 = $eh$lpad$body$i$indexZ2D;
     break;
    } else {
     $374 = $373;
    }
   }
   ___resumeException($$018|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 162) {
  $362 = ___cxa_find_matching_catch()|0;
  $363 = tempRet0;
  $$019 = $$019$ph$ph$ph$ph$ph$ph$ph;$lpad$phi37$index = $362;$lpad$phi37$index80 = $363;
 }
 $364 = ($$initlist$$i|0)==($$019|0);
 if ($364) {
  $$0 = $lpad$phi37$index80;$$018 = $lpad$phi37$index;
  ___resumeException($$018|0);
  // unreachable;
 } else {
  $366 = $$019;
 }
 while(1) {
  $365 = (($366) + -16|0);
  $367 = HEAP8[$365>>0]|0;
  $368 = $367 & 1;
  $369 = ($368<<24>>24)==(0);
  if (!($369)) {
   $370 = (($366) + -8|0);
   $371 = HEAP32[$370>>2]|0;
   _free($371);
  }
  $372 = ($365|0)==($$initlist$$i|0);
  if ($372) {
   $$0 = $lpad$phi37$index80;$$018 = $lpad$phi37$index;
   break;
  } else {
   $366 = $365;
  }
 }
 ___resumeException($$018|0);
 // unreachable;
}
function __ZNK8MonthDay9get_monthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8MonthDay7get_dayEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK10GameCenter7get_mapEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNK10GameCenter20get_current_positionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK10GameCenter13get_characterEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN10GameCenter4diceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 22208;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 22208;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 $16 = (($14>>>0) % 6)&-1;
 $17 = (($16) + 1)|0;
 STACKTOP = sp;return ($17|0);
}
function __ZN8MapTable8generateERKNSt3__16vectorIP4cellNS0_9allocatorIS3_EEEE($agg$result,$map) {
 $agg$result = $agg$result|0;
 $map = $map|0;
 var $$0 = 0, $$lcssa$i$i = 0, $$lcssa$i5$i = 0, $$pre = 0, $$pre11 = 0, $$size$i$i = 0, $$size$i3$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $__begin$i$sroa$0$0 = 0, $eh$lpad$body$index20Z2D = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$index = 0, $lpad$phi$index14 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = 0;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($agg$result) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ($agg$result|0)==($map|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$map>>2]|0;
 $4 = (($map) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $5;
  $12 = (($11) - ($7))|0;
  $13 = $12 >> 2;
  _memcpy((0|0),($3|0),($12|0))|0;
  $14 = (0 + ($13<<2)|0);
  $16 = 0;
  while(1) {
   $15 = ($14|0)==($16|0);
   if ($15) {
    break;
   }
   $17 = (($16) + -4|0);
   HEAP32[$0>>2] = $17;
   $16 = $17;
  }
  STACKTOP = sp;return;
 }
 $18 = ($9>>>0)>(1073741823);
 L11: do {
  if ($18) {
   $19 = (___cxa_allocate_exception(8)|0);
   HEAP32[$19>>2] = ((20152 + 8|0));
   $20 = (($19) + 4|0);
   $21 = (_strlen((11648|0))|0);
   $22 = (($21) + 1)|0;
   $23 = (($21) + 13)|0;
   $24 = ($23|0)==(0);
   $$size$i3$i = $24 ? 1 : $23;
   $25 = (_malloc($$size$i3$i)|0);
   $26 = ($25|0)==(0|0);
   L31: do {
    if ($26) {
     while(1) {
      $27 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($27+0)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       label = 11;
       break;
      }
      $29 = $27;
      __THREW__ = 0;
      invoke_v($29|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 15;
       break;
      }
      $32 = (_malloc($$size$i3$i)|0);
      $33 = ($32|0)==(0|0);
      if (!($33)) {
       $$lcssa$i5$i = $32;
       break L31;
      }
     }
     do {
      if ((label|0) == 11) {
       $34 = (___cxa_allocate_exception(4)|0);
       HEAP32[$34>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($34|0),(20008|0),(386|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $44 = ___cxa_find_matching_catch()|0;
        $45 = tempRet0;
        $lpad$phi$index = $44;$lpad$phi$index14 = $45;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 15) {
       $42 = ___cxa_find_matching_catch()|0;
       $43 = tempRet0;
       $lpad$phi$index = $42;$lpad$phi$index14 = $43;
      }
     } while(0);
     ___cxa_free_exception(($19|0));
     $eh$lpad$body$index20Z2D = $lpad$phi$index14;$eh$lpad$body$indexZ2D = $lpad$phi$index;
     break L11;
    } else {
     $$lcssa$i5$i = $25;
    }
   } while(0);
   $37 = (($$lcssa$i5$i) + 4|0);
   HEAP32[$37>>2] = $21;
   HEAP32[$$lcssa$i5$i>>2] = $21;
   $38 = (($$lcssa$i5$i) + 12|0);
   HEAP32[$20>>2] = $38;
   $39 = (($$lcssa$i5$i) + 8|0);
   HEAP32[$39>>2] = 0;
   _memcpy(($38|0),(11648|0),($22|0))|0;
   HEAP32[$19>>2] = ((20232 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($19|0),(20280|0),(389|0));
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    label = 30;
   } else {
    // unreachable;
   }
  } else {
   $46 = $9 << 2;
   $47 = ($46|0)==(0);
   $$size$i$i = $47 ? 1 : $46;
   $48 = (_malloc($$size$i$i)|0);
   $49 = ($48|0)==(0|0);
   L13: do {
    if ($49) {
     while(1) {
      $50 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($50+0)|0);
      $51 = ($50|0)==(0);
      if ($51) {
       break;
      }
      $52 = $50;
      __THREW__ = 0;
      invoke_v($52|0);
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if ($54) {
       label = 29;
       break;
      }
      $55 = (_malloc($$size$i$i)|0);
      $56 = ($55|0)==(0|0);
      if (!($56)) {
       $$lcssa$i$i = $55;
       break L13;
      }
     }
     if ((label|0) == 29) {
      $68 = ___cxa_find_matching_catch()|0;
      $69 = tempRet0;
      $eh$lpad$body$index20Z2D = $69;$eh$lpad$body$indexZ2D = $68;
      break L11;
     }
     $57 = (___cxa_allocate_exception(4)|0);
     HEAP32[$57>>2] = ((19952 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($57|0),(20008|0),(386|0));
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 30;
      break L11;
     }
     // unreachable;
    } else {
     $$lcssa$i$i = $48;
    }
   } while(0);
   HEAP32[$0>>2] = $$lcssa$i$i;
   HEAP32[$agg$result>>2] = $$lcssa$i$i;
   $60 = (($$lcssa$i$i) + ($9<<2)|0);
   HEAP32[$1>>2] = $60;
   $$0 = $3;$63 = $$lcssa$i$i;
   while(1) {
    $61 = ($$0|0)==($5|0);
    if ($61) {
     break;
    }
    $62 = ($63|0)==(0|0);
    if ($62) {
     $66 = 0;
    } else {
     $64 = HEAP32[$$0>>2]|0;
     HEAP32[$63>>2] = $64;
     $$pre11 = HEAP32[$0>>2]|0;
     $66 = $$pre11;
    }
    $65 = (($66) + 4|0);
    HEAP32[$0>>2] = $65;
    $67 = (($$0) + 4|0);
    $$0 = $67;$63 = $65;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 30) {
  $70 = ___cxa_find_matching_catch()|0;
  $71 = tempRet0;
  $eh$lpad$body$index20Z2D = $71;$eh$lpad$body$indexZ2D = $70;
 }
 $72 = HEAP32[$agg$result>>2]|0;
 $73 = (($agg$result) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $__begin$i$sroa$0$0 = $72;
 while(1) {
  $75 = ($__begin$i$sroa$0$0|0)==($74|0);
  if ($75) {
   break;
  }
  $76 = HEAP32[$__begin$i$sroa$0$0>>2]|0;
  $77 = ($76|0)==(0|0);
  if (!($77)) {
   $78 = HEAP32[$76>>2]|0;
   $79 = (($78) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   FUNCTION_TABLE_vi[$80 & 1023]($76);
  }
  $81 = (($__begin$i$sroa$0$0) + 4|0);
  $__begin$i$sroa$0$0 = $81;
 }
 $82 = HEAP32[$agg$result>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $$pre = HEAP32[$0>>2]|0;
 $85 = $$pre;
 while(1) {
  $84 = ($82|0)==($85|0);
  if ($84) {
   break;
  }
  $86 = (($85) + -4|0);
  HEAP32[$0>>2] = $86;
  $85 = $86;
 }
 _free($82);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN10emscripten8internal12GetterPolicyIM4heroKFfvEE3getIS2_EEfRKS4_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (+FUNCTION_TABLE_di[$8 & 1023]($1));
  STACKTOP = sp;return (+$9);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (+FUNCTION_TABLE_di[$8 & 1023]($1));
  STACKTOP = sp;return (+$9);
 }
 return +0;
}
function __ZN10emscripten8internal12operator_newI4heroJffffff9sexualityEEEPT_DpOT0_($args,$args1,$args2,$args3,$args4,$args5,$args6) {
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 $args3 = $args3|0;
 $args4 = $args4|0;
 $args5 = $args5|0;
 $args6 = $args6|0;
 var $$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(224)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   while(1) {
    $2 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2+0)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     break;
    }
    $4 = $2;
    FUNCTION_TABLE_v[$4 & 1023]();
    $5 = (_malloc(224)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa$i = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((19952 + 8|0));
   ___cxa_throw(($7|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i = $0;
  }
 } while(0);
 $8 = +HEAPF32[$args>>2];
 $9 = +HEAPF32[$args1>>2];
 $10 = +HEAPF32[$args2>>2];
 $11 = +HEAPF32[$args3>>2];
 $12 = +HEAPF32[$args4>>2];
 $13 = +HEAPF32[$args5>>2];
 $14 = HEAP32[$args6>>2]|0;
 __ZN4heroC2Effffff9sexuality($$lcssa$i,$8,$9,$10,$11,$12,$13,$14);
 STACKTOP = sp;return ($$lcssa$i|0);
}
function __ZN10emscripten8internal7InvokerIP4heroJOfS4_S4_S4_S4_S4_O9sexualityEE6invokeEPFS3_S4_S4_S4_S4_S4_S4_S6_EffffffS5_($fn,$args,$args1,$args2,$args3,$args4,$args5,$args6) {
 $fn = $fn|0;
 $args = +$args;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 $args4 = +$args4;
 $args5 = +$args5;
 $args6 = $args6|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = sp;
 $2 = sp + 4|0;
 $3 = sp + 8|0;
 $4 = sp + 12|0;
 $5 = sp + 16|0;
 $6 = sp + 20|0;
 HEAPF32[$0>>2] = $args;
 HEAPF32[$1>>2] = $args1;
 HEAPF32[$2>>2] = $args2;
 HEAPF32[$3>>2] = $args3;
 HEAPF32[$4>>2] = $args4;
 HEAPF32[$5>>2] = $args5;
 HEAP32[$6>>2] = $args6;
 $7 = (FUNCTION_TABLE_iiiiiiii[$fn & 1023]($0,$1,$2,$3,$4,$5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN10emscripten8internal13getActualTypeI4heroEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (2992|0);
}
function __ZN10emscripten8internal14raw_destructorI4heroEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($ptr) + 64|0);
 $2 = (($ptr) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11TitleEffectEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($1,$3);
 $4 = (($ptr) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = (($ptr) + 52|0);
  $$pre = HEAP32[$7>>2]|0;
  $9 = $$pre;
  while(1) {
   $8 = ($5|0)==($9|0);
   if ($8) {
    break;
   }
   $10 = (($9) + -4|0);
   HEAP32[$7>>2] = $10;
   $9 = $10;
  }
  _free($5);
 }
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11TitleEffectEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__nd|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$__nd>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11TitleEffectEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$1);
 $2 = (($__nd) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11TitleEffectEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$3);
 $4 = (($__nd) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = (($__nd) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
 }
 _free($__nd);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13getActualTypeI9facepartyEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI9facepartyEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI7specialE14convertPointerIS1_9facepartyEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI7specialE14convertPointerI9facepartyS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI2mtEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI2mtEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI7specialE14convertPointerIS1_2mtEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI7specialE14convertPointerI2mtS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI11lecendpartyEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI11lecendpartyEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI7specialE14convertPointerIS1_11lecendpartyEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI7specialE14convertPointerI11lecendpartyS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI13lecstartpartyEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI13lecstartpartyEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI7specialE14convertPointerIS1_13lecstartpartyEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI7specialE14convertPointerI13lecstartpartyS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI7specialEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI7specialEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_7specialEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI7specialS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI3popEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI3popEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI8festivalE14convertPointerIS1_3popEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI8festivalE14convertPointerI3popS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI4pokaEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI4pokaEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI8festivalE14convertPointerIS1_4pokaEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI8festivalE14convertPointerI4pokaS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI8festivalEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI8festivalEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_8festivalEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI8festivalS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI8vacationEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI8vacationEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_8vacationEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI8vacationS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI5danceEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI5danceEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_5danceEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI5danceS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI10after_examEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI10after_examEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_10after_examEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI10after_examS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI4examEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI4examEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_4examEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI4examS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI11before_examEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI11before_examEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_11before_examEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI11before_examS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI5marchEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI5marchEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_5marchEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI5marchS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI7weekendEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI7weekendEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_7weekendEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI7weekendS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal13getActualTypeI6normalEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI6normalEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten4baseI4cellE14convertPointerIS1_6normalEEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten4baseI4cellE14convertPointerI6normalS1_EEPT0_PT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($ptr|0);
}
function __ZN10emscripten8internal12GetterPolicyIM4cellKFbvEE3getIS2_EEbRKS4_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal13getActualTypeI4cellEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ptr>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14raw_destructorI4cellEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIM8MapTableFP4celliES4_PS2_JiEE6invokeERKS6_S7_i($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_iii[$8 & 1023]($1,$args)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_iii[$8 & 1023]($1,$args)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal13MethodInvokerIM8MapTableFiiiEiPS2_JiiEE6invokeERKS4_S5_ii($method,$wireThis,$args,$args1) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_iiii[$8 & 1023]($1,$args,$args1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_iiii[$8 & 1023]($1,$args,$args1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal7InvokerI8MapTableJEE6invokeEPFS2_vE($fn) {
 $fn = $fn|0;
 var $$lcssa$i = 0, $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$i$sroa$0$0 = 0, $__begin$i2$sroa$0$0 = 0, $eh$lpad$body$index13Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 FUNCTION_TABLE_vi[$fn & 1023]($0);
 $1 = (_malloc(12)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3+0)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     break;
    }
    $5 = $3;
    __THREW__ = 0;
    invoke_v($5|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     label = 20;
     break;
    }
    $8 = (_malloc(12)|0);
    $9 = ($8|0)==(0|0);
    if (!($9)) {
     $$lcssa$i = $8;
     label = 7;
     break L1;
    }
   }
   if ((label|0) == 20) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $eh$lpad$body$index13Z2D = $34;$eh$lpad$body$indexZ2D = $33;
    break;
   }
   $10 = (___cxa_allocate_exception(4)|0);
   HEAP32[$10>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($10|0),(20008|0),(386|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $eh$lpad$body$index13Z2D = $36;$eh$lpad$body$indexZ2D = $35;
    break;
   } else {
    // unreachable;
   }
  } else {
   $$lcssa$i = $1;
   label = 7;
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   __THREW__ = 0;
   invoke_vii(431,($$lcssa$i|0),($0|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch()|0;
    $16 = tempRet0;
    _free($$lcssa$i);
    $eh$lpad$body$index13Z2D = $16;$eh$lpad$body$indexZ2D = $15;
    break;
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = (($0) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $__begin$i$sroa$0$0 = $17;
   while(1) {
    $20 = ($__begin$i$sroa$0$0|0)==($19|0);
    if ($20) {
     break;
    }
    $21 = HEAP32[$__begin$i$sroa$0$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$21>>2]|0;
     $24 = (($23) + 4|0);
     $25 = HEAP32[$24>>2]|0;
     FUNCTION_TABLE_vi[$25 & 1023]($21);
    }
    $26 = (($__begin$i$sroa$0$0) + 4|0);
    $__begin$i$sroa$0$0 = $26;
   }
   $27 = HEAP32[$0>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    STACKTOP = sp;return ($$lcssa$i|0);
   }
   $29 = (($0) + 4|0);
   $$pre10 = HEAP32[$29>>2]|0;
   $31 = $$pre10;
   while(1) {
    $30 = ($27|0)==($31|0);
    if ($30) {
     break;
    }
    $32 = (($31) + -4|0);
    HEAP32[$29>>2] = $32;
    $31 = $32;
   }
   _free($27);
   STACKTOP = sp;return ($$lcssa$i|0);
  }
 } while(0);
 $37 = HEAP32[$0>>2]|0;
 $38 = (($0) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $__begin$i2$sroa$0$0 = $37;
 while(1) {
  $40 = ($__begin$i2$sroa$0$0|0)==($39|0);
  if ($40) {
   break;
  }
  $41 = HEAP32[$__begin$i2$sroa$0$0>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$41>>2]|0;
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vi[$45 & 1023]($41);
  }
  $46 = (($__begin$i2$sroa$0$0) + 4|0);
  $__begin$i2$sroa$0$0 = $46;
 }
 $47 = HEAP32[$0>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $49 = (($0) + 4|0);
 $$pre = HEAP32[$49>>2]|0;
 $51 = $$pre;
 while(1) {
  $50 = ($47|0)==($51|0);
  if ($50) {
   break;
  }
  $52 = (($51) + -4|0);
  HEAP32[$49>>2] = $52;
  $51 = $52;
 }
 _free($47);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZN8MapTableC1ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$0 = 0, $$lcssa$i$i$i$i = 0, $$pre = 0, $$pre1 = 0, $$size$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($0) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = $4;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($9>>>0)>(1073741823);
 L4: do {
  if ($11) {
   __THREW__ = 0;
   invoke_v(432);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 17;
   } else {
    // unreachable;
   }
  } else {
   $14 = ($4|0)==($5|0);
   $$size$i$i$i$i = $14 ? 1 : $8;
   $15 = (_malloc($$size$i$i$i$i)|0);
   $16 = ($15|0)==(0|0);
   L8: do {
    if ($16) {
     while(1) {
      $17 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($17+0)|0);
      $18 = ($17|0)==(0);
      if ($18) {
       break;
      }
      $19 = $17;
      __THREW__ = 0;
      invoke_v($19|0);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       label = 16;
       break;
      }
      $22 = (_malloc($$size$i$i$i$i)|0);
      $23 = ($22|0)==(0|0);
      if (!($23)) {
       $$lcssa$i$i$i$i = $22;
       break L8;
      }
     }
     if ((label|0) == 16) {
      $37 = ___cxa_find_matching_catch()|0;
      $38 = tempRet0;
      $lpad$phi$index = $37;$lpad$phi$index3 = $38;
      break L4;
     }
     $24 = (___cxa_allocate_exception(4)|0);
     HEAP32[$24>>2] = ((19952 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($24|0),(20008|0),(386|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 17;
      break L4;
     }
     // unreachable;
    } else {
     $$lcssa$i$i$i$i = $15;
    }
   } while(0);
   HEAP32[$1>>2] = $$lcssa$i$i$i$i;
   HEAP32[$this>>2] = $$lcssa$i$i$i$i;
   $27 = (($$lcssa$i$i$i$i) + ($9<<2)|0);
   HEAP32[$2>>2] = $27;
   $28 = HEAP32[$0>>2]|0;
   $29 = HEAP32[$3>>2]|0;
   $$0 = $28;$32 = $$lcssa$i$i$i$i;
   while(1) {
    $30 = ($$0|0)==($29|0);
    if ($30) {
     break;
    }
    $31 = ($32|0)==(0|0);
    if ($31) {
     $35 = 0;
    } else {
     $33 = HEAP32[$$0>>2]|0;
     HEAP32[$32>>2] = $33;
     $$pre1 = HEAP32[$1>>2]|0;
     $35 = $$pre1;
    }
    $34 = (($35) + 4|0);
    HEAP32[$1>>2] = $34;
    $36 = (($$0) + 4|0);
    $$0 = $36;$32 = $34;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 17) {
  $39 = ___cxa_find_matching_catch()|0;
  $40 = tempRet0;
  $lpad$phi$index = $39;$lpad$phi$index3 = $40;
 }
 $41 = HEAP32[$this>>2]|0;
 $42 = ($41|0)==(0|0);
 if ($42) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $$pre = HEAP32[$1>>2]|0;
 $44 = $$pre;
 while(1) {
  $43 = ($41|0)==($44|0);
  if ($43) {
   break;
  }
  $45 = (($44) + -4|0);
  HEAP32[$1>>2] = $45;
  $44 = $45;
 }
 _free($41);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN10emscripten8internal7InvokerI8MapTableJRKNSt3__16vectorIP4cellNS3_9allocatorIS6_EEEEEE6invokeEPFS2_SB_EPS9_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$lcssa$i = 0, $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$i$sroa$0$0 = 0, $__begin$i2$sroa$0$0 = 0, $eh$lpad$body$index13Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 FUNCTION_TABLE_vii[$fn & 1023]($0,$args);
 $1 = (_malloc(12)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3+0)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     break;
    }
    $5 = $3;
    __THREW__ = 0;
    invoke_v($5|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     label = 20;
     break;
    }
    $8 = (_malloc(12)|0);
    $9 = ($8|0)==(0|0);
    if (!($9)) {
     $$lcssa$i = $8;
     label = 7;
     break L1;
    }
   }
   if ((label|0) == 20) {
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $eh$lpad$body$index13Z2D = $34;$eh$lpad$body$indexZ2D = $33;
    break;
   }
   $10 = (___cxa_allocate_exception(4)|0);
   HEAP32[$10>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($10|0),(20008|0),(386|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $eh$lpad$body$index13Z2D = $36;$eh$lpad$body$indexZ2D = $35;
    break;
   } else {
    // unreachable;
   }
  } else {
   $$lcssa$i = $1;
   label = 7;
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   __THREW__ = 0;
   invoke_vii(431,($$lcssa$i|0),($0|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch()|0;
    $16 = tempRet0;
    _free($$lcssa$i);
    $eh$lpad$body$index13Z2D = $16;$eh$lpad$body$indexZ2D = $15;
    break;
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = (($0) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $__begin$i2$sroa$0$0 = $17;
   while(1) {
    $20 = ($__begin$i2$sroa$0$0|0)==($19|0);
    if ($20) {
     break;
    }
    $21 = HEAP32[$__begin$i2$sroa$0$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$21>>2]|0;
     $24 = (($23) + 4|0);
     $25 = HEAP32[$24>>2]|0;
     FUNCTION_TABLE_vi[$25 & 1023]($21);
    }
    $26 = (($__begin$i2$sroa$0$0) + 4|0);
    $__begin$i2$sroa$0$0 = $26;
   }
   $27 = HEAP32[$0>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    STACKTOP = sp;return ($$lcssa$i|0);
   }
   $29 = (($0) + 4|0);
   $$pre10 = HEAP32[$29>>2]|0;
   $31 = $$pre10;
   while(1) {
    $30 = ($27|0)==($31|0);
    if ($30) {
     break;
    }
    $32 = (($31) + -4|0);
    HEAP32[$29>>2] = $32;
    $31 = $32;
   }
   _free($27);
   STACKTOP = sp;return ($$lcssa$i|0);
  }
 } while(0);
 $37 = HEAP32[$0>>2]|0;
 $38 = (($0) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $__begin$i$sroa$0$0 = $37;
 while(1) {
  $40 = ($__begin$i$sroa$0$0|0)==($39|0);
  if ($40) {
   break;
  }
  $41 = HEAP32[$__begin$i$sroa$0$0>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$41>>2]|0;
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vi[$45 & 1023]($41);
  }
  $46 = (($__begin$i$sroa$0$0) + 4|0);
  $__begin$i$sroa$0$0 = $46;
 }
 $47 = HEAP32[$0>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $49 = (($0) + 4|0);
 $$pre = HEAP32[$49>>2]|0;
 $51 = $$pre;
 while(1) {
  $50 = ($47|0)==($51|0);
  if ($50) {
   break;
  }
  $52 = (($51) + -4|0);
  HEAP32[$49>>2] = $52;
  $51 = $52;
 }
 _free($47);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZN10emscripten8internal13getActualTypeI8MapTableEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (4744|0);
}
function __ZN10emscripten8internal14raw_destructorI8MapTableEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$i$sroa$0$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$ptr>>2]|0;
 $2 = (($ptr) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $__begin$i$sroa$0$0 = $1;
 while(1) {
  $4 = ($__begin$i$sroa$0$0|0)==($3|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$__begin$i$sroa$0$0>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$5>>2]|0;
   $8 = (($7) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   FUNCTION_TABLE_vi[$9 & 1023]($5);
  }
  $10 = (($__begin$i$sroa$0$0) + 4|0);
  $__begin$i$sroa$0$0 = $10;
 }
 $11 = HEAP32[$ptr>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = (($ptr) + 4|0);
  $$pre = HEAP32[$13>>2]|0;
  $15 = $$pre;
  while(1) {
   $14 = ($11|0)==($15|0);
   if ($14) {
    break;
   }
   $16 = (($15) + -4|0);
   HEAP32[$13>>2] = $16;
   $15 = $16;
  }
  _free($11);
 }
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIM10GameCenterFiiEiPS2_JiEE6invokeERKS4_S5_i($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_iii[$8 & 1023]($1,$args)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_iii[$8 & 1023]($1,$args)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal13MethodInvokerIM10GameCenterFivEiPS2_JEE6invokeERKS4_S5_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal12GetterPolicyIM10GameCenterKFRK4herovEE3getIS2_EEPS3_RKS7_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$ = 0, $$0 = 0, $$021 = 0, $$022 = 0, $$023 = 0, $$03$i3$i$i$i$i$i$i$i$i = 0, $$field = 0, $$field49 = 0, $$index48 = 0, $$lcssa$i$i = 0, $$lcssa$i$i$i$i$i$i$i = 0, $$lcssa$i$i$i$i$i$i$i$i = 0, $$lcssa$i3$i$i$i$i$i$i = 0, $$lcssa$i6$i$i$i$i$i$i$i = 0, $$pre = 0, $$pre42 = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $$size$i$i$i$i$i$i$i = 0;
 var $$size$i$i$i$i$i$i$i$i = 0, $$size$i1$i$i$i$i$i$i = 0, $$sroa$013$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h$i$i$i$i$i$i$sroa$0$0 = 0, $__p$0$i$i$i$i$i$i$i$i = 0;
 var $__parent$i$i$i$i$i$i$i = 0, $__prior$i$i$i$i$i$i$i$i$sroa$0$0 = 0, $__r$i$i$i$i$i$i$i$0 = 0, $eh$lpad$body$i$i$i$i$i$index58Z2D = 0, $eh$lpad$body$i$i$i$i$i$indexZ2D = 0, $eh$lpad$body$i$i3$i$i$i$index71Z2D = 0, $eh$lpad$body$i$i3$i$i$i$indexZ2D = 0, $eh$lpad$body$i$index80Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $l$04$i2$i$i$i$i$i$i$i$i = 0, $lpad$phi28$index = 0, $lpad$phi28$index64 = 0, $lpad$phi35$index = 0, $lpad$phi35$index52 = 0, $r$05$i1$i$i$i$i$i$i$i$i = 0, $storemerge$i$i$i$i$i$i = 0, $storemerge$i$i$i$i$i$i$i$i$i = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__parent$i$i$i$i$i$i$i = sp;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index48 = (($context) + 4|0);
 $$field49 = HEAPU8[$$index48>>0]|(HEAPU8[$$index48+1>>0]<<8)|(HEAPU8[$$index48+2>>0]<<16)|(HEAPU8[$$index48+3>>0]<<24);
 $0 = $$field49 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field49 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
 }
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
 $10 = (_malloc(224)|0);
 $11 = ($10|0)==(0|0);
 L5: do {
  if ($11) {
   while(1) {
    $12 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($12+0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     break;
    }
    $14 = $12;
    FUNCTION_TABLE_v[$14 & 1023]();
    $15 = (_malloc(224)|0);
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     $$lcssa$i$i = $15;
     break L5;
    }
   }
   $17 = (___cxa_allocate_exception(4)|0);
   HEAP32[$17>>2] = ((19952 + 8|0));
   ___cxa_throw(($17|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i = $10;
  }
 } while(0);
 dest=$$lcssa$i$i+0|0; src=$9+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $18 = (($$lcssa$i$i) + 48|0);
 HEAP32[$18>>2] = 0;
 $19 = (($$lcssa$i$i) + 52|0);
 HEAP32[$19>>2] = 0;
 $20 = (($$lcssa$i$i) + 56|0);
 HEAP32[$20>>2] = 0;
 $21 = (($9) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($9) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $22;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = $27 >> 2;
 $29 = ($28|0)==(0);
 L11: do {
  if (!($29)) {
   $30 = ($28>>>0)>(1073741823);
   L13: do {
    if ($30) {
     $31 = (___cxa_allocate_exception(8)|0);
     HEAP32[$31>>2] = ((20152 + 8|0));
     $32 = (($31) + 4|0);
     $33 = (_strlen((11648|0))|0);
     $34 = (($33) + 1)|0;
     $35 = (($33) + 13)|0;
     $36 = ($35|0)==(0);
     $$size$i1$i$i$i$i$i$i = $36 ? 1 : $35;
     $37 = (_malloc($$size$i1$i$i$i$i$i$i)|0);
     $38 = ($37|0)==(0|0);
     L15: do {
      if ($38) {
       while(1) {
        $39 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($39+0)|0);
        $40 = ($39|0)==(0);
        if ($40) {
         label = 14;
         break;
        }
        $41 = $39;
        __THREW__ = 0;
        invoke_v($41|0);
        $42 = __THREW__; __THREW__ = 0;
        $43 = $42&1;
        if ($43) {
         label = 18;
         break;
        }
        $44 = (_malloc($$size$i1$i$i$i$i$i$i)|0);
        $45 = ($44|0)==(0|0);
        if (!($45)) {
         $$lcssa$i3$i$i$i$i$i$i = $44;
         break L15;
        }
       }
       do {
        if ((label|0) == 14) {
         $46 = (___cxa_allocate_exception(4)|0);
         HEAP32[$46>>2] = ((19952 + 8|0));
         __THREW__ = 0;
         invoke_viii(422,($46|0),(20008|0),(386|0));
         $47 = __THREW__; __THREW__ = 0;
         $48 = $47&1;
         if ($48) {
          $56 = ___cxa_find_matching_catch()|0;
          $57 = tempRet0;
          $lpad$phi35$index = $56;$lpad$phi35$index52 = $57;
          break;
         } else {
          // unreachable;
         }
        }
        else if ((label|0) == 18) {
         $54 = ___cxa_find_matching_catch()|0;
         $55 = tempRet0;
         $lpad$phi35$index = $54;$lpad$phi35$index52 = $55;
        }
       } while(0);
       ___cxa_free_exception(($31|0));
       $eh$lpad$body$i$i$i$i$i$index58Z2D = $lpad$phi35$index52;$eh$lpad$body$i$i$i$i$i$indexZ2D = $lpad$phi35$index;
       break L13;
      } else {
       $$lcssa$i3$i$i$i$i$i$i = $37;
      }
     } while(0);
     $49 = (($$lcssa$i3$i$i$i$i$i$i) + 4|0);
     HEAP32[$49>>2] = $33;
     HEAP32[$$lcssa$i3$i$i$i$i$i$i>>2] = $33;
     $50 = (($$lcssa$i3$i$i$i$i$i$i) + 12|0);
     HEAP32[$32>>2] = $50;
     $51 = (($$lcssa$i3$i$i$i$i$i$i) + 8|0);
     HEAP32[$51>>2] = 0;
     _memcpy(($50|0),(11648|0),($34|0))|0;
     HEAP32[$31>>2] = ((20232 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($31|0),(20280|0),(389|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      label = 33;
     } else {
      // unreachable;
     }
    } else {
     $58 = ($22|0)==($24|0);
     $$size$i$i$i$i$i$i$i = $58 ? 1 : $27;
     $59 = (_malloc($$size$i$i$i$i$i$i$i)|0);
     $60 = ($59|0)==(0|0);
     L30: do {
      if ($60) {
       while(1) {
        $61 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($61+0)|0);
        $62 = ($61|0)==(0);
        if ($62) {
         break;
        }
        $63 = $61;
        __THREW__ = 0;
        invoke_v($63|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         label = 32;
         break;
        }
        $66 = (_malloc($$size$i$i$i$i$i$i$i)|0);
        $67 = ($66|0)==(0|0);
        if (!($67)) {
         $$lcssa$i$i$i$i$i$i$i = $66;
         break L30;
        }
       }
       if ((label|0) == 32) {
        $81 = ___cxa_find_matching_catch()|0;
        $82 = tempRet0;
        $eh$lpad$body$i$i$i$i$i$index58Z2D = $82;$eh$lpad$body$i$i$i$i$i$indexZ2D = $81;
        break L13;
       }
       $68 = (___cxa_allocate_exception(4)|0);
       HEAP32[$68>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($68|0),(20008|0),(386|0));
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        label = 33;
        break L13;
       }
       // unreachable;
      } else {
       $$lcssa$i$i$i$i$i$i$i = $59;
      }
     } while(0);
     HEAP32[$19>>2] = $$lcssa$i$i$i$i$i$i$i;
     HEAP32[$18>>2] = $$lcssa$i$i$i$i$i$i$i;
     $71 = (($$lcssa$i$i$i$i$i$i$i) + ($28<<2)|0);
     HEAP32[$20>>2] = $71;
     $72 = HEAP32[$23>>2]|0;
     $73 = HEAP32[$21>>2]|0;
     $$023 = $72;$76 = $$lcssa$i$i$i$i$i$i$i;
     while(1) {
      $74 = ($$023|0)==($73|0);
      if ($74) {
       break L11;
      }
      $75 = ($76|0)==(0|0);
      if ($75) {
       $79 = 0;
      } else {
       $77 = +HEAPF32[$$023>>2];
       HEAPF32[$76>>2] = $77;
       $$pre46 = HEAP32[$19>>2]|0;
       $79 = $$pre46;
      }
      $78 = (($79) + 4|0);
      HEAP32[$19>>2] = $78;
      $80 = (($$023) + 4|0);
      $$023 = $80;$76 = $78;
     }
    }
   } while(0);
   if ((label|0) == 33) {
    $83 = ___cxa_find_matching_catch()|0;
    $84 = tempRet0;
    $eh$lpad$body$i$i$i$i$i$index58Z2D = $84;$eh$lpad$body$i$i$i$i$i$indexZ2D = $83;
   }
   $85 = HEAP32[$18>>2]|0;
   $86 = ($85|0)==(0|0);
   if ($86) {
    $eh$lpad$body$i$index80Z2D = $eh$lpad$body$i$i$i$i$i$index58Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i$i$i$i$indexZ2D;
    _free($$lcssa$i$i);
    ___resumeException($eh$lpad$body$i$indexZ2D|0);
    // unreachable;
   }
   $$pre45 = HEAP32[$19>>2]|0;
   $88 = $$pre45;
   while(1) {
    $87 = ($85|0)==($88|0);
    if ($87) {
     break;
    }
    $89 = (($88) + -4|0);
    HEAP32[$19>>2] = $89;
    $88 = $89;
   }
   _free($85);
   $eh$lpad$body$i$index80Z2D = $eh$lpad$body$i$i$i$i$i$index58Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i$i$i$i$indexZ2D;
   _free($$lcssa$i$i);
   ___resumeException($eh$lpad$body$i$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 $90 = (($$lcssa$i$i) + 60|0);
 $91 = (($9) + 60|0);
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$90>>2] = $92;
 $93 = (($$lcssa$i$i) + 64|0);
 $94 = (($$lcssa$i$i) + 68|0);
 HEAP32[$94>>2] = 0;
 $95 = (($$lcssa$i$i) + 72|0);
 HEAP32[$95>>2] = 0;
 HEAP32[$93>>2] = $94;
 $96 = (($9) + 64|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($9) + 68|0);
 $$sroa$013$0 = $97;
 L58: while(1) {
  $99 = ($$sroa$013$0|0)==($98|0);
  if ($99) {
   label = 114;
   break;
  }
  $100 = (($$sroa$013$0) + 16|0);
  $101 = (_malloc(172)|0);
  $102 = ($101|0)==(0|0);
  if ($102) {
   while(1) {
    $103 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($103+0)|0);
    $104 = ($103|0)==(0);
    if ($104) {
     label = 45;
     break L58;
    }
    $105 = $103;
    __THREW__ = 0;
    invoke_v($105|0);
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     label = 106;
     break L58;
    }
    $108 = (_malloc(172)|0);
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $$lcssa$i$i$i$i$i$i$i$i = $108;
     break;
    }
   }
  } else {
   $$lcssa$i$i$i$i$i$i$i$i = $101;
  }
  $113 = (($$lcssa$i$i$i$i$i$i$i$i) + 16|0);
  $114 = HEAP8[$100>>0]|0;
  $115 = $114 & 1;
  $116 = ($115<<24>>24)==(0);
  if ($116) {
   ;HEAP32[$113+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$113+4>>2]=HEAP32[$100+4>>2]|0;HEAP32[$113+8>>2]=HEAP32[$100+8>>2]|0;
  } else {
   $117 = (($$sroa$013$0) + 24|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($$sroa$013$0) + 20|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120>>>0)>(4294967279);
   if ($121) {
    label = 50;
    break;
   }
   $124 = ($120>>>0)<(11);
   if ($124) {
    $125 = $120 << 1;
    $126 = $125&255;
    HEAP8[$113>>0] = $126;
    $127 = (($$lcssa$i$i$i$i$i$i$i$i) + 17|0);
    $__p$0$i$i$i$i$i$i$i$i = $127;
   } else {
    $128 = (($120) + 16)|0;
    $129 = $128 & -16;
    $130 = ($129|0)==(0);
    $$size$i$i$i$i$i$i$i$i = $130 ? 1 : $129;
    $131 = (_malloc($$size$i$i$i$i$i$i$i$i)|0);
    $132 = ($131|0)==(0|0);
    if ($132) {
     while(1) {
      $133 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($133+0)|0);
      $134 = ($133|0)==(0);
      if ($134) {
       label = 58;
       break L58;
      }
      $135 = $133;
      __THREW__ = 0;
      invoke_v($135|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 62;
       break L58;
      }
      $138 = (_malloc($$size$i$i$i$i$i$i$i$i)|0);
      $139 = ($138|0)==(0|0);
      if (!($139)) {
       $$lcssa$i6$i$i$i$i$i$i$i = $138;
       break;
      }
     }
    } else {
     $$lcssa$i6$i$i$i$i$i$i$i = $131;
    }
    $143 = (($$lcssa$i$i$i$i$i$i$i$i) + 24|0);
    HEAP32[$143>>2] = $$lcssa$i6$i$i$i$i$i$i$i;
    $144 = $129 | 1;
    HEAP32[$113>>2] = $144;
    $145 = (($$lcssa$i$i$i$i$i$i$i$i) + 20|0);
    HEAP32[$145>>2] = $120;
    $__p$0$i$i$i$i$i$i$i$i = $$lcssa$i6$i$i$i$i$i$i$i;
   }
   _memcpy(($__p$0$i$i$i$i$i$i$i$i|0),($118|0),($120|0))|0;
   $146 = (($__p$0$i$i$i$i$i$i$i$i) + ($120)|0);
   HEAP8[$146>>0] = 0;
  }
  $152 = (($$lcssa$i$i$i$i$i$i$i$i) + 28|0);
  $153 = (($$sroa$013$0) + 28|0);
  _memcpy(($152|0),($153|0),144)|0;
  $154 = (($$lcssa$i$i$i$i$i$i$i$i) + 16|0);
  $155 = HEAP32[$93>>2]|0;
  $156 = ($94|0)==($155|0);
  $$pre47 = HEAP32[$94>>2]|0;
  L82: do {
   if ($156) {
    $205 = $$pre47;$__prior$i$i$i$i$i$i$i$i$sroa$0$0 = $94;
    label = 88;
   } else {
    $157 = ($$pre47|0)==(0|0);
    if ($157) {
     $$021 = $94;
     while(1) {
      $161 = (($$021) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = HEAP32[$162>>2]|0;
      $164 = ($$021|0)==($163|0);
      if ($164) {
       $$021 = $162;
      } else {
       $166 = $162;
       break;
      }
     }
    } else {
     $storemerge$i$i$i$i$i$i$i$i$i = $$pre47;
     while(1) {
      $158 = (($storemerge$i$i$i$i$i$i$i$i$i) + 4|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159|0)==(0|0);
      if ($160) {
       $166 = $storemerge$i$i$i$i$i$i$i$i$i;
       break;
      } else {
       $storemerge$i$i$i$i$i$i$i$i$i = $159;
      }
     }
    }
    $165 = (($166) + 16|0);
    $167 = HEAP8[$165>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if ($169) {
     $172 = $167&255;
     $173 = $172 >>> 1;
     $189 = $173;
    } else {
     $170 = (($166) + 20|0);
     $171 = HEAP32[$170>>2]|0;
     $189 = $171;
    }
    $174 = HEAP8[$154>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     $179 = $174&255;
     $180 = $179 >>> 1;
     $188 = $180;
    } else {
     $177 = (($$lcssa$i$i$i$i$i$i$i$i) + 20|0);
     $178 = HEAP32[$177>>2]|0;
     $188 = $178;
    }
    if ($169) {
     $183 = (($165) + 1|0);
     $252 = $183;
    } else {
     $181 = (($166) + 24|0);
     $182 = HEAP32[$181>>2]|0;
     $252 = $182;
    }
    if ($176) {
     $186 = (($$lcssa$i$i$i$i$i$i$i$i) + 17|0);
     $253 = $186;
    } else {
     $184 = (($$lcssa$i$i$i$i$i$i$i$i) + 24|0);
     $185 = HEAP32[$184>>2]|0;
     $253 = $185;
    }
    $187 = ($188>>>0)<($189>>>0);
    $$ = $187 ? $188 : $189;
    $190 = ($$|0)==(0);
    L106: do {
     if ($190) {
      label = 86;
     } else {
      $$03$i3$i$i$i$i$i$i$i$i = $$;$l$04$i2$i$i$i$i$i$i$i$i = $252;$r$05$i1$i$i$i$i$i$i$i$i = $253;
      while(1) {
       $191 = HEAP8[$l$04$i2$i$i$i$i$i$i$i$i>>0]|0;
       $192 = HEAP8[$r$05$i1$i$i$i$i$i$i$i$i>>0]|0;
       $193 = ($191<<24>>24)==($192<<24>>24);
       if (!($193)) {
        break;
       }
       $194 = (($$03$i3$i$i$i$i$i$i$i$i) + -1)|0;
       $195 = (($l$04$i2$i$i$i$i$i$i$i$i) + 1|0);
       $196 = (($r$05$i1$i$i$i$i$i$i$i$i) + 1|0);
       $197 = ($194|0)==(0);
       if ($197) {
        label = 86;
        break L106;
       } else {
        $$03$i3$i$i$i$i$i$i$i$i = $194;$l$04$i2$i$i$i$i$i$i$i$i = $195;$r$05$i1$i$i$i$i$i$i$i$i = $196;
       }
      }
      $198 = ($191<<24>>24)==($192<<24>>24);
      if ($198) {
       label = 86;
      } else {
       $200 = $191&255;
       $201 = $192&255;
       $202 = (($200) - ($201))|0;
       $203 = ($202|0)<(0);
       if ($203) {
        $205 = $$pre47;$__prior$i$i$i$i$i$i$i$i$sroa$0$0 = $166;
        label = 88;
        break L82;
       }
      }
     }
    } while(0);
    if ((label|0) == 86) {
     label = 0;
     $199 = ($189>>>0)<($188>>>0);
     if ($199) {
      $205 = $$pre47;$__prior$i$i$i$i$i$i$i$i$sroa$0$0 = $166;
      label = 88;
      break;
     }
    }
    $207 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11TitleEffectEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($93,$__parent$i$i$i$i$i$i$i,$154)|0);
    $$022 = $207;
   }
  } while(0);
  do {
   if ((label|0) == 88) {
    label = 0;
    $204 = ($205|0)==(0|0);
    if ($204) {
     HEAP32[$__parent$i$i$i$i$i$i$i>>2] = $94;
     $$022 = $94;
     break;
    } else {
     HEAP32[$__parent$i$i$i$i$i$i$i>>2] = $__prior$i$i$i$i$i$i$i$i$sroa$0$0;
     $206 = (($__prior$i$i$i$i$i$i$i$i$sroa$0$0) + 4|0);
     $$022 = $206;
     break;
    }
   }
  } while(0);
  $208 = HEAP32[$$022>>2]|0;
  $209 = ($208|0)==(0|0);
  if ($209) {
   $210 = HEAP32[$__parent$i$i$i$i$i$i$i>>2]|0;
   HEAP32[$$lcssa$i$i$i$i$i$i$i$i>>2] = 0;
   $211 = (($$lcssa$i$i$i$i$i$i$i$i) + 4|0);
   HEAP32[$211>>2] = 0;
   $212 = (($$lcssa$i$i$i$i$i$i$i$i) + 8|0);
   HEAP32[$212>>2] = $210;
   HEAP32[$$022>>2] = $$lcssa$i$i$i$i$i$i$i$i;
   $213 = HEAP32[$93>>2]|0;
   $214 = HEAP32[$213>>2]|0;
   $215 = ($214|0)==(0|0);
   if ($215) {
    $217 = $$lcssa$i$i$i$i$i$i$i$i;
   } else {
    HEAP32[$93>>2] = $214;
    $$pre42 = HEAP32[$$022>>2]|0;
    $217 = $$pre42;
   }
   $216 = HEAP32[$94>>2]|0;
   __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($216,$217);
   $218 = HEAP32[$95>>2]|0;
   $219 = (($218) + 1)|0;
   HEAP32[$95>>2] = $219;
  } else {
   $__r$i$i$i$i$i$i$i$0 = $208;
   $220 = ($__r$i$i$i$i$i$i$i$0|0)==($$lcssa$i$i$i$i$i$i$i$i|0);
   if (!($220)) {
    $__h$i$i$i$i$i$i$sroa$0$0 = $$lcssa$i$i$i$i$i$i$i$i;
    $221 = ($__h$i$i$i$i$i$i$sroa$0$0|0)==(0|0);
    if (!($221)) {
     $222 = (($__h$i$i$i$i$i$i$sroa$0$0) + 16|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = $223 & 1;
     $225 = ($224<<24>>24)==(0);
     if (!($225)) {
      $226 = (($__h$i$i$i$i$i$i$sroa$0$0) + 24|0);
      $227 = HEAP32[$226>>2]|0;
      _free($227);
     }
     _free($__h$i$i$i$i$i$i$sroa$0$0);
    }
   }
  }
  $228 = (($$sroa$013$0) + 4|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ($229|0)==(0|0);
  if ($230) {
   $$0 = $$sroa$013$0;
   while(1) {
    $233 = (($$0) + 8|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = HEAP32[$234>>2]|0;
    $236 = ($$0|0)==($235|0);
    if ($236) {
     $254 = $234;
     break;
    } else {
     $$0 = $234;
    }
   }
  } else {
   $storemerge$i$i$i$i$i$i = $229;
   while(1) {
    $231 = HEAP32[$storemerge$i$i$i$i$i$i>>2]|0;
    $232 = ($231|0)==(0|0);
    if ($232) {
     $254 = $storemerge$i$i$i$i$i$i;
     break;
    } else {
     $storemerge$i$i$i$i$i$i = $231;
    }
   }
  }
  $$sroa$013$0 = $254;
 }
 do {
  if ((label|0) == 45) {
   $110 = (___cxa_allocate_exception(4)|0);
   HEAP32[$110>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($110|0),(20008|0),(386|0));
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   if ($112) {
    $239 = ___cxa_find_matching_catch()|0;
    $240 = tempRet0;
    $eh$lpad$body$i$i3$i$i$i$index71Z2D = $240;$eh$lpad$body$i$i3$i$i$i$indexZ2D = $239;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 50) {
   __THREW__ = 0;
   invoke_v(429);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 63;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 58) {
   $140 = (___cxa_allocate_exception(4)|0);
   HEAP32[$140>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($140|0),(20008|0),(386|0));
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    label = 63;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 62) {
   $147 = ___cxa_find_matching_catch()|0;
   $148 = tempRet0;
   $lpad$phi28$index = $147;$lpad$phi28$index64 = $148;
   label = 64;
  }
  else if ((label|0) == 106) {
   $237 = ___cxa_find_matching_catch()|0;
   $238 = tempRet0;
   $eh$lpad$body$i$i3$i$i$i$index71Z2D = $238;$eh$lpad$body$i$i3$i$i$i$indexZ2D = $237;
  }
  else if ((label|0) == 114) {
   $247 = (($$lcssa$i$i) + 76|0);
   $248 = (($9) + 76|0);
   _memcpy(($247|0),($248|0),144)|0;
   $249 = (($$lcssa$i$i) + 220|0);
   $250 = (($9) + 220|0);
   $251 = HEAP32[$250>>2]|0;
   HEAP32[$249>>2] = $251;
   STACKTOP = sp;return ($$lcssa$i$i|0);
  }
 } while(0);
 if ((label|0) == 63) {
  $149 = ___cxa_find_matching_catch()|0;
  $150 = tempRet0;
  $lpad$phi28$index = $149;$lpad$phi28$index64 = $150;
  label = 64;
 }
 if ((label|0) == 64) {
  $151 = ($$lcssa$i$i$i$i$i$i$i$i|0)==(0|0);
  if ($151) {
   $eh$lpad$body$i$i3$i$i$i$index71Z2D = $lpad$phi28$index64;$eh$lpad$body$i$i3$i$i$i$indexZ2D = $lpad$phi28$index;
  } else {
   _free($$lcssa$i$i$i$i$i$i$i$i);
   $eh$lpad$body$i$i3$i$i$i$index71Z2D = $lpad$phi28$index64;$eh$lpad$body$i$i3$i$i$i$indexZ2D = $lpad$phi28$index;
  }
 }
 $241 = HEAP32[$94>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11TitleEffectEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($93,$241);
 $242 = HEAP32[$18>>2]|0;
 $243 = ($242|0)==(0|0);
 if ($243) {
  $eh$lpad$body$i$index80Z2D = $eh$lpad$body$i$i3$i$i$i$index71Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i3$i$i$i$indexZ2D;
  _free($$lcssa$i$i);
  ___resumeException($eh$lpad$body$i$indexZ2D|0);
  // unreachable;
 }
 $$pre = HEAP32[$19>>2]|0;
 $245 = $$pre;
 while(1) {
  $244 = ($242|0)==($245|0);
  if ($244) {
   break;
  }
  $246 = (($245) + -4|0);
  HEAP32[$19>>2] = $246;
  $245 = $246;
 }
 _free($242);
 $eh$lpad$body$i$index80Z2D = $eh$lpad$body$i$i3$i$i$i$index71Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i3$i$i$i$indexZ2D;
 _free($$lcssa$i$i);
 ___resumeException($eh$lpad$body$i$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZN10emscripten8internal12GetterPolicyIM10GameCenterKFivEE3getIS2_EEiRKS4_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal12GetterPolicyIM10GameCenterKFRK8MapTablevEE3getIS2_EEPS3_RKS7_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$lcssa$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
 }
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
 $10 = (_malloc(12)|0);
 $11 = ($10|0)==(0|0);
 L5: do {
  if ($11) {
   while(1) {
    $12 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($12+0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     break;
    }
    $14 = $12;
    FUNCTION_TABLE_v[$14 & 1023]();
    $15 = (_malloc(12)|0);
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     $$lcssa$i$i = $15;
     break L5;
    }
   }
   $17 = (___cxa_allocate_exception(4)|0);
   HEAP32[$17>>2] = ((19952 + 8|0));
   ___cxa_throw(($17|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i = $10;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vii(431,($$lcssa$i$i|0),($9|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  _free($$lcssa$i$i);
  ___resumeException($20|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$lcssa$i$i|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal12operator_newI10GameCenterJ9sexualityEEEPT_DpOT0_($args) {
 $args = $args|0;
 var $$lcssa$i = 0, $$lcssa$i$i = 0, $$lcssa$i3$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$i$i$sroa$0$0 = 0, $eh$lpad$body$index13Z2D = 0, $eh$lpad$body$indexZ2D = 0, $lpad$phi$index = 0, $lpad$phi$index6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(60)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   while(1) {
    $2 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2+0)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     break;
    }
    $4 = $2;
    FUNCTION_TABLE_v[$4 & 1023]();
    $5 = (_malloc(60)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa$i = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((19952 + 8|0));
   ___cxa_throw(($7|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i = $0;
  }
 } while(0);
 $8 = HEAP32[$args>>2]|0;
 $9 = (($$lcssa$i) + 4|0);
 __THREW__ = 0;
 invoke_vi(433,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $eh$lpad$body$index13Z2D = $60;$eh$lpad$body$indexZ2D = $59;
  _free($$lcssa$i);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $12 = (($$lcssa$i) + 16|0);
 HEAP32[$12>>2] = 0;
 L11: do {
  if ((($8|0) == 2)) {
   $34 = (_malloc(224)|0);
   $35 = ($34|0)==(0|0);
   L14: do {
    if ($35) {
     while(1) {
      $36 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($36+0)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       break;
      }
      $38 = $36;
      __THREW__ = 0;
      invoke_v($38|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 15;
       break;
      }
      $41 = (_malloc(224)|0);
      $42 = ($41|0)==(0|0);
      if (!($42)) {
       $$lcssa$i3$i = $41;
       break L14;
      }
     }
     if ((label|0) == 15) {
      $27 = ___cxa_find_matching_catch()|0;
      $28 = tempRet0;
      $lpad$phi$index = $27;$lpad$phi$index6 = $28;
      break L11;
     }
     $43 = (___cxa_allocate_exception(4)|0);
     HEAP32[$43>>2] = ((19952 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($43|0),(20008|0),(386|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 16;
      break L11;
     }
     // unreachable;
    } else {
     $$lcssa$i3$i = $34;
    }
   } while(0);
   __ZN4heroC2Effffff9sexuality($$lcssa$i3$i,100.0,80.0,90.0,100.0,100.0,100.0,2);
   HEAP32[$$lcssa$i>>2] = $$lcssa$i3$i;
   STACKTOP = sp;return ($$lcssa$i|0);
  } else if ((($8|0) == 1)) {
   $13 = (_malloc(224)|0);
   $14 = ($13|0)==(0|0);
   L26: do {
    if ($14) {
     while(1) {
      $15 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($15+0)|0);
      $16 = ($15|0)==(0);
      if ($16) {
       break;
      }
      $17 = $15;
      __THREW__ = 0;
      invoke_v($17|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       label = 14;
       break;
      }
      $20 = (_malloc(224)|0);
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       $$lcssa$i$i = $20;
       break L26;
      }
     }
     if ((label|0) == 14) {
      $25 = ___cxa_find_matching_catch()|0;
      $26 = tempRet0;
      $lpad$phi$index = $25;$lpad$phi$index6 = $26;
      break L11;
     }
     $22 = (___cxa_allocate_exception(4)|0);
     HEAP32[$22>>2] = ((19952 + 8|0));
     __THREW__ = 0;
     invoke_viii(422,($22|0),(20008|0),(386|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 16;
      break L11;
     }
     // unreachable;
    } else {
     $$lcssa$i$i = $13;
    }
   } while(0);
   __ZN4heroC2Effffff9sexuality($$lcssa$i$i,100.0,100.0,100.0,100.0,100.0,100.0,1);
   HEAP32[$$lcssa$i>>2] = $$lcssa$i$i;
   STACKTOP = sp;return ($$lcssa$i|0);
  } else {
   STACKTOP = sp;return ($$lcssa$i|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $lpad$phi$index = $29;$lpad$phi$index6 = $30;
 }
 $31 = HEAP32[$9>>2]|0;
 $32 = (($$lcssa$i) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $__begin$i$i$sroa$0$0 = $31;
 while(1) {
  $46 = ($__begin$i$i$sroa$0$0|0)==($33|0);
  if ($46) {
   break;
  }
  $47 = HEAP32[$__begin$i$i$sroa$0$0>>2]|0;
  $48 = ($47|0)==(0|0);
  if (!($48)) {
   $49 = HEAP32[$47>>2]|0;
   $50 = (($49) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   FUNCTION_TABLE_vi[$51 & 1023]($47);
  }
  $52 = (($__begin$i$i$sroa$0$0) + 4|0);
  $__begin$i$i$sroa$0$0 = $52;
 }
 $53 = HEAP32[$9>>2]|0;
 $54 = ($53|0)==(0|0);
 if ($54) {
  $eh$lpad$body$index13Z2D = $lpad$phi$index6;$eh$lpad$body$indexZ2D = $lpad$phi$index;
  _free($$lcssa$i);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $55 = (($$lcssa$i) + 8|0);
 $$pre = HEAP32[$55>>2]|0;
 $57 = $$pre;
 while(1) {
  $56 = ($53|0)==($57|0);
  if ($56) {
   break;
  }
  $58 = (($57) + -4|0);
  HEAP32[$55>>2] = $58;
  $57 = $58;
 }
 _free($53);
 $eh$lpad$body$index13Z2D = $lpad$phi$index6;$eh$lpad$body$indexZ2D = $lpad$phi$index;
 _free($$lcssa$i);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
 return 0|0;
}
function __ZN10emscripten8internal7InvokerIP10GameCenterJO9sexualityEE6invokeEPFS3_S5_ES4_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $args;
 $1 = (FUNCTION_TABLE_ii[$fn & 1023]($0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal13getActualTypeI10GameCenterEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (5128|0);
}
function __ZN10emscripten8internal14raw_destructorI10GameCenterEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$i$i$i$sroa$0$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($ptr) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($ptr) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $__begin$i$i$i$sroa$0$0 = $2;
 while(1) {
  $5 = ($__begin$i$i$i$sroa$0$0|0)==($4|0);
  if ($5) {
   break;
  }
  $6 = HEAP32[$__begin$i$i$i$sroa$0$0>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$6>>2]|0;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   FUNCTION_TABLE_vi[$10 & 1023]($6);
  }
  $11 = (($__begin$i$i$i$sroa$0$0) + 4|0);
  $__begin$i$i$i$sroa$0$0 = $11;
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = (($ptr) + 8|0);
  $$pre = HEAP32[$14>>2]|0;
  $16 = $$pre;
  while(1) {
   $15 = ($12|0)==($16|0);
   if ($15) {
    break;
   }
   $17 = (($16) + -4|0);
   HEAP32[$14>>2] = $17;
   $16 = $17;
  }
  _free($12);
 }
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIiJ5MonthEE6invokeEPFiS2_ES2_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_ii[$fn & 1023]($args)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZN10emscripten8internal7InvokerI8MonthDayJ5MonthiEE6invokeEPFS2_S3_iES3_i($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$lcssa$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 FUNCTION_TABLE_viii[$fn & 1023]($0,$args,$args1);
 $1 = (_malloc(12)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3+0)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     break;
    }
    $5 = $3;
    FUNCTION_TABLE_v[$5 & 1023]();
    $6 = (_malloc(12)|0);
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $$lcssa$i$i = $6;
     break L1;
    }
   }
   $8 = (___cxa_allocate_exception(4)|0);
   HEAP32[$8>>2] = ((19952 + 8|0));
   ___cxa_throw(($8|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i = $1;
  }
 } while(0);
 ;HEAP32[$$lcssa$i$i+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$lcssa$i$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$lcssa$i$i+8>>2]=HEAP32[$0+8>>2]|0;
 STACKTOP = sp;return ($$lcssa$i$i|0);
}
function __ZN10emscripten8internal7InvokerI8MonthDayJiEE6invokeEPFS2_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$lcssa$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 FUNCTION_TABLE_vii[$fn & 1023]($0,$args);
 $1 = (_malloc(12)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3+0)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     break;
    }
    $5 = $3;
    FUNCTION_TABLE_v[$5 & 1023]();
    $6 = (_malloc(12)|0);
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     $$lcssa$i$i = $6;
     break L1;
    }
   }
   $8 = (___cxa_allocate_exception(4)|0);
   HEAP32[$8>>2] = ((19952 + 8|0));
   ___cxa_throw(($8|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i = $1;
  }
 } while(0);
 ;HEAP32[$$lcssa$i$i+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$lcssa$i$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$lcssa$i$i+8>>2]=HEAP32[$0+8>>2]|0;
 STACKTOP = sp;return ($$lcssa$i$i|0);
}
function __ZN10emscripten8internal12GetterPolicyIM8MonthDayKF5MonthvEE3getIS2_EES3_RKS5_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal12GetterPolicyIM8MonthDayKFivEE3getIS2_EEiRKS4_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function __ZN10emscripten8internal13getActualTypeI8MonthDayEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (5304|0);
}
function __ZN10emscripten8internal14raw_destructorI8MonthDayEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIvJjEE6invokeEPFvjEj($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_vi[$fn & 1023]($args);
 STACKTOP = sp;return;
}
function __GLOBAL__I_a87() {
 var $$index224 = 0, $$index226 = 0, $$index228 = 0, $$index230 = 0, $$index232 = 0, $$index234 = 0, $$index236 = 0, $$index238 = 0, $$index240 = 0, $$index242 = 0, $$index244 = 0, $$index246 = 0, $$index248 = 0, $$index250 = 0, $$index252 = 0, $$index254 = 0, $$index256 = 0, $$index258 = 0, $$index260 = 0, $$index262 = 0;
 var $$index264 = 0, $$lcssa$i$i$i$i = 0, $$lcssa$i$i$i$i$i = 0, $$lcssa$i$i$i102$i$i = 0, $$lcssa$i$i$i108$i$i = 0, $$lcssa$i$i$i113$i$i = 0, $$lcssa$i$i$i118$i$i = 0, $$lcssa$i$i$i125$i$i = 0, $$lcssa$i$i$i131$i$i = 0, $$lcssa$i$i$i137$i$i = 0, $$lcssa$i$i$i50$i$i = 0, $$lcssa$i$i$i56$i$i = 0, $$lcssa$i$i$i62$i$i = 0, $$lcssa$i$i$i67$i$i = 0, $$lcssa$i$i$i72$i$i = 0, $$lcssa$i$i$i78$i$i = 0, $$lcssa$i$i$i84$i$i = 0, $$lcssa$i$i$i90$i$i = 0, $$lcssa$i$i$i96$i$i = 0, $$lcssa$i$i120$i$i = 0;
 var $$lcssa$i$i139$i$i = 0, $$lcssa$i$i141$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function((2272|0),2,(5456|0),(5448|0),(434|0),(435|0));
 __embind_register_class((5304|0),(5432|0),(5400|0),(0|0),(5376|0),(436|0),(3104|0),(0|0),(3104|0),(0|0),(2280|0),(5368|0),(437|0));
 $0 = (_malloc(8)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   while(1) {
    $2 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($2+0)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     break;
    }
    $4 = $2;
    FUNCTION_TABLE_v[$4 & 1023]();
    $5 = (_malloc(8)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa$i$i$i62$i$i = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((19952 + 8|0));
   ___cxa_throw(($7|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i62$i$i = $0;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i62$i$i>>0]=(438)&255;HEAP8[$$lcssa$i$i$i62$i$i+1>>0]=((438)>>8)&255;HEAP8[$$lcssa$i$i$i62$i$i+2>>0]=((438)>>16)&255;HEAP8[$$lcssa$i$i$i62$i$i+3>>0]=(438)>>24;
 $$index224 = (($$lcssa$i$i$i62$i$i) + 4|0);
 HEAP8[$$index224>>0]=0&255;HEAP8[$$index224+1>>0]=(0>>8)&255;HEAP8[$$index224+2>>0]=(0>>16)&255;HEAP8[$$index224+3>>0]=0>>24;
 __embind_register_class_property((5304|0),(2296|0),(21016|0),(5360|0),(439|0),($$lcssa$i$i$i62$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $8 = (_malloc(8)|0);
 $9 = ($8|0)==(0|0);
 L7: do {
  if ($9) {
   while(1) {
    $10 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($10+0)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    }
    $12 = $10;
    FUNCTION_TABLE_v[$12 & 1023]();
    $13 = (_malloc(8)|0);
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $$lcssa$i$i$i67$i$i = $13;
     break L7;
    }
   }
   $15 = (___cxa_allocate_exception(4)|0);
   HEAP32[$15>>2] = ((19952 + 8|0));
   ___cxa_throw(($15|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i67$i$i = $8;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i67$i$i>>0]=(440)&255;HEAP8[$$lcssa$i$i$i67$i$i+1>>0]=((440)>>8)&255;HEAP8[$$lcssa$i$i$i67$i$i+2>>0]=((440)>>16)&255;HEAP8[$$lcssa$i$i$i67$i$i+3>>0]=(440)>>24;
 $$index226 = (($$lcssa$i$i$i67$i$i) + 4|0);
 HEAP8[$$index226>>0]=0&255;HEAP8[$$index226+1>>0]=(0>>8)&255;HEAP8[$$index226+2>>0]=(0>>16)&255;HEAP8[$$index226+3>>0]=0>>24;
 __embind_register_class_property((5304|0),(2304|0),(5264|0),(5352|0),(441|0),($$lcssa$i$i$i67$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $16 = (_malloc(8)|0);
 $17 = ($16|0)==(0|0);
 L13: do {
  if ($17) {
   while(1) {
    $18 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($18+0)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     break;
    }
    $20 = $18;
    FUNCTION_TABLE_v[$20 & 1023]();
    $21 = (_malloc(8)|0);
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $$lcssa$i$i$i72$i$i = $21;
     break L13;
    }
   }
   $23 = (___cxa_allocate_exception(4)|0);
   HEAP32[$23>>2] = ((19952 + 8|0));
   ___cxa_throw(($23|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i72$i$i = $16;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i72$i$i>>0]=(442)&255;HEAP8[$$lcssa$i$i$i72$i$i+1>>0]=((442)>>8)&255;HEAP8[$$lcssa$i$i$i72$i$i+2>>0]=((442)>>16)&255;HEAP8[$$lcssa$i$i$i72$i$i+3>>0]=(442)>>24;
 $$index228 = (($$lcssa$i$i$i72$i$i) + 4|0);
 HEAP8[$$index228>>0]=0&255;HEAP8[$$index228+1>>0]=(0>>8)&255;HEAP8[$$index228+2>>0]=(0>>16)&255;HEAP8[$$index228+3>>0]=0>>24;
 __embind_register_class_property((5304|0),(2312|0),(21016|0),(5360|0),(439|0),($$lcssa$i$i$i72$i$i|0),(0|0),(0|0),(0|0),(0|0));
 __embind_register_class_class_function((5304|0),(2320|0),2,(5344|0),(5336|0),(443|0),(444|0));
 __embind_register_class_class_function((5304|0),(2336|0),3,(5320|0),(5312|0),(445|0),(446|0));
 __embind_register_class_class_function((5304|0),(2352|0),2,(5280|0),(5272|0),(447|0),(448|0));
 __embind_register_enum((5264|0),(2368|0),4,0);
 __embind_register_enum_value((5264|0),(18328|0),3);
 __embind_register_enum_value((5264|0),(18336|0),4);
 __embind_register_enum_value((5264|0),(18344|0),5);
 __embind_register_enum_value((5264|0),(18352|0),6);
 __embind_register_enum_value((5264|0),(18360|0),7);
 __embind_register_enum_value((5264|0),(18368|0),8);
 __embind_register_enum_value((5264|0),(18376|0),9);
 __embind_register_enum_value((5264|0),(18392|0),10);
 __embind_register_enum_value((5264|0),(18400|0),11);
 __embind_register_enum_value((5264|0),(18416|0),12);
 __embind_register_enum((3088|0),(2376|0),4,0);
 __embind_register_enum_value((3088|0),(2392|0),1);
 __embind_register_enum_value((3088|0),(2400|0),2);
 __embind_register_class((5128|0),(5136|0),(5240|0),(0|0),(5216|0),(449|0),(3104|0),(0|0),(3104|0),(0|0),(2408|0),(5208|0),(450|0));
 __embind_register_class_constructor((5128|0),2,(5200|0),(5192|0),(451|0),(452|0));
 $24 = (_malloc(8)|0);
 $25 = ($24|0)==(0|0);
 L19: do {
  if ($25) {
   while(1) {
    $26 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($26+0)|0);
    $27 = ($26|0)==(0);
    if ($27) {
     break;
    }
    $28 = $26;
    FUNCTION_TABLE_v[$28 & 1023]();
    $29 = (_malloc(8)|0);
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     $$lcssa$i$i$i108$i$i = $29;
     break L19;
    }
   }
   $31 = (___cxa_allocate_exception(4)|0);
   HEAP32[$31>>2] = ((19952 + 8|0));
   ___cxa_throw(($31|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i108$i$i = $24;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i108$i$i>>0]=(453)&255;HEAP8[$$lcssa$i$i$i108$i$i+1>>0]=((453)>>8)&255;HEAP8[$$lcssa$i$i$i108$i$i+2>>0]=((453)>>16)&255;HEAP8[$$lcssa$i$i$i108$i$i+3>>0]=(453)>>24;
 $$index230 = (($$lcssa$i$i$i108$i$i) + 4|0);
 HEAP8[$$index230>>0]=0&255;HEAP8[$$index230+1>>0]=(0>>8)&255;HEAP8[$$index230+2>>0]=(0>>16)&255;HEAP8[$$index230+3>>0]=0>>24;
 __embind_register_class_property((5128|0),(2424|0),(4744|0),(5184|0),(454|0),($$lcssa$i$i$i108$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $32 = (_malloc(8)|0);
 $33 = ($32|0)==(0|0);
 L25: do {
  if ($33) {
   while(1) {
    $34 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($34+0)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     break;
    }
    $36 = $34;
    FUNCTION_TABLE_v[$36 & 1023]();
    $37 = (_malloc(8)|0);
    $38 = ($37|0)==(0|0);
    if (!($38)) {
     $$lcssa$i$i$i113$i$i = $37;
     break L25;
    }
   }
   $39 = (___cxa_allocate_exception(4)|0);
   HEAP32[$39>>2] = ((19952 + 8|0));
   ___cxa_throw(($39|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i113$i$i = $32;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i113$i$i>>0]=(455)&255;HEAP8[$$lcssa$i$i$i113$i$i+1>>0]=((455)>>8)&255;HEAP8[$$lcssa$i$i$i113$i$i+2>>0]=((455)>>16)&255;HEAP8[$$lcssa$i$i$i113$i$i+3>>0]=(455)>>24;
 $$index232 = (($$lcssa$i$i$i113$i$i) + 4|0);
 HEAP8[$$index232>>0]=0&255;HEAP8[$$index232+1>>0]=(0>>8)&255;HEAP8[$$index232+2>>0]=(0>>16)&255;HEAP8[$$index232+3>>0]=0>>24;
 __embind_register_class_property((5128|0),(2432|0),(21016|0),(5176|0),(456|0),($$lcssa$i$i$i113$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $40 = (_malloc(8)|0);
 $41 = ($40|0)==(0|0);
 L31: do {
  if ($41) {
   while(1) {
    $42 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($42+0)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     break;
    }
    $44 = $42;
    FUNCTION_TABLE_v[$44 & 1023]();
    $45 = (_malloc(8)|0);
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $$lcssa$i$i$i118$i$i = $45;
     break L31;
    }
   }
   $47 = (___cxa_allocate_exception(4)|0);
   HEAP32[$47>>2] = ((19952 + 8|0));
   ___cxa_throw(($47|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i118$i$i = $40;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i118$i$i>>0]=(457)&255;HEAP8[$$lcssa$i$i$i118$i$i+1>>0]=((457)>>8)&255;HEAP8[$$lcssa$i$i$i118$i$i+2>>0]=((457)>>16)&255;HEAP8[$$lcssa$i$i$i118$i$i+3>>0]=(457)>>24;
 $$index234 = (($$lcssa$i$i$i118$i$i) + 4|0);
 HEAP8[$$index234>>0]=0&255;HEAP8[$$index234+1>>0]=(0>>8)&255;HEAP8[$$index234+2>>0]=(0>>16)&255;HEAP8[$$index234+3>>0]=0>>24;
 __embind_register_class_property((5128|0),(2448|0),(2992|0),(5168|0),(458|0),($$lcssa$i$i$i118$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $48 = (_malloc(8)|0);
 $49 = ($48|0)==(0|0);
 L37: do {
  if ($49) {
   while(1) {
    $50 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($50+0)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     break;
    }
    $52 = $50;
    FUNCTION_TABLE_v[$52 & 1023]();
    $53 = (_malloc(8)|0);
    $54 = ($53|0)==(0|0);
    if (!($54)) {
     $$lcssa$i$i$i$i = $53;
     break L37;
    }
   }
   $55 = (___cxa_allocate_exception(4)|0);
   HEAP32[$55>>2] = ((19952 + 8|0));
   ___cxa_throw(($55|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i$i = $48;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i$i>>0]=(459)&255;HEAP8[$$lcssa$i$i$i$i+1>>0]=((459)>>8)&255;HEAP8[$$lcssa$i$i$i$i+2>>0]=((459)>>16)&255;HEAP8[$$lcssa$i$i$i$i+3>>0]=(459)>>24;
 $$index236 = (($$lcssa$i$i$i$i) + 4|0);
 HEAP8[$$index236>>0]=0&255;HEAP8[$$index236+1>>0]=(0>>8)&255;HEAP8[$$index236+2>>0]=(0>>16)&255;HEAP8[$$index236+3>>0]=0>>24;
 __embind_register_class_function((5128|0),(2464|0),2,(5160|0),(5152|0),(460|0),($$lcssa$i$i$i$i|0),0);
 $56 = (_malloc(8)|0);
 $57 = ($56|0)==(0|0);
 L43: do {
  if ($57) {
   while(1) {
    $58 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($58+0)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     break;
    }
    $60 = $58;
    FUNCTION_TABLE_v[$60 & 1023]();
    $61 = (_malloc(8)|0);
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $$lcssa$i$i120$i$i = $61;
     break L43;
    }
   }
   $63 = (___cxa_allocate_exception(4)|0);
   HEAP32[$63>>2] = ((19952 + 8|0));
   ___cxa_throw(($63|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i120$i$i = $56;
  }
 } while(0);
 HEAP8[$$lcssa$i$i120$i$i>>0]=(461)&255;HEAP8[$$lcssa$i$i120$i$i+1>>0]=((461)>>8)&255;HEAP8[$$lcssa$i$i120$i$i+2>>0]=((461)>>16)&255;HEAP8[$$lcssa$i$i120$i$i+3>>0]=(461)>>24;
 $$index238 = (($$lcssa$i$i120$i$i) + 4|0);
 HEAP8[$$index238>>0]=0&255;HEAP8[$$index238+1>>0]=(0>>8)&255;HEAP8[$$index238+2>>0]=(0>>16)&255;HEAP8[$$index238+3>>0]=0>>24;
 __embind_register_class_function((5128|0),(2472|0),3,(5080|0),(5072|0),(462|0),($$lcssa$i$i120$i$i|0),0);
 __embind_register_class((4744|0),(4752|0),(5056|0),(0|0),(5032|0),(463|0),(3104|0),(0|0),(3104|0),(0|0),(2480|0),(5024|0),(464|0));
 __embind_register_class_class_function((4744|0),(2496|0),2,(4816|0),(4808|0),(465|0),(466|0));
 __embind_register_class_class_function((4744|0),(2512|0),1,(4800|0),(4792|0),(467|0),(433|0));
 $64 = (_malloc(8)|0);
 $65 = ($64|0)==(0|0);
 L49: do {
  if ($65) {
   while(1) {
    $66 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($66+0)|0);
    $67 = ($66|0)==(0);
    if ($67) {
     break;
    }
    $68 = $66;
    FUNCTION_TABLE_v[$68 & 1023]();
    $69 = (_malloc(8)|0);
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $$lcssa$i$i139$i$i = $69;
     break L49;
    }
   }
   $71 = (___cxa_allocate_exception(4)|0);
   HEAP32[$71>>2] = ((19952 + 8|0));
   ___cxa_throw(($71|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i139$i$i = $64;
  }
 } while(0);
 HEAP8[$$lcssa$i$i139$i$i>>0]=(468)&255;HEAP8[$$lcssa$i$i139$i$i+1>>0]=((468)>>8)&255;HEAP8[$$lcssa$i$i139$i$i+2>>0]=((468)>>16)&255;HEAP8[$$lcssa$i$i139$i$i+3>>0]=(468)>>24;
 $$index240 = (($$lcssa$i$i139$i$i) + 4|0);
 HEAP8[$$index240>>0]=0&255;HEAP8[$$index240+1>>0]=(0>>8)&255;HEAP8[$$index240+2>>0]=(0>>16)&255;HEAP8[$$index240+3>>0]=0>>24;
 __embind_register_class_function((4744|0),(2528|0),4,(4776|0),(4768|0),(469|0),($$lcssa$i$i139$i$i|0),0);
 $72 = (_malloc(8)|0);
 $73 = ($72|0)==(0|0);
 L55: do {
  if ($73) {
   while(1) {
    $74 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($74+0)|0);
    $75 = ($74|0)==(0);
    if ($75) {
     break;
    }
    $76 = $74;
    FUNCTION_TABLE_v[$76 & 1023]();
    $77 = (_malloc(8)|0);
    $78 = ($77|0)==(0|0);
    if (!($78)) {
     $$lcssa$i$i141$i$i = $77;
     break L55;
    }
   }
   $79 = (___cxa_allocate_exception(4)|0);
   HEAP32[$79>>2] = ((19952 + 8|0));
   ___cxa_throw(($79|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i141$i$i = $72;
  }
 } while(0);
 HEAP8[$$lcssa$i$i141$i$i>>0]=(470)&255;HEAP8[$$lcssa$i$i141$i$i+1>>0]=((470)>>8)&255;HEAP8[$$lcssa$i$i141$i$i+2>>0]=((470)>>16)&255;HEAP8[$$lcssa$i$i141$i$i+3>>0]=(470)>>24;
 $$index242 = (($$lcssa$i$i141$i$i) + 4|0);
 HEAP8[$$index242>>0]=0&255;HEAP8[$$index242+1>>0]=(0>>8)&255;HEAP8[$$index242+2>>0]=(0>>16)&255;HEAP8[$$index242+3>>0]=0>>24;
 __embind_register_class_function((4744|0),(2544|0),3,(4696|0),(4688|0),(471|0),($$lcssa$i$i141$i$i|0),0);
 __embind_register_class((360|0),(4672|0),(4648|0),(0|0),(4632|0),(472|0),(3104|0),(0|0),(3104|0),(0|0),(2552|0),(4624|0),(473|0));
 $80 = (_malloc(8)|0);
 $81 = ($80|0)==(0|0);
 L61: do {
  if ($81) {
   while(1) {
    $82 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($82+0)|0);
    $83 = ($82|0)==(0);
    if ($83) {
     break;
    }
    $84 = $82;
    FUNCTION_TABLE_v[$84 & 1023]();
    $85 = (_malloc(8)|0);
    $86 = ($85|0)==(0|0);
    if (!($86)) {
     $$lcssa$i$i$i137$i$i = $85;
     break L61;
    }
   }
   $87 = (___cxa_allocate_exception(4)|0);
   HEAP32[$87>>2] = ((19952 + 8|0));
   ___cxa_throw(($87|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i137$i$i = $80;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i137$i$i>>0]=(474)&255;HEAP8[$$lcssa$i$i$i137$i$i+1>>0]=((474)>>8)&255;HEAP8[$$lcssa$i$i$i137$i$i+2>>0]=((474)>>16)&255;HEAP8[$$lcssa$i$i$i137$i$i+3>>0]=(474)>>24;
 $$index244 = (($$lcssa$i$i$i137$i$i) + 4|0);
 HEAP8[$$index244>>0]=0&255;HEAP8[$$index244+1>>0]=(0>>8)&255;HEAP8[$$index244+2>>0]=(0>>16)&255;HEAP8[$$index244+3>>0]=0>>24;
 __embind_register_class_property((360|0),(2560|0),(20920|0),(4616|0),(475|0),($$lcssa$i$i$i137$i$i|0),(0|0),(0|0),(0|0),(0|0));
 __embind_register_class((504|0),(4600|0),(4568|0),(360|0),(4544|0),(476|0),(4536|0),(477|0),(4528|0),(478|0),(2568|0),(4520|0),(479|0));
 __embind_register_class((560|0),(4504|0),(4472|0),(360|0),(4448|0),(480|0),(4440|0),(481|0),(4432|0),(482|0),(2584|0),(4424|0),(483|0));
 __embind_register_class((608|0),(4408|0),(4384|0),(360|0),(4360|0),(484|0),(4352|0),(485|0),(4344|0),(486|0),(2600|0),(4336|0),(487|0));
 __embind_register_class((664|0),(4320|0),(4288|0),(360|0),(4264|0),(488|0),(4256|0),(489|0),(4248|0),(490|0),(2616|0),(4240|0),(491|0));
 __embind_register_class((368|0),(4224|0),(4200|0),(360|0),(4184|0),(492|0),(4176|0),(493|0),(4168|0),(494|0),(2632|0),(4160|0),(495|0));
 __embind_register_class((720|0),(4144|0),(4112|0),(360|0),(4088|0),(496|0),(4080|0),(497|0),(4072|0),(498|0),(2648|0),(4064|0),(499|0));
 __embind_register_class((768|0),(4048|0),(4024|0),(360|0),(4000|0),(500|0),(3992|0),(501|0),(3984|0),(502|0),(2664|0),(3976|0),(503|0));
 __embind_register_class((920|0),(3960|0),(3928|0),(360|0),(3904|0),(504|0),(3896|0),(505|0),(3888|0),(506|0),(2680|0),(3880|0),(507|0));
 __embind_register_class((424|0),(3864|0),(3832|0),(360|0),(3808|0),(508|0),(3800|0),(509|0),(3792|0),(510|0),(2696|0),(3784|0),(511|0));
 __embind_register_class((864|0),(3768|0),(3744|0),(424|0),(3728|0),(512|0),(3720|0),(513|0),(3712|0),(514|0),(2712|0),(3704|0),(515|0));
 __embind_register_class((816|0),(3688|0),(3664|0),(424|0),(3648|0),(516|0),(3640|0),(517|0),(3632|0),(518|0),(2728|0),(3624|0),(519|0));
 __embind_register_class((456|0),(3608|0),(3576|0),(360|0),(3552|0),(520|0),(3544|0),(521|0),(3536|0),(522|0),(2736|0),(3528|0),(523|0));
 __embind_register_class((1136|0),(3512|0),(3472|0),(456|0),(3440|0),(524|0),(3432|0),(525|0),(3424|0),(526|0),(2752|0),(3416|0),(527|0));
 __embind_register_class((976|0),(3400|0),(3368|0),(456|0),(3344|0),(528|0),(3336|0),(529|0),(3328|0),(530|0),(2776|0),(3320|0),(531|0));
 __embind_register_class((1080|0),(3304|0),(3280|0),(456|0),(3264|0),(532|0),(3256|0),(533|0),(3248|0),(534|0),(2800|0),(3240|0),(535|0));
 __embind_register_class((1032|0),(3224|0),(3192|0),(456|0),(3168|0),(536|0),(3160|0),(537|0),(3152|0),(538|0),(2808|0),(3144|0),(539|0));
 __embind_register_class((2992|0),(3056|0),(3128|0),(0|0),(3112|0),(540|0),(3104|0),(0|0),(3104|0),(0|0),(2824|0),(3096|0),(541|0));
 __embind_register_class_constructor((2992|0),8,(3016|0),(3000|0),(542|0),(543|0));
 $88 = (_malloc(8)|0);
 $89 = ($88|0)==(0|0);
 L67: do {
  if ($89) {
   while(1) {
    $90 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($90+0)|0);
    $91 = ($90|0)==(0);
    if ($91) {
     break;
    }
    $92 = $90;
    FUNCTION_TABLE_v[$92 & 1023]();
    $93 = (_malloc(8)|0);
    $94 = ($93|0)==(0|0);
    if (!($94)) {
     $$lcssa$i$i$i131$i$i = $93;
     break L67;
    }
   }
   $95 = (___cxa_allocate_exception(4)|0);
   HEAP32[$95>>2] = ((19952 + 8|0));
   ___cxa_throw(($95|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i131$i$i = $88;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i131$i$i>>0]=(544)&255;HEAP8[$$lcssa$i$i$i131$i$i+1>>0]=((544)>>8)&255;HEAP8[$$lcssa$i$i$i131$i$i+2>>0]=((544)>>16)&255;HEAP8[$$lcssa$i$i$i131$i$i+3>>0]=(544)>>24;
 $$index246 = (($$lcssa$i$i$i131$i$i) + 4|0);
 HEAP8[$$index246>>0]=0&255;HEAP8[$$index246+1>>0]=(0>>8)&255;HEAP8[$$index246+2>>0]=(0>>16)&255;HEAP8[$$index246+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2832|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i131$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $96 = (_malloc(8)|0);
 $97 = ($96|0)==(0|0);
 L73: do {
  if ($97) {
   while(1) {
    $98 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($98+0)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     break;
    }
    $100 = $98;
    FUNCTION_TABLE_v[$100 & 1023]();
    $101 = (_malloc(8)|0);
    $102 = ($101|0)==(0|0);
    if (!($102)) {
     $$lcssa$i$i$i125$i$i = $101;
     break L73;
    }
   }
   $103 = (___cxa_allocate_exception(4)|0);
   HEAP32[$103>>2] = ((19952 + 8|0));
   ___cxa_throw(($103|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i125$i$i = $96;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i125$i$i>>0]=(546)&255;HEAP8[$$lcssa$i$i$i125$i$i+1>>0]=((546)>>8)&255;HEAP8[$$lcssa$i$i$i125$i$i+2>>0]=((546)>>16)&255;HEAP8[$$lcssa$i$i$i125$i$i+3>>0]=(546)>>24;
 $$index248 = (($$lcssa$i$i$i125$i$i) + 4|0);
 HEAP8[$$index248>>0]=0&255;HEAP8[$$index248+1>>0]=(0>>8)&255;HEAP8[$$index248+2>>0]=(0>>16)&255;HEAP8[$$index248+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2840|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i125$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $104 = (_malloc(8)|0);
 $105 = ($104|0)==(0|0);
 L79: do {
  if ($105) {
   while(1) {
    $106 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($106+0)|0);
    $107 = ($106|0)==(0);
    if ($107) {
     break;
    }
    $108 = $106;
    FUNCTION_TABLE_v[$108 & 1023]();
    $109 = (_malloc(8)|0);
    $110 = ($109|0)==(0|0);
    if (!($110)) {
     $$lcssa$i$i$i102$i$i = $109;
     break L79;
    }
   }
   $111 = (___cxa_allocate_exception(4)|0);
   HEAP32[$111>>2] = ((19952 + 8|0));
   ___cxa_throw(($111|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i102$i$i = $104;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i102$i$i>>0]=(547)&255;HEAP8[$$lcssa$i$i$i102$i$i+1>>0]=((547)>>8)&255;HEAP8[$$lcssa$i$i$i102$i$i+2>>0]=((547)>>16)&255;HEAP8[$$lcssa$i$i$i102$i$i+3>>0]=(547)>>24;
 $$index250 = (($$lcssa$i$i$i102$i$i) + 4|0);
 HEAP8[$$index250>>0]=0&255;HEAP8[$$index250+1>>0]=(0>>8)&255;HEAP8[$$index250+2>>0]=(0>>16)&255;HEAP8[$$index250+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2848|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i102$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $112 = (_malloc(8)|0);
 $113 = ($112|0)==(0|0);
 L85: do {
  if ($113) {
   while(1) {
    $114 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($114+0)|0);
    $115 = ($114|0)==(0);
    if ($115) {
     break;
    }
    $116 = $114;
    FUNCTION_TABLE_v[$116 & 1023]();
    $117 = (_malloc(8)|0);
    $118 = ($117|0)==(0|0);
    if (!($118)) {
     $$lcssa$i$i$i96$i$i = $117;
     break L85;
    }
   }
   $119 = (___cxa_allocate_exception(4)|0);
   HEAP32[$119>>2] = ((19952 + 8|0));
   ___cxa_throw(($119|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i96$i$i = $112;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i96$i$i>>0]=(548)&255;HEAP8[$$lcssa$i$i$i96$i$i+1>>0]=((548)>>8)&255;HEAP8[$$lcssa$i$i$i96$i$i+2>>0]=((548)>>16)&255;HEAP8[$$lcssa$i$i$i96$i$i+3>>0]=(548)>>24;
 $$index252 = (($$lcssa$i$i$i96$i$i) + 4|0);
 HEAP8[$$index252>>0]=0&255;HEAP8[$$index252+1>>0]=(0>>8)&255;HEAP8[$$index252+2>>0]=(0>>16)&255;HEAP8[$$index252+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2864|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i96$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $120 = (_malloc(8)|0);
 $121 = ($120|0)==(0|0);
 L91: do {
  if ($121) {
   while(1) {
    $122 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($122+0)|0);
    $123 = ($122|0)==(0);
    if ($123) {
     break;
    }
    $124 = $122;
    FUNCTION_TABLE_v[$124 & 1023]();
    $125 = (_malloc(8)|0);
    $126 = ($125|0)==(0|0);
    if (!($126)) {
     $$lcssa$i$i$i90$i$i = $125;
     break L91;
    }
   }
   $127 = (___cxa_allocate_exception(4)|0);
   HEAP32[$127>>2] = ((19952 + 8|0));
   ___cxa_throw(($127|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i90$i$i = $120;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i90$i$i>>0]=(549)&255;HEAP8[$$lcssa$i$i$i90$i$i+1>>0]=((549)>>8)&255;HEAP8[$$lcssa$i$i$i90$i$i+2>>0]=((549)>>16)&255;HEAP8[$$lcssa$i$i$i90$i$i+3>>0]=(549)>>24;
 $$index254 = (($$lcssa$i$i$i90$i$i) + 4|0);
 HEAP8[$$index254>>0]=0&255;HEAP8[$$index254+1>>0]=(0>>8)&255;HEAP8[$$index254+2>>0]=(0>>16)&255;HEAP8[$$index254+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2880|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i90$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $128 = (_malloc(8)|0);
 $129 = ($128|0)==(0|0);
 L97: do {
  if ($129) {
   while(1) {
    $130 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($130+0)|0);
    $131 = ($130|0)==(0);
    if ($131) {
     break;
    }
    $132 = $130;
    FUNCTION_TABLE_v[$132 & 1023]();
    $133 = (_malloc(8)|0);
    $134 = ($133|0)==(0|0);
    if (!($134)) {
     $$lcssa$i$i$i84$i$i = $133;
     break L97;
    }
   }
   $135 = (___cxa_allocate_exception(4)|0);
   HEAP32[$135>>2] = ((19952 + 8|0));
   ___cxa_throw(($135|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i84$i$i = $128;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i84$i$i>>0]=(550)&255;HEAP8[$$lcssa$i$i$i84$i$i+1>>0]=((550)>>8)&255;HEAP8[$$lcssa$i$i$i84$i$i+2>>0]=((550)>>16)&255;HEAP8[$$lcssa$i$i$i84$i$i+3>>0]=(550)>>24;
 $$index256 = (($$lcssa$i$i$i84$i$i) + 4|0);
 HEAP8[$$index256>>0]=0&255;HEAP8[$$index256+1>>0]=(0>>8)&255;HEAP8[$$index256+2>>0]=(0>>16)&255;HEAP8[$$index256+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2888|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i84$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $136 = (_malloc(8)|0);
 $137 = ($136|0)==(0|0);
 L103: do {
  if ($137) {
   while(1) {
    $138 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($138+0)|0);
    $139 = ($138|0)==(0);
    if ($139) {
     break;
    }
    $140 = $138;
    FUNCTION_TABLE_v[$140 & 1023]();
    $141 = (_malloc(8)|0);
    $142 = ($141|0)==(0|0);
    if (!($142)) {
     $$lcssa$i$i$i78$i$i = $141;
     break L103;
    }
   }
   $143 = (___cxa_allocate_exception(4)|0);
   HEAP32[$143>>2] = ((19952 + 8|0));
   ___cxa_throw(($143|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i78$i$i = $136;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i78$i$i>>0]=(551)&255;HEAP8[$$lcssa$i$i$i78$i$i+1>>0]=((551)>>8)&255;HEAP8[$$lcssa$i$i$i78$i$i+2>>0]=((551)>>16)&255;HEAP8[$$lcssa$i$i$i78$i$i+3>>0]=(551)>>24;
 $$index258 = (($$lcssa$i$i$i78$i$i) + 4|0);
 HEAP8[$$index258>>0]=0&255;HEAP8[$$index258+1>>0]=(0>>8)&255;HEAP8[$$index258+2>>0]=(0>>16)&255;HEAP8[$$index258+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2896|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i78$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $144 = (_malloc(8)|0);
 $145 = ($144|0)==(0|0);
 L109: do {
  if ($145) {
   while(1) {
    $146 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($146+0)|0);
    $147 = ($146|0)==(0);
    if ($147) {
     break;
    }
    $148 = $146;
    FUNCTION_TABLE_v[$148 & 1023]();
    $149 = (_malloc(8)|0);
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $$lcssa$i$i$i56$i$i = $149;
     break L109;
    }
   }
   $151 = (___cxa_allocate_exception(4)|0);
   HEAP32[$151>>2] = ((19952 + 8|0));
   ___cxa_throw(($151|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i56$i$i = $144;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i56$i$i>>0]=(552)&255;HEAP8[$$lcssa$i$i$i56$i$i+1>>0]=((552)>>8)&255;HEAP8[$$lcssa$i$i$i56$i$i+2>>0]=((552)>>16)&255;HEAP8[$$lcssa$i$i$i56$i$i+3>>0]=(552)>>24;
 $$index260 = (($$lcssa$i$i$i56$i$i) + 4|0);
 HEAP8[$$index260>>0]=0&255;HEAP8[$$index260+1>>0]=(0>>8)&255;HEAP8[$$index260+2>>0]=(0>>16)&255;HEAP8[$$index260+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2912|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i56$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $152 = (_malloc(8)|0);
 $153 = ($152|0)==(0|0);
 L115: do {
  if ($153) {
   while(1) {
    $154 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($154+0)|0);
    $155 = ($154|0)==(0);
    if ($155) {
     break;
    }
    $156 = $154;
    FUNCTION_TABLE_v[$156 & 1023]();
    $157 = (_malloc(8)|0);
    $158 = ($157|0)==(0|0);
    if (!($158)) {
     $$lcssa$i$i$i50$i$i = $157;
     break L115;
    }
   }
   $159 = (___cxa_allocate_exception(4)|0);
   HEAP32[$159>>2] = ((19952 + 8|0));
   ___cxa_throw(($159|0),(20008|0),(386|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i50$i$i = $152;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i50$i$i>>0]=(553)&255;HEAP8[$$lcssa$i$i$i50$i$i+1>>0]=((553)>>8)&255;HEAP8[$$lcssa$i$i$i50$i$i+2>>0]=((553)>>16)&255;HEAP8[$$lcssa$i$i$i50$i$i+3>>0]=(553)>>24;
 $$index262 = (($$lcssa$i$i$i50$i$i) + 4|0);
 HEAP8[$$index262>>0]=0&255;HEAP8[$$index262+1>>0]=(0>>8)&255;HEAP8[$$index262+2>>0]=(0>>16)&255;HEAP8[$$index262+3>>0]=0>>24;
 __embind_register_class_property((2992|0),(2928|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i50$i$i|0),(0|0),(0|0),(0|0),(0|0));
 $160 = (_malloc(8)|0);
 $161 = ($160|0)==(0|0);
 if (!($161)) {
  $$lcssa$i$i$i$i$i = $160;
  HEAP8[$$lcssa$i$i$i$i$i>>0]=(554)&255;HEAP8[$$lcssa$i$i$i$i$i+1>>0]=((554)>>8)&255;HEAP8[$$lcssa$i$i$i$i$i+2>>0]=((554)>>16)&255;HEAP8[$$lcssa$i$i$i$i$i+3>>0]=(554)>>24;
  $$index264 = (($$lcssa$i$i$i$i$i) + 4|0);
  HEAP8[$$index264>>0]=0&255;HEAP8[$$index264+1>>0]=(0>>8)&255;HEAP8[$$index264+2>>0]=(0>>16)&255;HEAP8[$$index264+3>>0]=0>>24;
  __embind_register_class_property((2992|0),(2952|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i$i$i|0),(0|0),(0|0),(0|0),(0|0));
  STACKTOP = sp;return;
 }
 while(1) {
  $162 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($162+0)|0);
  $163 = ($162|0)==(0);
  if ($163) {
   label = 84;
   break;
  }
  $164 = $162;
  FUNCTION_TABLE_v[$164 & 1023]();
  $165 = (_malloc(8)|0);
  $166 = ($165|0)==(0|0);
  if (!($166)) {
   $$lcssa$i$i$i$i$i = $165;
   label = 85;
   break;
  }
 }
 if ((label|0) == 84) {
  $167 = (___cxa_allocate_exception(4)|0);
  HEAP32[$167>>2] = ((19952 + 8|0));
  ___cxa_throw(($167|0),(20008|0),(386|0));
  // unreachable;
 }
 else if ((label|0) == 85) {
  HEAP8[$$lcssa$i$i$i$i$i>>0]=(554)&255;HEAP8[$$lcssa$i$i$i$i$i+1>>0]=((554)>>8)&255;HEAP8[$$lcssa$i$i$i$i$i+2>>0]=((554)>>16)&255;HEAP8[$$lcssa$i$i$i$i$i+3>>0]=(554)>>24;
  $$index264 = (($$lcssa$i$i$i$i$i) + 4|0);
  HEAP8[$$index264>>0]=0&255;HEAP8[$$index264+1>>0]=(0>>8)&255;HEAP8[$$index264+2>>0]=(0>>16)&255;HEAP8[$$index264+3>>0]=0>>24;
  __embind_register_class_property((2992|0),(2952|0),(21072|0),(2976|0),(545|0),($$lcssa$i$i$i$i$i|0),(0|0),(0|0),(0|0),(0|0));
  STACKTOP = sp;return;
 }
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ti) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strlen(($1|0))|0);
 $3 = (($2) + 1)|0;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 _memcpy(($4|0),($1|0),($3|0))|0;
 $$0$i = $4;
 STACKTOP = sp;return ($$0$i|0);
}
function __GLOBAL__I_a125() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((20888|0),(5464|0));
 __embind_register_bool((20920|0),(5472|0),1,1,0);
 __embind_register_integer((20936|0),(5480|0),1,-128,127);
 __embind_register_integer((20968|0),(5488|0),1,-128,127);
 __embind_register_integer((20952|0),(5504|0),1,0,255);
 __embind_register_integer((20984|0),(5520|0),2,-32768,32767);
 __embind_register_integer((21000|0),(5528|0),2,0,65535);
 __embind_register_integer((21016|0),(5544|0),4,-2147483648,2147483647);
 __embind_register_integer((21032|0),(5552|0),4,0,-1);
 __embind_register_integer((21040|0),(5568|0),4,-2147483648,2147483647);
 __embind_register_integer((21056|0),(5576|0),4,0,-1);
 __embind_register_float((21072|0),(5592|0),4);
 __embind_register_float((21088|0),(5600|0),8);
 __embind_register_std_string((7160|0),(5608|0));
 __embind_register_std_string((7072|0),(5624|0));
 __embind_register_std_wstring((6984|0),4,(5664|0));
 __embind_register_emval((6864|0),(5680|0));
 __embind_register_memory_view((6832|0),0,(5696|0));
 __embind_register_memory_view((6792|0),0,(5728|0));
 __embind_register_memory_view((6752|0),1,(5768|0));
 __embind_register_memory_view((6712|0),2,(5808|0));
 __embind_register_memory_view((6672|0),3,(5840|0));
 __embind_register_memory_view((6632|0),4,(5880|0));
 __embind_register_memory_view((6592|0),5,(5912|0));
 __embind_register_memory_view((6552|0),4,(5952|0));
 __embind_register_memory_view((6512|0),5,(5984|0));
 __embind_register_memory_view((6792|0),0,(6024|0));
 __embind_register_memory_view((6752|0),1,(6056|0));
 __embind_register_memory_view((6712|0),2,(6096|0));
 __embind_register_memory_view((6672|0),3,(6136|0));
 __embind_register_memory_view((6632|0),4,(6176|0));
 __embind_register_memory_view((6592|0),5,(6216|0));
 __embind_register_memory_view((6472|0),6,(6256|0));
 __embind_register_memory_view((6432|0),7,(6288|0));
 __embind_register_memory_view((6392|0),7,(6320|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(424,(7272|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vi(424,(7448|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   invoke_vi(555,(7624|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    invoke_vi(555,(7800|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9064 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 HEAP32[$this>>2] = ((8248 + 8|0));
 $2 = (($this) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 __THREW__ = 0;
 $6 = (invoke_iii(556,($3|0),(11824|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = (($this) + 36|0);
  $10 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($10+-1)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   HEAP32[$9>>2] = $6;
   $15 = (($this) + 40|0);
   HEAP32[$15>>2] = $__st;
   $16 = (($this) + 44|0);
   $17 = HEAP32[$6>>2]|0;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 1023]($6)|0);
   $21 = $20&1;
   HEAP8[$16>>0] = $21;
   STACKTOP = sp;return;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 1023]($3);
  HEAP32[$9>>2] = $6;
  $15 = (($this) + 40|0);
  HEAP32[$15>>2] = $__st;
  $16 = (($this) + 44|0);
  $17 = HEAP32[$6>>2]|0;
  $18 = (($17) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($6)|0);
  $21 = $20&1;
  HEAP8[$16>>0] = $21;
  STACKTOP = sp;return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $24 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($24+-1)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 1023]($3);
 }
 HEAP32[$this>>2] = ((9064 + 8|0));
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($31+-1)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  ___resumeException($22|0);
  // unreachable;
 }
 $33 = HEAP32[$29>>2]|0;
 $34 = (($33) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 FUNCTION_TABLE_vi[$35 & 1023]($29);
 ___resumeException($22|0);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9064 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9064 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11824)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp;
 $__extbe = sp + 4|0;
 $__e = sp + 8|0;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9064 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9064 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11824)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(8464);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp;
 $__ci = sp + 4|0;
 $__inxt = sp + 8|0;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   } else if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp;
 $__enxt = sp + 4|0;
 $__inxt = sp + 8|0;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9000 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 HEAP32[$this>>2] = ((8504 + 8|0));
 $2 = (($this) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 __THREW__ = 0;
 $6 = (invoke_iii(556,($3|0),(11816|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = (($this) + 36|0);
  $10 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($10+-1)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   HEAP32[$9>>2] = $6;
   $15 = (($this) + 40|0);
   HEAP32[$15>>2] = $__st;
   $16 = (($this) + 44|0);
   $17 = HEAP32[$6>>2]|0;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 1023]($6)|0);
   $21 = $20&1;
   HEAP8[$16>>0] = $21;
   STACKTOP = sp;return;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 1023]($3);
  HEAP32[$9>>2] = $6;
  $15 = (($this) + 40|0);
  HEAP32[$15>>2] = $__st;
  $16 = (($this) + 44|0);
  $17 = HEAP32[$6>>2]|0;
  $18 = (($17) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 1023]($6)|0);
  $21 = $20&1;
  HEAP8[$16>>0] = $21;
  STACKTOP = sp;return;
 }
 $22 = ___cxa_find_matching_catch()|0;
 $23 = tempRet0;
 $24 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($24+-1)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 1023]($3);
 }
 HEAP32[$this>>2] = ((9000 + 8|0));
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($31+-1)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  ___resumeException($22|0);
  // unreachable;
 }
 $33 = HEAP32[$29>>2]|0;
 $34 = (($33) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 FUNCTION_TABLE_vi[$35 & 1023]($29);
 ___resumeException($22|0);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9000 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9000 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11816)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp;
 $__e = sp + 4|0;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9000 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9000 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11816)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(8464);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp;
 $__ci = sp + 8|0;
 $__inxt = sp + 4|0;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp;
 $__inxt = sp + 4|0;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a209() {
 var $$sum$i = 0, $$sum10$i = 0, $$sum11$i = 0, $$sum5$i = 0, $$sum6$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$$i$i = 0;
 var $not$$i3$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 HEAP32[7896>>2] = ((9000 + 8|0));
 __ZNSt3__16localeC2Ev(((7896 + 4|0)));
 ;HEAP32[((7896 + 8|0))+0>>2]=0|0;HEAP32[((7896 + 8|0))+4>>2]=0|0;HEAP32[((7896 + 8|0))+8>>2]=0|0;HEAP32[((7896 + 8|0))+12>>2]=0|0;HEAP32[((7896 + 8|0))+16>>2]=0|0;HEAP32[((7896 + 8|0))+20>>2]=0|0;
 HEAP32[7896>>2] = ((8616 + 8|0));
 HEAP32[((7896 + 32|0))>>2] = $0;
 HEAP32[((7896 + 40|0))>>2] = 7952;
 HEAP32[((7896 + 48|0))>>2] = -1;
 HEAP8[((7896 + 52|0))>>0] = 0;
 $1 = HEAP32[((7896 + 4|0))>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(423,(11816|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if (!($6)) {
   $7 = (($1) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($1) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $8;
   $12 = $10;
   $13 = (($11) - ($12))|0;
   $14 = $13 >> 2;
   $15 = ($14>>>0)>($4>>>0);
   if ($15) {
    $16 = (($10) + ($4<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     HEAP32[((7896 + 36|0))>>2] = $17;
     $22 = HEAP32[$17>>2]|0;
     $23 = (($22) + 24|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_ii[$24 & 1023]($17)|0);
     HEAP32[((7896 + 44|0))>>2] = $25;
     $26 = HEAP32[((7896 + 36|0))>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 28|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 1023]($26)|0);
     $31 = $30&1;
     HEAP8[((7896 + 53|0))>>0] = $31;
     $32 = HEAP32[((7896 + 44|0))>>2]|0;
     $33 = ($32|0)>(8);
     if ($33) {
      __THREW__ = 0;
      invoke_vi(557,(8464|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
      // unreachable;
     }
     $36 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($36+-1)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $38 = HEAP32[$1>>2]|0;
      $39 = (($38) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      FUNCTION_TABLE_vi[$40 & 1023]($1);
     }
     HEAP32[7184>>2] = ((9128 + 12|0));
     HEAP32[((7184 + 8|0))>>2] = ((9128 + 32|0));
     HEAP32[((7184 + 4|0))>>2] = 0;
     HEAP32[((7184 + 32|0))>>2] = 7896;
     HEAP32[((7184 + 24|0))>>2] = 0;
     HEAP32[((7184 + 28|0))>>2] = 0;
     HEAP32[((7184 + 12|0))>>2] = 4098;
     HEAP32[((7184 + 20|0))>>2] = 0;
     HEAP32[((7184 + 16|0))>>2] = 6;
     dest=((7184 + 40|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     __ZNSt3__16localeC2Ev(((7184 + 36|0)));
     HEAP32[((7184 + 80|0))>>2] = 0;
     HEAP32[((7184 + 84|0))>>2] = -1;
     $55 = HEAP32[_stdout>>2]|0;
     __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(8000,$55,((7952 + 8|0)));
     HEAP32[7272>>2] = ((9208 + 12|0));
     HEAP32[((7272 + 4|0))>>2] = ((9208 + 32|0));
     HEAP32[((7272 + 28|0))>>2] = 8000;
     HEAP32[((7272 + 20|0))>>2] = 0;
     HEAP32[((7272 + 24|0))>>2] = 0;
     HEAP32[((7272 + 8|0))>>2] = 4098;
     HEAP32[((7272 + 16|0))>>2] = 0;
     HEAP32[((7272 + 12|0))>>2] = 6;
     dest=((7272 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     __ZNSt3__16localeC2Ev(((7272 + 32|0)));
     HEAP32[((7272 + 76|0))>>2] = 0;
     HEAP32[((7272 + 80|0))>>2] = -1;
     $56 = HEAP32[_stderr>>2]|0;
     __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(8048,$56,((7952 + 16|0)));
     HEAP32[7360>>2] = ((9208 + 12|0));
     HEAP32[((7360 + 4|0))>>2] = ((9208 + 32|0));
     HEAP32[((7360 + 28|0))>>2] = 8048;
     HEAP32[((7360 + 20|0))>>2] = 0;
     HEAP32[((7360 + 24|0))>>2] = 0;
     HEAP32[((7360 + 8|0))>>2] = 4098;
     HEAP32[((7360 + 16|0))>>2] = 0;
     HEAP32[((7360 + 12|0))>>2] = 6;
     dest=((7360 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     __ZNSt3__16localeC2Ev(((7360 + 32|0)));
     HEAP32[((7360 + 76|0))>>2] = 0;
     HEAP32[((7360 + 80|0))>>2] = -1;
     $57 = HEAP32[7360>>2]|0;
     $58 = (($57) + -12|0);
     $59 = HEAP32[$58>>2]|0;
     $$sum$i = (($59) + 24)|0;
     $60 = (7360 + ($$sum$i)|0);
     $61 = HEAP32[$60>>2]|0;
     HEAP32[7448>>2] = ((9208 + 12|0));
     HEAP32[((7448 + 4|0))>>2] = ((9208 + 32|0));
     HEAP32[((7448 + 28|0))>>2] = $61;
     $not$$i$i = ($61|0)==(0|0);
     $62 = $not$$i$i&1;
     HEAP32[((7448 + 20|0))>>2] = $62;
     HEAP32[((7448 + 24|0))>>2] = 0;
     HEAP32[((7448 + 8|0))>>2] = 4098;
     HEAP32[((7448 + 16|0))>>2] = 0;
     HEAP32[((7448 + 12|0))>>2] = 6;
     dest=((7448 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     __ZNSt3__16localeC2Ev(((7448 + 32|0)));
     HEAP32[((7448 + 76|0))>>2] = 0;
     HEAP32[((7448 + 80|0))>>2] = -1;
     $63 = HEAP32[7184>>2]|0;
     $64 = (($63) + -12|0);
     $65 = HEAP32[$64>>2]|0;
     $$sum5$i = (($65) + 72)|0;
     $66 = (7184 + ($$sum5$i)|0);
     HEAP32[$66>>2] = 7272;
     $67 = HEAP32[7360>>2]|0;
     $68 = (($67) + -12|0);
     $69 = HEAP32[$68>>2]|0;
     $$sum6$i = (($69) + 4)|0;
     $70 = (7360 + ($$sum6$i)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $71 | 8192;
     HEAP32[$70>>2] = $72;
     $73 = HEAP32[7360>>2]|0;
     $74 = (($73) + -12|0);
     $75 = HEAP32[$74>>2]|0;
     $$sum7$i = (($75) + 72)|0;
     $76 = (7360 + ($$sum7$i)|0);
     HEAP32[$76>>2] = 7272;
     HEAP32[8096>>2] = ((9064 + 8|0));
     __ZNSt3__16localeC2Ev(((8096 + 4|0)));
     ;HEAP32[((8096 + 8|0))+0>>2]=0|0;HEAP32[((8096 + 8|0))+4>>2]=0|0;HEAP32[((8096 + 8|0))+8>>2]=0|0;HEAP32[((8096 + 8|0))+12>>2]=0|0;HEAP32[((8096 + 8|0))+16>>2]=0|0;HEAP32[((8096 + 8|0))+20>>2]=0|0;
     HEAP32[8096>>2] = ((8360 + 8|0));
     HEAP32[((8096 + 32|0))>>2] = $0;
     HEAP32[((8096 + 40|0))>>2] = ((7952 + 24|0));
     HEAP32[((8096 + 48|0))>>2] = -1;
     HEAP8[((8096 + 52|0))>>0] = 0;
     $77 = HEAP32[((8096 + 4|0))>>2]|0;
     $78 = (($77) + 4|0);
     $79 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($79+1)|0);
     __THREW__ = 0;
     $80 = (invoke_ii(423,(11824|0))|0);
     $81 = __THREW__; __THREW__ = 0;
     $82 = $81&1;
     do {
      if (!($82)) {
       $83 = (($77) + 12|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (($77) + 8|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $84;
       $88 = $86;
       $89 = (($87) - ($88))|0;
       $90 = $89 >> 2;
       $91 = ($90>>>0)>($80>>>0);
       if ($91) {
        $92 = (($86) + ($80<<2)|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($93|0)==(0|0);
        if (!($94)) {
         HEAP32[((8096 + 36|0))>>2] = $93;
         $98 = HEAP32[$93>>2]|0;
         $99 = (($98) + 24|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = (FUNCTION_TABLE_ii[$100 & 1023]($93)|0);
         HEAP32[((8096 + 44|0))>>2] = $101;
         $102 = HEAP32[((8096 + 36|0))>>2]|0;
         $103 = HEAP32[$102>>2]|0;
         $104 = (($103) + 28|0);
         $105 = HEAP32[$104>>2]|0;
         $106 = (FUNCTION_TABLE_ii[$105 & 1023]($102)|0);
         $107 = $106&1;
         HEAP8[((8096 + 53|0))>>0] = $107;
         $108 = HEAP32[((8096 + 44|0))>>2]|0;
         $109 = ($108|0)>(8);
         if ($109) {
          __THREW__ = 0;
          invoke_vi(557,(8464|0));
          $110 = __THREW__; __THREW__ = 0;
          $111 = $110&1;
          if ($111) {
           break;
          }
          // unreachable;
         }
         $112 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($112+-1)|0);
         $113 = ($112|0)==(0);
         if ($113) {
          $114 = HEAP32[$77>>2]|0;
          $115 = (($114) + 8|0);
          $116 = HEAP32[$115>>2]|0;
          FUNCTION_TABLE_vi[$116 & 1023]($77);
         }
         HEAP32[7536>>2] = ((9168 + 12|0));
         HEAP32[((7536 + 8|0))>>2] = ((9168 + 32|0));
         HEAP32[((7536 + 4|0))>>2] = 0;
         HEAP32[((7536 + 32|0))>>2] = 8096;
         HEAP32[((7536 + 24|0))>>2] = 0;
         HEAP32[((7536 + 28|0))>>2] = 0;
         HEAP32[((7536 + 12|0))>>2] = 4098;
         HEAP32[((7536 + 20|0))>>2] = 0;
         HEAP32[((7536 + 16|0))>>2] = 6;
         dest=((7536 + 40|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
         __ZNSt3__16localeC2Ev(((7536 + 36|0)));
         HEAP32[((7536 + 80|0))>>2] = 0;
         HEAP32[((7536 + 84|0))>>2] = -1;
         __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(8152,$55,((7952 + 32|0)));
         HEAP32[7624>>2] = ((9248 + 12|0));
         HEAP32[((7624 + 4|0))>>2] = ((9248 + 32|0));
         HEAP32[((7624 + 28|0))>>2] = 8152;
         HEAP32[((7624 + 20|0))>>2] = 0;
         HEAP32[((7624 + 24|0))>>2] = 0;
         HEAP32[((7624 + 8|0))>>2] = 4098;
         HEAP32[((7624 + 16|0))>>2] = 0;
         HEAP32[((7624 + 12|0))>>2] = 6;
         dest=((7624 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
         __ZNSt3__16localeC2Ev(((7624 + 32|0)));
         HEAP32[((7624 + 76|0))>>2] = 0;
         HEAP32[((7624 + 80|0))>>2] = -1;
         __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(8200,$56,((7952 + 40|0)));
         HEAP32[7712>>2] = ((9248 + 12|0));
         HEAP32[((7712 + 4|0))>>2] = ((9248 + 32|0));
         HEAP32[((7712 + 28|0))>>2] = 8200;
         HEAP32[((7712 + 20|0))>>2] = 0;
         HEAP32[((7712 + 24|0))>>2] = 0;
         HEAP32[((7712 + 8|0))>>2] = 4098;
         HEAP32[((7712 + 16|0))>>2] = 0;
         HEAP32[((7712 + 12|0))>>2] = 6;
         dest=((7712 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
         __ZNSt3__16localeC2Ev(((7712 + 32|0)));
         HEAP32[((7712 + 76|0))>>2] = 0;
         HEAP32[((7712 + 80|0))>>2] = -1;
         $131 = HEAP32[7712>>2]|0;
         $132 = (($131) + -12|0);
         $133 = HEAP32[$132>>2]|0;
         $$sum8$i = (($133) + 24)|0;
         $134 = (7712 + ($$sum8$i)|0);
         $135 = HEAP32[$134>>2]|0;
         HEAP32[7800>>2] = ((9248 + 12|0));
         HEAP32[((7800 + 4|0))>>2] = ((9248 + 32|0));
         HEAP32[((7800 + 28|0))>>2] = $135;
         $not$$i3$i = ($135|0)==(0|0);
         $136 = $not$$i3$i&1;
         HEAP32[((7800 + 20|0))>>2] = $136;
         HEAP32[((7800 + 24|0))>>2] = 0;
         HEAP32[((7800 + 8|0))>>2] = 4098;
         HEAP32[((7800 + 16|0))>>2] = 0;
         HEAP32[((7800 + 12|0))>>2] = 6;
         dest=((7800 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
         __ZNSt3__16localeC2Ev(((7800 + 32|0)));
         HEAP32[((7800 + 76|0))>>2] = 0;
         HEAP32[((7800 + 80|0))>>2] = -1;
         $137 = HEAP32[7536>>2]|0;
         $138 = (($137) + -12|0);
         $139 = HEAP32[$138>>2]|0;
         $$sum9$i = (($139) + 72)|0;
         $140 = (7536 + ($$sum9$i)|0);
         HEAP32[$140>>2] = 7624;
         $141 = HEAP32[7712>>2]|0;
         $142 = (($141) + -12|0);
         $143 = HEAP32[$142>>2]|0;
         $$sum10$i = (($143) + 4)|0;
         $144 = (7712 + ($$sum10$i)|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = $145 | 8192;
         HEAP32[$144>>2] = $146;
         $147 = HEAP32[7712>>2]|0;
         $148 = (($147) + -12|0);
         $149 = HEAP32[$148>>2]|0;
         $$sum11$i = (($149) + 72)|0;
         $150 = (7712 + ($$sum11$i)|0);
         HEAP32[$150>>2] = 7624;
         (___cxa_atexit((558|0),(7888|0),(___dso_handle|0))|0);
         STACKTOP = sp;return;
        }
       }
       $95 = (___cxa_allocate_exception(4)|0);
       HEAP32[$95>>2] = ((20400 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($95|0),(20480|0),(396|0));
       $96 = __THREW__; __THREW__ = 0;
       $97 = $96&1;
       if (!($97)) {
        // unreachable;
       }
      }
     } while(0);
     $117 = ___cxa_find_matching_catch()|0;
     $118 = tempRet0;
     $119 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($119+-1)|0);
     $120 = ($119|0)==(0);
     if ($120) {
      $121 = HEAP32[$77>>2]|0;
      $122 = (($121) + 8|0);
      $123 = HEAP32[$122>>2]|0;
      FUNCTION_TABLE_vi[$123 & 1023]($77);
     }
     HEAP32[8096>>2] = ((9064 + 8|0));
     $124 = HEAP32[((8096 + 4|0))>>2]|0;
     $125 = (($124) + 4|0);
     $126 = HEAP32[$125>>2]|0;HEAP32[$125>>2] = (($126+-1)|0);
     $127 = ($126|0)==(0);
     if (!($127)) {
      ___resumeException($117|0);
      // unreachable;
     }
     $128 = HEAP32[$124>>2]|0;
     $129 = (($128) + 8|0);
     $130 = HEAP32[$129>>2]|0;
     FUNCTION_TABLE_vi[$130 & 1023]($124);
     ___resumeException($117|0);
     // unreachable;
    }
   }
   $19 = (___cxa_allocate_exception(4)|0);
   HEAP32[$19>>2] = ((20400 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($19|0),(20480|0),(396|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    // unreachable;
   }
  }
 } while(0);
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $43 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($43+-1)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = HEAP32[$1>>2]|0;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_vi[$47 & 1023]($1);
 }
 HEAP32[7896>>2] = ((9000 + 8|0));
 $48 = HEAP32[((7896 + 4|0))>>2]|0;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;HEAP32[$49>>2] = (($50+-1)|0);
 $51 = ($50|0)==(0);
 if (!($51)) {
  ___resumeException($41|0);
  // unreachable;
 }
 $52 = HEAP32[$48>>2]|0;
 $53 = (($52) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 FUNCTION_TABLE_vi[$54 & 1023]($48);
 ___resumeException($41|0);
 // unreachable;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20176 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20176 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((20152 + 8|0));
 $1 = (($0) + 4|0);
 $2 = (_strlen((8984|0))|0);
 $3 = (($2) + 13)|0;
 __THREW__ = 0;
 $4 = (invoke_ii(559,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($11|0);
  // unreachable;
 } else {
  $7 = (($2) + 1)|0;
  $8 = (($4) + 4|0);
  HEAP32[$8>>2] = $2;
  HEAP32[$4>>2] = $2;
  $9 = (($4) + 12|0);
  HEAP32[$1>>2] = $9;
  $10 = (($4) + 8|0);
  HEAP32[$10>>2] = 0;
  _memcpy(($9|0),(8984|0),($7|0))|0;
  HEAP32[$0>>2] = ((20232 + 8|0));
  ___cxa_throw(($0|0),(20280|0),(389|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $15 = (0 - ($0))|0;
 $scevgep = (($__last) + ($15)|0);
 $scevgep3 = $scevgep;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $16 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $16;
  $17 = (($$02) + 1|0);
  $18 = (($__p$01) + 1|0);
  $19 = ($17|0)==($__last|0);
  if ($19) {
   break;
  } else {
   $$02 = $17;$__p$01 = $18;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($scevgep3)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = $1;$8 = 10;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i$i = (($5) + -1)|0;
  $6 = $4&255;
  $10 = $6;$8 = $phitmp$i$i;
 }
 $7 = ($8>>>0)<($0>>>0);
 $9 = $10 & 1;
 $11 = ($9<<24>>24)==(0);
 if ($7) {
  if ($11) {
   $25 = $10&255;
   $26 = $25 >>> 1;
   $28 = $26;
  } else {
   $23 = (($this) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $24;
  }
  $27 = (($0) - ($8))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$8,$27,$28,0,$28,$0,$__s);
  STACKTOP = sp;return;
 }
 if ($11) {
  $14 = (($this) + 1|0);
  $15 = $14;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 }
 _memmove(($15|0),($__s|0),($0|0))|0;
 $16 = (($15) + ($0)|0);
 HEAP8[$16>>0] = 0;
 $17 = HEAP8[$this>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = $0 << 1;
  $22 = $21&255;
  HEAP8[$this>>0] = $22;
  STACKTOP = sp;return;
 } else {
  $20 = (($this) + 4|0);
  HEAP32[$20>>2] = $0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if (!($7)) {
  if ($2) {
   $47 = ((($this) + ($__n)|0) + 1|0);
   HEAP8[$47>>0] = 0;
   $48 = $__n << 1;
   $49 = $48&255;
   HEAP8[$this>>0] = $49;
   STACKTOP = sp;return;
  } else {
   $43 = (($this) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($__n)|0);
   HEAP8[$45>>0] = 0;
   $46 = (($this) + 4|0);
   HEAP32[$46>>2] = $__n;
   STACKTOP = sp;return;
  }
 }
 $9 = (($__n) - ($8))|0;
 $10 = ($8|0)==($__n|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 if ($2) {
  $15 = $0;$22 = 10;
 } else {
  $11 = HEAP32[$this>>2]|0;
  $12 = $11 & -2;
  $phitmp$i$i = (($12) + -1)|0;
  $13 = $11&255;
  $15 = $13;$22 = $phitmp$i$i;
 }
 $14 = $15 & 1;
 $16 = ($14<<24>>24)==(0);
 if ($16) {
  $19 = $15&255;
  $20 = $19 >>> 1;
  $23 = $20;
 } else {
  $17 = (($this) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $23 = $18;
 }
 $21 = (($22) - ($23))|0;
 $24 = ($21>>>0)<($9>>>0);
 if ($24) {
  $25 = (($9) - ($22))|0;
  $26 = (($25) + ($23))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$22,$26,$23,$23,0);
  $$pre$i = HEAP8[$this>>0]|0;
  $28 = $$pre$i;
 } else {
  $28 = $15;
 }
 $27 = $28 & 1;
 $29 = ($27<<24>>24)==(0);
 if ($29) {
  $32 = (($this) + 1|0);
  $34 = $32;
 } else {
  $30 = (($this) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $34 = $31;
 }
 $33 = (($34) + ($23)|0);
 _memset(($33|0),0,($9|0))|0;
 $35 = (($23) + ($9))|0;
 $36 = HEAP8[$this>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $40 = $35 << 1;
  $41 = $40&255;
  HEAP8[$this>>0] = $41;
 } else {
  $39 = (($this) + 4|0);
  HEAP32[$39>>2] = $35;
 }
 $42 = (($34) + ($35)|0);
 HEAP8[$42>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$113 = 0, $__new_data$171420 = 0, $__now_long$0$off010 = 0, $__p$012 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $19 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $19 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = ($14>>>0)<(11);
 if ($13) {
  $18 = 10;
 } else {
  $15 = (($14) + 16)|0;
  $16 = $15 & -16;
  $phitmp$i2 = (($16) + -1)|0;
  $18 = $phitmp$i2;
 }
 $17 = ($18|0)==($19|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $20 = ($18|0)==(10);
 do {
  if ($20) {
   $31 = (($this) + 1|0);
   $32 = (($this) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   if ($8) {
    $34 = $7&255;
    $35 = $34 >>> 1;
    $36 = (($35) + 1)|0;
    _memcpy(($31|0),($33|0),($36|0))|0;
    _free($33);
    label = 21;
   } else {
    $__new_data$113 = $31;$__now_long$0$off010 = 0;$__p$012 = $33;
    label = 19;
   }
  } else {
   $21 = ($18>>>0)>($19>>>0);
   $22 = (($18) + 1)|0;
   if ($21) {
    $23 = (__Znwj($22)|0);
    $__new_data$0 = $23;
   } else {
    __THREW__ = 0;
    $24 = (invoke_ii(559,($22|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $27 = ___cxa_find_matching_catch(0|0)|0;
     $28 = tempRet0;
     (___cxa_begin_catch(($27|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $24;
    }
   }
   if ($8) {
    $37 = (($this) + 1|0);
    $38 = $7&255;
    $39 = $38 >>> 1;
    $40 = (($39) + 1)|0;
    _memcpy(($__new_data$0|0),($37|0),($40|0))|0;
    $__new_data$171420 = $__new_data$0;
    label = 20;
    break;
   } else {
    $29 = (($this) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $__new_data$113 = $__new_data$0;$__now_long$0$off010 = 1;$__p$012 = $30;
    label = 19;
    break;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $41 = (($this) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 1)|0;
  _memcpy(($__new_data$113|0),($__p$012|0),($43|0))|0;
  _free($__p$012);
  if ($__now_long$0$off010) {
   $__new_data$171420 = $__new_data$113;
   label = 20;
  } else {
   label = 21;
  }
 }
 if ((label|0) == 20) {
  $44 = (($18) + 1)|0;
  $45 = $44 | 1;
  HEAP32[$this>>2] = $45;
  $46 = (($this) + 4|0);
  HEAP32[$46>>2] = $14;
  $47 = (($this) + 8|0);
  HEAP32[$47>>2] = $__new_data$171420;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 21) {
  $48 = $14 << 1;
  $49 = $48&255;
  HEAP8[$this>>0] = $49;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $31 = (($__n) - ($14))|0;
  $32 = (($31) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$32,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return;
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 if ($8) {
  $20 = (($this) + 1|0);
  $22 = $20;
 } else {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $22 = $19;
 }
 $21 = (($22) + ($15)|0);
 _memcpy(($21|0),($__s|0),($__n|0))|0;
 $23 = (($15) + ($__n))|0;
 $24 = HEAP8[$this>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $28 = $23 << 1;
  $29 = $28&255;
  HEAP8[$this>>0] = $29;
 } else {
  $27 = (($this) + 4|0);
  HEAP32[$27>>2] = $23;
 }
 $30 = (($22) + ($23)|0);
 HEAP8[$30>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 _free($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__old_sz|0)==($__n_copy|0);
 if (!($20)) {
  $21 = (($__old_sz) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $22 = (($17) + ($$sum)|0);
  $23 = (($19) + ($__n_copy)|0);
  _memcpy(($22|0),($23|0),($21|0))|0;
 }
 $24 = ($__old_cap|0)==(10);
 if ($24) {
  $25 = (($this) + 8|0);
  HEAP32[$25>>2] = $17;
  $26 = $16 | 1;
  HEAP32[$this>>2] = $26;
  STACKTOP = sp;return;
 }
 _free($19);
 $25 = (($this) + 8|0);
 HEAP32[$25>>2] = $17;
 $26 = $16 | 1;
 HEAP32[$this>>2] = $26;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $$014$i = 0, $$023$i = 0, $$05$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 $12 = ($__sz|0)==(0);
 if ($12) {
  $18 = (($__p$0) + ($__sz<<2)|0);
  HEAP32[$18>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $$014$i = $__sz;$$023$i = $__s;$$05$i = $__p$0;
 }
 while(1) {
  $13 = (($$014$i) + -1)|0;
  $14 = (($$023$i) + 4|0);
  $15 = HEAP32[$$023$i>>2]|0;
  $16 = (($$05$i) + 4|0);
  HEAP32[$$05$i>>2] = $15;
  $17 = ($13|0)==(0);
  if ($17) {
   break;
  } else {
   $$014$i = $13;$$023$i = $14;$$05$i = $16;
  }
 }
 $18 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$18>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$012$i = 0, $$03$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 $12 = ($__n|0)==(0);
 if ($12) {
  $16 = (($__p$0) + ($__n<<2)|0);
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $$012$i = $__n;$$03$i = $__p$0;
 }
 while(1) {
  $13 = (($$012$i) + -1)|0;
  $14 = (($$03$i) + 4|0);
  HEAP32[$$03$i>>2] = $__c;
  $15 = ($13|0)==(0);
  if ($15) {
   break;
  } else {
   $$012$i = $13;$$03$i = $14;
  }
 }
 $16 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $17 = (0 - ($0))|0;
 $uglygep = (($scevgep) + ($17)|0);
 $uglygep4 = $uglygep;
 $18 = $uglygep4 >>> 2;
 $19 = (($18) + 1)|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $20 = HEAP32[$$02>>2]|0;
  HEAP32[$__p$01>>2] = $20;
  $21 = (($$02) + 4|0);
  $22 = (($__p$01) + 4|0);
  $23 = ($21|0)==($__last|0);
  if ($23) {
   break;
  } else {
   $$02 = $21;$__p$01 = $22;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($19<<2)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $$0$i = 0, $$014$i$i$i = 0, $$023$i$i$i = 0, $$025$i$i = 0, $$05$i$i$i = 0, $$07$i$i = 0, $$16$i$i = 0, $$in$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $__s;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = $__s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = HEAP8[$this>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = 1;$16 = $7;
 } else {
  $10 = HEAP32[$this>>2]|0;
  $11 = $10 & -2;
  $phitmp$i$i = (($11) + -1)|0;
  $12 = $10&255;
  $14 = $phitmp$i$i;$16 = $12;
 }
 $13 = ($14>>>0)<($6>>>0);
 if (!($13)) {
  $15 = $16 & 1;
  $17 = ($15<<24>>24)==(0);
  if ($17) {
   $20 = (($this) + 4|0);
   $22 = $20;
  } else {
   $18 = (($this) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $22 = $19;
  }
  $21 = $22;
  $23 = (($21) - ($4))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)<($6>>>0);
  $26 = ($6|0)==(0);
  if ($25) {
   if (!($26)) {
    $$in$i$i = $6;
    while(1) {
     $27 = (($$in$i$i) + -1)|0;
     $28 = (($__s) + ($27<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($22) + ($27<<2)|0);
     HEAP32[$30>>2] = $29;
     $31 = ($27|0)==(0);
     if ($31) {
      break;
     } else {
      $$in$i$i = $27;
     }
    }
   }
  } else {
   if (!($26)) {
    $$025$i$i = $__s;$$07$i$i = $22;$$16$i$i = $6;
    while(1) {
     $32 = (($$16$i$i) + -1)|0;
     $33 = (($$025$i$i) + 4|0);
     $34 = HEAP32[$$025$i$i>>2]|0;
     $35 = (($$07$i$i) + 4|0);
     HEAP32[$$07$i$i>>2] = $34;
     $36 = ($32|0)==(0);
     if ($36) {
      break;
     } else {
      $$025$i$i = $33;$$07$i$i = $35;$$16$i$i = $32;
     }
    }
   }
  }
  $37 = (($22) + ($6<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = HEAP8[$this>>0]|0;
  $39 = $38 & 1;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   $42 = $5 >>> 1;
   $43 = $42&255;
   HEAP8[$this>>0] = $43;
   STACKTOP = sp;return;
  } else {
   $41 = (($this) + 4|0);
   HEAP32[$41>>2] = $6;
   STACKTOP = sp;return;
  }
 }
 $44 = (($6) - ($14))|0;
 $45 = (1073741806 - ($14))|0;
 $46 = ($45>>>0)<($44>>>0);
 if ($46) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $47 = $16 & 1;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $51 = (($this) + 4|0);
  $69 = $51;
 } else {
  $49 = (($this) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $69 = $50;
 }
 $52 = ($14>>>0)<(536870887);
 if ($52) {
  $53 = $14 << 1;
  $54 = ($6>>>0)<($53>>>0);
  $55 = $54 ? $53 : $6;
  $56 = ($55>>>0)<(2);
  if ($56) {
   $60 = 2;
  } else {
   $57 = (($55) + 4)|0;
   $58 = $57 & -4;
   $60 = $58;
  }
 } else {
  $60 = 1073741807;
 }
 $59 = $60 << 2;
 $61 = (__Znwj($59)|0);
 $62 = ($6|0)==(0);
 if (!($62)) {
  $$014$i$i$i = $6;$$023$i$i$i = $__s;$$05$i$i$i = $61;
  while(1) {
   $63 = (($$014$i$i$i) + -1)|0;
   $64 = (($$023$i$i$i) + 4|0);
   $65 = HEAP32[$$023$i$i$i>>2]|0;
   $66 = (($$05$i$i$i) + 4|0);
   HEAP32[$$05$i$i$i>>2] = $65;
   $67 = ($63|0)==(0);
   if ($67) {
    break;
   } else {
    $$014$i$i$i = $63;$$023$i$i$i = $64;$$05$i$i$i = $66;
   }
  }
 }
 $68 = ($14|0)==(1);
 if (!($68)) {
  _free($69);
 }
 $70 = (($this) + 8|0);
 HEAP32[$70>>2] = $61;
 $71 = $60 | 1;
 HEAP32[$this>>2] = $71;
 $72 = (($this) + 4|0);
 HEAP32[$72>>2] = $6;
 $73 = (($61) + ($6<<2)|0);
 HEAP32[$73>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this) {
 $this = $this|0;
 var $$014$i = 0, $$023$i = 0, $$05$i = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$113 = 0, $__new_data$17 = 0;
 var $__new_data$18 = 0, $__now_long$0$off01 = 0, $__now_long$0$off010 = 0, $__now_long$0$off02 = 0, $__p$012 = 0, $__p$05 = 0, $__p$06 = 0, $__was_long$0$off011 = 0, $__was_long$0$off03 = 0, $__was_long$0$off04 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $19 = 1;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $19 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = ($14>>>0)<(2);
 if ($13) {
  $18 = 1;
 } else {
  $15 = (($14) + 4)|0;
  $16 = $15 & -4;
  $phitmp$i2 = (($16) + -1)|0;
  $18 = $phitmp$i2;
 }
 $17 = ($18|0)==($19|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $20 = ($18|0)==(1);
 do {
  if ($20) {
   $33 = (($this) + 4|0);
   $34 = (($this) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   if ($8) {
    $__new_data$18 = $33;$__now_long$0$off02 = 0;$__p$06 = $35;$__was_long$0$off04 = 1;
    label = 19;
   } else {
    $__new_data$113 = $33;$__now_long$0$off010 = 0;$__p$012 = $35;$__was_long$0$off011 = 1;
    label = 18;
   }
  } else {
   $21 = ($18>>>0)>($19>>>0);
   $22 = $18 << 2;
   $23 = (($22) + 4)|0;
   if ($21) {
    $24 = (__Znwj($23)|0);
    $$sink = $24;
   } else {
    __THREW__ = 0;
    $25 = (invoke_ii(559,($23|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(0|0)|0;
     $29 = tempRet0;
     (___cxa_begin_catch(($28|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $25;
    }
   }
   if ($8) {
    $32 = (($this) + 4|0);
    $__new_data$18 = $$sink;$__now_long$0$off02 = 1;$__p$06 = $32;$__was_long$0$off04 = 0;
    label = 19;
    break;
   } else {
    $30 = (($this) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $__new_data$113 = $$sink;$__now_long$0$off010 = 1;$__p$012 = $31;$__was_long$0$off011 = 1;
    label = 18;
    break;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $36 = (($this) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $41 = $37;$__new_data$17 = $__new_data$113;$__now_long$0$off01 = $__now_long$0$off010;$__p$05 = $__p$012;$__was_long$0$off03 = $__was_long$0$off011;
 }
 else if ((label|0) == 19) {
  $38 = $7&255;
  $39 = $38 >>> 1;
  $41 = $39;$__new_data$17 = $__new_data$18;$__now_long$0$off01 = $__now_long$0$off02;$__p$05 = $__p$06;$__was_long$0$off03 = $__was_long$0$off04;
 }
 $40 = (($41) + 1)|0;
 $42 = ($40|0)==(0);
 if (!($42)) {
  $$014$i = $40;$$023$i = $__p$05;$$05$i = $__new_data$17;
  while(1) {
   $43 = (($$014$i) + -1)|0;
   $44 = (($$023$i) + 4|0);
   $45 = HEAP32[$$023$i>>2]|0;
   $46 = (($$05$i) + 4|0);
   HEAP32[$$05$i>>2] = $45;
   $47 = ($43|0)==(0);
   if ($47) {
    break;
   } else {
    $$014$i = $43;$$023$i = $44;$$05$i = $46;
   }
  }
 }
 if ($__was_long$0$off03) {
  _free($__p$05);
 }
 if ($__now_long$0$off01) {
  $48 = (($18) + 1)|0;
  $49 = $48 | 1;
  HEAP32[$this>>2] = $49;
  $50 = (($this) + 4|0);
  HEAP32[$50>>2] = $14;
  $51 = (($this) + 8|0);
  HEAP32[$51>>2] = $__new_data$17;
  STACKTOP = sp;return;
 } else {
  $52 = $14 << 1;
  $53 = $52&255;
  HEAP8[$this>>0] = $53;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$014$i = 0, $$014$i2 = 0, $$023$i = 0, $$023$i3 = 0, $$05$i = 0, $$05$i1 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $28 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $28 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  $$014$i = $__n_copy;$$023$i = $28;$$05$i = $18;
  while(1) {
   $20 = (($$014$i) + -1)|0;
   $21 = (($$023$i) + 4|0);
   $22 = HEAP32[$$023$i>>2]|0;
   $23 = (($$05$i) + 4|0);
   HEAP32[$$05$i>>2] = $22;
   $24 = ($20|0)==(0);
   if ($24) {
    break;
   } else {
    $$014$i = $20;$$023$i = $21;$$05$i = $23;
   }
  }
 }
 $25 = (($__old_sz) - ($__n_del))|0;
 $26 = ($25|0)==($__n_copy|0);
 if (!($26)) {
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $27 = (($28) + ($$sum1<<2)|0);
  $29 = (($18) + ($$sum<<2)|0);
  $30 = (($25) - ($__n_copy))|0;
  $$014$i2 = $30;$$023$i3 = $27;$$05$i1 = $29;
  while(1) {
   $31 = (($$014$i2) + -1)|0;
   $32 = (($$023$i3) + 4|0);
   $33 = HEAP32[$$023$i3>>2]|0;
   $34 = (($$05$i1) + 4|0);
   HEAP32[$$05$i1>>2] = $33;
   $35 = ($31|0)==(0);
   if ($35) {
    break;
   } else {
    $$014$i2 = $31;$$023$i3 = $32;$$05$i1 = $34;
   }
  }
 }
 $36 = ($__old_cap|0)==(1);
 if ($36) {
  $37 = (($this) + 8|0);
  HEAP32[$37>>2] = $18;
  $38 = $17 | 1;
  HEAP32[$this>>2] = $38;
  STACKTOP = sp;return;
 }
 _free($28);
 $37 = (($this) + 8|0);
 HEAP32[$37>>2] = $18;
 $38 = $17 | 1;
 HEAP32[$this>>2] = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$0$i$i = 0, $$01$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$i$i$index3Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$index9Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = sp;
 $2 = sp + 12|0;
 $3 = (($this) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = $state | 1;
  $8 = (($this) + 16|0);
  HEAP32[$8>>2] = $7;
 } else {
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $state;
 }
 $9 = $5&1;
 $10 = $9 | $state;
 $11 = (($this) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10 & $12;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (___cxa_allocate_exception(16)|0);
 $16 = HEAP8[9352>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $18 = (___cxa_guard_acquire((9352|0))|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   HEAP32[9344>>2] = ((10040 + 8|0));
   ___cxa_guard_release((9352|0));
  }
 }
 __THREW__ = 0;
 invoke_viii(560,($2|0),(9400|0),15);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $104 = ___cxa_find_matching_catch()|0;
  $105 = tempRet0;
  $eh$lpad$body$index9Z2D = $105;$eh$lpad$body$indexZ2D = $104;
  ___cxa_free_exception(($15|0));
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 $22 = HEAP8[$2>>0]|0;
 $23 = $22 & 1;
 $24 = ($23<<24>>24)==(0);
 if ($24) {
  $27 = $22&255;
  $28 = $27 >>> 1;
  $30 = $28;
 } else {
  $25 = (($2) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $30 = $26;
 }
 $29 = ($30|0)==(0);
 if ($29) {
  label = 14;
 } else {
  __THREW__ = 0;
  invoke_viii(561,($2|0),(8760|0),2);
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if ($32) {
   label = 32;
  } else {
   label = 14;
  }
 }
 do {
  if ((label|0) == 14) {
   $33 = HEAP32[9344>>2]|0;
   $34 = (($33) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   __THREW__ = 0;
   invoke_viii($35|0,($0|0),(9344|0),1);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    label = 32;
   } else {
    $38 = HEAP8[$0>>0]|0;
    $39 = $38 & 1;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $45 = (($0) + 1|0);
     $46 = $38&255;
     $47 = $46 >>> 1;
     $48 = $45;$49 = $47;
    } else {
     $41 = (($0) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($0) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $48 = $42;$49 = $44;
    }
    __THREW__ = 0;
    invoke_viii(561,($2|0),($48|0),($49|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $57 = ___cxa_find_matching_catch()|0;
     $58 = tempRet0;
     $59 = HEAP8[$0>>0]|0;
     $60 = $59 & 1;
     $61 = ($60<<24>>24)==(0);
     if ($61) {
      $eh$lpad$body$i$i$index3Z2D = $58;$eh$lpad$body$i$i$indexZ2D = $57;
      label = 33;
      break;
     }
     $62 = (($0) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     _free($63);
     $eh$lpad$body$i$i$index3Z2D = $58;$eh$lpad$body$i$i$indexZ2D = $57;
     label = 33;
     break;
    }
    $52 = HEAP8[$0>>0]|0;
    $53 = $52 & 1;
    $54 = ($53<<24>>24)==(0);
    if (!($54)) {
     $55 = (($0) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     _free($56);
    }
    ;HEAP32[$1+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2+8>>2]|0;
    ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
    HEAP32[$15>>2] = ((20176 + 8|0));
    $64 = (($15) + 4|0);
    $65 = HEAP8[$1>>0]|0;
    $66 = $65 & 1;
    $67 = ($66<<24>>24)==(0);
    if ($67) {
     $70 = (($1) + 1|0);
     $71 = $70;
    } else {
     $68 = (($1) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $71 = $69;
    }
    $72 = (_strlen(($71|0))|0);
    $73 = (($72) + 13)|0;
    __THREW__ = 0;
    $74 = (invoke_ii(559,($73|0))|0);
    $75 = __THREW__; __THREW__ = 0;
    $76 = $75&1;
    if ($76) {
     $77 = ___cxa_find_matching_catch()|0;
     $78 = tempRet0;
     if ($67) {
      $$0$i$i = $78;$$01$i$i = $77;
      break;
     }
     $92 = (($1) + 8|0);
     $93 = HEAP32[$92>>2]|0;
     _free($93);
     $$0$i$i = $78;$$01$i$i = $77;
     break;
    }
    $79 = (($72) + 1)|0;
    $80 = (($74) + 4|0);
    HEAP32[$80>>2] = $72;
    HEAP32[$74>>2] = $72;
    $81 = (($74) + 12|0);
    HEAP32[$64>>2] = $81;
    $82 = (($74) + 8|0);
    HEAP32[$82>>2] = 0;
    _memcpy(($81|0),($71|0),($79|0))|0;
    if (!($67)) {
     $83 = (($1) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     _free($84);
    }
    $85 = HEAP8[$2>>0]|0;
    $86 = $85 & 1;
    $87 = ($86<<24>>24)==(0);
    if ($87) {
     HEAP32[$15>>2] = ((8768 + 8|0));
     $99 = (($15) + 8|0);
     $100 = $99;
     $101 = $100;
     HEAP32[$101>>2] = 1;
     $102 = (($100) + 4)|0;
     $103 = $102;
     HEAP32[$103>>2] = (9344);
     HEAP32[$15>>2] = ((9360 + 8|0));
     ___cxa_throw(($15|0),(9448|0),(133|0));
     // unreachable;
    }
    $88 = (($2) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    _free($89);
    HEAP32[$15>>2] = ((8768 + 8|0));
    $99 = (($15) + 8|0);
    $100 = $99;
    $101 = $100;
    HEAP32[$101>>2] = 1;
    $102 = (($100) + 4)|0;
    $103 = $102;
    HEAP32[$103>>2] = (9344);
    HEAP32[$15>>2] = ((9360 + 8|0));
    ___cxa_throw(($15|0),(9448|0),(133|0));
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $eh$lpad$body$i$i$index3Z2D = $91;$eh$lpad$body$i$i$indexZ2D = $90;
  label = 33;
 }
 if ((label|0) == 33) {
  $$0$i$i = $eh$lpad$body$i$i$index3Z2D;$$01$i$i = $eh$lpad$body$i$i$indexZ2D;
 }
 $94 = HEAP8[$2>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if (!($96)) {
  $97 = (($2) + 8|0);
  $98 = HEAP32[$97>>2]|0;
  _free($98);
 }
 $eh$lpad$body$index9Z2D = $$0$i$i;$eh$lpad$body$indexZ2D = $$01$i$i;
 ___cxa_free_exception(($15|0));
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9384 + 8|0));
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if (!($2)) {
   $3 = (($this) + 32|0);
   $4 = (($this) + 36|0);
   $i$01$i = $1;
   while(1) {
    $5 = (($i$01$i) + -1)|0;
    $6 = HEAP32[$3>>2]|0;
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($5<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    invoke_viii($8|0,0,($this|0),($11|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     break;
    }
    $14 = ($5|0)==(0);
    if ($14) {
     break L1;
    } else {
     $i$01$i = $5;
    }
   }
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   ___clang_call_terminate($31);
   // unreachable;
  }
 } while(0);
 $15 = (($this) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+-1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$16>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($16);
 }
 $23 = (($this) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = (($this) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 _free($26);
 $27 = (($this) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 $29 = (($this) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 _free($30);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9000 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9000 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9064 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9064 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(562,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(425,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return;
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $$sum3 = (($37) + 16)|0;
 $38 = (($this) + ($$sum3)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 | 1;
 HEAP32[$38>>2] = $40;
 $$sum4 = (($37) + 20)|0;
 $41 = (($this) + ($$sum4)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 1;
 $44 = ($43|0)==(0);
 if ($44) {
  ___cxa_end_catch();
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_v(426);
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if (!($46)) {
  // unreachable;
 }
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 __THREW__ = 0;
 invoke_v(427);
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $51 = ___cxa_find_matching_catch(0|0)|0;
  $52 = tempRet0;
  ___clang_call_terminate($51);
  // unreachable;
 } else {
  ___resumeException($47|0);
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($__n) {
 $__n = $__n|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$byval_copy = 0, $$byval_copy28 = 0, $$phi$trans$insert = 0, $$phi$trans$insert15 = 0, $$phi$trans$insert17 = 0, $$pre = 0, $$pre14 = 0, $$pre16 = 0, $$pre18 = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum10 = 0, $$sum11 = 0, $$sum13$i = 0, $$sum14$i = 0;
 var $$sum15$i = 0, $$sum16$i = 0, $$sum17$i = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__err = 0, $__temp = 0, $eh$lpad$body$indexZ2D = 0, $isascii1$i$i = 0, $phitmp = 0, $sext$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy28 = sp + 24|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $__err = sp + 12|0;
 $__temp = sp + 16|0;
 $2 = sp + 20|0;
 $3 = HEAP32[7184>>2]|0;
 $4 = (($3) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum$i = (($5) + 16)|0;
 $6 = (7184 + ($$sum$i)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $$sum13$i = (($5) + 72)|0;
   $9 = (7184 + ($$sum13$i)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $14 = $5;
   } else {
    __THREW__ = 0;
    invoke_vi(424,($10|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 38;
     break;
    }
    $$pre = HEAP32[7184>>2]|0;
    $$phi$trans$insert = (($$pre) + -12|0);
    $$pre14 = HEAP32[$$phi$trans$insert>>2]|0;
    $14 = $$pre14;
   }
   $$sum14$i = (($14) + 4)|0;
   $15 = (7184 + ($$sum14$i)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 4096;
   $18 = ($17|0)==(0);
   do {
    if (!($18)) {
     $$sum15$i = (($14) + 28)|0;
     $19 = (7184 + ($$sum15$i)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + 4|0);
     $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+1)|0);
     __THREW__ = 0;
     $23 = (invoke_iii(556,($20|0),(11752|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $73 = ___cxa_find_matching_catch(0|0)|0;
      $74 = tempRet0;
      $75 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($75+-1)|0);
      $76 = ($75|0)==(0);
      if (!($76)) {
       $eh$lpad$body$indexZ2D = $73;
       label = 39;
       break L1;
      }
      $77 = HEAP32[$20>>2]|0;
      $78 = (($77) + 8|0);
      $79 = HEAP32[$78>>2]|0;
      FUNCTION_TABLE_vi[$79 & 1023]($20);
      $eh$lpad$body$indexZ2D = $73;
      label = 39;
      break L1;
     }
     $26 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($26+-1)|0);
     $27 = ($26|0)==(0);
     if ($27) {
      $28 = HEAP32[$20>>2]|0;
      $29 = (($28) + 8|0);
      $30 = HEAP32[$29>>2]|0;
      FUNCTION_TABLE_vi[$30 & 1023]($20);
     }
     $31 = HEAP32[7184>>2]|0;
     $32 = (($31) + -12|0);
     $33 = HEAP32[$32>>2]|0;
     $$sum$i$i$i = (($33) + 24)|0;
     $34 = (7184 + ($$sum$i$i$i)|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (($23) + 8|0);
     $38 = $35;
     while(1) {
      $37 = ($38|0)==(0|0);
      if ($37) {
       break;
      }
      $39 = (($38) + 12|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($38) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)==($42|0);
      if ($43) {
       $44 = HEAP32[$38>>2]|0;
       $45 = (($44) + 36|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_ii($46|0,($38|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 37;
        break;
       }
       $50 = ($47|0)==(-1);
       $$$i = $50 ? 0 : $38;
       $51 = ($$$i|0)==(0|0);
       if ($51) {
        break;
       }
       $$phi$trans$insert15 = (($$$i) + 12|0);
       $$pre16 = HEAP32[$$phi$trans$insert15>>2]|0;
       $$phi$trans$insert17 = (($$$i) + 16|0);
       $$pre18 = HEAP32[$$phi$trans$insert17>>2]|0;
       $53 = $$$i;$56 = $$pre16;$57 = $$pre18;
      } else {
       $53 = $38;$56 = $40;$57 = $42;
      }
      $52 = (($53) + 12|0);
      $54 = (($53) + 16|0);
      $55 = ($56|0)==($57|0);
      if ($55) {
       $58 = HEAP32[$53>>2]|0;
       $59 = (($58) + 36|0);
       $60 = HEAP32[$59>>2]|0;
       __THREW__ = 0;
       $61 = (invoke_ii($60|0,($53|0))|0);
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        label = 37;
        break;
       } else {
        $$0$i$i$i = $61;
       }
      } else {
       $64 = HEAP8[$56>>0]|0;
       $65 = $64&255;
       $$0$i$i$i = $65;
      }
      $66 = $$0$i$i$i&255;
      $isascii1$i$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i$i)) {
       label = 25;
       break;
      }
      $sext$i = $$0$i$i$i << 24;
      $67 = $sext$i >> 24;
      $68 = HEAP32[$36>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 8192;
      $72 = ($71<<16>>16)==(0);
      if ($72) {
       label = 25;
       break;
      }
      $80 = HEAP32[$52>>2]|0;
      $81 = HEAP32[$54>>2]|0;
      $82 = ($80|0)==($81|0);
      if ($82) {
       $83 = HEAP32[$53>>2]|0;
       $84 = (($83) + 40|0);
       $85 = HEAP32[$84>>2]|0;
       __THREW__ = 0;
       (invoke_ii($85|0,($53|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        label = 37;
        break;
       } else {
        $38 = $53;
        continue;
       }
      } else {
       $88 = (($80) + 1|0);
       HEAP32[$52>>2] = $88;
       $38 = $53;
       continue;
      }
     }
     if ((label|0) == 37) {
      $155 = ___cxa_find_matching_catch(0|0)|0;
      $156 = tempRet0;
      $eh$lpad$body$indexZ2D = $155;
      label = 39;
      break L1;
     }
     if ((label|0) == 25) {
      $89 = ($53|0)==(0|0);
      if (!($89)) {
       $90 = HEAP32[$52>>2]|0;
       $91 = HEAP32[$54>>2]|0;
       $92 = ($90|0)==($91|0);
       if (!($92)) {
        break;
       }
       $93 = HEAP32[$53>>2]|0;
       $94 = (($93) + 36|0);
       $95 = HEAP32[$94>>2]|0;
       __THREW__ = 0;
       $96 = (invoke_ii($95|0,($53|0))|0);
       $97 = __THREW__; __THREW__ = 0;
       $98 = $97&1;
       if ($98) {
        label = 38;
        break L1;
       }
       $99 = ($96|0)==(-1);
       if (!($99)) {
        break;
       }
      }
     }
     $100 = HEAP32[7184>>2]|0;
     $101 = (($100) + -12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (7184 + ($102)|0);
     $$sum17$i = (($102) + 16)|0;
     $104 = (7184 + ($$sum17$i)|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105 | 6;
     __THREW__ = 0;
     invoke_vii(425,($103|0),($106|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 38;
      break L1;
     }
    }
   } while(0);
   $113 = HEAP32[7184>>2]|0;
   $114 = (($113) + -12|0);
   $115 = HEAP32[$114>>2]|0;
   $$sum16$i = (($115) + 16)|0;
   $116 = (7184 + ($$sum16$i)|0);
   $117 = HEAP32[$116>>2]|0;
   $phitmp = ($117|0)!=(0);
   if ($phitmp) {
    STACKTOP = sp;return;
   }
   HEAP32[$__err>>2] = 0;
   $118 = HEAP32[7184>>2]|0;
   $119 = (($118) + -12|0);
   $120 = HEAP32[$119>>2]|0;
   $$sum = (($120) + 28)|0;
   $121 = (7184 + ($$sum)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + 4|0);
   $124 = HEAP32[$123>>2]|0;HEAP32[$123>>2] = (($124+1)|0);
   __THREW__ = 0;
   $125 = (invoke_iii(556,($122|0),(10272|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = HEAP32[7184>>2]|0;
    $129 = (($128) + -12|0);
    $130 = HEAP32[$129>>2]|0;
    $$sum$i$i = (($130) + 24)|0;
    $131 = (7184 + ($$sum$i$i)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (7184 + ($130)|0);
    $134 = HEAP32[$125>>2]|0;
    $135 = (($134) + 16|0);
    $136 = HEAP32[$135>>2]|0;
    HEAP32[$0>>2] = $132;
    HEAP32[$1>>2] = 0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$1+0>>2]|0;
    invoke_viiiiiii($136|0,($2|0),($125|0),($$byval_copy|0),($$byval_copy28|0),($133|0),($__err|0),($__temp|0));
    $137 = __THREW__; __THREW__ = 0;
    $138 = $137&1;
    if (!($138)) {
     $139 = HEAP32[$123>>2]|0;HEAP32[$123>>2] = (($139+-1)|0);
     $140 = ($139|0)==(0);
     if ($140) {
      $141 = HEAP32[$122>>2]|0;
      $142 = (($141) + 8|0);
      $143 = HEAP32[$142>>2]|0;
      FUNCTION_TABLE_vi[$143 & 1023]($122);
     }
     $144 = HEAP32[$__temp>>2]|0;
     HEAP32[$__n>>2] = $144;
     $145 = HEAP32[7184>>2]|0;
     $146 = (($145) + -12|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (7184 + ($147)|0);
     $149 = HEAP32[$__err>>2]|0;
     $$sum7 = (($147) + 16)|0;
     $150 = (7184 + ($$sum7)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = $151 | $149;
     __THREW__ = 0;
     invoke_vii(425,($148|0),($152|0));
     $153 = __THREW__; __THREW__ = 0;
     $154 = $153&1;
     if ($154) {
      label = 38;
      break;
     }
     STACKTOP = sp;return;
    }
   }
   $159 = ___cxa_find_matching_catch(0|0)|0;
   $160 = tempRet0;
   $161 = HEAP32[$123>>2]|0;HEAP32[$123>>2] = (($161+-1)|0);
   $162 = ($161|0)==(0);
   if ($162) {
    $163 = HEAP32[$122>>2]|0;
    $164 = (($163) + 8|0);
    $165 = HEAP32[$164>>2]|0;
    FUNCTION_TABLE_vi[$165 & 1023]($122);
    $$0 = $159;
   } else {
    $$0 = $159;
   }
  } else {
   $109 = (7184 + ($5)|0);
   $110 = $7 | 4;
   __THREW__ = 0;
   invoke_vii(425,($109|0),($110|0));
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   if ($112) {
    label = 38;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $157 = ___cxa_find_matching_catch(0|0)|0;
  $158 = tempRet0;
  $eh$lpad$body$indexZ2D = $157;
  label = 39;
 }
 if ((label|0) == 39) {
  $$0 = $eh$lpad$body$indexZ2D;
 }
 (___cxa_begin_catch(($$0|0))|0);
 $166 = HEAP32[7184>>2]|0;
 $167 = (($166) + -12|0);
 $168 = HEAP32[$167>>2]|0;
 $$sum10 = (($168) + 16)|0;
 $169 = (7184 + ($$sum10)|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 | 1;
 HEAP32[$169>>2] = $171;
 $$sum11 = (($168) + 20)|0;
 $172 = (7184 + ($$sum11)|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $173 & 1;
 $175 = ($174|0)==(0);
 if ($175) {
  ___cxa_end_catch();
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_v(426);
 $176 = __THREW__; __THREW__ = 0;
 $177 = $176&1;
 if (!($177)) {
  // unreachable;
 }
 $178 = ___cxa_find_matching_catch()|0;
 $179 = tempRet0;
 __THREW__ = 0;
 invoke_v(427);
 $180 = __THREW__; __THREW__ = 0;
 $181 = $180&1;
 if ($181) {
  $182 = ___cxa_find_matching_catch(0|0)|0;
  $183 = tempRet0;
  ___clang_call_terminate($182);
  // unreachable;
 } else {
  ___resumeException($178|0);
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum$i = 0, $$sum1 = 0, $$sum1$i = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP8[$__s>>0] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum$i = (($2) + 16)|0;
 $7 = (($this) + ($$sum$i)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum1$i = (($2) + 72)|0;
   $10 = (($this) + ($$sum1$i)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 5;
   } else {
    __THREW__ = 0;
    invoke_vi(555,($11|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $36 = ___cxa_find_matching_catch(0|0)|0;
     $37 = tempRet0;
     $$0 = $36;
    } else {
     label = 5;
    }
   }
   if ((label|0) == 5) {
    HEAP8[$__s>>0] = 1;
    $15 = HEAP32[$this>>2]|0;
    $16 = (($15) + -12|0);
    $17 = HEAP32[$16>>2]|0;
    $$sum1 = (($17) + 24)|0;
    $18 = (($this) + ($$sum1)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    __THREW__ = 0;
    $23 = (invoke_ii($22|0,($19|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     $26 = ($23|0)==(-1);
     if (!($26)) {
      break;
     }
     $27 = HEAP32[$this>>2]|0;
     $28 = (($27) + -12|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($this) + ($29)|0);
     $$sum2 = (($29) + 16)|0;
     $31 = (($this) + ($$sum2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $32 | 1;
     __THREW__ = 0;
     invoke_vii(425,($30|0),($33|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      break;
     }
    }
    $38 = ___cxa_find_matching_catch(0|0)|0;
    $39 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    $$0 = $38;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $40 = HEAP32[$this>>2]|0;
   $41 = (($40) + -12|0);
   $42 = HEAP32[$41>>2]|0;
   $$sum3 = (($42) + 16)|0;
   $43 = (($this) + ($$sum3)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | 1;
   HEAP32[$43>>2] = $45;
   $$sum4 = (($42) + 20)|0;
   $46 = (($this) + ($$sum4)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & 1;
   $49 = ($48|0)==(0);
   if ($49) {
    ___cxa_end_catch();
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_v(426);
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    // unreachable;
   }
   $52 = ___cxa_find_matching_catch()|0;
   $53 = tempRet0;
   __THREW__ = 0;
   invoke_v(427);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $56 = ___cxa_find_matching_catch(0|0)|0;
    $57 = tempRet0;
    ___clang_call_terminate($56);
    // unreachable;
   } else {
    ___resumeException($52|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(425,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(427);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(425,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(427);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (9288|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($ev|0)==(1);
 if ($0) {
  $3 = (__Znwj(48)|0);
  $4 = (($agg$result) + 8|0);
  HEAP32[$4>>2] = $3;
  HEAP32[$agg$result>>2] = 49;
  $5 = (($agg$result) + 4|0);
  HEAP32[$5>>2] = 35;
  dest=$3+0|0; src=9304+0|0; stop=dest+35|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $6 = (($3) + 35|0);
  HEAP8[$6>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $1 = (_strerror(($ev|0))|0);
  $2 = (_strlen(($1|0))|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$1,$2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20176 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20176 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy11 = sp + 48|0;
 $$byval_copy = sp;
 $__lv = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 $2 = sp + 16|0;
 $__names = sp + 24|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$__lv>>2] = -1;
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $10;
  $11 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $11;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$9 & 1023]($0,$this,$$byval_copy,$$byval_copy11,$__iob,$__err,$__lv);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $12;
  $13 = HEAP32[$__lv>>2]|0;
  if ((($13|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($13|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $12;
  STACKTOP = sp;return;
 }
 $14 = (($__iob) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17+1)|0);
 __THREW__ = 0;
 $18 = (invoke_iii(556,($15|0),(11752|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $68 = ___cxa_find_matching_catch()|0;
  $69 = tempRet0;
  $70 = (($15) + 4|0);
  $71 = HEAP32[$70>>2]|0;HEAP32[$70>>2] = (($71+-1)|0);
  $72 = ($71|0)==(0);
  if (!($72)) {
   $$0 = $68;$$01 = $69;
   ___resumeException($$0|0);
   // unreachable;
  }
  $73 = HEAP32[$15>>2]|0;
  $74 = (($73) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  FUNCTION_TABLE_vi[$75 & 1023]($15);
  $$0 = $68;$$01 = $69;
  ___resumeException($$0|0);
  // unreachable;
 }
 $21 = (($15) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = HEAP32[$15>>2]|0;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vi[$26 & 1023]($15);
 }
 $27 = HEAP32[$14>>2]|0;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 $30 = (invoke_iii(556,($27|0),(11896|0))|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $76 = ___cxa_find_matching_catch()|0;
  $77 = tempRet0;
  $78 = (($27) + 4|0);
  $79 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($79+-1)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$0 = $76;$$01 = $77;
   ___resumeException($$0|0);
   // unreachable;
  }
  $81 = HEAP32[$27>>2]|0;
  $82 = (($81) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  FUNCTION_TABLE_vi[$83 & 1023]($27);
  $$0 = $76;$$01 = $77;
  ___resumeException($$0|0);
  // unreachable;
 }
 $33 = (($27) + 4|0);
 $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = HEAP32[$27>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($27);
 }
 $39 = HEAP32[$30>>2]|0;
 $40 = (($39) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 __THREW__ = 0;
 invoke_vii($41|0,($__names|0),($30|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $$02 = $__names;
 } else {
  $44 = (($__names) + 12|0);
  $45 = HEAP32[$30>>2]|0;
  $46 = (($45) + 28|0);
  $47 = HEAP32[$46>>2]|0;
  __THREW__ = 0;
  invoke_vii($47|0,($44|0),($30|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $$02 = $44;
  } else {
   $50 = HEAP32[$__e>>2]|0;
   $51 = (($__names) + 24|0);
   __THREW__ = 0;
   $52 = (invoke_iiiiiiii(563,($__b|0),($50|0),($__names|0),($51|0),($18|0),($__err|0),1)|0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $95 = ___cxa_find_matching_catch()|0;
    $96 = tempRet0;
    $97 = HEAP8[$44>>0]|0;
    $98 = $97 & 1;
    $99 = ($98<<24>>24)==(0);
    if (!($99)) {
     $100 = (($__names) + 20|0);
     $101 = HEAP32[$100>>2]|0;
     _free($101);
    }
    $102 = HEAP8[$__names>>0]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if (!($104)) {
     $105 = (($__names) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     _free($106);
    }
    $$0 = $95;$$01 = $96;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $55 = ($52|0)==($__names|0);
    $56 = $55&1;
    HEAP8[$__v>>0] = $56;
    $57 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $57;
    $58 = HEAP8[$44>>0]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if (!($60)) {
     $61 = (($__names) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     _free($62);
    }
    $63 = HEAP8[$__names>>0]|0;
    $64 = $63 & 1;
    $65 = ($64<<24>>24)==(0);
    if ($65) {
     STACKTOP = sp;return;
    }
    $66 = (($__names) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    _free($67);
    STACKTOP = sp;return;
   }
  }
 }
 $84 = ___cxa_find_matching_catch()|0;
 $85 = tempRet0;
 $86 = ($__names|0)==($$02|0);
 if ($86) {
  $$0 = $84;$$01 = $85;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $88 = $$02;
 }
 while(1) {
  $87 = (($88) + -12|0);
  $89 = HEAP8[$87>>0]|0;
  $90 = $89 & 1;
  $91 = ($90<<24>>24)==(0);
  if (!($91)) {
   $92 = (($88) + -4|0);
   $93 = HEAP32[$92>>2]|0;
   _free($93);
  }
  $94 = ($87|0)==($__names|0);
  if ($94) {
   $$0 = $84;$$01 = $85;
   break;
  } else {
   $88 = $87;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02676 = 0, $$__e$sroa$0$0 = 0, $$__e$sroa$0$03 = 0, $$index = 0, $$index15 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off035 = 0, $__consume$1$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$0$ph = 0, $__e$sroa$0$1 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$062 = 0, $__ky1$036 = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$060 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$332 = 0, $__n_does_match$4 = 0;
 var $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$059 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$331 = 0, $__n_might_match$4 = 0, $__st$061 = 0, $__st$133 = 0, $__st$246 = 0, $__st$32577 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($7|0),(20008|0),(386|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    // unreachable;
   }
   $10 = ___cxa_find_matching_catch()|0;
   $11 = tempRet0;
   $$index = $10;$$index15 = $11;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $21 = $5;$__status$0 = $5;
  }
 } else {
  $21 = 0;$__status$0 = $__statbuf;
 }
 $22 = ($__kb|0)==($__ke|0);
 if ($22) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$062 = $__kb;$__n_does_match$060 = 0;$__n_might_match$059 = $3;$__st$061 = $__status$0;
  while(1) {
   $23 = HEAP8[$__ky$062>>0]|0;
   $24 = $23 & 1;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $28 = $23&255;
    $29 = $28 >>> 1;
    $31 = $29;
   } else {
    $26 = (($__ky$062) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $31 = $27;
   }
   $30 = ($31|0)==(0);
   if ($30) {
    HEAP8[$__st$061>>0] = 2;
    $32 = (($__n_might_match$059) + -1)|0;
    $33 = (($__n_does_match$060) + 1)|0;
    $__n_does_match$1 = $33;$__n_might_match$1 = $32;
   } else {
    HEAP8[$__st$061>>0] = 1;
    $__n_does_match$1 = $__n_does_match$060;$__n_might_match$1 = $__n_might_match$059;
   }
   $34 = (($__ky$062) + 12|0);
   $35 = (($__st$061) + 1|0);
   $36 = ($34|0)==($__ke|0);
   if ($36) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$062 = $34;$__n_does_match$060 = $__n_does_match$1;$__n_might_match$059 = $__n_might_match$1;$__st$061 = $35;
   }
  }
 }
 $__e$sroa$0$0$ph = $__e$0;$__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L21: while(1) {
  $37 = ($__n_might_match$2$ph|0)!=(0);
  $__e$sroa$0$0 = $__e$sroa$0$0$ph;$__indx$0 = $__indx$0$ph;
  while(1) {
   $38 = HEAP32[$__b>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if ($39) {
     $53 = 0;
    } else {
     $40 = (($38) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if ($44) {
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 7;
       break L21;
      }
      $51 = ($48|0)==(-1);
      if ($51) {
       HEAP32[$__b>>2] = 0;
       $53 = 0;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $53 = $$pre$i$i$i;
       break;
      }
     } else {
      $53 = $38;
     }
    }
   } while(0);
   $52 = ($53|0)==(0|0);
   $54 = ($__e$sroa$0$0|0)==(0|0);
   if ($54) {
    $$pre$i2$i$i16 = 0;$__e$sroa$0$1 = 0;
   } else {
    $55 = (($__e$sroa$0$0) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($__e$sroa$0$0) + 16|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($56|0)==($58|0);
    if ($59) {
     $60 = HEAP32[$__e$sroa$0$0>>2]|0;
     $61 = (($60) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     __THREW__ = 0;
     $63 = (invoke_ii($62|0,($__e$sroa$0$0|0))|0);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      label = 7;
      break L21;
     }
     $66 = ($63|0)==(-1);
     $$__e$sroa$0$0 = $66 ? 0 : $__e$sroa$0$0;
     $$__e$sroa$0$03 = $66 ? 0 : $__e$sroa$0$0;
     $$pre$i2$i$i16 = $$__e$sroa$0$03;$__e$sroa$0$1 = $$__e$sroa$0$0;
    } else {
     $$pre$i2$i$i16 = $__e$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
    }
   }
   $67 = ($$pre$i2$i$i16|0)==(0|0);
   $tmp$i$i = $52 ^ $67;
   $$ = $tmp$i$i & $37;
   $68 = HEAP32[$__b>>2]|0;
   if (!($$)) {
    label = 67;
    break L21;
   }
   $69 = (($68) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($70|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$68>>2]|0;
    $75 = (($74) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    __THREW__ = 0;
    $77 = (invoke_ii($76|0,($68|0))|0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    if ($79) {
     label = 7;
     break L21;
    } else {
     $$0$i$i = $77;
    }
   } else {
    $80 = HEAP8[$70>>0]|0;
    $81 = $80&255;
    $$0$i$i = $81;
   }
   $82 = $$0$i$i&255;
   if ($__case_sensitive) {
    $__c$0 = $82;
   } else {
    $83 = HEAP32[$__ct>>2]|0;
    $84 = (($83) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    __THREW__ = 0;
    $86 = (invoke_iii($85|0,($__ct|0),($82|0))|0);
    $87 = __THREW__; __THREW__ = 0;
    $88 = $87&1;
    if ($88) {
     label = 7;
     break L21;
    } else {
     $__c$0 = $86;
    }
   }
   $$pre = (($__indx$0) + 1)|0;
   if ($22) {
    $__e$sroa$0$0 = $__e$sroa$0$1;$__indx$0 = $$pre;
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2$ph;$__n_might_match$331 = $__n_might_match$2$ph;$__st$133 = $__status$0;
    break;
   }
  }
  while(1) {
   $89 = HEAP8[$__st$133>>0]|0;
   $90 = ($89<<24>>24)==(1);
   do {
    if ($90) {
     $91 = HEAP8[$__ky1$036>>0]|0;
     $92 = $91 & 1;
     $93 = ($92<<24>>24)==(0);
     if ($93) {
      $96 = (($__ky1$036) + 1|0);
      $98 = $96;
     } else {
      $94 = (($__ky1$036) + 8|0);
      $95 = HEAP32[$94>>2]|0;
      $98 = $95;
     }
     $97 = (($98) + ($__indx$0)|0);
     $99 = HEAP8[$97>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $99;
     } else {
      $100 = HEAP32[$__ct>>2]|0;
      $101 = (($100) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      __THREW__ = 0;
      $103 = (invoke_iii($102|0,($__ct|0),($99|0))|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       label = 6;
       break L21;
      } else {
       $__kc$0 = $103;
      }
     }
     $106 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($106)) {
      HEAP8[$__st$133>>0] = 0;
      $118 = (($__n_might_match$331) + -1)|0;
      $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $118;
      break;
     }
     $107 = HEAP8[$__ky1$036>>0]|0;
     $108 = $107 & 1;
     $109 = ($108<<24>>24)==(0);
     if ($109) {
      $112 = $107&255;
      $113 = $112 >>> 1;
      $115 = $113;
     } else {
      $110 = (($__ky1$036) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $115 = $111;
     }
     $114 = ($115|0)==($$pre|0);
     if ($114) {
      HEAP8[$__st$133>>0] = 2;
      $116 = (($__n_might_match$331) + -1)|0;
      $117 = (($__n_does_match$332) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $117;$__n_might_match$4 = $116;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
    }
   } while(0);
   $119 = (($__ky1$036) + 12|0);
   $120 = ($119|0)==($__ke|0);
   if ($120) {
    break;
   }
   $121 = (($__st$133) + 1|0);
   $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $119;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $121;
  }
  if (!($__consume$1$off0)) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $122 = HEAP32[$__b>>2]|0;
  $123 = (($122) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($122) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$122>>2]|0;
   $129 = (($128) + 40|0);
   $130 = HEAP32[$129>>2]|0;
   __THREW__ = 0;
   (invoke_ii($130|0,($122|0))|0);
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 8;
    break;
   }
  } else {
   $133 = (($124) + 1|0);
   HEAP32[$123>>2] = $133;
  }
  $134 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($134>>>0)<(2);
  if ($$not) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$4;$__st$246 = $__status$0;
  }
  while(1) {
   $135 = HEAP8[$__st$246>>0]|0;
   $136 = ($135<<24>>24)==(2);
   if ($136) {
    $137 = HEAP8[$__ky2$047>>0]|0;
    $138 = $137 & 1;
    $139 = ($138<<24>>24)==(0);
    if ($139) {
     $142 = $137&255;
     $143 = $142 >>> 1;
     $145 = $143;
    } else {
     $140 = (($__ky2$047) + 4|0);
     $141 = HEAP32[$140>>2]|0;
     $145 = $141;
    }
    $144 = ($145|0)==($$pre|0);
    if ($144) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246>>0] = 0;
     $146 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $146;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $147 = (($__ky2$047) + 12|0);
   $148 = (($__st$246) + 1|0);
   $149 = ($147|0)==($__ke|0);
   if ($149) {
    $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$6;$__n_might_match$2$ph = $__n_might_match$4;
    continue L21;
   } else {
    $__ky2$047 = $147;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $148;
   }
  }
 }
 if ((label|0) == 6) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $lpad$phi$index = $12;$lpad$phi$index7 = $13;
 }
 else if ((label|0) == 7) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $lpad$phi$index = $14;$lpad$phi$index7 = $15;
 }
 else if ((label|0) == 8) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $lpad$phi$index = $16;$lpad$phi$index7 = $17;
 }
 else if ((label|0) == 67) {
  $150 = ($68|0)==(0|0);
  do {
   if ($150) {
    $164 = 0;
    label = 73;
   } else {
    $151 = (($68) + 12|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($68) + 16|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($152|0)==($154|0);
    if ($155) {
     $156 = HEAP32[$68>>2]|0;
     $157 = (($156) + 36|0);
     $158 = HEAP32[$157>>2]|0;
     __THREW__ = 0;
     $159 = (invoke_ii($158|0,($68|0))|0);
     $160 = __THREW__; __THREW__ = 0;
     $161 = $160&1;
     if (!($161)) {
      $162 = ($159|0)==(-1);
      if ($162) {
       HEAP32[$__b>>2] = 0;
       $164 = 0;
       label = 73;
       break;
      } else {
       $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
       $164 = $$pre$i$i$i12;
       label = 73;
       break;
      }
     }
    } else {
     $164 = $68;
     label = 73;
    }
   }
  } while(0);
  L95: do {
   if ((label|0) == 73) {
    $163 = ($164|0)==(0|0);
    do {
     if ($67) {
      label = 78;
     } else {
      $165 = (($$pre$i2$i$i16) + 12|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($$pre$i2$i$i16) + 16|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($166|0)==($168|0);
      if (!($169)) {
       if ($163) {
        break;
       } else {
        label = 80;
        break;
       }
      }
      $170 = HEAP32[$$pre$i2$i$i16>>2]|0;
      $171 = (($170) + 36|0);
      $172 = HEAP32[$171>>2]|0;
      __THREW__ = 0;
      $173 = (invoke_ii($172|0,($$pre$i2$i$i16|0))|0);
      $174 = __THREW__; __THREW__ = 0;
      $175 = $174&1;
      if ($175) {
       break L95;
      }
      $176 = ($173|0)==(-1);
      if ($176) {
       label = 78;
      } else {
       if (!($163)) {
        label = 80;
       }
      }
     }
    } while(0);
    if ((label|0) == 78) {
     if ($163) {
      label = 80;
     }
    }
    if ((label|0) == 80) {
     $177 = HEAP32[$__err>>2]|0;
     $178 = $177 | 2;
     HEAP32[$__err>>2] = $178;
    }
    L109: do {
     if ($22) {
      label = 85;
     } else {
      $179 = HEAP8[$__status$0>>0]|0;
      $180 = ($179<<24>>24)==(2);
      if ($180) {
       $$024 = $__kb;
      } else {
       $$02676 = $__kb;$__st$32577 = $__status$0;
       while(1) {
        $184 = (($$02676) + 12|0);
        $185 = ($184|0)==($__ke|0);
        $182 = (($__st$32577) + 1|0);
        if ($185) {
         label = 85;
         break L109;
        }
        $181 = HEAP8[$182>>0]|0;
        $183 = ($181<<24>>24)==(2);
        if ($183) {
         $$024 = $184;
         break;
        } else {
         $$02676 = $184;$__st$32577 = $182;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 85) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$024 = $__ke;
    }
    $188 = ($21|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$024|0);
    }
    _free($21);
    STACKTOP = sp;return ($$024|0);
   }
  } while(0);
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $lpad$phi$index = $18;$lpad$phi$index7 = $19;
 }
 $20 = ($21|0)==(0|0);
 if ($20) {
  $$index = $lpad$phi$index;$$index15 = $lpad$phi$index7;
  ___resumeException($$index|0);
  // unreachable;
 }
 _free($21);
 $$index = $lpad$phi$index;$$index15 = $lpad$phi$index7;
 ___resumeException($$index|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 192|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($30) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($30) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$30>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($30|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$30>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($30|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP32[$__g_end$i>>2]|0;
    $126 = $125;
    $127 = $__g$i;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$__dc$i>>2]|0;
     $131 = (($125) + 4|0);
     HEAP32[$__g_end$i>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(565,($__a$2$i|0),($132|0),($__err|0),($$0$i$i|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $133;
    $136 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$136,$__err);
    if ($29) {
     $150 = 0;
    } else {
     $137 = (($30) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($30) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$30>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($30|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 36;
       break;
      }
      $148 = ($145|0)==(-1);
      $$ = $148 ? 0 : $30;
      $150 = $$;
     } else {
      $150 = $30;
     }
    }
    $149 = ($150|0)==(0|0);
    $151 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($151) {
      label = 65;
     } else {
      $152 = (($$pre$i2$i$i$i) + 12|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($$pre$i2$i$i$i) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($153|0)==($155|0);
      if (!($156)) {
       if ($149) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $157 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $158 = (($157) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($$pre$i2$i$i$i|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       label = 36;
       break L6;
      }
      $163 = ($160|0)==(-1);
      if ($163) {
       label = 65;
      } else {
       if (!($149)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($149) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $150;
    $166 = HEAP8[$__buf$i>>0]|0;
    $167 = $166 & 1;
    $168 = ($167<<24>>24)==(0);
    if (!($168)) {
     $169 = (($__buf$i) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     _free($170);
    }
    $171 = HEAP8[$__grouping$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if ($173) {
     STACKTOP = sp;return;
    }
    $174 = (($__grouping$i) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    _free($175);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0;
 var $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 192|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($30) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($30) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$30>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($30|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$30>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($30|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP32[$__g_end$i>>2]|0;
    $126 = $125;
    $127 = $__g$i;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$__dc$i>>2]|0;
     $131 = (($125) + 4|0);
     HEAP32[$__g_end$i>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(566,($__a$2$i|0),($132|0),($__err|0),($$0$i$i|0))|0);
   $134 = tempRet0;
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 36;
   } else {
    $137 = $__v;
    $138 = $137;
    HEAP32[$138>>2] = $133;
    $139 = (($137) + 4)|0;
    $140 = $139;
    HEAP32[$140>>2] = $134;
    $141 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$141,$__err);
    if ($29) {
     $155 = 0;
    } else {
     $142 = (($30) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($30) + 16|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     if ($146) {
      $147 = HEAP32[$30>>2]|0;
      $148 = (($147) + 36|0);
      $149 = HEAP32[$148>>2]|0;
      __THREW__ = 0;
      $150 = (invoke_ii($149|0,($30|0))|0);
      $151 = __THREW__; __THREW__ = 0;
      $152 = $151&1;
      if ($152) {
       label = 36;
       break;
      }
      $153 = ($150|0)==(-1);
      $$ = $153 ? 0 : $30;
      $155 = $$;
     } else {
      $155 = $30;
     }
    }
    $154 = ($155|0)==(0|0);
    $156 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($156) {
      label = 65;
     } else {
      $157 = (($$pre$i2$i$i$i) + 12|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = (($$pre$i2$i$i$i) + 16|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($158|0)==($160|0);
      if (!($161)) {
       if ($154) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $162 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $163 = (($162) + 36|0);
      $164 = HEAP32[$163>>2]|0;
      __THREW__ = 0;
      $165 = (invoke_ii($164|0,($$pre$i2$i$i$i|0))|0);
      $166 = __THREW__; __THREW__ = 0;
      $167 = $166&1;
      if ($167) {
       label = 36;
       break L6;
      }
      $168 = ($165|0)==(-1);
      if ($168) {
       label = 65;
      } else {
       if (!($154)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($154) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $169 = HEAP32[$__err>>2]|0;
     $170 = $169 | 2;
     HEAP32[$__err>>2] = $170;
    }
    HEAP32[$agg$result>>2] = $155;
    $171 = HEAP8[$__buf$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if (!($173)) {
     $174 = (($__buf$i) + 8|0);
     $175 = HEAP32[$174>>2]|0;
     _free($175);
    }
    $176 = HEAP8[$__grouping$i>>0]|0;
    $177 = $176 & 1;
    $178 = ($177<<24>>24)==(0);
    if ($178) {
     STACKTOP = sp;return;
    }
    $179 = (($__grouping$i) + 8|0);
    $180 = HEAP32[$179>>2]|0;
    _free($180);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 192|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($30) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($30) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$30>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($30|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$30>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($30|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP32[$__g_end$i>>2]|0;
    $126 = $125;
    $127 = $__g$i;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$__dc$i>>2]|0;
     $131 = (($125) + 4|0);
     HEAP32[$__g_end$i>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(567,($__a$2$i|0),($132|0),($__err|0),($$0$i$i|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 36;
   } else {
    HEAP16[$__v>>1] = $133;
    $136 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$136,$__err);
    if ($29) {
     $150 = 0;
    } else {
     $137 = (($30) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($30) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$30>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($30|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 36;
       break;
      }
      $148 = ($145|0)==(-1);
      $$ = $148 ? 0 : $30;
      $150 = $$;
     } else {
      $150 = $30;
     }
    }
    $149 = ($150|0)==(0|0);
    $151 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($151) {
      label = 65;
     } else {
      $152 = (($$pre$i2$i$i$i) + 12|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($$pre$i2$i$i$i) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($153|0)==($155|0);
      if (!($156)) {
       if ($149) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $157 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $158 = (($157) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($$pre$i2$i$i$i|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       label = 36;
       break L6;
      }
      $163 = ($160|0)==(-1);
      if ($163) {
       label = 65;
      } else {
       if (!($149)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($149) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $150;
    $166 = HEAP8[$__buf$i>>0]|0;
    $167 = $166 & 1;
    $168 = ($167<<24>>24)==(0);
    if (!($168)) {
     $169 = (($__buf$i) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     _free($170);
    }
    $171 = HEAP8[$__grouping$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if ($173) {
     STACKTOP = sp;return;
    }
    $174 = (($__grouping$i) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    _free($175);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 192|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($30) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($30) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$30>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($30|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$30>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($30|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP32[$__g_end$i>>2]|0;
    $126 = $125;
    $127 = $__g$i;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$__dc$i>>2]|0;
     $131 = (($125) + 4|0);
     HEAP32[$__g_end$i>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(568,($__a$2$i|0),($132|0),($__err|0),($$0$i$i|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $133;
    $136 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$136,$__err);
    if ($29) {
     $150 = 0;
    } else {
     $137 = (($30) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($30) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$30>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($30|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 36;
       break;
      }
      $148 = ($145|0)==(-1);
      $$ = $148 ? 0 : $30;
      $150 = $$;
     } else {
      $150 = $30;
     }
    }
    $149 = ($150|0)==(0|0);
    $151 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($151) {
      label = 65;
     } else {
      $152 = (($$pre$i2$i$i$i) + 12|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($$pre$i2$i$i$i) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($153|0)==($155|0);
      if (!($156)) {
       if ($149) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $157 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $158 = (($157) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($$pre$i2$i$i$i|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       label = 36;
       break L6;
      }
      $163 = ($160|0)==(-1);
      if ($163) {
       label = 65;
      } else {
       if (!($149)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($149) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $150;
    $166 = HEAP8[$__buf$i>>0]|0;
    $167 = $166 & 1;
    $168 = ($167<<24>>24)==(0);
    if (!($168)) {
     $169 = (($__buf$i) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     _free($170);
    }
    $171 = HEAP8[$__grouping$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if ($173) {
     STACKTOP = sp;return;
    }
    $174 = (($__grouping$i) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    _free($175);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 192|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($30) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($30) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$30>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($30|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$30>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($30|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP32[$__g_end$i>>2]|0;
    $126 = $125;
    $127 = $__g$i;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$__dc$i>>2]|0;
     $131 = (($125) + 4|0);
     HEAP32[$__g_end$i>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(569,($__a$2$i|0),($132|0),($__err|0),($$0$i$i|0))|0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $133;
    $136 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$136,$__err);
    if ($29) {
     $150 = 0;
    } else {
     $137 = (($30) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($30) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$30>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($30|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 36;
       break;
      }
      $148 = ($145|0)==(-1);
      $$ = $148 ? 0 : $30;
      $150 = $$;
     } else {
      $150 = $30;
     }
    }
    $149 = ($150|0)==(0|0);
    $151 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($151) {
      label = 65;
     } else {
      $152 = (($$pre$i2$i$i$i) + 12|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($$pre$i2$i$i$i) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($153|0)==($155|0);
      if (!($156)) {
       if ($149) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $157 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $158 = (($157) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($$pre$i2$i$i$i|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       label = 36;
       break L6;
      }
      $163 = ($160|0)==(-1);
      if ($163) {
       label = 65;
      } else {
       if (!($149)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($149) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $150;
    $166 = HEAP8[$__buf$i>>0]|0;
    $167 = $166 & 1;
    $168 = ($167<<24>>24)==(0);
    if (!($168)) {
     $169 = (($__buf$i) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     _free($170);
    }
    $171 = HEAP8[$__grouping$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if ($173) {
     STACKTOP = sp;return;
    }
    $174 = (($__grouping$i) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    _free($175);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi32$iZ2D = 0, $$pre$phi34$iZ2D = 0, $$pre31$i = 0, $$pre33$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0;
 var $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index8 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 192|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre33$i = (($__buf$i) + 8|0);
    $$pre$phi32$iZ2D = $12;$$pre$phi34$iZ2D = $$pre33$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre31$i = (($__buf$i) + 1|0);
    $$pre$phi32$iZ2D = $$pre31$i;$$pre$phi34$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 35;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i19$i = (($67) + -1)|0;
      $68 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 35;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi32$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi34$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($30) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($30) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92|0)==($94|0);
    if ($95) {
     $96 = HEAP32[$30>>2]|0;
     $97 = (($96) + 36|0);
     $98 = HEAP32[$97>>2]|0;
     __THREW__ = 0;
     $99 = (invoke_ii($98|0,($30|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $99;
     }
    } else {
     $102 = HEAP8[$92>>0]|0;
     $103 = $102&255;
     $$0$i$i$i = $103;
    }
    $104 = $$0$i$i$i&255;
    $105 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($104,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $106 = ($105|0)==(0);
    if (!($106)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $107 = HEAP32[$91>>2]|0;
    $108 = HEAP32[$93>>2]|0;
    $109 = ($107|0)==($108|0);
    if ($109) {
     $110 = HEAP32[$30>>2]|0;
     $111 = (($110) + 40|0);
     $112 = HEAP32[$111>>2]|0;
     __THREW__ = 0;
     (invoke_ii($112|0,($30|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $115 = (($107) + 1|0);
     HEAP32[$91>>2] = $115;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index8 = $78;
    break;
   }
   $116 = HEAP8[$__grouping$i>>0]|0;
   $117 = $116 & 1;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $116&255;
    $122 = $121 >>> 1;
    $124 = $122;
   } else {
    $119 = (($__grouping$i) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $124 = $120;
   }
   $123 = ($124|0)==(0);
   if (!($123)) {
    $125 = HEAP32[$__g_end$i>>2]|0;
    $126 = $125;
    $127 = $__g$i;
    $128 = (($126) - ($127))|0;
    $129 = ($128|0)<(160);
    if ($129) {
     $130 = HEAP32[$__dc$i>>2]|0;
     $131 = (($125) + 4|0);
     HEAP32[$__g_end$i>>2] = $131;
     HEAP32[$125>>2] = $130;
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (invoke_iiiii(570,($__a$2$i|0),($132|0),($__err|0),($$0$i$i|0))|0);
   $134 = tempRet0;
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 36;
   } else {
    $137 = $__v;
    $138 = $137;
    HEAP32[$138>>2] = $133;
    $139 = (($137) + 4)|0;
    $140 = $139;
    HEAP32[$140>>2] = $134;
    $141 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$141,$__err);
    if ($29) {
     $155 = 0;
    } else {
     $142 = (($30) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($30) + 16|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     if ($146) {
      $147 = HEAP32[$30>>2]|0;
      $148 = (($147) + 36|0);
      $149 = HEAP32[$148>>2]|0;
      __THREW__ = 0;
      $150 = (invoke_ii($149|0,($30|0))|0);
      $151 = __THREW__; __THREW__ = 0;
      $152 = $151&1;
      if ($152) {
       label = 36;
       break;
      }
      $153 = ($150|0)==(-1);
      $$ = $153 ? 0 : $30;
      $155 = $$;
     } else {
      $155 = $30;
     }
    }
    $154 = ($155|0)==(0|0);
    $156 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($156) {
      label = 65;
     } else {
      $157 = (($$pre$i2$i$i$i) + 12|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = (($$pre$i2$i$i$i) + 16|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($158|0)==($160|0);
      if (!($161)) {
       if ($154) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $162 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $163 = (($162) + 36|0);
      $164 = HEAP32[$163>>2]|0;
      __THREW__ = 0;
      $165 = (invoke_ii($164|0,($$pre$i2$i$i$i|0))|0);
      $166 = __THREW__; __THREW__ = 0;
      $167 = $166&1;
      if ($167) {
       label = 36;
       break L6;
      }
      $168 = ($165|0)==(-1);
      if ($168) {
       label = 65;
      } else {
       if (!($154)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($154) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $169 = HEAP32[$__err>>2]|0;
     $170 = $169 | 2;
     HEAP32[$__err>>2] = $170;
    }
    HEAP32[$agg$result>>2] = $155;
    $171 = HEAP8[$__buf$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if (!($173)) {
     $174 = (($__buf$i) + 8|0);
     $175 = HEAP32[$174>>2]|0;
     _free($175);
    }
    $176 = HEAP8[$__grouping$i>>0]|0;
    $177 = $176 & 1;
    $178 = ($177<<24>>24)==(0);
    if ($178) {
     STACKTOP = sp;return;
    }
    $179 = (($__grouping$i) + 8|0);
    $180 = HEAP32[$179>>2]|0;
    _free($180);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index8 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0;
 var $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index9 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__decimal_point$i = sp + 199|0;
 $__thousands_sep$i = sp + 198|0;
 $__grouping$i = sp + 8|0;
 $__buf$i = sp + 20|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 4|0;
 $__in_units$i = sp + 197|0;
 $__exp$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $9;$$pre$phi35$iZ2D = $$pre34$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i4$i = $26 ? 0 : $$pre$i$i$i4$i;
      $28 = $$$pre$i$i$i4$i;
     } else {
      $28 = $$pre$i$i$i4$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 31;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 31;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($28) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($28) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$28>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($28|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($102,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$28>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($28|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index9 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP8[$__in_units$i>>0]|0;
    $124 = ($123<<24>>24)==(0);
    if (!($124)) {
     $125 = HEAP32[$__g_end$i>>2]|0;
     $126 = $125;
     $127 = $__g$i;
     $128 = (($126) - ($127))|0;
     $129 = ($128|0)<(160);
     if ($129) {
      $130 = HEAP32[$__dc$i>>2]|0;
      $131 = (($125) + 4|0);
      HEAP32[$__g_end$i>>2] = $131;
      HEAP32[$125>>2] = $130;
     }
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (+invoke_diii(571,($__a$2$i|0),($132|0),($__err|0)));
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 32;
   } else {
    HEAPF32[$__v>>2] = $133;
    $136 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$136,$__err);
    if ($27) {
     $150 = 0;
    } else {
     $137 = (($28) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($28) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$28>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($28|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 32;
       break;
      }
      $148 = ($145|0)==(-1);
      $$ = $148 ? 0 : $28;
      $150 = $$;
     } else {
      $150 = $28;
     }
    }
    $149 = ($150|0)==(0|0);
    $151 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($151) {
      label = 62;
     } else {
      $152 = (($$pre$i2$i$i$i) + 12|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($$pre$i2$i$i$i) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($153|0)==($155|0);
      if (!($156)) {
       if ($149) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $157 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $158 = (($157) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($$pre$i2$i$i$i|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       label = 32;
       break L1;
      }
      $163 = ($160|0)==(-1);
      if ($163) {
       label = 62;
      } else {
       if (!($149)) {
        label = 64;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($149) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $150;
    $166 = HEAP8[$__buf$i>>0]|0;
    $167 = $166 & 1;
    $168 = ($167<<24>>24)==(0);
    if (!($168)) {
     $169 = (($__buf$i) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     _free($170);
    }
    $171 = HEAP8[$__grouping$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if ($173) {
     STACKTOP = sp;return;
    }
    $174 = (($__grouping$i) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    _free($175);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index9 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0;
 var $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index9 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__decimal_point$i = sp + 199|0;
 $__thousands_sep$i = sp + 198|0;
 $__grouping$i = sp + 8|0;
 $__buf$i = sp + 20|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 4|0;
 $__in_units$i = sp + 197|0;
 $__exp$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $9;$$pre$phi35$iZ2D = $$pre34$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i4$i = $26 ? 0 : $$pre$i$i$i4$i;
      $28 = $$$pre$i$i$i4$i;
     } else {
      $28 = $$pre$i$i$i4$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 31;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 31;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($28) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($28) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$28>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($28|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($102,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$28>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($28|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index9 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP8[$__in_units$i>>0]|0;
    $124 = ($123<<24>>24)==(0);
    if (!($124)) {
     $125 = HEAP32[$__g_end$i>>2]|0;
     $126 = $125;
     $127 = $__g$i;
     $128 = (($126) - ($127))|0;
     $129 = ($128|0)<(160);
     if ($129) {
      $130 = HEAP32[$__dc$i>>2]|0;
      $131 = (($125) + 4|0);
      HEAP32[$__g_end$i>>2] = $131;
      HEAP32[$125>>2] = $130;
     }
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (+invoke_diii(572,($__a$2$i|0),($132|0),($__err|0)));
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 32;
   } else {
    HEAPF64[$__v>>3] = $133;
    $136 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$136,$__err);
    if ($27) {
     $150 = 0;
    } else {
     $137 = (($28) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($28) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$28>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($28|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 32;
       break;
      }
      $148 = ($145|0)==(-1);
      $$ = $148 ? 0 : $28;
      $150 = $$;
     } else {
      $150 = $28;
     }
    }
    $149 = ($150|0)==(0|0);
    $151 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($151) {
      label = 62;
     } else {
      $152 = (($$pre$i2$i$i$i) + 12|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($$pre$i2$i$i$i) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($153|0)==($155|0);
      if (!($156)) {
       if ($149) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $157 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $158 = (($157) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($$pre$i2$i$i$i|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       label = 32;
       break L1;
      }
      $163 = ($160|0)==(-1);
      if ($163) {
       label = 62;
      } else {
       if (!($149)) {
        label = 64;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($149) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $150;
    $166 = HEAP8[$__buf$i>>0]|0;
    $167 = $166 & 1;
    $168 = ($167<<24>>24)==(0);
    if (!($168)) {
     $169 = (($__buf$i) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     _free($170);
    }
    $171 = HEAP8[$__grouping$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if ($173) {
     STACKTOP = sp;return;
    }
    $174 = (($__grouping$i) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    _free($175);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index9 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0;
 var $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index9 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__decimal_point$i = sp + 199|0;
 $__thousands_sep$i = sp + 198|0;
 $__grouping$i = sp + 8|0;
 $__buf$i = sp + 20|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 4|0;
 $__in_units$i = sp + 197|0;
 $__exp$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $9;$$pre$phi35$iZ2D = $$pre34$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i4$i = $26 ? 0 : $$pre$i$i$i4$i;
      $28 = $$$pre$i$i$i4$i;
     } else {
      $28 = $$pre$i$i$i4$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 31;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 31;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($28) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($28) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$28>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($28|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($102,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$28>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($28|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index9 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP8[$__in_units$i>>0]|0;
    $124 = ($123<<24>>24)==(0);
    if (!($124)) {
     $125 = HEAP32[$__g_end$i>>2]|0;
     $126 = $125;
     $127 = $__g$i;
     $128 = (($126) - ($127))|0;
     $129 = ($128|0)<(160);
     if ($129) {
      $130 = HEAP32[$__dc$i>>2]|0;
      $131 = (($125) + 4|0);
      HEAP32[$__g_end$i>>2] = $131;
      HEAP32[$125>>2] = $130;
     }
    }
   }
   $132 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $133 = (+invoke_diii(573,($__a$2$i|0),($132|0),($__err|0)));
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 32;
   } else {
    HEAPF64[$__v>>3] = $133;
    $136 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$136,$__err);
    if ($27) {
     $150 = 0;
    } else {
     $137 = (($28) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($28) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$28>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($28|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 32;
       break;
      }
      $148 = ($145|0)==(-1);
      $$ = $148 ? 0 : $28;
      $150 = $$;
     } else {
      $150 = $28;
     }
    }
    $149 = ($150|0)==(0|0);
    $151 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($151) {
      label = 62;
     } else {
      $152 = (($$pre$i2$i$i$i) + 12|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($$pre$i2$i$i$i) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($153|0)==($155|0);
      if (!($156)) {
       if ($149) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $157 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $158 = (($157) + 36|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($$pre$i2$i$i$i|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       label = 32;
       break L1;
      }
      $163 = ($160|0)==(-1);
      if ($163) {
       label = 62;
      } else {
       if (!($149)) {
        label = 64;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($149) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $150;
    $166 = HEAP8[$__buf$i>>0]|0;
    $167 = $166 & 1;
    $168 = ($167<<24>>24)==(0);
    if (!($168)) {
     $169 = (($__buf$i) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     _free($170);
    }
    $171 = HEAP8[$__grouping$i>>0]|0;
    $172 = $171 & 1;
    $173 = ($172<<24>>24)==(0);
    if ($173) {
     STACKTOP = sp;return;
    }
    $174 = (($__grouping$i) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    _free($175);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index9 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index6 = 0, $phitmp$i22 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 200|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11752|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  label = 37;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($9|0,($4|0),(10280|0),(((10280 + 26|0))|0),($__atoms|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 37;
  } else {
   $12 = (($1) + 4|0);
   $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+-1)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = HEAP32[$1>>2]|0;
    $16 = (($15) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$17 & 1023]($1);
   }
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_vii(564,($__buf|0),10);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   L7: do {
    if ($19) {
     label = 40;
    } else {
     $20 = HEAP8[$__buf>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__buf) + 1|0);
      $$pre35 = (($__buf) + 8|0);
      $$pre$phi34Z2D = $25;$$pre$phi36Z2D = $$pre35;$26 = $25;
     } else {
      $23 = (($__buf) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $$pre33 = (($__buf) + 1|0);
      $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $23;$26 = $24;
     }
     HEAP32[$__a_end>>2] = $26;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $27 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i8 = $$pre;$__a$0 = $26;
     L13: while(1) {
      $28 = ($$pre$i$i$i8|0)==(0|0);
      if ($28) {
       $42 = 0;
      } else {
       $29 = (($$pre$i$i$i8) + 12|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($$pre$i$i$i8) + 16|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($30|0)==($32|0);
       if ($33) {
        $34 = HEAP32[$$pre$i$i$i8>>2]|0;
        $35 = (($34) + 36|0);
        $36 = HEAP32[$35>>2]|0;
        __THREW__ = 0;
        $37 = (invoke_ii($36|0,($$pre$i$i$i8|0))|0);
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         label = 39;
         break;
        }
        $40 = ($37|0)==(-1);
        if ($40) {
         HEAP32[$__b>>2] = 0;
         $42 = 0;
        } else {
         $42 = $$pre$i$i$i8;
        }
       } else {
        $42 = $$pre$i$i$i8;
       }
      }
      $41 = ($42|0)==(0|0);
      $43 = HEAP32[$__e>>2]|0;
      $44 = ($43|0)==(0|0);
      do {
       if ($44) {
        label = 21;
       } else {
        $45 = (($43) + 12|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = (($43) + 16|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($46|0)==($48|0);
        if (!($49)) {
         if ($41) {
          break;
         } else {
          $__a$2 = $__a$0;
          break L13;
         }
        }
        $50 = HEAP32[$43>>2]|0;
        $51 = (($50) + 36|0);
        $52 = HEAP32[$51>>2]|0;
        __THREW__ = 0;
        $53 = (invoke_ii($52|0,($43|0))|0);
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if ($55) {
         label = 39;
         break L13;
        }
        $56 = ($53|0)==(-1);
        if ($56) {
         HEAP32[$__e>>2] = 0;
         label = 21;
         break;
        } else {
         if ($41) {
          break;
         } else {
          $__a$2 = $__a$0;
          break L13;
         }
        }
       }
      } while(0);
      if ((label|0) == 21) {
       label = 0;
       if ($41) {
        $__a$2 = $__a$0;
        break;
       }
      }
      $57 = HEAP32[$__a_end>>2]|0;
      $58 = $57;
      $59 = $__a$0;
      $60 = (($58) - ($59))|0;
      $61 = HEAP8[$__buf>>0]|0;
      $62 = $61 & 1;
      $63 = ($62<<24>>24)==(0);
      if ($63) {
       $65 = $61&255;
       $66 = $65 >>> 1;
       $68 = $66;
      } else {
       $64 = HEAP32[$27>>2]|0;
       $68 = $64;
      }
      $67 = ($60|0)==($68|0);
      if ($67) {
       if ($63) {
        $70 = $61&255;
        $71 = $70 >>> 1;
        $73 = $71;
       } else {
        $69 = HEAP32[$27>>2]|0;
        $73 = $69;
       }
       $72 = $73 << 1;
       __THREW__ = 0;
       invoke_vii(564,($__buf|0),($72|0));
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        label = 39;
        break;
       }
       $76 = HEAP8[$__buf>>0]|0;
       $77 = $76 & 1;
       $78 = ($77<<24>>24)==(0);
       if ($78) {
        $81 = 10;
       } else {
        $79 = HEAP32[$__buf>>2]|0;
        $80 = $79 & -2;
        $phitmp$i22 = (($80) + -1)|0;
        $81 = $phitmp$i22;
       }
       __THREW__ = 0;
       invoke_vii(564,($__buf|0),($81|0));
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        label = 39;
        break;
       }
       $84 = HEAP8[$__buf>>0]|0;
       $85 = $84 & 1;
       $86 = ($85<<24>>24)==(0);
       if ($86) {
        $89 = $$pre$phi34Z2D;
       } else {
        $87 = HEAP32[$$pre$phi36Z2D>>2]|0;
        $89 = $87;
       }
       $88 = (($89) + ($73)|0);
       HEAP32[$__a_end>>2] = $88;
       $__a$1 = $89;
      } else {
       $__a$1 = $__a$0;
      }
      $107 = (($42) + 12|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($42) + 16|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($108|0)==($110|0);
      if ($111) {
       $112 = HEAP32[$42>>2]|0;
       $113 = (($112) + 36|0);
       $114 = HEAP32[$113>>2]|0;
       __THREW__ = 0;
       $115 = (invoke_ii($114|0,($42|0))|0);
       $116 = __THREW__; __THREW__ = 0;
       $117 = $116&1;
       if ($117) {
        label = 39;
        break;
       } else {
        $$0$i$i = $115;
       }
      } else {
       $118 = HEAP8[$108>>0]|0;
       $119 = $118&255;
       $$0$i$i = $119;
      }
      $120 = $$0$i$i&255;
      $121 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($120,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $122 = ($121|0)==(0);
      if (!($122)) {
       $__a$2 = $__a$1;
       break;
      }
      $123 = HEAP32[$107>>2]|0;
      $124 = HEAP32[$109>>2]|0;
      $125 = ($123|0)==($124|0);
      if ($125) {
       $126 = HEAP32[$42>>2]|0;
       $127 = (($126) + 40|0);
       $128 = HEAP32[$127>>2]|0;
       __THREW__ = 0;
       (invoke_ii($128|0,($42|0))|0);
       $129 = __THREW__; __THREW__ = 0;
       $130 = $129&1;
       if ($130) {
        label = 39;
        break;
       } else {
        $$pre$i$i$i8 = $42;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $131 = (($123) + 1|0);
       HEAP32[$107>>2] = $131;
       $$pre$i$i$i8 = $42;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 39) {
      $98 = ___cxa_find_matching_catch()|0;
      $99 = tempRet0;
      $lpad$phi$index = $98;$lpad$phi$index6 = $99;
      break;
     }
     $132 = (($__a$2) + 3|0);
     HEAP8[$132>>0] = 0;
     __THREW__ = 0;
     $133 = (invoke_i(574)|0);
     $134 = __THREW__; __THREW__ = 0;
     $135 = $134&1;
     if ($135) {
      label = 40;
     } else {
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $136 = (invoke_iiii(575,($__a$2|0),($133|0),($vararg_buffer|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 40;
      } else {
       $139 = ($136|0)==(1);
       if (!($139)) {
        HEAP32[$__err>>2] = 4;
       }
       $140 = HEAP32[$__b>>2]|0;
       $141 = ($140|0)==(0|0);
       if ($141) {
        $155 = 0;
       } else {
        $142 = (($140) + 12|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = (($140) + 16|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = ($143|0)==($145|0);
        if ($146) {
         $147 = HEAP32[$140>>2]|0;
         $148 = (($147) + 36|0);
         $149 = HEAP32[$148>>2]|0;
         __THREW__ = 0;
         $150 = (invoke_ii($149|0,($140|0))|0);
         $151 = __THREW__; __THREW__ = 0;
         $152 = $151&1;
         if ($152) {
          label = 40;
          break;
         }
         $153 = ($150|0)==(-1);
         if ($153) {
          HEAP32[$__b>>2] = 0;
          $155 = 0;
         } else {
          $155 = $140;
         }
        } else {
         $155 = $140;
        }
       }
       $154 = ($155|0)==(0|0);
       $156 = HEAP32[$__e>>2]|0;
       $157 = ($156|0)==(0|0);
       do {
        if ($157) {
         label = 65;
        } else {
         $158 = (($156) + 12|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = (($156) + 16|0);
         $161 = HEAP32[$160>>2]|0;
         $162 = ($159|0)==($161|0);
         if (!($162)) {
          if ($154) {
           break;
          } else {
           label = 67;
           break;
          }
         }
         $163 = HEAP32[$156>>2]|0;
         $164 = (($163) + 36|0);
         $165 = HEAP32[$164>>2]|0;
         __THREW__ = 0;
         $166 = (invoke_ii($165|0,($156|0))|0);
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         if ($168) {
          label = 40;
          break L7;
         }
         $169 = ($166|0)==(-1);
         if ($169) {
          HEAP32[$__e>>2] = 0;
          label = 65;
          break;
         } else {
          if ($154) {
           break;
          } else {
           label = 67;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 65) {
        if ($154) {
         label = 67;
        }
       }
       if ((label|0) == 67) {
        $170 = HEAP32[$__err>>2]|0;
        $171 = $170 | 2;
        HEAP32[$__err>>2] = $171;
       }
       HEAP32[$agg$result>>2] = $155;
       $172 = HEAP8[$__buf>>0]|0;
       $173 = $172 & 1;
       $174 = ($173<<24>>24)==(0);
       if (!($174)) {
        $175 = (($__buf) + 8|0);
        $176 = HEAP32[$175>>2]|0;
        _free($176);
       }
       $177 = HEAP8[$__grouping>>0]|0;
       $178 = $177 & 1;
       $179 = ($178<<24>>24)==(0);
       if ($179) {
        STACKTOP = sp;return;
       }
       $180 = (($__grouping) + 8|0);
       $181 = HEAP32[$180>>2]|0;
       _free($181);
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $100 = ___cxa_find_matching_catch()|0;
    $101 = tempRet0;
    $lpad$phi$index = $100;$lpad$phi$index6 = $101;
   }
   $102 = HEAP8[$__buf>>0]|0;
   $103 = $102 & 1;
   $104 = ($103<<24>>24)==(0);
   if ($104) {
    $$0 = $lpad$phi$index;$$01 = $lpad$phi$index6;
   } else {
    $105 = (($__buf) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    _free($106);
    $$0 = $lpad$phi$index;$$01 = $lpad$phi$index6;
   }
  }
 }
 if ((label|0) == 37) {
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = (($1) + 4|0);
  $93 = HEAP32[$92>>2]|0;HEAP32[$92>>2] = (($93+-1)|0);
  $94 = ($93|0)==(0);
  if ($94) {
   $95 = HEAP32[$1>>2]|0;
   $96 = (($95) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   FUNCTION_TABLE_vi[$97 & 1023]($1);
   $$0 = $90;$$01 = $91;
  } else {
   $$0 = $90;$$01 = $91;
  }
 }
 $182 = HEAP8[$__grouping>>0]|0;
 $183 = $182 & 1;
 $184 = ($183<<24>>24)==(0);
 if ($184) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $185 = (($__grouping) + 8|0);
 $186 = HEAP32[$185>>2]|0;
 _free($186);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (10280 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (10280 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,10320,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(576,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11664>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((11664|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(577,2147483647,(11672|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((11664|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[11656>>2] = $4;
     ___cxa_guard_release((11664|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[11656>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy11 = sp + 48|0;
 $$byval_copy = sp;
 $__lv = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 $2 = sp + 16|0;
 $__names = sp + 24|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$__lv>>2] = -1;
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $10;
  $11 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $11;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$9 & 1023]($0,$this,$$byval_copy,$$byval_copy11,$__iob,$__err,$__lv);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $12;
  $13 = HEAP32[$__lv>>2]|0;
  if ((($13|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($13|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $12;
  STACKTOP = sp;return;
 }
 $14 = (($__iob) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17+1)|0);
 __THREW__ = 0;
 $18 = (invoke_iii(556,($15|0),(11744|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $68 = ___cxa_find_matching_catch()|0;
  $69 = tempRet0;
  $70 = (($15) + 4|0);
  $71 = HEAP32[$70>>2]|0;HEAP32[$70>>2] = (($71+-1)|0);
  $72 = ($71|0)==(0);
  if (!($72)) {
   $$0 = $68;$$01 = $69;
   ___resumeException($$0|0);
   // unreachable;
  }
  $73 = HEAP32[$15>>2]|0;
  $74 = (($73) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  FUNCTION_TABLE_vi[$75 & 1023]($15);
  $$0 = $68;$$01 = $69;
  ___resumeException($$0|0);
  // unreachable;
 }
 $21 = (($15) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = HEAP32[$15>>2]|0;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vi[$26 & 1023]($15);
 }
 $27 = HEAP32[$14>>2]|0;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 $30 = (invoke_iii(556,($27|0),(11904|0))|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $76 = ___cxa_find_matching_catch()|0;
  $77 = tempRet0;
  $78 = (($27) + 4|0);
  $79 = HEAP32[$78>>2]|0;HEAP32[$78>>2] = (($79+-1)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$0 = $76;$$01 = $77;
   ___resumeException($$0|0);
   // unreachable;
  }
  $81 = HEAP32[$27>>2]|0;
  $82 = (($81) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  FUNCTION_TABLE_vi[$83 & 1023]($27);
  $$0 = $76;$$01 = $77;
  ___resumeException($$0|0);
  // unreachable;
 }
 $33 = (($27) + 4|0);
 $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = HEAP32[$27>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($27);
 }
 $39 = HEAP32[$30>>2]|0;
 $40 = (($39) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 __THREW__ = 0;
 invoke_vii($41|0,($__names|0),($30|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $$02 = $__names;
 } else {
  $44 = (($__names) + 12|0);
  $45 = HEAP32[$30>>2]|0;
  $46 = (($45) + 28|0);
  $47 = HEAP32[$46>>2]|0;
  __THREW__ = 0;
  invoke_vii($47|0,($44|0),($30|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if ($49) {
   $$02 = $44;
  } else {
   $50 = HEAP32[$__e>>2]|0;
   $51 = (($__names) + 24|0);
   __THREW__ = 0;
   $52 = (invoke_iiiiiiii(578,($__b|0),($50|0),($__names|0),($51|0),($18|0),($__err|0),1)|0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $95 = ___cxa_find_matching_catch()|0;
    $96 = tempRet0;
    $97 = HEAP8[$44>>0]|0;
    $98 = $97 & 1;
    $99 = ($98<<24>>24)==(0);
    if (!($99)) {
     $100 = (($__names) + 20|0);
     $101 = HEAP32[$100>>2]|0;
     _free($101);
    }
    $102 = HEAP8[$__names>>0]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if (!($104)) {
     $105 = (($__names) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     _free($106);
    }
    $$0 = $95;$$01 = $96;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $55 = ($52|0)==($__names|0);
    $56 = $55&1;
    HEAP8[$__v>>0] = $56;
    $57 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $57;
    $58 = HEAP8[$44>>0]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if (!($60)) {
     $61 = (($__names) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     _free($62);
    }
    $63 = HEAP8[$__names>>0]|0;
    $64 = $63 & 1;
    $65 = ($64<<24>>24)==(0);
    if ($65) {
     STACKTOP = sp;return;
    }
    $66 = (($__names) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    _free($67);
    STACKTOP = sp;return;
   }
  }
 }
 $84 = ___cxa_find_matching_catch()|0;
 $85 = tempRet0;
 $86 = ($__names|0)==($$02|0);
 if ($86) {
  $$0 = $84;$$01 = $85;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $88 = $$02;
 }
 while(1) {
  $87 = (($88) + -12|0);
  $89 = HEAP8[$87>>0]|0;
  $90 = $89 & 1;
  $91 = ($90<<24>>24)==(0);
  if (!($91)) {
   $92 = (($88) + -4|0);
   $93 = HEAP32[$92>>2]|0;
   _free($93);
  }
  $94 = ($87|0)==($__names|0);
  if ($94) {
   $$0 = $84;$$01 = $85;
   break;
  } else {
   $88 = $87;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03078 = 0, $$4 = 0, $$__e$sroa$0$0 = 0, $$__e$sroa$0$03 = 0, $$index = 0, $$index16 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off039 = 0, $__consume$1$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$0$ph = 0, $__e$sroa$0$1 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$066 = 0, $__ky1$040 = 0, $__ky2$051 = 0;
 var $__n_does_match$0$lcssa = 0, $__n_does_match$064 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$336 = 0, $__n_does_match$4 = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$063 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$335 = 0, $__n_might_match$4 = 0, $__st$065 = 0, $__st$137 = 0, $__st$250 = 0, $__st$32979 = 0, $__statbuf = 0, $__status$0 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($7|0),(20008|0),(386|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    // unreachable;
   }
   $10 = ___cxa_find_matching_catch()|0;
   $11 = tempRet0;
   $$index = $10;$$index16 = $11;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $21 = $5;$__status$0 = $5;
  }
 } else {
  $21 = 0;$__status$0 = $__statbuf;
 }
 $22 = ($__kb|0)==($__ke|0);
 if ($22) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$066 = $__kb;$__n_does_match$064 = 0;$__n_might_match$063 = $3;$__st$065 = $__status$0;
  while(1) {
   $23 = HEAP8[$__ky$066>>0]|0;
   $24 = $23 & 1;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $28 = $23&255;
    $29 = $28 >>> 1;
    $31 = $29;
   } else {
    $26 = (($__ky$066) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $31 = $27;
   }
   $30 = ($31|0)==(0);
   if ($30) {
    HEAP8[$__st$065>>0] = 2;
    $32 = (($__n_might_match$063) + -1)|0;
    $33 = (($__n_does_match$064) + 1)|0;
    $__n_does_match$1 = $33;$__n_might_match$1 = $32;
   } else {
    HEAP8[$__st$065>>0] = 1;
    $__n_does_match$1 = $__n_does_match$064;$__n_might_match$1 = $__n_might_match$063;
   }
   $34 = (($__ky$066) + 12|0);
   $35 = (($__st$065) + 1|0);
   $36 = ($34|0)==($__ke|0);
   if ($36) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$066 = $34;$__n_does_match$064 = $__n_does_match$1;$__n_might_match$063 = $__n_might_match$1;$__st$065 = $35;
   }
  }
 }
 $__e$sroa$0$0$ph = $__e$0;$__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L21: while(1) {
  $37 = ($__n_might_match$2$ph|0)!=(0);
  $__e$sroa$0$0 = $__e$sroa$0$0$ph;$__indx$0 = $__indx$0$ph;
  while(1) {
   $38 = HEAP32[$__b>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if ($39) {
     $67 = 1;
    } else {
     $40 = (($38) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if ($44) {
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 7;
       break L21;
      } else {
       $$0$i$i$i$i = $48;
      }
     } else {
      $51 = HEAP32[$41>>2]|0;
      $$0$i$i$i$i = $51;
     }
     $52 = ($$0$i$i$i$i|0)==(-1);
     if ($52) {
      HEAP32[$__b>>2] = 0;
      $67 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $67 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $53 = ($__e$sroa$0$0|0)==(0|0);
   if ($53) {
    $$pre$i3$i$i19 = 0;$68 = 1;$__e$sroa$0$1 = 0;
   } else {
    $54 = (($__e$sroa$0$0) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($__e$sroa$0$0) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($55|0)==($57|0);
    if ($58) {
     $59 = HEAP32[$__e$sroa$0$0>>2]|0;
     $60 = (($59) + 36|0);
     $61 = HEAP32[$60>>2]|0;
     __THREW__ = 0;
     $62 = (invoke_ii($61|0,($__e$sroa$0$0|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      label = 7;
      break L21;
     } else {
      $$0$i$i1$i$i = $62;
     }
    } else {
     $65 = HEAP32[$55>>2]|0;
     $$0$i$i1$i$i = $65;
    }
    $66 = ($$0$i$i1$i$i|0)==(-1);
    $$__e$sroa$0$0 = $66 ? 0 : $__e$sroa$0$0;
    $$__e$sroa$0$03 = $66 ? 0 : $__e$sroa$0$0;
    $$4 = $66 ? 1 : 0;
    $$pre$i3$i$i19 = $$__e$sroa$0$03;$68 = $$4;$__e$sroa$0$1 = $$__e$sroa$0$0;
   }
   $tmp$i$i = $67 ^ $68;
   $$ = $tmp$i$i & $37;
   $69 = HEAP32[$__b>>2]|0;
   if (!($$)) {
    label = 69;
    break L21;
   }
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$69>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    __THREW__ = 0;
    $78 = (invoke_ii($77|0,($69|0))|0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 7;
     break L21;
    } else {
     $$0$i$i = $78;
    }
   } else {
    $81 = HEAP32[$71>>2]|0;
    $$0$i$i = $81;
   }
   if ($__case_sensitive) {
    $__c$0 = $$0$i$i;
   } else {
    $82 = HEAP32[$__ct>>2]|0;
    $83 = (($82) + 28|0);
    $84 = HEAP32[$83>>2]|0;
    __THREW__ = 0;
    $85 = (invoke_iii($84|0,($__ct|0),($$0$i$i|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 7;
     break L21;
    } else {
     $__c$0 = $85;
    }
   }
   $$pre = (($__indx$0) + 1)|0;
   if ($22) {
    $__e$sroa$0$0 = $__e$sroa$0$1;$__indx$0 = $$pre;
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2$ph;$__n_might_match$335 = $__n_might_match$2$ph;$__st$137 = $__status$0;
    break;
   }
  }
  while(1) {
   $88 = HEAP8[$__st$137>>0]|0;
   $89 = ($88<<24>>24)==(1);
   do {
    if ($89) {
     $90 = HEAP8[$__ky1$040>>0]|0;
     $91 = $90 & 1;
     $92 = ($91<<24>>24)==(0);
     if ($92) {
      $95 = (($__ky1$040) + 4|0);
      $97 = $95;
     } else {
      $93 = (($__ky1$040) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $97 = $94;
     }
     $96 = (($97) + ($__indx$0<<2)|0);
     $98 = HEAP32[$96>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $98;
     } else {
      $99 = HEAP32[$__ct>>2]|0;
      $100 = (($99) + 28|0);
      $101 = HEAP32[$100>>2]|0;
      __THREW__ = 0;
      $102 = (invoke_iii($101|0,($__ct|0),($98|0))|0);
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if ($104) {
       label = 6;
       break L21;
      } else {
       $__kc$0 = $102;
      }
     }
     $105 = ($__c$0|0)==($__kc$0|0);
     if (!($105)) {
      HEAP8[$__st$137>>0] = 0;
      $117 = (($__n_might_match$335) + -1)|0;
      $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $117;
      break;
     }
     $106 = HEAP8[$__ky1$040>>0]|0;
     $107 = $106 & 1;
     $108 = ($107<<24>>24)==(0);
     if ($108) {
      $111 = $106&255;
      $112 = $111 >>> 1;
      $114 = $112;
     } else {
      $109 = (($__ky1$040) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      $114 = $110;
     }
     $113 = ($114|0)==($$pre|0);
     if ($113) {
      HEAP8[$__st$137>>0] = 2;
      $115 = (($__n_might_match$335) + -1)|0;
      $116 = (($__n_does_match$336) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $116;$__n_might_match$4 = $115;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
    }
   } while(0);
   $118 = (($__ky1$040) + 12|0);
   $119 = ($118|0)==($__ke|0);
   if ($119) {
    break;
   }
   $120 = (($__st$137) + 1|0);
   $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $118;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $120;
  }
  if (!($__consume$1$off0)) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $121 = HEAP32[$__b>>2]|0;
  $122 = (($121) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)==($125|0);
  if ($126) {
   $127 = HEAP32[$121>>2]|0;
   $128 = (($127) + 40|0);
   $129 = HEAP32[$128>>2]|0;
   __THREW__ = 0;
   (invoke_ii($129|0,($121|0))|0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    label = 8;
    break;
   }
  } else {
   $132 = (($123) + 4|0);
   HEAP32[$122>>2] = $132;
  }
  $133 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($133>>>0)<(2);
  if ($$not) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$4;$__st$250 = $__status$0;
  }
  while(1) {
   $134 = HEAP8[$__st$250>>0]|0;
   $135 = ($134<<24>>24)==(2);
   if ($135) {
    $136 = HEAP8[$__ky2$051>>0]|0;
    $137 = $136 & 1;
    $138 = ($137<<24>>24)==(0);
    if ($138) {
     $141 = $136&255;
     $142 = $141 >>> 1;
     $144 = $142;
    } else {
     $139 = (($__ky2$051) + 4|0);
     $140 = HEAP32[$139>>2]|0;
     $144 = $140;
    }
    $143 = ($144|0)==($$pre|0);
    if ($143) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250>>0] = 0;
     $145 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $145;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $146 = (($__ky2$051) + 12|0);
   $147 = (($__st$250) + 1|0);
   $148 = ($146|0)==($__ke|0);
   if ($148) {
    $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$6;$__n_might_match$2$ph = $__n_might_match$4;
    continue L21;
   } else {
    $__ky2$051 = $146;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $147;
   }
  }
 }
 if ((label|0) == 6) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $lpad$phi$index = $12;$lpad$phi$index8 = $13;
 }
 else if ((label|0) == 7) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $lpad$phi$index = $14;$lpad$phi$index8 = $15;
 }
 else if ((label|0) == 8) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $lpad$phi$index = $16;$lpad$phi$index8 = $17;
 }
 else if ((label|0) == 69) {
  $149 = ($69|0)==(0|0);
  do {
   if ($149) {
    $189 = 1;
    label = 76;
   } else {
    $150 = (($69) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($69) + 16|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($151|0)==($153|0);
    if ($154) {
     $155 = HEAP32[$69>>2]|0;
     $156 = (($155) + 36|0);
     $157 = HEAP32[$156>>2]|0;
     __THREW__ = 0;
     $158 = (invoke_ii($157|0,($69|0))|0);
     $159 = __THREW__; __THREW__ = 0;
     $160 = $159&1;
     if ($160) {
      break;
     } else {
      $$0$i$i$i$i11 = $158;
     }
    } else {
     $161 = HEAP32[$151>>2]|0;
     $$0$i$i$i$i11 = $161;
    }
    $162 = ($$0$i$i$i$i11|0)==(-1);
    if ($162) {
     HEAP32[$__b>>2] = 0;
     $189 = 1;
     label = 76;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
     $189 = $phitmp$i$i$i14;
     label = 76;
     break;
    }
   }
  } while(0);
  do {
   if ((label|0) == 76) {
    $163 = ($$pre$i3$i$i19|0)==(0|0);
    if ($163) {
     label = 81;
    } else {
     $164 = (($$pre$i3$i$i19) + 12|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($$pre$i3$i$i19) + 16|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = ($165|0)==($167|0);
     if ($168) {
      $169 = HEAP32[$$pre$i3$i$i19>>2]|0;
      $170 = (($169) + 36|0);
      $171 = HEAP32[$170>>2]|0;
      __THREW__ = 0;
      $172 = (invoke_ii($171|0,($$pre$i3$i$i19|0))|0);
      $173 = __THREW__; __THREW__ = 0;
      $174 = $173&1;
      if ($174) {
       break;
      } else {
       $$0$i$i1$i$i17 = $172;
      }
     } else {
      $175 = HEAP32[$165>>2]|0;
      $$0$i$i1$i$i17 = $175;
     }
     $176 = ($$0$i$i1$i$i17|0)==(-1);
     if ($176) {
      label = 81;
     } else {
      if (!($189)) {
       label = 83;
      }
     }
    }
    if ((label|0) == 81) {
     if ($189) {
      label = 83;
     }
    }
    if ((label|0) == 83) {
     $177 = HEAP32[$__err>>2]|0;
     $178 = $177 | 2;
     HEAP32[$__err>>2] = $178;
    }
    L115: do {
     if ($22) {
      label = 88;
     } else {
      $179 = HEAP8[$__status$0>>0]|0;
      $180 = ($179<<24>>24)==(2);
      if ($180) {
       $$028 = $__kb;
      } else {
       $$03078 = $__kb;$__st$32979 = $__status$0;
       while(1) {
        $184 = (($$03078) + 12|0);
        $185 = ($184|0)==($__ke|0);
        $182 = (($__st$32979) + 1|0);
        if ($185) {
         label = 88;
         break L115;
        }
        $181 = HEAP8[$182>>0]|0;
        $183 = ($181<<24>>24)==(2);
        if ($183) {
         $$028 = $184;
         break;
        } else {
         $$03078 = $184;$__st$32979 = $182;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 88) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$028 = $__ke;
    }
    $188 = ($21|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$028|0);
    }
    _free($21);
    STACKTOP = sp;return ($$028|0);
   }
  } while(0);
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $lpad$phi$index = $18;$lpad$phi$index8 = $19;
 }
 $20 = ($21|0)==(0|0);
 if ($20) {
  $$index = $lpad$phi$index;$$index16 = $lpad$phi$index8;
  ___resumeException($$index|0);
  // unreachable;
 }
 _free($21);
 $$index = $lpad$phi$index;$$index16 = $lpad$phi$index8;
 ___resumeException($$index|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0;
 var $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $177 = 1;$92 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $177 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($177) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($177) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP32[$__g_end$i>>2]|0;
    $125 = $124;
    $126 = $__g$i;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$__dc$i>>2]|0;
     $130 = (($124) + 4|0);
     HEAP32[$__g_end$i>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(565,($__a$2$i|0),($131|0),($__err|0),($$0$i$i|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $132;
    $135 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$135,$__err);
    $136 = ($92|0)==(0|0);
    if ($136) {
     $166 = 0;$178 = 1;
    } else {
     $137 = (($92) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($92) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$92>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($92|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $145;
      }
     } else {
      $148 = HEAP32[$138>>2]|0;
      $$0$i$i$i$i$i = $148;
     }
     $149 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $149 ? 0 : $92;
     $$8 = $149 ? 1 : 0;
     $166 = $$7;$178 = $$8;
    }
    $150 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($150) {
     label = 67;
    } else {
     $151 = (($$pre$i3$i$i$i) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$pre$i3$i$i$i) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$pre$i3$i$i$i|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i1$i$i$i = $162;
     }
     $163 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($163) {
      label = 67;
     } else {
      if (!($178)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($178) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $166;
    $167 = HEAP8[$__buf$i>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = (($__buf$i) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     _free($171);
    }
    $172 = HEAP8[$__grouping$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if ($174) {
     STACKTOP = sp;return;
    }
    $175 = (($__grouping$i) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    _free($176);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $182 = 1;$92 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $182 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($182) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($182) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP32[$__g_end$i>>2]|0;
    $125 = $124;
    $126 = $__g$i;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$__dc$i>>2]|0;
     $130 = (($124) + 4|0);
     HEAP32[$__g_end$i>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(566,($__a$2$i|0),($131|0),($__err|0),($$0$i$i|0))|0);
   $133 = tempRet0;
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 37;
   } else {
    $136 = $__v;
    $137 = $136;
    HEAP32[$137>>2] = $132;
    $138 = (($136) + 4)|0;
    $139 = $138;
    HEAP32[$139>>2] = $133;
    $140 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$140,$__err);
    $141 = ($92|0)==(0|0);
    if ($141) {
     $171 = 0;$183 = 1;
    } else {
     $142 = (($92) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($92) + 16|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     if ($146) {
      $147 = HEAP32[$92>>2]|0;
      $148 = (($147) + 36|0);
      $149 = HEAP32[$148>>2]|0;
      __THREW__ = 0;
      $150 = (invoke_ii($149|0,($92|0))|0);
      $151 = __THREW__; __THREW__ = 0;
      $152 = $151&1;
      if ($152) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $150;
      }
     } else {
      $153 = HEAP32[$143>>2]|0;
      $$0$i$i$i$i$i = $153;
     }
     $154 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $154 ? 0 : $92;
     $$8 = $154 ? 1 : 0;
     $171 = $$7;$183 = $$8;
    }
    $155 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($155) {
     label = 67;
    } else {
     $156 = (($$pre$i3$i$i$i) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (($$pre$i3$i$i$i) + 16|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($157|0)==($159|0);
     if ($160) {
      $161 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $162 = (($161) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      __THREW__ = 0;
      $164 = (invoke_ii($163|0,($$pre$i3$i$i$i|0))|0);
      $165 = __THREW__; __THREW__ = 0;
      $166 = $165&1;
      if ($166) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $164;
      }
     } else {
      $167 = HEAP32[$157>>2]|0;
      $$0$i$i1$i$i$i = $167;
     }
     $168 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($168) {
      label = 67;
     } else {
      if (!($183)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($183) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $169 = HEAP32[$__err>>2]|0;
     $170 = $169 | 2;
     HEAP32[$__err>>2] = $170;
    }
    HEAP32[$agg$result>>2] = $171;
    $172 = HEAP8[$__buf$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if (!($174)) {
     $175 = (($__buf$i) + 8|0);
     $176 = HEAP32[$175>>2]|0;
     _free($176);
    }
    $177 = HEAP8[$__grouping$i>>0]|0;
    $178 = $177 & 1;
    $179 = ($178<<24>>24)==(0);
    if ($179) {
     STACKTOP = sp;return;
    }
    $180 = (($__grouping$i) + 8|0);
    $181 = HEAP32[$180>>2]|0;
    _free($181);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0;
 var $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $177 = 1;$92 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $177 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($177) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($177) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP32[$__g_end$i>>2]|0;
    $125 = $124;
    $126 = $__g$i;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$__dc$i>>2]|0;
     $130 = (($124) + 4|0);
     HEAP32[$__g_end$i>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(567,($__a$2$i|0),($131|0),($__err|0),($$0$i$i|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 37;
   } else {
    HEAP16[$__v>>1] = $132;
    $135 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$135,$__err);
    $136 = ($92|0)==(0|0);
    if ($136) {
     $166 = 0;$178 = 1;
    } else {
     $137 = (($92) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($92) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$92>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($92|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $145;
      }
     } else {
      $148 = HEAP32[$138>>2]|0;
      $$0$i$i$i$i$i = $148;
     }
     $149 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $149 ? 0 : $92;
     $$8 = $149 ? 1 : 0;
     $166 = $$7;$178 = $$8;
    }
    $150 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($150) {
     label = 67;
    } else {
     $151 = (($$pre$i3$i$i$i) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$pre$i3$i$i$i) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$pre$i3$i$i$i|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i1$i$i$i = $162;
     }
     $163 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($163) {
      label = 67;
     } else {
      if (!($178)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($178) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $166;
    $167 = HEAP8[$__buf$i>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = (($__buf$i) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     _free($171);
    }
    $172 = HEAP8[$__grouping$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if ($174) {
     STACKTOP = sp;return;
    }
    $175 = (($__grouping$i) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    _free($176);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0;
 var $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $177 = 1;$92 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $177 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($177) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($177) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP32[$__g_end$i>>2]|0;
    $125 = $124;
    $126 = $__g$i;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$__dc$i>>2]|0;
     $130 = (($124) + 4|0);
     HEAP32[$__g_end$i>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(568,($__a$2$i|0),($131|0),($__err|0),($$0$i$i|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $132;
    $135 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$135,$__err);
    $136 = ($92|0)==(0|0);
    if ($136) {
     $166 = 0;$178 = 1;
    } else {
     $137 = (($92) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($92) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$92>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($92|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $145;
      }
     } else {
      $148 = HEAP32[$138>>2]|0;
      $$0$i$i$i$i$i = $148;
     }
     $149 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $149 ? 0 : $92;
     $$8 = $149 ? 1 : 0;
     $166 = $$7;$178 = $$8;
    }
    $150 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($150) {
     label = 67;
    } else {
     $151 = (($$pre$i3$i$i$i) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$pre$i3$i$i$i) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$pre$i3$i$i$i|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i1$i$i$i = $162;
     }
     $163 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($163) {
      label = 67;
     } else {
      if (!($178)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($178) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $166;
    $167 = HEAP8[$__buf$i>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = (($__buf$i) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     _free($171);
    }
    $172 = HEAP8[$__grouping$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if ($174) {
     STACKTOP = sp;return;
    }
    $175 = (($__grouping$i) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    _free($176);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0;
 var $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $177 = 1;$92 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $177 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($177) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($177) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP32[$__g_end$i>>2]|0;
    $125 = $124;
    $126 = $__g$i;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$__dc$i>>2]|0;
     $130 = (($124) + 4|0);
     HEAP32[$__g_end$i>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(569,($__a$2$i|0),($131|0),($__err|0),($$0$i$i|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $132;
    $135 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$135,$__err);
    $136 = ($92|0)==(0|0);
    if ($136) {
     $166 = 0;$178 = 1;
    } else {
     $137 = (($92) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($92) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$92>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($92|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $145;
      }
     } else {
      $148 = HEAP32[$138>>2]|0;
      $$0$i$i$i$i$i = $148;
     }
     $149 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $149 ? 0 : $92;
     $$8 = $149 ? 1 : 0;
     $166 = $$7;$178 = $$8;
    }
    $150 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($150) {
     label = 67;
    } else {
     $151 = (($$pre$i3$i$i$i) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$pre$i3$i$i$i) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$pre$i3$i$i$i|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i1$i$i$i = $162;
     }
     $163 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($163) {
      label = 67;
     } else {
      if (!($178)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($178) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $166;
    $167 = HEAP8[$__buf$i>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = (($__buf$i) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     _free($171);
    }
    $172 = HEAP8[$__grouping$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if ($174) {
     STACKTOP = sp;return;
    }
    $175 = (($__grouping$i) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    _free($176);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index10 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 200|0;
 $__thousands_sep$i = sp;
 $__grouping$i = sp + 4|0;
 $__buf$i = sp + 16|0;
 $__a_end$i = sp + 28|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 196|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $12;$$pre$phi36$iZ2D = $$pre35$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $182 = 1;$92 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $182 = $$;$92 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($182) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($182) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = $44;
    $46 = $__a$0$i;
    $47 = (($45) - ($46))|0;
    $48 = HEAP8[$__buf$i>>0]|0;
    $49 = $48 & 1;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $52 = $48&255;
     $53 = $52 >>> 1;
     $55 = $53;
    } else {
     $51 = HEAP32[$14>>2]|0;
     $55 = $51;
    }
    $54 = ($47|0)==($55|0);
    if ($54) {
     if ($50) {
      $57 = $48&255;
      $58 = $57 >>> 1;
      $60 = $58;
     } else {
      $56 = HEAP32[$14>>2]|0;
      $60 = $56;
     }
     $59 = $60 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($59|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 36;
      break;
     }
     $63 = HEAP8[$__buf$i>>0]|0;
     $64 = $63 & 1;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $68 = 10;
     } else {
      $66 = HEAP32[$__buf$i>>2]|0;
      $67 = $66 & -2;
      $phitmp$i23$i = (($67) + -1)|0;
      $68 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($68|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      label = 36;
      break;
     }
     $71 = HEAP8[$__buf$i>>0]|0;
     $72 = $71 & 1;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $76 = $$pre$phi34$iZ2D;
     } else {
      $74 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $76 = $74;
     }
     $75 = (($76) + ($60)|0);
     HEAP32[$__a_end$i>>2] = $75;
     $__a$1$i = $76;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $91 = (($92) + 12|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = (($92) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$92>>2]|0;
     $98 = (($97) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($92|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $100;
     }
    } else {
     $103 = HEAP32[$93>>2]|0;
     $$0$i$i$i = $103;
    }
    $104 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $105 = ($104|0)==(0);
    if (!($105)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $106 = HEAP32[$91>>2]|0;
    $107 = HEAP32[$94>>2]|0;
    $108 = ($106|0)==($107|0);
    if ($108) {
     $109 = HEAP32[$92>>2]|0;
     $110 = (($109) + 40|0);
     $111 = HEAP32[$110>>2]|0;
     __THREW__ = 0;
     (invoke_ii($111|0,($92|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $114 = (($106) + 4|0);
     HEAP32[$91>>2] = $114;
     $$pre$i$i$i5$i = $92;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $77 = ___cxa_find_matching_catch()|0;
    $78 = tempRet0;
    $lpad$phi$i$index = $77;$lpad$phi$i$index10 = $78;
    break;
   }
   $115 = HEAP8[$__grouping$i>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $120 = $115&255;
    $121 = $120 >>> 1;
    $123 = $121;
   } else {
    $118 = (($__grouping$i) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $123 = $119;
   }
   $122 = ($123|0)==(0);
   if (!($122)) {
    $124 = HEAP32[$__g_end$i>>2]|0;
    $125 = $124;
    $126 = $__g$i;
    $127 = (($125) - ($126))|0;
    $128 = ($127|0)<(160);
    if ($128) {
     $129 = HEAP32[$__dc$i>>2]|0;
     $130 = (($124) + 4|0);
     HEAP32[$__g_end$i>>2] = $130;
     HEAP32[$124>>2] = $129;
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (invoke_iiiii(570,($__a$2$i|0),($131|0),($__err|0),($$0$i$i|0))|0);
   $133 = tempRet0;
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 37;
   } else {
    $136 = $__v;
    $137 = $136;
    HEAP32[$137>>2] = $132;
    $138 = (($136) + 4)|0;
    $139 = $138;
    HEAP32[$139>>2] = $133;
    $140 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$140,$__err);
    $141 = ($92|0)==(0|0);
    if ($141) {
     $171 = 0;$183 = 1;
    } else {
     $142 = (($92) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($92) + 16|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($143|0)==($145|0);
     if ($146) {
      $147 = HEAP32[$92>>2]|0;
      $148 = (($147) + 36|0);
      $149 = HEAP32[$148>>2]|0;
      __THREW__ = 0;
      $150 = (invoke_ii($149|0,($92|0))|0);
      $151 = __THREW__; __THREW__ = 0;
      $152 = $151&1;
      if ($152) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $150;
      }
     } else {
      $153 = HEAP32[$143>>2]|0;
      $$0$i$i$i$i$i = $153;
     }
     $154 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $154 ? 0 : $92;
     $$8 = $154 ? 1 : 0;
     $171 = $$7;$183 = $$8;
    }
    $155 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($155) {
     label = 67;
    } else {
     $156 = (($$pre$i3$i$i$i) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (($$pre$i3$i$i$i) + 16|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($157|0)==($159|0);
     if ($160) {
      $161 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $162 = (($161) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      __THREW__ = 0;
      $164 = (invoke_ii($163|0,($$pre$i3$i$i$i|0))|0);
      $165 = __THREW__; __THREW__ = 0;
      $166 = $165&1;
      if ($166) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $164;
      }
     } else {
      $167 = HEAP32[$157>>2]|0;
      $$0$i$i1$i$i$i = $167;
     }
     $168 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($168) {
      label = 67;
     } else {
      if (!($183)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($183) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $169 = HEAP32[$__err>>2]|0;
     $170 = $169 | 2;
     HEAP32[$__err>>2] = $170;
    }
    HEAP32[$agg$result>>2] = $171;
    $172 = HEAP8[$__buf$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if (!($174)) {
     $175 = (($__buf$i) + 8|0);
     $176 = HEAP32[$175>>2]|0;
     _free($176);
    }
    $177 = HEAP8[$__grouping$i>>0]|0;
    $178 = $177 & 1;
    $179 = ($178<<24>>24)==(0);
    if ($179) {
     STACKTOP = sp;return;
    }
    $180 = (($__grouping$i) + 8|0);
    $181 = HEAP32[$180>>2]|0;
    _free($181);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $79 = ___cxa_find_matching_catch()|0;
  $80 = tempRet0;
  $lpad$phi$i$index = $79;$lpad$phi$i$index10 = $80;
 }
 $81 = HEAP8[$__buf$i>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = (($__buf$i) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  _free($85);
 }
 $86 = HEAP8[$__grouping$i>>0]|0;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $89 = (($__grouping$i) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$8 = 0, $$9 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi35$iZ2D = 0, $$pre$phi37$iZ2D = 0, $$pre34$i = 0, $$pre36$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0;
 var $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index11 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 176|0;
 $__decimal_point$i = sp + 332|0;
 $__thousands_sep$i = sp + 328|0;
 $__grouping$i = sp + 316|0;
 $__buf$i = sp + 304|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre36$i = (($__buf$i) + 8|0);
    $$pre$phi35$iZ2D = $9;$$pre$phi37$iZ2D = $$pre36$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre34$i = (($__buf$i) + 1|0);
    $$pre$phi35$iZ2D = $$pre34$i;$$pre$phi37$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $177 = 1;$90 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3$i = $26;
     }
     $27 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $27 ? 0 : $$pre$i$i$i5$i;
     $$ = $27 ? 1 : 0;
     $177 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i9$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i9$i = $40;
     }
     $41 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($177) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($177) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 32;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 32;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi35$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi37$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index11 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP8[$__in_units$i>>0]|0;
    $123 = ($122<<24>>24)==(0);
    if (!($123)) {
     $124 = HEAP32[$__g_end$i>>2]|0;
     $125 = $124;
     $126 = $__g$i;
     $127 = (($125) - ($126))|0;
     $128 = ($127|0)<(160);
     if ($128) {
      $129 = HEAP32[$__dc$i>>2]|0;
      $130 = (($124) + 4|0);
      HEAP32[$__g_end$i>>2] = $130;
      HEAP32[$124>>2] = $129;
     }
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (+invoke_diii(571,($__a$2$i|0),($131|0),($__err|0)));
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 33;
   } else {
    HEAPF32[$__v>>2] = $132;
    $135 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$135,$__err);
    $136 = ($90|0)==(0|0);
    if ($136) {
     $166 = 0;$178 = 1;
    } else {
     $137 = (($90) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($90) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$90>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($90|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $145;
      }
     } else {
      $148 = HEAP32[$138>>2]|0;
      $$0$i$i$i$i$i = $148;
     }
     $149 = ($$0$i$i$i$i$i|0)==(-1);
     $$8 = $149 ? 0 : $90;
     $$9 = $149 ? 1 : 0;
     $166 = $$8;$178 = $$9;
    }
    $150 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($150) {
     label = 64;
    } else {
     $151 = (($$pre$i3$i$i$i) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$pre$i3$i$i$i) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$pre$i3$i$i$i|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i1$i$i$i = $162;
     }
     $163 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($163) {
      label = 64;
     } else {
      if (!($178)) {
       label = 66;
      }
     }
    }
    if ((label|0) == 64) {
     if ($178) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $166;
    $167 = HEAP8[$__buf$i>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = (($__buf$i) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     _free($171);
    }
    $172 = HEAP8[$__grouping$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if ($174) {
     STACKTOP = sp;return;
    }
    $175 = (($__grouping$i) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    _free($176);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index11 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$8 = 0, $$9 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi35$iZ2D = 0, $$pre$phi37$iZ2D = 0, $$pre34$i = 0, $$pre36$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0;
 var $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index11 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 176|0;
 $__decimal_point$i = sp + 332|0;
 $__thousands_sep$i = sp + 328|0;
 $__grouping$i = sp + 316|0;
 $__buf$i = sp + 304|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre36$i = (($__buf$i) + 8|0);
    $$pre$phi35$iZ2D = $9;$$pre$phi37$iZ2D = $$pre36$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre34$i = (($__buf$i) + 1|0);
    $$pre$phi35$iZ2D = $$pre34$i;$$pre$phi37$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $177 = 1;$90 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3$i = $26;
     }
     $27 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $27 ? 0 : $$pre$i$i$i5$i;
     $$ = $27 ? 1 : 0;
     $177 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i9$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i9$i = $40;
     }
     $41 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($177) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($177) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 32;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 32;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi35$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi37$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index11 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP8[$__in_units$i>>0]|0;
    $123 = ($122<<24>>24)==(0);
    if (!($123)) {
     $124 = HEAP32[$__g_end$i>>2]|0;
     $125 = $124;
     $126 = $__g$i;
     $127 = (($125) - ($126))|0;
     $128 = ($127|0)<(160);
     if ($128) {
      $129 = HEAP32[$__dc$i>>2]|0;
      $130 = (($124) + 4|0);
      HEAP32[$__g_end$i>>2] = $130;
      HEAP32[$124>>2] = $129;
     }
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (+invoke_diii(572,($__a$2$i|0),($131|0),($__err|0)));
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 33;
   } else {
    HEAPF64[$__v>>3] = $132;
    $135 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$135,$__err);
    $136 = ($90|0)==(0|0);
    if ($136) {
     $166 = 0;$178 = 1;
    } else {
     $137 = (($90) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($90) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$90>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($90|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $145;
      }
     } else {
      $148 = HEAP32[$138>>2]|0;
      $$0$i$i$i$i$i = $148;
     }
     $149 = ($$0$i$i$i$i$i|0)==(-1);
     $$8 = $149 ? 0 : $90;
     $$9 = $149 ? 1 : 0;
     $166 = $$8;$178 = $$9;
    }
    $150 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($150) {
     label = 64;
    } else {
     $151 = (($$pre$i3$i$i$i) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$pre$i3$i$i$i) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$pre$i3$i$i$i|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i1$i$i$i = $162;
     }
     $163 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($163) {
      label = 64;
     } else {
      if (!($178)) {
       label = 66;
      }
     }
    }
    if ((label|0) == 64) {
     if ($178) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $166;
    $167 = HEAP8[$__buf$i>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = (($__buf$i) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     _free($171);
    }
    $172 = HEAP8[$__grouping$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if ($174) {
     STACKTOP = sp;return;
    }
    $175 = (($__grouping$i) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    _free($176);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index11 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$8 = 0, $$9 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi35$iZ2D = 0, $$pre$phi37$iZ2D = 0, $$pre34$i = 0, $$pre36$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0;
 var $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index11 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 176|0;
 $__decimal_point$i = sp + 332|0;
 $__thousands_sep$i = sp + 328|0;
 $__grouping$i = sp + 316|0;
 $__buf$i = sp + 304|0;
 $__a_end$i = sp + 168|0;
 $__g$i = sp + 8|0;
 $__g_end$i = sp + 4|0;
 $__dc$i = sp;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(564,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre36$i = (($__buf$i) + 8|0);
    $$pre$phi35$iZ2D = $9;$$pre$phi37$iZ2D = $$pre36$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre34$i = (($__buf$i) + 1|0);
    $$pre$phi35$iZ2D = $$pre34$i;$$pre$phi37$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $177 = 1;$90 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i3$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3$i = $26;
     }
     $27 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $27 ? 0 : $$pre$i$i$i5$i;
     $$ = $27 ? 1 : 0;
     $177 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i9$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i9$i = $40;
     }
     $41 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($177) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($177) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = $42;
    $44 = $__a$0$i;
    $45 = (($43) - ($44))|0;
    $46 = HEAP8[$__buf$i>>0]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $53 = $51;
    } else {
     $49 = HEAP32[$11>>2]|0;
     $53 = $49;
    }
    $52 = ($45|0)==($53|0);
    if ($52) {
     if ($48) {
      $55 = $46&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$11>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 32;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(564,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 32;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi35$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi37$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index11 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP8[$__in_units$i>>0]|0;
    $123 = ($122<<24>>24)==(0);
    if (!($123)) {
     $124 = HEAP32[$__g_end$i>>2]|0;
     $125 = $124;
     $126 = $__g$i;
     $127 = (($125) - ($126))|0;
     $128 = ($127|0)<(160);
     if ($128) {
      $129 = HEAP32[$__dc$i>>2]|0;
      $130 = (($124) + 4|0);
      HEAP32[$__g_end$i>>2] = $130;
      HEAP32[$124>>2] = $129;
     }
    }
   }
   $131 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $132 = (+invoke_diii(573,($__a$2$i|0),($131|0),($__err|0)));
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 33;
   } else {
    HEAPF64[$__v>>3] = $132;
    $135 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$135,$__err);
    $136 = ($90|0)==(0|0);
    if ($136) {
     $166 = 0;$178 = 1;
    } else {
     $137 = (($90) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($90) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$90>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      __THREW__ = 0;
      $145 = (invoke_ii($144|0,($90|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $145;
      }
     } else {
      $148 = HEAP32[$138>>2]|0;
      $$0$i$i$i$i$i = $148;
     }
     $149 = ($$0$i$i$i$i$i|0)==(-1);
     $$8 = $149 ? 0 : $90;
     $$9 = $149 ? 1 : 0;
     $166 = $$8;$178 = $$9;
    }
    $150 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($150) {
     label = 64;
    } else {
     $151 = (($$pre$i3$i$i$i) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$pre$i3$i$i$i) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$pre$i3$i$i$i|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i1$i$i$i = $162;
     }
     $163 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($163) {
      label = 64;
     } else {
      if (!($178)) {
       label = 66;
      }
     }
    }
    if ((label|0) == 64) {
     if ($178) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $164 = HEAP32[$__err>>2]|0;
     $165 = $164 | 2;
     HEAP32[$__err>>2] = $165;
    }
    HEAP32[$agg$result>>2] = $166;
    $167 = HEAP8[$__buf$i>>0]|0;
    $168 = $167 & 1;
    $169 = ($168<<24>>24)==(0);
    if (!($169)) {
     $170 = (($__buf$i) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     _free($171);
    }
    $172 = HEAP8[$__grouping$i>>0]|0;
    $173 = $172 & 1;
    $174 = ($173<<24>>24)==(0);
    if ($174) {
     STACKTOP = sp;return;
    }
    $175 = (($__grouping$i) + 8|0);
    $176 = HEAP32[$175>>2]|0;
    _free($176);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index11 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi36Z2D = 0, $$pre$phi38Z2D = 0, $$pre35 = 0, $$pre37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index6 = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 200|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11744|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  label = 38;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($9|0,($4|0),(10280|0),(((10280 + 26|0))|0),($__atoms|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 38;
  } else {
   $12 = (($1) + 4|0);
   $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+-1)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = HEAP32[$1>>2]|0;
    $16 = (($15) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$17 & 1023]($1);
   }
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_vii(564,($__buf|0),10);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   L7: do {
    if ($19) {
     label = 41;
    } else {
     $20 = HEAP8[$__buf>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__buf) + 1|0);
      $$pre37 = (($__buf) + 8|0);
      $$pre$phi36Z2D = $25;$$pre$phi38Z2D = $$pre37;$26 = $25;
     } else {
      $23 = (($__buf) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $$pre35 = (($__buf) + 1|0);
      $$pre$phi36Z2D = $$pre35;$$pre$phi38Z2D = $23;$26 = $24;
     }
     HEAP32[$__a_end>>2] = $26;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $27 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i9 = $$pre;$__a$0 = $26;
     L13: while(1) {
      $28 = ($$pre$i$i$i9|0)==(0|0);
      if ($28) {
       $108 = 0;$187 = 1;
      } else {
       $29 = (($$pre$i$i$i9) + 12|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($$pre$i$i$i9) + 16|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($30|0)==($32|0);
       if ($33) {
        $34 = HEAP32[$$pre$i$i$i9>>2]|0;
        $35 = (($34) + 36|0);
        $36 = HEAP32[$35>>2]|0;
        __THREW__ = 0;
        $37 = (invoke_ii($36|0,($$pre$i$i$i9|0))|0);
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         label = 40;
         break;
        } else {
         $$0$i$i$i$i7 = $37;
        }
       } else {
        $40 = HEAP32[$30>>2]|0;
        $$0$i$i$i$i7 = $40;
       }
       $41 = ($$0$i$i$i$i7|0)==(-1);
       if ($41) {
        HEAP32[$__b>>2] = 0;
        $108 = 0;$187 = 1;
       } else {
        $108 = $$pre$i$i$i9;$187 = 0;
       }
      }
      $42 = HEAP32[$__e>>2]|0;
      $43 = ($42|0)==(0|0);
      do {
       if ($43) {
        label = 22;
       } else {
        $44 = (($42) + 12|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = (($42) + 16|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($45|0)==($47|0);
        if ($48) {
         $49 = HEAP32[$42>>2]|0;
         $50 = (($49) + 36|0);
         $51 = HEAP32[$50>>2]|0;
         __THREW__ = 0;
         $52 = (invoke_ii($51|0,($42|0))|0);
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          label = 40;
          break L13;
         } else {
          $$0$i$i1$i$i13 = $52;
         }
        } else {
         $55 = HEAP32[$45>>2]|0;
         $$0$i$i1$i$i13 = $55;
        }
        $56 = ($$0$i$i1$i$i13|0)==(-1);
        if ($56) {
         HEAP32[$__e>>2] = 0;
         label = 22;
         break;
        } else {
         if ($187) {
          break;
         } else {
          $__a$2 = $__a$0;
          break L13;
         }
        }
       }
      } while(0);
      if ((label|0) == 22) {
       label = 0;
       if ($187) {
        $__a$2 = $__a$0;
        break;
       }
      }
      $57 = HEAP32[$__a_end>>2]|0;
      $58 = $57;
      $59 = $__a$0;
      $60 = (($58) - ($59))|0;
      $61 = HEAP8[$__buf>>0]|0;
      $62 = $61 & 1;
      $63 = ($62<<24>>24)==(0);
      if ($63) {
       $65 = $61&255;
       $66 = $65 >>> 1;
       $68 = $66;
      } else {
       $64 = HEAP32[$27>>2]|0;
       $68 = $64;
      }
      $67 = ($60|0)==($68|0);
      if ($67) {
       if ($63) {
        $70 = $61&255;
        $71 = $70 >>> 1;
        $73 = $71;
       } else {
        $69 = HEAP32[$27>>2]|0;
        $73 = $69;
       }
       $72 = $73 << 1;
       __THREW__ = 0;
       invoke_vii(564,($__buf|0),($72|0));
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        label = 40;
        break;
       }
       $76 = HEAP8[$__buf>>0]|0;
       $77 = $76 & 1;
       $78 = ($77<<24>>24)==(0);
       if ($78) {
        $81 = 10;
       } else {
        $79 = HEAP32[$__buf>>2]|0;
        $80 = $79 & -2;
        $phitmp$i26 = (($80) + -1)|0;
        $81 = $phitmp$i26;
       }
       __THREW__ = 0;
       invoke_vii(564,($__buf|0),($81|0));
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        label = 40;
        break;
       }
       $84 = HEAP8[$__buf>>0]|0;
       $85 = $84 & 1;
       $86 = ($85<<24>>24)==(0);
       if ($86) {
        $89 = $$pre$phi36Z2D;
       } else {
        $87 = HEAP32[$$pre$phi38Z2D>>2]|0;
        $89 = $87;
       }
       $88 = (($89) + ($73)|0);
       HEAP32[$__a_end>>2] = $88;
       $__a$1 = $89;
      } else {
       $__a$1 = $__a$0;
      }
      $107 = (($108) + 12|0);
      $109 = HEAP32[$107>>2]|0;
      $110 = (($108) + 16|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = ($109|0)==($111|0);
      if ($112) {
       $113 = HEAP32[$108>>2]|0;
       $114 = (($113) + 36|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       $116 = (invoke_ii($115|0,($108|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        label = 40;
        break;
       } else {
        $$0$i$i = $116;
       }
      } else {
       $119 = HEAP32[$109>>2]|0;
       $$0$i$i = $119;
      }
      $120 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $121 = ($120|0)==(0);
      if (!($121)) {
       $__a$2 = $__a$1;
       break;
      }
      $122 = HEAP32[$107>>2]|0;
      $123 = HEAP32[$110>>2]|0;
      $124 = ($122|0)==($123|0);
      if ($124) {
       $125 = HEAP32[$108>>2]|0;
       $126 = (($125) + 40|0);
       $127 = HEAP32[$126>>2]|0;
       __THREW__ = 0;
       (invoke_ii($127|0,($108|0))|0);
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       if ($129) {
        label = 40;
        break;
       } else {
        $$pre$i$i$i9 = $108;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $130 = (($122) + 4|0);
       HEAP32[$107>>2] = $130;
       $$pre$i$i$i9 = $108;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 40) {
      $98 = ___cxa_find_matching_catch()|0;
      $99 = tempRet0;
      $lpad$phi$index = $98;$lpad$phi$index6 = $99;
      break;
     }
     $131 = (($__a$2) + 3|0);
     HEAP8[$131>>0] = 0;
     __THREW__ = 0;
     $132 = (invoke_i(574)|0);
     $133 = __THREW__; __THREW__ = 0;
     $134 = $133&1;
     if ($134) {
      label = 41;
     } else {
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $135 = (invoke_iiii(575,($__a$2|0),($132|0),($vararg_buffer|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 41;
      } else {
       $138 = ($135|0)==(1);
       if (!($138)) {
        HEAP32[$__err>>2] = 4;
       }
       $139 = HEAP32[$__b>>2]|0;
       $140 = ($139|0)==(0|0);
       if ($140) {
        $171 = 0;$188 = 1;
       } else {
        $141 = (($139) + 12|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = (($139) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($142|0)==($144|0);
        if ($145) {
         $146 = HEAP32[$139>>2]|0;
         $147 = (($146) + 36|0);
         $148 = HEAP32[$147>>2]|0;
         __THREW__ = 0;
         $149 = (invoke_ii($148|0,($139|0))|0);
         $150 = __THREW__; __THREW__ = 0;
         $151 = $150&1;
         if ($151) {
          label = 41;
          break;
         } else {
          $$0$i$i$i$i = $149;
         }
        } else {
         $152 = HEAP32[$142>>2]|0;
         $$0$i$i$i$i = $152;
        }
        $153 = ($$0$i$i$i$i|0)==(-1);
        if ($153) {
         HEAP32[$__b>>2] = 0;
         $171 = 0;$188 = 1;
        } else {
         $171 = $139;$188 = 0;
        }
       }
       $154 = HEAP32[$__e>>2]|0;
       $155 = ($154|0)==(0|0);
       do {
        if ($155) {
         label = 67;
        } else {
         $156 = (($154) + 12|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = (($154) + 16|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($157|0)==($159|0);
         if ($160) {
          $161 = HEAP32[$154>>2]|0;
          $162 = (($161) + 36|0);
          $163 = HEAP32[$162>>2]|0;
          __THREW__ = 0;
          $164 = (invoke_ii($163|0,($154|0))|0);
          $165 = __THREW__; __THREW__ = 0;
          $166 = $165&1;
          if ($166) {
           label = 41;
           break L7;
          } else {
           $$0$i$i1$i$i = $164;
          }
         } else {
          $167 = HEAP32[$157>>2]|0;
          $$0$i$i1$i$i = $167;
         }
         $168 = ($$0$i$i1$i$i|0)==(-1);
         if ($168) {
          HEAP32[$__e>>2] = 0;
          label = 67;
          break;
         } else {
          if ($188) {
           break;
          } else {
           label = 69;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 67) {
        if ($188) {
         label = 69;
        }
       }
       if ((label|0) == 69) {
        $169 = HEAP32[$__err>>2]|0;
        $170 = $169 | 2;
        HEAP32[$__err>>2] = $170;
       }
       HEAP32[$agg$result>>2] = $171;
       $172 = HEAP8[$__buf>>0]|0;
       $173 = $172 & 1;
       $174 = ($173<<24>>24)==(0);
       if (!($174)) {
        $175 = (($__buf) + 8|0);
        $176 = HEAP32[$175>>2]|0;
        _free($176);
       }
       $177 = HEAP8[$__grouping>>0]|0;
       $178 = $177 & 1;
       $179 = ($178<<24>>24)==(0);
       if ($179) {
        STACKTOP = sp;return;
       }
       $180 = (($__grouping) + 8|0);
       $181 = HEAP32[$180>>2]|0;
       _free($181);
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 41) {
    $100 = ___cxa_find_matching_catch()|0;
    $101 = tempRet0;
    $lpad$phi$index = $100;$lpad$phi$index6 = $101;
   }
   $102 = HEAP8[$__buf>>0]|0;
   $103 = $102 & 1;
   $104 = ($103<<24>>24)==(0);
   if ($104) {
    $$0 = $lpad$phi$index;$$01 = $lpad$phi$index6;
   } else {
    $105 = (($__buf) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    _free($106);
    $$0 = $lpad$phi$index;$$01 = $lpad$phi$index6;
   }
  }
 }
 if ((label|0) == 38) {
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = (($1) + 4|0);
  $93 = HEAP32[$92>>2]|0;HEAP32[$92>>2] = (($93+-1)|0);
  $94 = ($93|0)==(0);
  if ($94) {
   $95 = HEAP32[$1>>2]|0;
   $96 = (($95) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   FUNCTION_TABLE_vi[$97 & 1023]($1);
   $$0 = $90;$$01 = $91;
  } else {
   $$0 = $90;$$01 = $91;
  }
 }
 $182 = HEAP8[$__grouping>>0]|0;
 $183 = $182 & 1;
 $184 = ($183<<24>>24)==(0);
 if ($184) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $185 = (($__grouping) + 8|0);
 $186 = HEAP32[$185>>2]|0;
 _free($186);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (10280 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (10280 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11752|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($9|0,($4|0),(10280|0),(((10280 + 26|0))|0),($__atoms|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   $12 = (invoke_iii(556,($1|0),(11896|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $15 = HEAP32[$12>>2]|0;
    $16 = (($15) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii($17|0,($12|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     HEAP8[$__thousands_sep>>0] = $18;
     $21 = HEAP32[$12>>2]|0;
     $22 = (($21) + 20|0);
     $23 = HEAP32[$22>>2]|0;
     __THREW__ = 0;
     invoke_vii($23|0,($agg$result|0),($12|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      $26 = (($1) + 4|0);
      $27 = HEAP32[$26>>2]|0;HEAP32[$26>>2] = (($27+-1)|0);
      $28 = ($27|0)==(0);
      if (!($28)) {
       STACKTOP = sp;return;
      }
      $29 = HEAP32[$1>>2]|0;
      $30 = (($29) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      FUNCTION_TABLE_vi[$31 & 1023]($1);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $34 = (($1) + 4|0);
 $35 = HEAP32[$34>>2]|0;HEAP32[$34>>2] = (($35+-1)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  ___resumeException($32|0);
  // unreachable;
 }
 $37 = HEAP32[$1>>2]|0;
 $38 = (($37) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 1023]($1);
 ___resumeException($32|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11752|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($9|0,($4|0),(10280|0),(((10280 + 32|0))|0),($__atoms|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   $12 = (invoke_iii(556,($1|0),(11896|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $15 = HEAP32[$12>>2]|0;
    $16 = (($15) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii($17|0,($12|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     HEAP8[$__decimal_point>>0] = $18;
     $21 = HEAP32[$12>>2]|0;
     $22 = (($21) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     __THREW__ = 0;
     $24 = (invoke_ii($23|0,($12|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      HEAP8[$__thousands_sep>>0] = $24;
      $27 = HEAP32[$12>>2]|0;
      $28 = (($27) + 20|0);
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      invoke_vii($29|0,($agg$result|0),($12|0));
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if (!($31)) {
       $32 = (($1) + 4|0);
       $33 = HEAP32[$32>>2]|0;HEAP32[$32>>2] = (($33+-1)|0);
       $34 = ($33|0)==(0);
       if (!($34)) {
        STACKTOP = sp;return;
       }
       $35 = HEAP32[$1>>2]|0;
       $36 = (($35) + 8|0);
       $37 = HEAP32[$36>>2]|0;
       FUNCTION_TABLE_vi[$37 & 1023]($1);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $40 = (($1) + 4|0);
 $41 = HEAP32[$40>>2]|0;HEAP32[$40>>2] = (($41+-1)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  ___resumeException($38|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vi[$45 & 1023]($1);
 ___resumeException($38|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (10280 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11744|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($9|0,($4|0),(10280|0),(((10280 + 26|0))|0),($__atoms|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   $12 = (invoke_iii(556,($1|0),(11904|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $15 = HEAP32[$12>>2]|0;
    $16 = (($15) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii($17|0,($12|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     HEAP32[$__thousands_sep>>2] = $18;
     $21 = HEAP32[$12>>2]|0;
     $22 = (($21) + 20|0);
     $23 = HEAP32[$22>>2]|0;
     __THREW__ = 0;
     invoke_vii($23|0,($agg$result|0),($12|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      $26 = (($1) + 4|0);
      $27 = HEAP32[$26>>2]|0;HEAP32[$26>>2] = (($27+-1)|0);
      $28 = ($27|0)==(0);
      if (!($28)) {
       STACKTOP = sp;return;
      }
      $29 = HEAP32[$1>>2]|0;
      $30 = (($29) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      FUNCTION_TABLE_vi[$31 & 1023]($1);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $34 = (($1) + 4|0);
 $35 = HEAP32[$34>>2]|0;HEAP32[$34>>2] = (($35+-1)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  ___resumeException($32|0);
  // unreachable;
 }
 $37 = HEAP32[$1>>2]|0;
 $38 = (($37) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 1023]($1);
 ___resumeException($32|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11744|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($9|0,($4|0),(10280|0),(((10280 + 32|0))|0),($__atoms|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   $12 = (invoke_iii(556,($1|0),(11904|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $15 = HEAP32[$12>>2]|0;
    $16 = (($15) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_ii($17|0,($12|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     HEAP32[$__decimal_point>>2] = $18;
     $21 = HEAP32[$12>>2]|0;
     $22 = (($21) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     __THREW__ = 0;
     $24 = (invoke_ii($23|0,($12|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      HEAP32[$__thousands_sep>>2] = $24;
      $27 = HEAP32[$12>>2]|0;
      $28 = (($27) + 20|0);
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      invoke_vii($29|0,($agg$result|0),($12|0));
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if (!($31)) {
       $32 = (($1) + 4|0);
       $33 = HEAP32[$32>>2]|0;HEAP32[$32>>2] = (($33+-1)|0);
       $34 = ($33|0)==(0);
       if (!($34)) {
        STACKTOP = sp;return;
       }
       $35 = HEAP32[$1>>2]|0;
       $36 = (($35) + 8|0);
       $37 = HEAP32[$36>>2]|0;
       FUNCTION_TABLE_vi[$37 & 1023]($1);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $40 = (($1) + 4|0);
 $41 = HEAP32[$40>>2]|0;HEAP32[$40>>2] = (($41+-1)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  ___resumeException($38|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vi[$45 & 1023]($1);
 ___resumeException($38|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (10280 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp;
 $__nm = sp + 4|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $8;
  $9 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 1023]($agg$result,$this,$$byval_copy,$__iob,$__fl,$9);
  STACKTOP = sp;return;
 }
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_iii(556,($11|0),(11896|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $67 = (($11) + 4|0);
  $68 = HEAP32[$67>>2]|0;HEAP32[$67>>2] = (($68+-1)|0);
  $69 = ($68|0)==(0);
  if (!($69)) {
   $$0 = $65;$$01 = $66;
   ___resumeException($$0|0);
   // unreachable;
  }
  $70 = HEAP32[$11>>2]|0;
  $71 = (($70) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vi[$72 & 1023]($11);
  $$0 = $65;$$01 = $66;
  ___resumeException($$0|0);
  // unreachable;
 }
 $17 = (($11) + 4|0);
 $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+-1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($11);
 }
 $23 = HEAP32[$14>>2]|0;
 if ($__v) {
  $24 = (($23) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vii[$25 & 1023]($__nm,$14);
 } else {
  $26 = (($23) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 1023]($__nm,$14);
 }
 $28 = HEAP8[$__nm>>0]|0;
 $29 = $28 & 1;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $33 = (($__nm) + 1|0);
  $$pre5 = (($__nm) + 8|0);
  $$ph = $33;$$pre$phi4Z2D = $33;$$pre$phi6Z2D = $$pre5;
 } else {
  $31 = (($__nm) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $$pre3 = (($__nm) + 1|0);
  $$ph = $32;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $31;
 }
 $34 = (($__nm) + 4|0);
 $36 = $28;$46 = $$ph;
 L23: while(1) {
  $35 = $36 & 1;
  $37 = ($35<<24>>24)==(0);
  if ($37) {
   $40 = $36&255;
   $41 = $40 >>> 1;
   $43 = $$pre$phi4Z2D;$44 = $41;
  } else {
   $38 = HEAP32[$$pre$phi6Z2D>>2]|0;
   $39 = HEAP32[$34>>2]|0;
   $43 = $38;$44 = $39;
  }
  $42 = (($43) + ($44)|0);
  $45 = ($46|0)==($42|0);
  if ($45) {
   label = 28;
   break;
  }
  $47 = HEAP8[$46>>0]|0;
  $48 = HEAP32[$__s>>2]|0;
  $49 = ($48|0)==(0|0);
  do {
   if (!($49)) {
    $50 = (($48) + 24|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($48) + 28|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51|0)==($53|0);
    if (!($54)) {
     $55 = (($51) + 1|0);
     HEAP32[$50>>2] = $55;
     HEAP8[$51>>0] = $47;
     break;
    }
    $56 = HEAP32[$48>>2]|0;
    $57 = (($56) + 52|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $47&255;
    __THREW__ = 0;
    $60 = (invoke_iii($58|0,($48|0),($59|0))|0);
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if ($62) {
     label = 26;
     break L23;
    }
    $63 = ($60|0)==(-1);
    if ($63) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $64 = (($46) + 1|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $36 = $$pre;$46 = $64;
 }
 if ((label|0) == 26) {
  $73 = ___cxa_find_matching_catch()|0;
  $74 = tempRet0;
  $75 = HEAP8[$__nm>>0]|0;
  $76 = $75 & 1;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $$0 = $73;$$01 = $74;
   ___resumeException($$0|0);
   // unreachable;
  }
  $78 = (($__nm) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  _free($79);
  $$0 = $73;$$01 = $74;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $80 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $80;
  if ($37) {
   STACKTOP = sp;return;
  }
  $81 = (($__nm) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  _free($82);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 52|0;
 $__nar = sp + 40|0;
 $__o = sp + 16|0;
 $__op = sp + 8|0;
 $__oe = sp + 4|0;
 $0 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10560+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10560+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10560+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10560+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10560+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10560+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,10464,1,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($8|0) == 32)) {
   $$0$i = $6;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(579,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 1023]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 1023]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 if ((($13|0) == 64)) {
  HEAP8[$$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else if ((($13|0) == 8)) {
  $14 = $__flags & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP8[$$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else {
  if ($__signd) {
   HEAP8[$$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(576,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__loc$idx$val = 0, $__loc$idx2$val = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $__loc$idx2$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx2$val,11752)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11896)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 L5: do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    label = 37;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $32 = HEAP8[$__nb>>0]|0;
   if ((($32<<24>>24) == 43) | (($32<<24>>24) == 45)) {
    $33 = HEAP32[$0>>2]|0;
    $34 = (($33) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iii($35|0,($0|0),($32|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     label = 8;
     break;
    }
    $39 = (($__nb) + 1|0);
    $40 = HEAP32[$__oe>>2]|0;
    $41 = (($40) + 1|0);
    HEAP32[$__oe>>2] = $41;
    HEAP8[$40>>0] = $36;
    $__nf$0 = $39;
   } else {
    $__nf$0 = $__nb;
   }
   $42 = $__ne;
   $43 = $__nf$0;
   $44 = (($42) - ($43))|0;
   $45 = ($44|0)>(1);
   if ($45) {
    $46 = HEAP8[$__nf$0>>0]|0;
    $47 = ($46<<24>>24)==(48);
    if ($47) {
     $48 = (($__nf$0) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     if ((($49<<24>>24) == 88) | (($49<<24>>24) == 120)) {
      $50 = HEAP32[$0>>2]|0;
      $51 = (($50) + 28|0);
      $52 = HEAP32[$51>>2]|0;
      __THREW__ = 0;
      $53 = (invoke_iii($52|0,($0|0),48)|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 8;
       break;
      }
      $56 = HEAP32[$__oe>>2]|0;
      $57 = (($56) + 1|0);
      HEAP32[$__oe>>2] = $57;
      HEAP8[$56>>0] = $53;
      $58 = HEAP8[$48>>0]|0;
      $59 = HEAP32[$0>>2]|0;
      $60 = (($59) + 28|0);
      $61 = HEAP32[$60>>2]|0;
      __THREW__ = 0;
      $62 = (invoke_iii($61|0,($0|0),($58|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 8;
       break;
      }
      $65 = (($__nf$0) + 2|0);
      $66 = HEAP32[$__oe>>2]|0;
      $67 = (($66) + 1|0);
      HEAP32[$__oe>>2] = $67;
      HEAP8[$66>>0] = $62;
      $__nf$1 = $65;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $68 = ($__nf$1|0)==($__ne|0);
   if (!($68)) {
    $69 = (($__ne) + -1|0);
    $70 = ($69>>>0)>($__nf$1>>>0);
    if ($70) {
     $$012$i$i5 = $__nf$1;$73 = $69;
     while(1) {
      $71 = HEAP8[$$012$i$i5>>0]|0;
      $72 = HEAP8[$73>>0]|0;
      HEAP8[$$012$i$i5>>0] = $72;
      HEAP8[$73>>0] = $71;
      $74 = (($$012$i$i5) + 1|0);
      $75 = (($73) + -1|0);
      $76 = ($74>>>0)<($75>>>0);
      if ($76) {
       $$012$i$i5 = $74;$73 = $75;
      } else {
       break;
      }
     }
    }
   }
   $77 = HEAP32[$1>>2]|0;
   $78 = (($77) + 16|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($1|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 8;
   } else {
    $83 = ($__nf$1>>>0)<($__ne>>>0);
    L24: do {
     if ($83) {
      $84 = (($__grouping) + 1|0);
      $85 = (($__grouping) + 4|0);
      $86 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $87 = HEAP8[$__grouping>>0]|0;
       $88 = $87 & 1;
       $89 = ($88<<24>>24)==(0);
       $90 = HEAP32[$86>>2]|0;
       $$ = $89 ? $84 : $90;
       $91 = (($$) + ($__dg$010)|0);
       $92 = HEAP8[$91>>0]|0;
       $93 = ($92<<24>>24)!=(0);
       $94 = $92 << 24 >> 24;
       $95 = ($__dc$09|0)==($94|0);
       $or$cond = $93 & $95;
       if ($or$cond) {
        $96 = HEAP32[$__oe>>2]|0;
        $97 = (($96) + 1|0);
        HEAP32[$__oe>>2] = $97;
        HEAP8[$96>>0] = $80;
        $98 = HEAP8[$__grouping>>0]|0;
        $99 = $98 & 1;
        $100 = ($99<<24>>24)==(0);
        if ($100) {
         $102 = $98&255;
         $103 = $102 >>> 1;
         $105 = $103;
        } else {
         $101 = HEAP32[$85>>2]|0;
         $105 = $101;
        }
        $104 = (($105) + -1)|0;
        $106 = ($__dg$010>>>0)<($104>>>0);
        $107 = $106&1;
        $$__dg$0 = (($107) + ($__dg$010))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       }
       $108 = HEAP8[$__p$011>>0]|0;
       $109 = HEAP32[$0>>2]|0;
       $110 = (($109) + 28|0);
       $111 = HEAP32[$110>>2]|0;
       __THREW__ = 0;
       $112 = (invoke_iii($111|0,($0|0),($108|0))|0);
       $113 = __THREW__; __THREW__ = 0;
       $114 = $113&1;
       if ($114) {
        break;
       }
       $115 = HEAP32[$__oe>>2]|0;
       $116 = (($115) + 1|0);
       HEAP32[$__oe>>2] = $116;
       HEAP8[$115>>0] = $112;
       $117 = (($__dc$1) + 1)|0;
       $118 = (($__p$011) + 1|0);
       $119 = ($118>>>0)<($__ne>>>0);
       if ($119) {
        $__dc$09 = $117;$__dg$010 = $__dg$1;$__p$011 = $118;
       } else {
        break L24;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index5 = $24;
      break L5;
     }
    } while(0);
    $120 = $__nf$1;
    $121 = $__nb;
    $122 = (($120) - ($121))|0;
    $123 = (($__ob) + ($122)|0);
    $124 = HEAP32[$__oe>>2]|0;
    $125 = ($123|0)==($124|0);
    if ($125) {
     label = 37;
    } else {
     $126 = (($124) + -1|0);
     $127 = ($126>>>0)>($123>>>0);
     if ($127) {
      $$012$i$i = $123;$130 = $126;
      while(1) {
       $128 = HEAP8[$$012$i$i>>0]|0;
       $129 = HEAP8[$130>>0]|0;
       HEAP8[$$012$i$i>>0] = $129;
       HEAP8[$130>>0] = $128;
       $131 = (($$012$i$i) + 1|0);
       $132 = (($130) + -1|0);
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $$012$i$i = $131;$130 = $132;
       } else {
        label = 37;
        break;
       }
      }
     } else {
      label = 37;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index5 = $26;
 }
 else if ((label|0) == 37) {
  $134 = ($__np|0)==($__ne|0);
  if ($134) {
   $135 = HEAP32[$__oe>>2]|0;
   $storemerge = $135;
  } else {
   $136 = $__np;
   $137 = $__nb;
   $138 = (($136) - ($137))|0;
   $139 = (($__ob) + ($138)|0);
   $storemerge = $139;
  }
  HEAP32[$__op>>2] = $storemerge;
  $140 = HEAP8[$__grouping>>0]|0;
  $141 = $140 & 1;
  $142 = ($141<<24>>24)==(0);
  if ($142) {
   STACKTOP = sp;return;
  }
  $143 = (($__grouping) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  _free($144);
  STACKTOP = sp;return;
 }
 $27 = HEAP8[$__grouping>>0]|0;
 $28 = $27 & 1;
 $29 = ($28<<24>>24)==(0);
 if ($29) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $30 = (($__grouping) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 _free($31);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 70|0;
 $__o = sp + 28|0;
 $__op = sp + 20|0;
 $__oe = sp + 16|0;
 $2 = sp + 24|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,10472,1,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 32)) {
   $$0$i = $16;
  } else if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(579,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 1023]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 52|0;
 $__nar = sp + 40|0;
 $__o = sp + 16|0;
 $__op = sp + 8|0;
 $__oe = sp + 4|0;
 $0 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10560+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10560+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10560+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10560+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10560+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10560+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,10464,0,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 32)) {
   $$0$i = $6;
  } else if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(579,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 1023]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 1023]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 71|0;
 $__o = sp + 28|0;
 $__op = sp + 20|0;
 $__oe = sp + 16|0;
 $2 = sp + 24|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,10472,0,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($18|0) == 32)) {
   $$0$i = $16;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(579,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 1023]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$127 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp + 40|0;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 72|0;
 $1 = sp + 60|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,10480,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr5 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer6)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(574)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $20;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(580,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(574)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = (($__iob) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer13>>2] = $30;
     $vararg_ptr16 = (($vararg_buffer13) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $31 = (invoke_iiiii(580,($__nb|0),($26|0),($__fmt|0),($vararg_buffer13|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $40 = $34;$82 = $34;$__nc$2 = $__nc$1;
     break;
    }
    $36 = (___cxa_allocate_exception(4)|0);
    HEAP32[$36>>2] = ((19952 + 8|0));
    __THREW__ = 0;
    invoke_viii(422,($36|0),(20008|0),(386|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$127 = $25;$$18 = $24;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $40 = $__nar;$82 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = HEAP32[$7>>2]|0;
 $42 = $41 & 176;
 do {
  if ((($42|0) == 16)) {
   $43 = HEAP8[$40>>0]|0;
   if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
    $44 = (($40) + 1|0);
    $$0$i = $44;
    break;
   }
   $45 = ($__nc$2|0)>(1);
   $46 = ($43<<24>>24)==(48);
   $or$cond$i = $45 & $46;
   if ($or$cond$i) {
    $47 = (($40) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    if ((($48<<24>>24) == 88) | (($48<<24>>24) == 120)) {
     $49 = (($40) + 2|0);
     $$0$i = $49;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($42|0) == 32)) {
   $$0$i = $39;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $40;
 }
 $50 = ($40|0)==($__nar|0);
 if ($50) {
  $63 = $__nar;$80 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $51 = $__nc$2 << 1;
  $52 = (_malloc($51)|0);
  $53 = ($52|0)==(0|0);
  if ($53) {
   $54 = (___cxa_allocate_exception(4)|0);
   HEAP32[$54>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($54|0),(20008|0),(386|0));
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $95 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $63 = $40;$80 = $52;$__ob$0 = $52;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $59 = (($__iob) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$0>>2] = $60;
   $61 = (($60) + 4|0);
   $62 = HEAP32[$61>>2]|0;HEAP32[$61>>2] = (($62+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(581,($63|0),($$0$i|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $83 = ___cxa_find_matching_catch()|0;
    $84 = tempRet0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 4|0);
    $87 = HEAP32[$86>>2]|0;HEAP32[$86>>2] = (($87+-1)|0);
    $88 = ($87|0)==(0);
    if (!($88)) {
     $$0 = $83;$$01 = $84;$93 = $80;
     break;
    }
    $89 = HEAP32[$85>>2]|0;
    $90 = (($89) + 8|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vi[$91 & 1023]($85);
    $$0 = $83;$$01 = $84;$93 = $80;
    break;
   }
   $66 = HEAP32[$0>>2]|0;
   $67 = (($66) + 4|0);
   $68 = HEAP32[$67>>2]|0;HEAP32[$67>>2] = (($68+-1)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = HEAP32[$66>>2]|0;
    $71 = (($70) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_vi[$72 & 1023]($66);
   }
   $73 = HEAP32[$__s>>2]|0;
   $74 = HEAP32[$__op>>2]|0;
   $75 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(428,($1|0),($73|0),($__ob$0|0),($74|0),($75|0),($__iob|0),($__fl|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $95 = $80;
    label = 25;
   } else {
    $78 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $78;
    HEAP32[$agg$result>>2] = $78;
    $79 = ($80|0)==(0|0);
    if (!($79)) {
     _free($80);
    }
    $81 = ($82|0)==(0|0);
    if ($81) {
     STACKTOP = sp;return;
    }
    _free($82);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $$0 = $57;$$01 = $58;$93 = $95;
 }
 $92 = ($93|0)==(0|0);
 if (!($92)) {
  _free($93);
 }
 $94 = ($82|0)==(0|0);
 if ($94) {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
 _free($82);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__va = 0, $ap2$i = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_malloc(240)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0$i = -1;
  } else {
   $vacopy_currentptr = HEAP32[$__va>>2]|0;
   HEAP32[$ap2$i>>2] = $vacopy_currentptr;
   $3 = (_vsnprintf($1,240,$__format,$ap2$i)|0);
   $4 = ($3>>>0)<(240);
   if ($4) {
    $5 = (($3) + 1)|0;
    $6 = (_realloc($1,$5)|0);
    $7 = ($6|0)!=(0|0);
    $8 = $7 ? $6 : $1;
    HEAP32[$__s>>2] = $8;
    $$0$i = $3;
    break;
   }
   _free($1);
   $9 = ($3|0)<(0);
   if ($9) {
    $$0$i = -1;
   } else {
    $10 = (($3) + 1)|0;
    $11 = (_malloc($10)|0);
    HEAP32[$__s>>2] = $11;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$0$i = -1;
    } else {
     $13 = (_vsnprintf($11,$10,$__format,$__va)|0);
     $$0$i = $13;
    }
   }
  }
 } while(0);
 $14 = ($0|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return ($$0$i|0);
 }
 __THREW__ = 0;
 (invoke_ii(576,($0|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$0$i|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$018 = 0, $__dc$1 = 0, $__dg$019 = 0, $__dg$1 = 0, $__grouping = 0, $__loc$idx$val = 0, $__loc$idx2$val = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$3 = 0, $__ns$034 = 0, $__ns$126 = 0, $__ns$2 = 0, $__p$020 = 0;
 var $isdigit$i = 0, $isdigit$i$i = 0, $isdigittmp$i = 0, $isdigittmp$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $__loc$idx2$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx2$val,11752)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11896)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 12;
  }
 } else {
  $__nf$0 = $__nb;
  label = 12;
 }
 L4: do {
  if ((label|0) == 12) {
   $30 = $__ne;
   $31 = $__nf$0;
   $32 = (($30) - ($31))|0;
   $33 = ($32|0)>(1);
   L6: do {
    if ($33) {
     $35 = HEAP8[$__nf$0>>0]|0;
     $36 = ($35<<24>>24)==(48);
     if ($36) {
      $37 = (($__nf$0) + 1|0);
      $38 = HEAP8[$37>>0]|0;
      if ((($38<<24>>24) == 88) | (($38<<24>>24) == 120)) {
       $39 = HEAP32[$0>>2]|0;
       $40 = (($39) + 28|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_iii($41|0,($0|0),48)|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        label = 8;
        break L4;
       }
       $45 = HEAP32[$__oe>>2]|0;
       $46 = (($45) + 1|0);
       HEAP32[$__oe>>2] = $46;
       HEAP8[$45>>0] = $42;
       $47 = (($__nf$0) + 2|0);
       $48 = HEAP8[$37>>0]|0;
       $49 = HEAP32[$0>>2]|0;
       $50 = (($49) + 28|0);
       $51 = HEAP32[$50>>2]|0;
       __THREW__ = 0;
       $52 = (invoke_iii($51|0,($0|0),($48|0))|0);
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        label = 8;
        break L4;
       }
       $55 = HEAP32[$__oe>>2]|0;
       $56 = (($55) + 1|0);
       HEAP32[$__oe>>2] = $56;
       HEAP8[$55>>0] = $52;
       $57 = ($47>>>0)<($__ne>>>0);
       if ($57) {
        $__ns$034 = $47;
        while(1) {
         $60 = HEAP8[$__ns$034>>0]|0;
         __THREW__ = 0;
         (invoke_i(574)|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = $60 << 24 >> 24;
         $isdigittmp$i$i = (($63) + -48)|0;
         $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
         if (!($isdigit$i$i)) {
          $64 = $63 | 32;
          $65 = (($64) + -97)|0;
          $66 = ($65>>>0)<(6);
          if (!($66)) {
           $__nf$1 = $47;$__ns$2 = $__ns$034;
           break L6;
          }
         }
         $58 = (($__ns$034) + 1|0);
         $59 = ($58>>>0)<($__ne>>>0);
         if ($59) {
          $__ns$034 = $58;
         } else {
          $__nf$1 = $47;$__ns$2 = $58;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index10 = $22;
        break L4;
       } else {
        $__nf$1 = $47;$__ns$2 = $47;
       }
      } else {
       label = 13;
      }
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
   } while(0);
   L19: do {
    if ((label|0) == 13) {
     $34 = ($__nf$0>>>0)<($__ne>>>0);
     if ($34) {
      $__ns$126 = $__nf$0;
      while(1) {
       $69 = HEAP8[$__ns$126>>0]|0;
       __THREW__ = 0;
       (invoke_i(574)|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = $69 << 24 >> 24;
       $isdigittmp$i = (($72) + -48)|0;
       $isdigit$i = ($isdigittmp$i>>>0)<(10);
       $68 = (($__ns$126) + 1|0);
       if (!($isdigit$i)) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$126;
        break L19;
       }
       $67 = ($68>>>0)<($__ne>>>0);
       if ($67) {
        $__ns$126 = $68;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $68;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index10 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   if ($75) {
    $78 = $73&255;
    $79 = $78 >>> 1;
    $81 = $79;
   } else {
    $76 = (($__grouping) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $81 = $77;
   }
   $80 = ($81|0)==(0);
   if ($80) {
    $82 = HEAP32[$__oe>>2]|0;
    $83 = HEAP32[$0>>2]|0;
    $84 = (($83) + 32|0);
    $85 = HEAP32[$84>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 8;
     break;
    }
    $88 = $__ns$2;
    $89 = $__nf$1;
    $90 = (($88) - ($89))|0;
    $91 = HEAP32[$__oe>>2]|0;
    $92 = (($91) + ($90)|0);
    HEAP32[$__oe>>2] = $92;
   } else {
    $93 = ($__nf$1|0)==($__ns$2|0);
    if (!($93)) {
     $94 = (($__ns$2) + -1|0);
     $95 = ($94>>>0)>($__nf$1>>>0);
     if ($95) {
      $$012$i$i = $__nf$1;$98 = $94;
      while(1) {
       $96 = HEAP8[$$012$i$i>>0]|0;
       $97 = HEAP8[$98>>0]|0;
       HEAP8[$$012$i$i>>0] = $97;
       HEAP8[$98>>0] = $96;
       $99 = (($$012$i$i) + 1|0);
       $100 = (($98) + -1|0);
       $101 = ($99>>>0)<($100>>>0);
       if ($101) {
        $$012$i$i = $99;$98 = $100;
       } else {
        break;
       }
      }
     }
    }
    $102 = HEAP32[$1>>2]|0;
    $103 = (($102) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    __THREW__ = 0;
    $105 = (invoke_ii($104|0,($1|0))|0);
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     label = 8;
     break;
    }
    $108 = ($__nf$1>>>0)<($__ns$2>>>0);
    L39: do {
     if ($108) {
      $109 = (($__grouping) + 1|0);
      $110 = (($__grouping) + 4|0);
      $111 = (($__grouping) + 8|0);
      $__dc$018 = 0;$__dg$019 = 0;$__p$020 = $__nf$1;
      while(1) {
       $112 = HEAP8[$__grouping>>0]|0;
       $113 = $112 & 1;
       $114 = ($113<<24>>24)==(0);
       $115 = HEAP32[$111>>2]|0;
       $$ = $114 ? $109 : $115;
       $116 = (($$) + ($__dg$019)|0);
       $117 = HEAP8[$116>>0]|0;
       $118 = ($117<<24>>24)>(0);
       $119 = $117 << 24 >> 24;
       $120 = ($__dc$018|0)==($119|0);
       $or$cond = $118 & $120;
       if ($or$cond) {
        $121 = HEAP32[$__oe>>2]|0;
        $122 = (($121) + 1|0);
        HEAP32[$__oe>>2] = $122;
        HEAP8[$121>>0] = $105;
        $123 = HEAP8[$__grouping>>0]|0;
        $124 = $123 & 1;
        $125 = ($124<<24>>24)==(0);
        if ($125) {
         $127 = $123&255;
         $128 = $127 >>> 1;
         $130 = $128;
        } else {
         $126 = HEAP32[$110>>2]|0;
         $130 = $126;
        }
        $129 = (($130) + -1)|0;
        $131 = ($__dg$019>>>0)<($129>>>0);
        $132 = $131&1;
        $$__dg$0 = (($132) + ($__dg$019))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
       }
       $133 = HEAP8[$__p$020>>0]|0;
       $134 = HEAP32[$0>>2]|0;
       $135 = (($134) + 28|0);
       $136 = HEAP32[$135>>2]|0;
       __THREW__ = 0;
       $137 = (invoke_iii($136|0,($0|0),($133|0))|0);
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if ($139) {
        break;
       }
       $140 = HEAP32[$__oe>>2]|0;
       $141 = (($140) + 1|0);
       HEAP32[$__oe>>2] = $141;
       HEAP8[$140>>0] = $137;
       $142 = (($__dc$1) + 1)|0;
       $143 = (($__p$020) + 1|0);
       $144 = ($143>>>0)<($__ns$2>>>0);
       if ($144) {
        $__dc$018 = $142;$__dg$019 = $__dg$1;$__p$020 = $143;
       } else {
        break L39;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index10 = $18;
      break L4;
     }
    } while(0);
    $145 = $__nf$1;
    $146 = $__nb;
    $147 = (($145) - ($146))|0;
    $148 = (($__ob) + ($147)|0);
    $149 = HEAP32[$__oe>>2]|0;
    $150 = ($148|0)==($149|0);
    if (!($150)) {
     $151 = (($149) + -1|0);
     $152 = ($151>>>0)>($148>>>0);
     if ($152) {
      $$012$i$i7 = $148;$155 = $151;
      while(1) {
       $153 = HEAP8[$$012$i$i7>>0]|0;
       $154 = HEAP8[$155>>0]|0;
       HEAP8[$$012$i$i7>>0] = $154;
       HEAP8[$155>>0] = $153;
       $156 = (($$012$i$i7) + 1|0);
       $157 = (($155) + -1|0);
       $158 = ($156>>>0)<($157>>>0);
       if ($158) {
        $$012$i$i7 = $156;$155 = $157;
       } else {
        break;
       }
      }
     }
    }
   }
   $159 = ($__ns$2>>>0)<($__ne>>>0);
   L59: do {
    if ($159) {
     $__nf$214 = $__ns$2;
     while(1) {
      $160 = HEAP8[$__nf$214>>0]|0;
      $161 = ($160<<24>>24)==(46);
      if ($161) {
       break;
      }
      $171 = HEAP32[$0>>2]|0;
      $172 = (($171) + 28|0);
      $173 = HEAP32[$172>>2]|0;
      __THREW__ = 0;
      $174 = (invoke_iii($173|0,($0|0),($160|0))|0);
      $175 = __THREW__; __THREW__ = 0;
      $176 = $175&1;
      if ($176) {
       label = 4;
       break;
      }
      $177 = HEAP32[$__oe>>2]|0;
      $178 = (($177) + 1|0);
      HEAP32[$__oe>>2] = $178;
      HEAP8[$177>>0] = $174;
      $179 = (($__nf$214) + 1|0);
      $180 = ($179>>>0)<($__ne>>>0);
      if ($180) {
       $__nf$214 = $179;
      } else {
       $__nf$3 = $179;
       break L59;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index10 = $16;
      break L4;
     }
     $162 = HEAP32[$1>>2]|0;
     $163 = (($162) + 12|0);
     $164 = HEAP32[$163>>2]|0;
     __THREW__ = 0;
     $165 = (invoke_ii($164|0,($1|0))|0);
     $166 = __THREW__; __THREW__ = 0;
     $167 = $166&1;
     if ($167) {
      label = 8;
      break L4;
     }
     $168 = HEAP32[$__oe>>2]|0;
     $169 = (($168) + 1|0);
     HEAP32[$__oe>>2] = $169;
     HEAP8[$168>>0] = $165;
     $170 = (($__nf$214) + 1|0);
     $__nf$3 = $170;
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $181 = HEAP32[$__oe>>2]|0;
   $182 = HEAP32[$0>>2]|0;
   $183 = (($182) + 32|0);
   $184 = HEAP32[$183>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($184|0,($0|0),($__nf$3|0),($__ne|0),($181|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   if ($186) {
    label = 8;
   } else {
    $187 = $__nf$3;
    $188 = (($30) - ($187))|0;
    $189 = HEAP32[$__oe>>2]|0;
    $190 = (($189) + ($188)|0);
    HEAP32[$__oe>>2] = $190;
    $191 = ($__np|0)==($__ne|0);
    if ($191) {
     $storemerge = $190;
    } else {
     $192 = $__np;
     $193 = $__nb;
     $194 = (($192) - ($193))|0;
     $195 = (($__ob) + ($194)|0);
     $storemerge = $195;
    }
    HEAP32[$__op>>2] = $storemerge;
    $196 = HEAP8[$__grouping>>0]|0;
    $197 = $196 & 1;
    $198 = ($197<<24>>24)==(0);
    if ($198) {
     STACKTOP = sp;return;
    }
    $199 = (($__grouping) + 8|0);
    $200 = HEAP32[$199>>2]|0;
    _free($200);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index10 = $24;
 }
 $25 = HEAP8[$__grouping>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $28 = (($__grouping) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 _free($29);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$127 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $__fmt = sp + 32|0;
 $__nar = sp + 72|0;
 $__nb = sp + 68|0;
 $__o = sp + 102|0;
 $__op = sp + 60|0;
 $__oe = sp + 56|0;
 $0 = sp + 64|0;
 $1 = sp + 52|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,10488,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr5 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer6)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(574)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $20;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(580,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(574)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $29 = (invoke_iiiii(580,($__nb|0),($26|0),($__fmt|0),($vararg_buffer13|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $38 = $32;$78 = $32;$__nc$2 = $__nc$1;
     break;
    }
    $34 = (___cxa_allocate_exception(4)|0);
    HEAP32[$34>>2] = ((19952 + 8|0));
    __THREW__ = 0;
    invoke_viii(422,($34|0),(20008|0),(386|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$127 = $25;$$18 = $24;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $38 = $__nar;$78 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = HEAP32[$7>>2]|0;
 $40 = $39 & 176;
 do {
  if ((($40|0) == 32)) {
   $$0$i = $37;
  } else if ((($40|0) == 16)) {
   $41 = HEAP8[$38>>0]|0;
   if ((($41<<24>>24) == 43) | (($41<<24>>24) == 45)) {
    $42 = (($38) + 1|0);
    $$0$i = $42;
    break;
   }
   $43 = ($__nc$2|0)>(1);
   $44 = ($41<<24>>24)==(48);
   $or$cond$i = $43 & $44;
   if ($or$cond$i) {
    $45 = (($38) + 1|0);
    $46 = HEAP8[$45>>0]|0;
    if ((($46<<24>>24) == 88) | (($46<<24>>24) == 120)) {
     $47 = (($38) + 2|0);
     $$0$i = $47;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $38;
 }
 $48 = ($38|0)==($__nar|0);
 if ($48) {
  $61 = $__nar;$77 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $49 = $__nc$2 << 1;
  $50 = (_malloc($49)|0);
  $51 = ($50|0)==(0|0);
  if ($51) {
   $52 = (___cxa_allocate_exception(4)|0);
   HEAP32[$52>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($52|0),(20008|0),(386|0));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $89 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $61 = $38;$77 = $50;$__ob$0 = $50;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $57 = (($__iob) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$0>>2] = $58;
   $59 = (($58) + 4|0);
   $60 = HEAP32[$59>>2]|0;HEAP32[$59>>2] = (($60+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(581,($61|0),($$0$i|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if ($63) {
    $79 = ___cxa_find_matching_catch()|0;
    $80 = tempRet0;
    $81 = HEAP32[$0>>2]|0;
    $82 = (($81) + 4|0);
    $83 = HEAP32[$82>>2]|0;HEAP32[$82>>2] = (($83+-1)|0);
    $84 = ($83|0)==(0);
    if (!($84)) {
     $$0 = $79;$$01 = $80;$88 = $77;
     break;
    }
    $85 = HEAP32[$81>>2]|0;
    $86 = (($85) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    FUNCTION_TABLE_vi[$87 & 1023]($81);
    $$0 = $79;$$01 = $80;$88 = $77;
    break;
   }
   $64 = HEAP32[$0>>2]|0;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;HEAP32[$65>>2] = (($66+-1)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = HEAP32[$64>>2]|0;
    $69 = (($68) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    FUNCTION_TABLE_vi[$70 & 1023]($64);
   }
   $71 = HEAP32[$__s>>2]|0;
   $72 = HEAP32[$__op>>2]|0;
   $73 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(428,($1|0),($71|0),($__ob$0|0),($72|0),($73|0),($__iob|0),($__fl|0));
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $89 = $77;
    label = 25;
   } else {
    $76 = HEAP32[$1>>2]|0;
    HEAP32[$agg$result>>2] = $76;
    _free($77);
    _free($78);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $$0 = $55;$$01 = $56;$88 = $89;
 }
 _free($88);
 _free($78);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 62|0;
 $__nar = sp + 4|0;
 $__o = sp + 24|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10568+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10568+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10568+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10568+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10568+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10568+5>>0]|0;
 $0 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $1 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$0,$__fmt,$vararg_buffer)|0);
 $2 = (($__nar) + ($1)|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 do {
  if ((($5|0) == 32)) {
   $$0$i = $2;
  } else if ((($5|0) == 16)) {
   $6 = HEAP8[$__nar>>0]|0;
   if ((($6<<24>>24) == 43) | (($6<<24>>24) == 45)) {
    $7 = (($__nar) + 1|0);
    $$0$i = $7;
    break;
   }
   $8 = ($1|0)>(1);
   $9 = ($6<<24>>24)==(48);
   $or$cond$i = $8 & $9;
   if ($or$cond$i) {
    $10 = (($__nar) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nar) + 2|0);
     $$0$i = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $13 = (($__iob) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_iii(556,($14|0),(11752|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $33 = (($14) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   ___resumeException($31|0);
   // unreachable;
  }
  $36 = HEAP32[$14>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($14);
  ___resumeException($31|0);
  // unreachable;
 }
 $20 = (($14) + 4|0);
 $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21+-1)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = HEAP32[$14>>2]|0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vi[$25 & 1023]($14);
 }
 $26 = HEAP32[$17>>2]|0;
 $27 = (($26) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 (FUNCTION_TABLE_iiiii[$28 & 1023]($17,$__nar,$2,$__o)|0);
 $29 = (($__o) + ($1)|0);
 $30 = ($$0$i|0)==($2|0);
 if ($30) {
  $__op$0 = $29;
  $43 = HEAP32[$__s>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$43,$__o,$__op$0,$29,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $39 = $__nar;
 $40 = $$0$i;
 $41 = (($40) - ($39))|0;
 $42 = (($__o) + ($41)|0);
 $__op$0 = $42;
 $43 = HEAP32[$__s>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$43,$__o,$__op$0,$29,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp;
 $__nm = sp + 4|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $8;
  $9 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 1023]($agg$result,$this,$$byval_copy,$__iob,$__fl,$9);
  STACKTOP = sp;return;
 }
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_iii(556,($11|0),(11904|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $63 = ___cxa_find_matching_catch()|0;
  $64 = tempRet0;
  $65 = (($11) + 4|0);
  $66 = HEAP32[$65>>2]|0;HEAP32[$65>>2] = (($66+-1)|0);
  $67 = ($66|0)==(0);
  if (!($67)) {
   $$0 = $63;$$01 = $64;
   ___resumeException($$0|0);
   // unreachable;
  }
  $68 = HEAP32[$11>>2]|0;
  $69 = (($68) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  FUNCTION_TABLE_vi[$70 & 1023]($11);
  $$0 = $63;$$01 = $64;
  ___resumeException($$0|0);
  // unreachable;
 }
 $17 = (($11) + 4|0);
 $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+-1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($11);
 }
 $23 = HEAP32[$14>>2]|0;
 if ($__v) {
  $24 = (($23) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vii[$25 & 1023]($__nm,$14);
 } else {
  $26 = (($23) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 1023]($__nm,$14);
 }
 $28 = HEAP8[$__nm>>0]|0;
 $29 = $28 & 1;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $33 = (($__nm) + 4|0);
  $$pre3 = (($__nm) + 8|0);
  $$ph = $33;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $33;
 } else {
  $31 = (($__nm) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $$pre2 = (($__nm) + 4|0);
  $$ph = $32;$$pre$phi4Z2D = $31;$$pre$phiZ2D = $$pre2;
 }
 $35 = $28;$45 = $$ph;
 while(1) {
  $34 = $35 & 1;
  $36 = ($34<<24>>24)==(0);
  if ($36) {
   $39 = $35&255;
   $40 = $39 >>> 1;
   $42 = $$pre$phiZ2D;$43 = $40;
  } else {
   $37 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $38 = HEAP32[$$pre$phiZ2D>>2]|0;
   $42 = $37;$43 = $38;
  }
  $41 = (($42) + ($43<<2)|0);
  $44 = ($45|0)==($41|0);
  if ($44) {
   label = 28;
   break;
  }
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$__s>>2]|0;
  $48 = ($47|0)==(0|0);
  if (!($48)) {
   $49 = (($47) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($47) + 28|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $54 = HEAP32[$47>>2]|0;
    $55 = (($54) + 52|0);
    $56 = HEAP32[$55>>2]|0;
    __THREW__ = 0;
    $57 = (invoke_iii($56|0,($47|0),($46|0))|0);
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     label = 26;
     break;
    } else {
     $$0$i$i = $57;
    }
   } else {
    $60 = (($50) + 4|0);
    HEAP32[$49>>2] = $60;
    HEAP32[$50>>2] = $46;
    $$0$i$i = $46;
   }
   $61 = ($$0$i$i|0)==(-1);
   if ($61) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $62 = (($45) + 4|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $35 = $$pre;$45 = $62;
 }
 if ((label|0) == 26) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  $73 = HEAP8[$__nm>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $$0 = $71;$$01 = $72;
   ___resumeException($$0|0);
   // unreachable;
  }
  $76 = (($__nm) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  _free($77);
  $$0 = $71;$$01 = $72;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $78 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $78;
  if ($36) {
   STACKTOP = sp;return;
  }
  $79 = (($__nm) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  _free($80);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 112|0;
 $__nar = sp + 100|0;
 $__o = sp + 8|0;
 $__op = sp + 92|0;
 $__oe = sp + 4|0;
 $0 = sp + 96|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10560+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10560+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10560+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10560+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10560+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10560+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,10464,1,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 32)) {
   $$0$i = $6;
  } else if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(582,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 1023]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 1023]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__loc$idx$val = 0, $__loc$idx2$val = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $__loc$idx2$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx2$val,11744)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11904)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 L5: do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $144 = $22;
    label = 38;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $32 = HEAP8[$__nb>>0]|0;
   if ((($32<<24>>24) == 43) | (($32<<24>>24) == 45)) {
    $33 = HEAP32[$0>>2]|0;
    $34 = (($33) + 44|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iii($35|0,($0|0),($32|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     label = 8;
     break;
    }
    $39 = (($__nb) + 1|0);
    $40 = HEAP32[$__oe>>2]|0;
    $41 = (($40) + 4|0);
    HEAP32[$__oe>>2] = $41;
    HEAP32[$40>>2] = $36;
    $__nf$0 = $39;
   } else {
    $__nf$0 = $__nb;
   }
   $42 = $__ne;
   $43 = $__nf$0;
   $44 = (($42) - ($43))|0;
   $45 = ($44|0)>(1);
   if ($45) {
    $46 = HEAP8[$__nf$0>>0]|0;
    $47 = ($46<<24>>24)==(48);
    if ($47) {
     $48 = (($__nf$0) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     if ((($49<<24>>24) == 88) | (($49<<24>>24) == 120)) {
      $50 = HEAP32[$0>>2]|0;
      $51 = (($50) + 44|0);
      $52 = HEAP32[$51>>2]|0;
      __THREW__ = 0;
      $53 = (invoke_iii($52|0,($0|0),48)|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 8;
       break;
      }
      $56 = HEAP32[$__oe>>2]|0;
      $57 = (($56) + 4|0);
      HEAP32[$__oe>>2] = $57;
      HEAP32[$56>>2] = $53;
      $58 = HEAP8[$48>>0]|0;
      $59 = HEAP32[$0>>2]|0;
      $60 = (($59) + 44|0);
      $61 = HEAP32[$60>>2]|0;
      __THREW__ = 0;
      $62 = (invoke_iii($61|0,($0|0),($58|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 8;
       break;
      }
      $65 = (($__nf$0) + 2|0);
      $66 = HEAP32[$__oe>>2]|0;
      $67 = (($66) + 4|0);
      HEAP32[$__oe>>2] = $67;
      HEAP32[$66>>2] = $62;
      $__nf$1 = $65;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $68 = ($__nf$1|0)==($__ne|0);
   if (!($68)) {
    $69 = (($__ne) + -1|0);
    $70 = ($69>>>0)>($__nf$1>>>0);
    if ($70) {
     $$012$i$i5 = $__nf$1;$73 = $69;
     while(1) {
      $71 = HEAP8[$$012$i$i5>>0]|0;
      $72 = HEAP8[$73>>0]|0;
      HEAP8[$$012$i$i5>>0] = $72;
      HEAP8[$73>>0] = $71;
      $74 = (($$012$i$i5) + 1|0);
      $75 = (($73) + -1|0);
      $76 = ($74>>>0)<($75>>>0);
      if ($76) {
       $$012$i$i5 = $74;$73 = $75;
      } else {
       break;
      }
     }
    }
   }
   $77 = HEAP32[$1>>2]|0;
   $78 = (($77) + 16|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($1|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 8;
   } else {
    $83 = ($__nf$1>>>0)<($__ne>>>0);
    L24: do {
     if ($83) {
      $84 = (($__grouping) + 1|0);
      $85 = (($__grouping) + 4|0);
      $86 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $87 = HEAP8[$__grouping>>0]|0;
       $88 = $87 & 1;
       $89 = ($88<<24>>24)==(0);
       $90 = HEAP32[$86>>2]|0;
       $$ = $89 ? $84 : $90;
       $91 = (($$) + ($__dg$09)|0);
       $92 = HEAP8[$91>>0]|0;
       $93 = ($92<<24>>24)!=(0);
       $94 = $92 << 24 >> 24;
       $95 = ($__dc$08|0)==($94|0);
       $or$cond = $93 & $95;
       if ($or$cond) {
        $96 = HEAP32[$__oe>>2]|0;
        $97 = (($96) + 4|0);
        HEAP32[$__oe>>2] = $97;
        HEAP32[$96>>2] = $80;
        $98 = HEAP8[$__grouping>>0]|0;
        $99 = $98 & 1;
        $100 = ($99<<24>>24)==(0);
        if ($100) {
         $102 = $98&255;
         $103 = $102 >>> 1;
         $105 = $103;
        } else {
         $101 = HEAP32[$85>>2]|0;
         $105 = $101;
        }
        $104 = (($105) + -1)|0;
        $106 = ($__dg$09>>>0)<($104>>>0);
        $107 = $106&1;
        $$__dg$0 = (($107) + ($__dg$09))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       }
       $108 = HEAP8[$__p$010>>0]|0;
       $109 = HEAP32[$0>>2]|0;
       $110 = (($109) + 44|0);
       $111 = HEAP32[$110>>2]|0;
       __THREW__ = 0;
       $112 = (invoke_iii($111|0,($0|0),($108|0))|0);
       $113 = __THREW__; __THREW__ = 0;
       $114 = $113&1;
       if ($114) {
        break;
       }
       $115 = HEAP32[$__oe>>2]|0;
       $116 = (($115) + 4|0);
       HEAP32[$__oe>>2] = $116;
       HEAP32[$115>>2] = $112;
       $117 = (($__dc$1) + 1)|0;
       $118 = (($__p$010) + 1|0);
       $119 = ($118>>>0)<($__ne>>>0);
       if ($119) {
        $__dc$08 = $117;$__dg$09 = $__dg$1;$__p$010 = $118;
       } else {
        $125 = $116;
        break L24;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index5 = $24;
      break L5;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $125 = $$pre;
     }
    } while(0);
    $120 = $__nf$1;
    $121 = $__nb;
    $122 = (($120) - ($121))|0;
    $123 = (($__ob) + ($122<<2)|0);
    $124 = ($123|0)==($125|0);
    if ($124) {
     $144 = $125;
     label = 38;
    } else {
     $126 = (($125) + -4|0);
     $127 = ($126>>>0)>($123>>>0);
     if ($127) {
      $$012$i$i = $123;$130 = $126;
      while(1) {
       $128 = HEAP32[$$012$i$i>>2]|0;
       $129 = HEAP32[$130>>2]|0;
       HEAP32[$$012$i$i>>2] = $129;
       HEAP32[$130>>2] = $128;
       $131 = (($$012$i$i) + 4|0);
       $132 = (($130) + -4|0);
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $$012$i$i = $131;$130 = $132;
       } else {
        $144 = $125;
        label = 38;
        break;
       }
      }
     } else {
      $144 = $125;
      label = 38;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index5 = $26;
 }
 else if ((label|0) == 38) {
  $134 = ($__np|0)==($__ne|0);
  if ($134) {
   $storemerge = $144;
  } else {
   $135 = $__np;
   $136 = $__nb;
   $137 = (($135) - ($136))|0;
   $138 = (($__ob) + ($137<<2)|0);
   $storemerge = $138;
  }
  HEAP32[$__op>>2] = $storemerge;
  $139 = HEAP8[$__grouping>>0]|0;
  $140 = $139 & 1;
  $141 = ($140<<24>>24)==(0);
  if ($141) {
   STACKTOP = sp;return;
  }
  $142 = (($__grouping) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
  STACKTOP = sp;return;
 }
 $27 = HEAP8[$__grouping>>0]|0;
 $28 = $27 & 1;
 $29 = ($28<<24>>24)==(0);
 if ($29) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $30 = (($__grouping) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 _free($31);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s$0,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s$0 = $__s$0|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = ($__s$0|0)==(0|0);
 if ($0) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($2))|0;
 $11 = $10 >> 2;
 $12 = ($10|0)>(0);
 if ($12) {
  $13 = HEAP32[$__s$0>>2]|0;
  $14 = (($13) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiii[$15 & 1023]($__s$0,$__ob,$11)|0);
  $17 = ($16|0)==($11|0);
  if (!($17)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $18 = ($__ns$0|0)>(0);
 do {
  if ($18) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $19 = HEAP8[$__sp>>0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $24 = (($__sp) + 4|0);
    $28 = $24;
   } else {
    $22 = (($__sp) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $28 = $23;
   }
   $25 = HEAP32[$__s$0>>2]|0;
   $26 = (($25) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   __THREW__ = 0;
   $29 = (invoke_iiii($27|0,($__s$0|0),($28|0),($__ns$0|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $40 = HEAP8[$__sp>>0]|0;
    $41 = $40 & 1;
    $42 = ($41<<24>>24)==(0);
    if ($42) {
     ___resumeException($38|0);
     // unreachable;
    }
    $43 = (($__sp) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    _free($44);
    ___resumeException($38|0);
    // unreachable;
   }
   $32 = ($29|0)==($__ns$0|0);
   if ($32) {
    $45 = HEAP8[$__sp>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     break;
    }
    $48 = (($__sp) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    _free($49);
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $33 = HEAP8[$__sp>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    STACKTOP = sp;return;
   }
   $36 = (($__sp) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   _free($37);
   STACKTOP = sp;return;
  }
 } while(0);
 $50 = (($1) - ($9))|0;
 $51 = $50 >> 2;
 $52 = ($50|0)>(0);
 if ($52) {
  $53 = HEAP32[$__s$0>>2]|0;
  $54 = (($53) + 48|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (FUNCTION_TABLE_iiii[$55 & 1023]($__s$0,$__op,$51)|0);
  $57 = ($56|0)==($51|0);
  if (!($57)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$agg$result>>2] = $__s$0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 192|0;
 $__o = sp + 16|0;
 $__op = sp + 180|0;
 $__oe = sp + 184|0;
 $2 = sp + 188|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,10472,1,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 32)) {
   $$0$i = $16;
  } else if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(582,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 1023]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 112|0;
 $__nar = sp + 100|0;
 $__o = sp + 8|0;
 $__op = sp + 92|0;
 $__oe = sp + 4|0;
 $0 = sp + 96|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10560+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10560+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10560+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10560+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10560+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10560+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,10464,0,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($8|0) == 32)) {
   $$0$i = $6;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(582,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 1023]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 1023]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 16|0;
 $__op = sp + 188|0;
 $__oe = sp + 192|0;
 $2 = sp + 196|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,10472,0,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 32)) {
   $$0$i = $16;
  } else if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(582,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 1023]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$125 = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp + 40|0;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 64|0;
 $__op = sp + 292|0;
 $__oe = sp + 296|0;
 $0 = sp + 300|0;
 $1 = sp + 60|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,10480,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr5 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer6)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(574)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $20;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(580,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(574)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = (($__iob) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer13>>2] = $30;
     $vararg_ptr16 = (($vararg_buffer13) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $31 = (invoke_iiiii(580,($__nb|0),($26|0),($__fmt|0),($vararg_buffer13|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $40 = $34;$81 = $34;$__nc$2 = $__nc$1;
     break;
    }
    $36 = (___cxa_allocate_exception(4)|0);
    HEAP32[$36>>2] = ((19952 + 8|0));
    __THREW__ = 0;
    invoke_viii(422,($36|0),(20008|0),(386|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$125 = $25;$$16 = $24;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $40 = $__nar;$81 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = HEAP32[$7>>2]|0;
 $42 = $41 & 176;
 do {
  if ((($42|0) == 16)) {
   $43 = HEAP8[$40>>0]|0;
   if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
    $44 = (($40) + 1|0);
    $$0$i = $44;
    break;
   }
   $45 = ($__nc$2|0)>(1);
   $46 = ($43<<24>>24)==(48);
   $or$cond$i = $45 & $46;
   if ($or$cond$i) {
    $47 = (($40) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    if ((($48<<24>>24) == 88) | (($48<<24>>24) == 120)) {
     $49 = (($40) + 2|0);
     $$0$i = $49;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($42|0) == 32)) {
   $$0$i = $39;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $40;
 }
 $50 = ($40|0)==($__nar|0);
 if ($50) {
  $63 = $__nar;$80 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $51 = $__nc$2 << 3;
  $52 = (_malloc($51)|0);
  $53 = ($52|0)==(0|0);
  if ($53) {
   $54 = (___cxa_allocate_exception(4)|0);
   HEAP32[$54>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($54|0),(20008|0),(386|0));
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $93 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $63 = $40;$80 = $52;$__ob$0 = $52;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $59 = (($__iob) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$0>>2] = $60;
   $61 = (($60) + 4|0);
   $62 = HEAP32[$61>>2]|0;HEAP32[$61>>2] = (($62+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(583,($63|0),($$0$i|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $82 = ___cxa_find_matching_catch()|0;
    $83 = tempRet0;
    $84 = HEAP32[$0>>2]|0;
    $85 = (($84) + 4|0);
    $86 = HEAP32[$85>>2]|0;HEAP32[$85>>2] = (($86+-1)|0);
    $87 = ($86|0)==(0);
    if (!($87)) {
     $$0 = $82;$$01 = $83;$92 = $80;
     break;
    }
    $88 = HEAP32[$84>>2]|0;
    $89 = (($88) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    FUNCTION_TABLE_vi[$90 & 1023]($84);
    $$0 = $82;$$01 = $83;$92 = $80;
    break;
   }
   $66 = HEAP32[$0>>2]|0;
   $67 = (($66) + 4|0);
   $68 = HEAP32[$67>>2]|0;HEAP32[$67>>2] = (($68+-1)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = HEAP32[$66>>2]|0;
    $71 = (($70) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_vi[$72 & 1023]($66);
   }
   $73 = HEAP32[$__s>>2]|0;
   $74 = HEAP32[$__op>>2]|0;
   $75 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(584,($1|0),($73|0),($__ob$0|0),($74|0),($75|0),($__iob|0),($__fl|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $93 = $80;
    label = 25;
   } else {
    $78 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $78;
    HEAP32[$agg$result>>2] = $78;
    $79 = ($80|0)==(0|0);
    if ($79) {
     _free($81);
     STACKTOP = sp;return;
    }
    _free($80);
    _free($81);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $$0 = $57;$$01 = $58;$92 = $93;
 }
 $91 = ($92|0)==(0|0);
 if (!($91)) {
  _free($92);
 }
 _free($81);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$017 = 0, $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__loc$idx$val = 0, $__loc$idx2$val = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$213 = 0, $__nf$3 = 0, $__ns$033 = 0, $__ns$125 = 0;
 var $__ns$2 = 0, $__p$019 = 0, $isdigit$i = 0, $isdigit$i$i = 0, $isdigittmp$i = 0, $isdigittmp$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $__loc$idx2$val = HEAP32[$__loc>>2]|0;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx2$val,11744)|0);
 $__loc$idx$val = HEAP32[$__loc>>2]|0;
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$idx$val,11904)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 12;
  }
 } else {
  $__nf$0 = $__nb;
  label = 12;
 }
 L4: do {
  if ((label|0) == 12) {
   $30 = $__ne;
   $31 = $__nf$0;
   $32 = (($30) - ($31))|0;
   $33 = ($32|0)>(1);
   L6: do {
    if ($33) {
     $35 = HEAP8[$__nf$0>>0]|0;
     $36 = ($35<<24>>24)==(48);
     if ($36) {
      $37 = (($__nf$0) + 1|0);
      $38 = HEAP8[$37>>0]|0;
      if ((($38<<24>>24) == 88) | (($38<<24>>24) == 120)) {
       $39 = HEAP32[$0>>2]|0;
       $40 = (($39) + 44|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_iii($41|0,($0|0),48)|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        label = 8;
        break L4;
       }
       $45 = HEAP32[$__oe>>2]|0;
       $46 = (($45) + 4|0);
       HEAP32[$__oe>>2] = $46;
       HEAP32[$45>>2] = $42;
       $47 = (($__nf$0) + 2|0);
       $48 = HEAP8[$37>>0]|0;
       $49 = HEAP32[$0>>2]|0;
       $50 = (($49) + 44|0);
       $51 = HEAP32[$50>>2]|0;
       __THREW__ = 0;
       $52 = (invoke_iii($51|0,($0|0),($48|0))|0);
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        label = 8;
        break L4;
       }
       $55 = HEAP32[$__oe>>2]|0;
       $56 = (($55) + 4|0);
       HEAP32[$__oe>>2] = $56;
       HEAP32[$55>>2] = $52;
       $57 = ($47>>>0)<($__ne>>>0);
       if ($57) {
        $__ns$033 = $47;
        while(1) {
         $60 = HEAP8[$__ns$033>>0]|0;
         __THREW__ = 0;
         (invoke_i(574)|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = $60 << 24 >> 24;
         $isdigittmp$i$i = (($63) + -48)|0;
         $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
         if (!($isdigit$i$i)) {
          $64 = $63 | 32;
          $65 = (($64) + -97)|0;
          $66 = ($65>>>0)<(6);
          if (!($66)) {
           $__nf$1 = $47;$__ns$2 = $__ns$033;
           break L6;
          }
         }
         $58 = (($__ns$033) + 1|0);
         $59 = ($58>>>0)<($__ne>>>0);
         if ($59) {
          $__ns$033 = $58;
         } else {
          $__nf$1 = $47;$__ns$2 = $58;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index10 = $22;
        break L4;
       } else {
        $__nf$1 = $47;$__ns$2 = $47;
       }
      } else {
       label = 13;
      }
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
   } while(0);
   L19: do {
    if ((label|0) == 13) {
     $34 = ($__nf$0>>>0)<($__ne>>>0);
     if ($34) {
      $__ns$125 = $__nf$0;
      while(1) {
       $69 = HEAP8[$__ns$125>>0]|0;
       __THREW__ = 0;
       (invoke_i(574)|0);
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        break;
       }
       $72 = $69 << 24 >> 24;
       $isdigittmp$i = (($72) + -48)|0;
       $isdigit$i = ($isdigittmp$i>>>0)<(10);
       $68 = (($__ns$125) + 1|0);
       if (!($isdigit$i)) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$125;
        break L19;
       }
       $67 = ($68>>>0)<($__ne>>>0);
       if ($67) {
        $__ns$125 = $68;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $68;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index10 = $20;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $73 = HEAP8[$__grouping>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   if ($75) {
    $78 = $73&255;
    $79 = $78 >>> 1;
    $81 = $79;
   } else {
    $76 = (($__grouping) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $81 = $77;
   }
   $80 = ($81|0)==(0);
   if ($80) {
    $82 = HEAP32[$__oe>>2]|0;
    $83 = HEAP32[$0>>2]|0;
    $84 = (($83) + 48|0);
    $85 = HEAP32[$84>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($85|0,($0|0),($__nf$1|0),($__ns$2|0),($82|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 8;
     break;
    }
    $88 = $__ns$2;
    $89 = $__nf$1;
    $90 = (($88) - ($89))|0;
    $91 = HEAP32[$__oe>>2]|0;
    $92 = (($91) + ($90<<2)|0);
    HEAP32[$__oe>>2] = $92;
    $201 = $92;
   } else {
    $93 = ($__nf$1|0)==($__ns$2|0);
    if (!($93)) {
     $94 = (($__ns$2) + -1|0);
     $95 = ($94>>>0)>($__nf$1>>>0);
     if ($95) {
      $$012$i$i = $__nf$1;$98 = $94;
      while(1) {
       $96 = HEAP8[$$012$i$i>>0]|0;
       $97 = HEAP8[$98>>0]|0;
       HEAP8[$$012$i$i>>0] = $97;
       HEAP8[$98>>0] = $96;
       $99 = (($$012$i$i) + 1|0);
       $100 = (($98) + -1|0);
       $101 = ($99>>>0)<($100>>>0);
       if ($101) {
        $$012$i$i = $99;$98 = $100;
       } else {
        break;
       }
      }
     }
    }
    $102 = HEAP32[$1>>2]|0;
    $103 = (($102) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    __THREW__ = 0;
    $105 = (invoke_ii($104|0,($1|0))|0);
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     label = 8;
     break;
    }
    $108 = ($__nf$1>>>0)<($__ns$2>>>0);
    L41: do {
     if ($108) {
      $109 = (($__grouping) + 1|0);
      $110 = (($__grouping) + 4|0);
      $111 = (($__grouping) + 8|0);
      $__dc$017 = 0;$__dg$018 = 0;$__p$019 = $__nf$1;
      while(1) {
       $112 = HEAP8[$__grouping>>0]|0;
       $113 = $112 & 1;
       $114 = ($113<<24>>24)==(0);
       $115 = HEAP32[$111>>2]|0;
       $$ = $114 ? $109 : $115;
       $116 = (($$) + ($__dg$018)|0);
       $117 = HEAP8[$116>>0]|0;
       $118 = ($117<<24>>24)>(0);
       $119 = $117 << 24 >> 24;
       $120 = ($__dc$017|0)==($119|0);
       $or$cond = $118 & $120;
       if ($or$cond) {
        $121 = HEAP32[$__oe>>2]|0;
        $122 = (($121) + 4|0);
        HEAP32[$__oe>>2] = $122;
        HEAP32[$121>>2] = $105;
        $123 = HEAP8[$__grouping>>0]|0;
        $124 = $123 & 1;
        $125 = ($124<<24>>24)==(0);
        if ($125) {
         $127 = $123&255;
         $128 = $127 >>> 1;
         $130 = $128;
        } else {
         $126 = HEAP32[$110>>2]|0;
         $130 = $126;
        }
        $129 = (($130) + -1)|0;
        $131 = ($__dg$018>>>0)<($129>>>0);
        $132 = $131&1;
        $$__dg$0 = (($132) + ($__dg$018))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
       }
       $133 = HEAP8[$__p$019>>0]|0;
       $134 = HEAP32[$0>>2]|0;
       $135 = (($134) + 44|0);
       $136 = HEAP32[$135>>2]|0;
       __THREW__ = 0;
       $137 = (invoke_iii($136|0,($0|0),($133|0))|0);
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if ($139) {
        break;
       }
       $140 = HEAP32[$__oe>>2]|0;
       $141 = (($140) + 4|0);
       HEAP32[$__oe>>2] = $141;
       HEAP32[$140>>2] = $137;
       $142 = (($__dc$1) + 1)|0;
       $143 = (($__p$019) + 1|0);
       $144 = ($143>>>0)<($__ns$2>>>0);
       if ($144) {
        $__dc$017 = $142;$__dg$018 = $__dg$1;$__p$019 = $143;
       } else {
        $150 = $141;
        break L41;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index10 = $18;
      break L4;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $150 = $$pre;
     }
    } while(0);
    $145 = $__nf$1;
    $146 = $__nb;
    $147 = (($145) - ($146))|0;
    $148 = (($__ob) + ($147<<2)|0);
    $149 = ($148|0)==($150|0);
    if ($149) {
     $201 = $150;
    } else {
     $151 = (($150) + -4|0);
     $152 = ($151>>>0)>($148>>>0);
     if ($152) {
      $$012$i$i7 = $148;$155 = $151;
      while(1) {
       $153 = HEAP32[$$012$i$i7>>2]|0;
       $154 = HEAP32[$155>>2]|0;
       HEAP32[$$012$i$i7>>2] = $154;
       HEAP32[$155>>2] = $153;
       $156 = (($$012$i$i7) + 4|0);
       $157 = (($155) + -4|0);
       $158 = ($156>>>0)<($157>>>0);
       if ($158) {
        $$012$i$i7 = $156;$155 = $157;
       } else {
        $201 = $150;
        break;
       }
      }
     } else {
      $201 = $150;
     }
    }
   }
   $159 = ($__ns$2>>>0)<($__ne>>>0);
   L60: do {
    if ($159) {
     $__nf$213 = $__ns$2;
     while(1) {
      $160 = HEAP8[$__nf$213>>0]|0;
      $161 = ($160<<24>>24)==(46);
      if ($161) {
       break;
      }
      $171 = HEAP32[$0>>2]|0;
      $172 = (($171) + 44|0);
      $173 = HEAP32[$172>>2]|0;
      __THREW__ = 0;
      $174 = (invoke_iii($173|0,($0|0),($160|0))|0);
      $175 = __THREW__; __THREW__ = 0;
      $176 = $175&1;
      if ($176) {
       label = 4;
       break;
      }
      $177 = HEAP32[$__oe>>2]|0;
      $178 = (($177) + 4|0);
      HEAP32[$__oe>>2] = $178;
      HEAP32[$177>>2] = $174;
      $179 = (($__nf$213) + 1|0);
      $180 = ($179>>>0)<($__ne>>>0);
      if ($180) {
       $__nf$213 = $179;
      } else {
       $184 = $178;$__nf$3 = $179;
       break L60;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index10 = $16;
      break L4;
     }
     $162 = HEAP32[$1>>2]|0;
     $163 = (($162) + 12|0);
     $164 = HEAP32[$163>>2]|0;
     __THREW__ = 0;
     $165 = (invoke_ii($164|0,($1|0))|0);
     $166 = __THREW__; __THREW__ = 0;
     $167 = $166&1;
     if ($167) {
      label = 8;
      break L4;
     }
     $168 = HEAP32[$__oe>>2]|0;
     $169 = (($168) + 4|0);
     HEAP32[$__oe>>2] = $169;
     HEAP32[$168>>2] = $165;
     $170 = (($__nf$213) + 1|0);
     $184 = $169;$__nf$3 = $170;
    } else {
     $184 = $201;$__nf$3 = $__ns$2;
    }
   } while(0);
   $181 = HEAP32[$0>>2]|0;
   $182 = (($181) + 48|0);
   $183 = HEAP32[$182>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($183|0,($0|0),($__nf$3|0),($__ne|0),($184|0))|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   if ($186) {
    label = 8;
   } else {
    $187 = $__nf$3;
    $188 = (($30) - ($187))|0;
    $189 = HEAP32[$__oe>>2]|0;
    $190 = (($189) + ($188<<2)|0);
    HEAP32[$__oe>>2] = $190;
    $191 = ($__np|0)==($__ne|0);
    if ($191) {
     $storemerge = $190;
    } else {
     $192 = $__np;
     $193 = $__nb;
     $194 = (($192) - ($193))|0;
     $195 = (($__ob) + ($194<<2)|0);
     $storemerge = $195;
    }
    HEAP32[$__op>>2] = $storemerge;
    $196 = HEAP8[$__grouping>>0]|0;
    $197 = $196 & 1;
    $198 = ($197<<24>>24)==(0);
    if ($198) {
     STACKTOP = sp;return;
    }
    $199 = (($__grouping) + 8|0);
    $200 = HEAP32[$199>>2]|0;
    _free($200);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index10 = $24;
 }
 $25 = HEAP8[$__grouping>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $28 = (($__grouping) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 _free($29);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$125 = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $__fmt = sp + 32|0;
 $__nar = sp + 300|0;
 $__nb = sp + 296|0;
 $__o = sp + 56|0;
 $__op = sp + 284|0;
 $__oe = sp + 288|0;
 $0 = sp + 292|0;
 $1 = sp + 52|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,10488,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr5 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer6)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(574)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $20;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(580,($__nb|0),($16|0),($__fmt|0),($vararg_buffer9|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(574)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $29 = (invoke_iiiii(580,($__nb|0),($26|0),($__fmt|0),($vararg_buffer13|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $38 = $32;$79 = $32;$__nc$2 = $__nc$1;
     break;
    }
    $34 = (___cxa_allocate_exception(4)|0);
    HEAP32[$34>>2] = ((19952 + 8|0));
    __THREW__ = 0;
    invoke_viii(422,($34|0),(20008|0),(386|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$125 = $25;$$16 = $24;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $38 = $__nar;$79 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = HEAP32[$7>>2]|0;
 $40 = $39 & 176;
 do {
  if ((($40|0) == 16)) {
   $41 = HEAP8[$38>>0]|0;
   if ((($41<<24>>24) == 43) | (($41<<24>>24) == 45)) {
    $42 = (($38) + 1|0);
    $$0$i = $42;
    break;
   }
   $43 = ($__nc$2|0)>(1);
   $44 = ($41<<24>>24)==(48);
   $or$cond$i = $43 & $44;
   if ($or$cond$i) {
    $45 = (($38) + 1|0);
    $46 = HEAP8[$45>>0]|0;
    if ((($46<<24>>24) == 88) | (($46<<24>>24) == 120)) {
     $47 = (($38) + 2|0);
     $$0$i = $47;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($40|0) == 32)) {
   $$0$i = $37;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $38;
 }
 $48 = ($38|0)==($__nar|0);
 if ($48) {
  $61 = $__nar;$78 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $49 = $__nc$2 << 3;
  $50 = (_malloc($49)|0);
  $51 = ($50|0)==(0|0);
  if ($51) {
   $52 = (___cxa_allocate_exception(4)|0);
   HEAP32[$52>>2] = ((19952 + 8|0));
   __THREW__ = 0;
   invoke_viii(422,($52|0),(20008|0),(386|0));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $91 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $61 = $38;$78 = $50;$__ob$0 = $50;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $57 = (($__iob) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$0>>2] = $58;
   $59 = (($58) + 4|0);
   $60 = HEAP32[$59>>2]|0;HEAP32[$59>>2] = (($60+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(583,($61|0),($$0$i|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if ($63) {
    $80 = ___cxa_find_matching_catch()|0;
    $81 = tempRet0;
    $82 = HEAP32[$0>>2]|0;
    $83 = (($82) + 4|0);
    $84 = HEAP32[$83>>2]|0;HEAP32[$83>>2] = (($84+-1)|0);
    $85 = ($84|0)==(0);
    if (!($85)) {
     $$0 = $80;$$01 = $81;$90 = $78;
     break;
    }
    $86 = HEAP32[$82>>2]|0;
    $87 = (($86) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    FUNCTION_TABLE_vi[$88 & 1023]($82);
    $$0 = $80;$$01 = $81;$90 = $78;
    break;
   }
   $64 = HEAP32[$0>>2]|0;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;HEAP32[$65>>2] = (($66+-1)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = HEAP32[$64>>2]|0;
    $69 = (($68) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    FUNCTION_TABLE_vi[$70 & 1023]($64);
   }
   $71 = HEAP32[$__s>>2]|0;
   $72 = HEAP32[$__op>>2]|0;
   $73 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(584,($1|0),($71|0),($__ob$0|0),($72|0),($73|0),($__iob|0),($__fl|0));
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $91 = $78;
    label = 25;
   } else {
    $76 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $76;
    HEAP32[$agg$result>>2] = $76;
    $77 = ($78|0)==(0|0);
    if ($77) {
     _free($79);
     STACKTOP = sp;return;
    }
    _free($78);
    _free($79);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $$0 = $55;$$01 = $56;$90 = $91;
 }
 $89 = ($90|0)==(0|0);
 if (!($89)) {
  _free($90);
 }
 _free($79);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 172|0;
 $__nar = sp + 152|0;
 $__o = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[10568+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[10568+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[10568+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[10568+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[10568+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[10568+5>>0]|0;
 $0 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $1 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$0,$__fmt,$vararg_buffer)|0);
 $2 = (($__nar) + ($1)|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 do {
  if ((($5|0) == 32)) {
   $$0$i = $2;
  } else if ((($5|0) == 16)) {
   $6 = HEAP8[$__nar>>0]|0;
   if ((($6<<24>>24) == 43) | (($6<<24>>24) == 45)) {
    $7 = (($__nar) + 1|0);
    $$0$i = $7;
    break;
   }
   $8 = ($1|0)>(1);
   $9 = ($6<<24>>24)==(48);
   $or$cond$i = $8 & $9;
   if ($or$cond$i) {
    $10 = (($__nar) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nar) + 2|0);
     $$0$i = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $13 = (($__iob) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_iii(556,($14|0),(11744|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $33 = (($14) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   ___resumeException($31|0);
   // unreachable;
  }
  $36 = HEAP32[$14>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 1023]($14);
  ___resumeException($31|0);
  // unreachable;
 }
 $20 = (($14) + 4|0);
 $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21+-1)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = HEAP32[$14>>2]|0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vi[$25 & 1023]($14);
 }
 $26 = HEAP32[$17>>2]|0;
 $27 = (($26) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 (FUNCTION_TABLE_iiiii[$28 & 1023]($17,$__nar,$2,$__o)|0);
 $29 = (($__o) + ($1<<2)|0);
 $30 = ($$0$i|0)==($2|0);
 if ($30) {
  $__op$0 = $29;
  $43 = HEAP32[$__s>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$43,$__o,$__op$0,$29,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $39 = $__nar;
 $40 = $$0$i;
 $41 = (($40) - ($39))|0;
 $42 = (($__o) + ($41<<2)|0);
 $__op$0 = $42;
 $43 = HEAP32[$__s>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$43,$__o,$__op$0,$29,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b$0,$__e$0,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b$0 = $__b$0|0;
 $__e$0 = $__e$0|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$$pre$i$i$i15 = 0, $$$pre$i$i$i6 = 0, $$0$i$i = 0, $$0$i$i24 = 0, $$0$ph$be = 0, $$0$ph37 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$__b$sroa$0$1 = 0, $$__b$sroa$0$13 = 0, $$__b$sroa$0$4 = 0, $$byval_copy = 0, $$byval_copy4 = 0, $$pre$i$i$i15 = 0, $$pre$i$i$i6 = 0, $$pre$i2$i$i19 = 0, $$pre$i2$i$i1939 = 0, $$pre$i2$i$i1940 = 0;
 var $$pre38 = 0, $$pre38$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__b$sroa$0$5 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, $isascii1$i = 0;
 var $isascii1$i22 = 0, $isascii1$i3 = 0, $sext = 0, $tmp$i$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 16|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = sp + 12|0;
 $3 = (($__iob) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 __THREW__ = 0;
 $7 = (invoke_iii(556,($4|0),(11752|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $46 = (($4) + 4|0);
  $47 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($47+-1)|0);
  $48 = ($47|0)==(0);
  if (!($48)) {
   ___resumeException($44|0);
   // unreachable;
  }
  $49 = HEAP32[$4>>2]|0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  FUNCTION_TABLE_vi[$51 & 1023]($4);
  ___resumeException($44|0);
  // unreachable;
 }
 $10 = (($4) + 4|0);
 $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[$4>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 1023]($4);
 }
 HEAP32[$__err>>2] = 0;
 $16 = ($__fmtb|0)==($__fmte|0);
 L11: do {
  if ($16) {
   $$pre$i$i$i6 = $__b$0;$__e$sroa$0$10 = $__e$0;
  } else {
   $17 = (($7) + 8|0);
   $$0$ph37 = $__fmtb;$$pre38 = 0;$__b$sroa$0$0 = $__b$0;$__e$sroa$0$0 = $__e$0;
   L13: while(1) {
    $19 = $$pre38;$__b$sroa$0$1 = $__b$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
    while(1) {
     $18 = ($19|0)==(0);
     if (!($18)) {
      $$pre$i$i$i6 = $__b$sroa$0$1;$__e$sroa$0$10 = $__e$sroa$0$1;
      break L11;
     }
     $20 = ($__b$sroa$0$1|0)==(0|0);
     if ($20) {
      $32 = 0;$__b$sroa$0$2 = 0;
     } else {
      $21 = (($__b$sroa$0$1) + 12|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = (($__b$sroa$0$1) + 16|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      if ($25) {
       $26 = HEAP32[$__b$sroa$0$1>>2]|0;
       $27 = (($26) + 36|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (FUNCTION_TABLE_ii[$28 & 1023]($__b$sroa$0$1)|0);
       $30 = ($29|0)==(-1);
       $$__b$sroa$0$1 = $30 ? 0 : $__b$sroa$0$1;
       $$__b$sroa$0$13 = $30 ? 0 : $__b$sroa$0$1;
       $32 = $$__b$sroa$0$13;$__b$sroa$0$2 = $$__b$sroa$0$1;
      } else {
       $32 = $__b$sroa$0$1;$__b$sroa$0$2 = $__b$sroa$0$1;
      }
     }
     $31 = ($32|0)==(0|0);
     $33 = ($__e$sroa$0$1|0)==(0|0);
     do {
      if ($33) {
       label = 15;
      } else {
       $34 = (($__e$sroa$0$1) + 12|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($__e$sroa$0$1) + 16|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($35|0)==($37|0);
       if ($38) {
        $39 = HEAP32[$__e$sroa$0$1>>2]|0;
        $40 = (($39) + 36|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = (FUNCTION_TABLE_ii[$41 & 1023]($__e$sroa$0$1)|0);
        $43 = ($42|0)==(-1);
        if ($43) {
         label = 15;
         break;
        }
       }
       if ($31) {
        $__e$sroa$0$4 = $__e$sroa$0$1;
       } else {
        $__e$sroa$0$3 = $__e$sroa$0$1;
        label = 16;
        break L13;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      if ($31) {
       $__e$sroa$0$3 = 0;
       label = 16;
       break L13;
      } else {
       $__e$sroa$0$4 = 0;
      }
     }
     $52 = HEAP8[$$0$ph37>>0]|0;
     $53 = HEAP32[$7>>2]|0;
     $54 = (($53) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_iiii[$55 & 1023]($7,$52,0)|0);
     $57 = ($56<<24>>24)==(37);
     if ($57) {
      label = 21;
      break;
     }
     $78 = HEAP8[$$0$ph37>>0]|0;
     $isascii1$i = ($78<<24>>24)>(-1);
     if ($isascii1$i) {
      $79 = $78 << 24 >> 24;
      $80 = HEAP32[$17>>2]|0;
      $81 = (($80) + ($79<<1)|0);
      $82 = HEAP16[$81>>1]|0;
      $83 = $82 & 8192;
      $84 = ($83<<16>>16)==(0);
      if (!($84)) {
       $$0$pn = $$0$ph37;
       label = 32;
       break;
      }
     }
     $143 = (($32) + 12|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($32) + 16|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)==($146|0);
     if ($147) {
      $148 = HEAP32[$32>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (FUNCTION_TABLE_ii[$150 & 1023]($32)|0);
      $$0$i$i24 = $151;
     } else {
      $152 = HEAP8[$144>>0]|0;
      $153 = $152&255;
      $$0$i$i24 = $153;
     }
     $154 = $$0$i$i24&255;
     $155 = HEAP32[$7>>2]|0;
     $156 = (($155) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (FUNCTION_TABLE_iii[$157 & 1023]($7,$154)|0);
     $159 = HEAP8[$$0$ph37>>0]|0;
     $160 = HEAP32[$7>>2]|0;
     $161 = (($160) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (FUNCTION_TABLE_iii[$162 & 1023]($7,$159)|0);
     $164 = ($158<<24>>24)==($163<<24>>24);
     if ($164) {
      label = 57;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $19 = 4;$__b$sroa$0$1 = $__b$sroa$0$2;$__e$sroa$0$1 = $__e$sroa$0$4;
    }
    L39: do {
     if ((label|0) == 21) {
      label = 0;
      $58 = (($$0$ph37) + 1|0);
      $59 = ($58|0)==($__fmte|0);
      if ($59) {
       label = 22;
       break L13;
      }
      $60 = HEAP8[$58>>0]|0;
      $61 = HEAP32[$7>>2]|0;
      $62 = (($61) + 36|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (FUNCTION_TABLE_iiii[$63 & 1023]($7,$60,0)|0);
      if ((($64<<24>>24) == 48) | (($64<<24>>24) == 69)) {
       $65 = (($$0$ph37) + 2|0);
       $66 = ($65|0)==($__fmte|0);
       if ($66) {
        label = 25;
        break L13;
       }
       $67 = HEAP8[$65>>0]|0;
       $68 = HEAP32[$7>>2]|0;
       $69 = (($68) + 36|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (FUNCTION_TABLE_iiii[$70 & 1023]($7,$67,0)|0);
       $$1 = $65;$__cmd$0 = $71;$__opt$0 = $64;
      } else {
       $$1 = $58;$__cmd$0 = $64;$__opt$0 = 0;
      }
      $72 = HEAP32[$this>>2]|0;
      $73 = (($72) + 36|0);
      $74 = HEAP32[$73>>2]|0;
      HEAP32[$1>>2] = $32;
      HEAP32[$2>>2] = $__e$sroa$0$4;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
      ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$2+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$74 & 255]($0,$this,$$byval_copy,$$byval_copy4,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $75 = HEAP32[$0>>2]|0;
      $76 = (($$1) + 1|0);
      $$0$ph$be = $76;$__b$sroa$0$3 = $75;$__e$sroa$0$5 = $__e$sroa$0$4;
     }
     else if ((label|0) == 32) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 1|0);
       $85 = ($$2|0)==($__fmte|0);
       if ($85) {
        $$2$lcssa = $__fmte;
        break;
       }
       $86 = HEAP8[$$2>>0]|0;
       $isascii1$i3 = ($86<<24>>24)>(-1);
       if (!($isascii1$i3)) {
        $$2$lcssa = $$2;
        break;
       }
       $87 = $86 << 24 >> 24;
       $88 = (($80) + ($87<<1)|0);
       $89 = HEAP16[$88>>1]|0;
       $90 = $89 & 8192;
       $91 = ($90<<16>>16)==(0);
       if ($91) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 32;
       }
      }
      $$pre$i$i$i15 = $32;$$pre$i2$i$i19 = $__e$sroa$0$4;$106 = $__e$sroa$0$4;$__b$sroa$0$4 = $__b$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$4;
      while(1) {
       $92 = ($$pre$i$i$i15|0)==(0|0);
       if ($92) {
        $104 = 0;$__b$sroa$0$5 = $__b$sroa$0$4;
       } else {
        $93 = (($$pre$i$i$i15) + 12|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (($$pre$i$i$i15) + 16|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($94|0)==($96|0);
        if ($97) {
         $98 = HEAP32[$$pre$i$i$i15>>2]|0;
         $99 = (($98) + 36|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = (FUNCTION_TABLE_ii[$100 & 1023]($$pre$i$i$i15)|0);
         $102 = ($101|0)==(-1);
         $$__b$sroa$0$4 = $102 ? 0 : $__b$sroa$0$4;
         $$$pre$i$i$i15 = $102 ? 0 : $$pre$i$i$i15;
         $104 = $$$pre$i$i$i15;$__b$sroa$0$5 = $$__b$sroa$0$4;
        } else {
         $104 = $$pre$i$i$i15;$__b$sroa$0$5 = $__b$sroa$0$4;
        }
       }
       $103 = ($104|0)==(0|0);
       $105 = ($106|0)==(0|0);
       do {
        if ($105) {
         $$pre$i2$i$i1940 = $$pre$i2$i$i19;$__e$sroa$0$7 = $__e$sroa$0$6;
         label = 43;
        } else {
         $107 = (($106) + 12|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($106) + 16|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108|0)==($110|0);
         if (!($111)) {
          if ($103) {
           $$pre$i2$i$i1939 = $$pre$i2$i$i19;$199 = $106;$__e$sroa$0$8 = $__e$sroa$0$6;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
           break L39;
          }
         }
         $112 = HEAP32[$106>>2]|0;
         $113 = (($112) + 36|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = (FUNCTION_TABLE_ii[$114 & 1023]($106)|0);
         $116 = ($115|0)==(-1);
         if ($116) {
          $$pre$i2$i$i1940 = 0;$__e$sroa$0$7 = 0;
          label = 43;
         } else {
          $117 = ($$pre$i2$i$i19|0)==(0|0);
          $tmp$i$i21 = $103 ^ $117;
          if ($tmp$i$i21) {
           $$pre$i2$i$i1939 = $$pre$i2$i$i19;$199 = $$pre$i2$i$i19;$__e$sroa$0$8 = $__e$sroa$0$6;
          } else {
           $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
           break L39;
          }
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        if ($103) {
         $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$7;
         break L39;
        } else {
         $$pre$i2$i$i1939 = $$pre$i2$i$i1940;$199 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $118 = (($104) + 12|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (($104) + 16|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = ($119|0)==($121|0);
       if ($122) {
        $123 = HEAP32[$104>>2]|0;
        $124 = (($123) + 36|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (FUNCTION_TABLE_ii[$125 & 1023]($104)|0);
        $$0$i$i = $126;
       } else {
        $127 = HEAP8[$119>>0]|0;
        $128 = $127&255;
        $$0$i$i = $128;
       }
       $129 = $$0$i$i&255;
       $isascii1$i22 = ($129<<24>>24)>(-1);
       if (!($isascii1$i22)) {
        $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
        break L39;
       }
       $sext = $$0$i$i << 24;
       $130 = $sext >> 24;
       $131 = HEAP32[$17>>2]|0;
       $132 = (($131) + ($130<<1)|0);
       $133 = HEAP16[$132>>1]|0;
       $134 = $133 & 8192;
       $135 = ($134<<16>>16)==(0);
       if ($135) {
        $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
        break L39;
       }
       $136 = HEAP32[$118>>2]|0;
       $137 = HEAP32[$120>>2]|0;
       $138 = ($136|0)==($137|0);
       if ($138) {
        $139 = HEAP32[$104>>2]|0;
        $140 = (($139) + 40|0);
        $141 = HEAP32[$140>>2]|0;
        (FUNCTION_TABLE_ii[$141 & 1023]($104)|0);
        $$pre$i$i$i15 = $104;$$pre$i2$i$i19 = $$pre$i2$i$i1939;$106 = $199;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
        continue;
       } else {
        $142 = (($136) + 1|0);
        HEAP32[$118>>2] = $142;
        $$pre$i$i$i15 = $104;$$pre$i2$i$i19 = $$pre$i2$i$i1939;$106 = $199;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
        continue;
       }
      }
     }
     else if ((label|0) == 57) {
      label = 0;
      $165 = HEAP32[$143>>2]|0;
      $166 = HEAP32[$145>>2]|0;
      $167 = ($165|0)==($166|0);
      if ($167) {
       $168 = HEAP32[$32>>2]|0;
       $169 = (($168) + 40|0);
       $170 = HEAP32[$169>>2]|0;
       (FUNCTION_TABLE_ii[$170 & 1023]($32)|0);
      } else {
       $171 = (($165) + 1|0);
       HEAP32[$143>>2] = $171;
      }
      $172 = (($$0$ph37) + 1|0);
      $$0$ph$be = $172;$__b$sroa$0$3 = $__b$sroa$0$2;$__e$sroa$0$5 = $__e$sroa$0$4;
     }
    } while(0);
    $77 = ($$0$ph$be|0)==($__fmte|0);
    if ($77) {
     $$pre$i$i$i6 = $__b$sroa$0$3;$__e$sroa$0$10 = $__e$sroa$0$5;
     break L11;
    }
    $$pre38$pre = HEAP32[$__err>>2]|0;
    $$0$ph37 = $$0$ph$be;$$pre38 = $$pre38$pre;$__b$sroa$0$0 = $__b$sroa$0$3;$__e$sroa$0$0 = $__e$sroa$0$5;
   }
   if ((label|0) == 16) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $32;$__e$sroa$0$10 = $__e$sroa$0$3;
    break;
   }
   else if ((label|0) == 22) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $32;$__e$sroa$0$10 = $__e$sroa$0$4;
    break;
   }
   else if ((label|0) == 25) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i6 = $32;$__e$sroa$0$10 = $__e$sroa$0$4;
    break;
   }
  }
 } while(0);
 $173 = ($$pre$i$i$i6|0)==(0|0);
 if ($173) {
  $185 = 0;
 } else {
  $174 = (($$pre$i$i$i6) + 12|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($$pre$i$i$i6) + 16|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ($175|0)==($177|0);
  if ($178) {
   $179 = HEAP32[$$pre$i$i$i6>>2]|0;
   $180 = (($179) + 36|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (FUNCTION_TABLE_ii[$181 & 1023]($$pre$i$i$i6)|0);
   $183 = ($182|0)==(-1);
   $$$pre$i$i$i6 = $183 ? 0 : $$pre$i$i$i6;
   $185 = $$$pre$i$i$i6;
  } else {
   $185 = $$pre$i$i$i6;
  }
 }
 $184 = ($185|0)==(0|0);
 $186 = ($__e$sroa$0$10|0)==(0|0);
 do {
  if ($186) {
   label = 69;
  } else {
   $187 = (($__e$sroa$0$10) + 12|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($__e$sroa$0$10) + 16|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ($188|0)==($190|0);
   if ($191) {
    $192 = HEAP32[$__e$sroa$0$10>>2]|0;
    $193 = (($192) + 36|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (FUNCTION_TABLE_ii[$194 & 1023]($__e$sroa$0$10)|0);
    $196 = ($195|0)==(-1);
    if ($196) {
     label = 69;
     break;
    }
   }
   if ($184) {
    HEAP32[$agg$result>>2] = $185;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 69) {
  if (!($184)) {
   HEAP32[$agg$result>>2] = $185;
   STACKTOP = sp;return;
  }
 }
 $197 = HEAP32[$__err>>2]|0;
 $198 = $197 | 2;
 HEAP32[$__err>>2] = $198;
 HEAP32[$agg$result>>2] = $185;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$0,$1,$__iob,$__err,$__tm,10672,((10672 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = HEAP32[$__b>>2]|0;
 $6 = HEAP32[$__e>>2]|0;
 $7 = HEAP8[$4>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = (($4) + 1|0);
  $15 = $7&255;
  $16 = $15 >>> 1;
  $18 = $14;$19 = $16;
 } else {
  $10 = (($4) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($4) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $11;$19 = $13;
 }
 $17 = (($18) + ($19)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$5,$6,$__iob,$__err,$__tm,$18,$17);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11752|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = (($1) + 4|0);
  $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($1);
  }
  $13 = (($__tm) + 24|0);
  $14 = HEAP32[$__e>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$13,$__b,$14,$__err,$4);
  $15 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $18 = (($1) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+-1)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___resumeException($16|0);
  // unreachable;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($1);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($0)|0);
 $4 = (($3) + 168|0);
 $5 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$3,$4,$__ct,$__err,0)|0);
 $6 = $5;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)<(168);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($8|0) / 12)&-1;
 $11 = (($10|0) % 7)&-1;
 HEAP32[$__w>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11752|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = (($1) + 4|0);
  $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($1);
  }
  $13 = (($__tm) + 16|0);
  $14 = HEAP32[$__e>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$13,$__b,$14,$__err,$4);
  $15 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $18 = (($1) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+-1)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___resumeException($16|0);
  // unreachable;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($1);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = (($4) + 288|0);
 $6 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$4,$5,$__ct,$__err,0)|0);
 $7 = $6;
 $8 = $4;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)<(288);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($9|0) / 12)&-1;
 $12 = (($11|0) % 12)&-1;
 HEAP32[$__m>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11752|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = (($1) + 4|0);
  $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($1);
  }
  $13 = (($__tm) + 20|0);
  $14 = HEAP32[$__e>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($13,$__b,$14,$__err,$4);
  $15 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $18 = (($1) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+-1)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___resumeException($16|0);
  // unreachable;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($1);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__y,$__b,$__e$0,$__err,$__ct) {
 $__y = $__y|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = ($0|0)<(69);
 if ($4) {
  $5 = (($0) + 2000)|0;
  $__t$0 = $5;
 } else {
  $$off = (($0) + -69)|0;
  $6 = ($$off>>>0)<(31);
  $7 = (($0) + 1900)|0;
  $$ = $6 ? $7 : $0;
  $__t$0 = $$;
 }
 $8 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$byval_copy = 0, $$byval_copy81 = 0, $$off$i = 0, $$off$i9 = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i23 = 0, $$pre$i$i$i2$i = 0, $$pre$i$i$i2$i30 = 0, $$pre$i2$i$i6$i = 0, $$pre$i2$i$i611$i = 0, $$sroa$077$0 = 0, $$sroa$077$2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii1$i$i = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond$i15 = 0, $or$cond$i18 = 0;
 var $or$cond$i40 = 0, $or$cond$i43 = 0, $sext$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy81 = sp + 40|0;
 $$byval_copy = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 $9 = sp + 16|0;
 HEAP32[$__err>>2] = 0;
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_iii(556,($11|0),(11752|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $26 = (($11) + 4|0);
  $27 = HEAP32[$26>>2]|0;HEAP32[$26>>2] = (($27+-1)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   ___resumeException($24|0);
   // unreachable;
  }
  $29 = HEAP32[$11>>2]|0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vi[$31 & 1023]($11);
  ___resumeException($24|0);
  // unreachable;
 }
 $17 = (($11) + 4|0);
 $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+-1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($11);
 }
 $23 = $__fmt << 24 >> 24;
 L11: do {
  switch ($23|0) {
  case 104: case 66: case 98:  {
   $34 = (($__tm) + 16|0);
   $35 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$34,$__b,$35,$__err,$14);
   break;
  }
  case 101: case 100:  {
   $57 = (($__tm) + 12|0);
   $58 = HEAP32[$__e>>2]|0;
   $59 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$58,$__err,$14,2)|0);
   $60 = HEAP32[$__err>>2]|0;
   $61 = $60 & 4;
   $62 = ($61|0)==(0);
   if ($62) {
    $$off$i = (($59) + -1)|0;
    $63 = ($$off$i>>>0)<(31);
    if ($63) {
     HEAP32[$57>>2] = $59;
     break L11;
    }
   }
   $64 = $60 | 4;
   HEAP32[$__err>>2] = $64;
   break;
  }
  case 73:  {
   $79 = (($__tm) + 8|0);
   $80 = HEAP32[$__e>>2]|0;
   $81 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$80,$__err,$14,2)|0);
   $82 = HEAP32[$__err>>2]|0;
   $83 = $82 & 4;
   $84 = ($83|0)==(0);
   if ($84) {
    $$off$i9 = (($81) + -1)|0;
    $85 = ($$off$i9>>>0)<(12);
    if ($85) {
     HEAP32[$79>>2] = $81;
     break L11;
    }
   }
   $86 = $82 | 4;
   HEAP32[$__err>>2] = $86;
   break;
  }
  case 77:  {
   $104 = HEAP32[$__e>>2]|0;
   $105 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$104,$__err,$14,2)|0);
   $106 = HEAP32[$__err>>2]|0;
   $107 = $106 & 4;
   $108 = ($107|0)==(0);
   $109 = ($105|0)<(60);
   $or$cond$i18 = $108 & $109;
   if ($or$cond$i18) {
    $110 = (($__tm) + 4|0);
    HEAP32[$110>>2] = $105;
    break L11;
   } else {
    $111 = $106 | 4;
    HEAP32[$__err>>2] = $111;
    break L11;
   }
   break;
  }
  case 72:  {
   $71 = HEAP32[$__e>>2]|0;
   $72 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$71,$__err,$14,2)|0);
   $73 = HEAP32[$__err>>2]|0;
   $74 = $73 & 4;
   $75 = ($74|0)==(0);
   $76 = ($72|0)<(24);
   $or$cond$i = $75 & $76;
   if ($or$cond$i) {
    $77 = (($__tm) + 8|0);
    HEAP32[$77>>2] = $72;
    break L11;
   } else {
    $78 = $73 | 4;
    HEAP32[$__err>>2] = $78;
    break L11;
   }
   break;
  }
  case 99:  {
   $36 = (($this) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_ii[$39 & 1023]($36)|0);
   $41 = HEAP32[$__b>>2]|0;
   $42 = HEAP32[$__e>>2]|0;
   $43 = HEAP8[$40>>0]|0;
   $44 = $43 & 1;
   $45 = ($44<<24>>24)==(0);
   if ($45) {
    $50 = (($40) + 1|0);
    $51 = $43&255;
    $52 = $51 >>> 1;
    $54 = $50;$55 = $52;
   } else {
    $46 = (($40) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($40) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $54 = $47;$55 = $49;
   }
   $53 = (($54) + ($55)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($1,$this,$41,$42,$__iob,$__err,$__tm,$54,$53);
   $56 = HEAP32[$1>>2]|0;
   HEAP32[$__b>>2] = $56;
   break;
  }
  case 68:  {
   $65 = HEAP32[$__b>>2]|0;
   $66 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2,$this,$65,$66,$__iob,$__err,$__tm,10680,((10680 + 8|0)));
   $67 = HEAP32[$2>>2]|0;
   HEAP32[$__b>>2] = $67;
   break;
  }
  case 65: case 97:  {
   $32 = (($__tm) + 24|0);
   $33 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$32,$__b,$33,$__err,$14);
   break;
  }
  case 109:  {
   $95 = HEAP32[$__e>>2]|0;
   $96 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$95,$__err,$14,2)|0);
   $97 = HEAP32[$__err>>2]|0;
   $98 = $97 & 4;
   $99 = ($98|0)==(0);
   $100 = ($96|0)<(13);
   $or$cond$i15 = $99 & $100;
   if ($or$cond$i15) {
    $101 = (($__tm) + 16|0);
    $102 = (($96) + -1)|0;
    HEAP32[$101>>2] = $102;
    break L11;
   } else {
    $103 = $97 | 4;
    HEAP32[$__err>>2] = $103;
    break L11;
   }
   break;
  }
  case 70:  {
   $68 = HEAP32[$__b>>2]|0;
   $69 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3,$this,$68,$69,$__iob,$__err,$__tm,10688,((10688 + 8|0)));
   $70 = HEAP32[$3>>2]|0;
   HEAP32[$__b>>2] = $70;
   break;
  }
  case 116: case 110:  {
   $112 = HEAP32[$__e>>2]|0;
   $113 = (($14) + 8|0);
   $$sroa$077$0 = $112;
   L44: while(1) {
    $114 = HEAP32[$__b>>2]|0;
    $115 = ($114|0)==(0|0);
    do {
     if ($115) {
      $127 = 0;
     } else {
      $116 = (($114) + 12|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($114) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($117|0)==($119|0);
      if ($120) {
       $121 = HEAP32[$114>>2]|0;
       $122 = (($121) + 36|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (FUNCTION_TABLE_ii[$123 & 1023]($114)|0);
       $125 = ($124|0)==(-1);
       if ($125) {
        HEAP32[$__b>>2] = 0;
        $127 = 0;
        break;
       } else {
        $$pre$i$i$i$i23 = HEAP32[$__b>>2]|0;
        $127 = $$pre$i$i$i$i23;
        break;
       }
      } else {
       $127 = $114;
      }
     }
    } while(0);
    $126 = ($127|0)==(0|0);
    $128 = ($$sroa$077$0|0)==(0|0);
    do {
     if ($128) {
      label = 46;
     } else {
      $129 = (($$sroa$077$0) + 12|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (($$sroa$077$0) + 16|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ($130|0)==($132|0);
      if (!($133)) {
       if ($126) {
        $$sroa$077$2 = $$sroa$077$0;
        break;
       } else {
        $$pre$i2$i$i6$i = $$sroa$077$0;
        break L44;
       }
      }
      $134 = HEAP32[$$sroa$077$0>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = (FUNCTION_TABLE_ii[$136 & 1023]($$sroa$077$0)|0);
      $138 = ($137|0)==(-1);
      if ($138) {
       label = 46;
      } else {
       if ($126) {
        $$sroa$077$2 = $$sroa$077$0;
       } else {
        $$pre$i2$i$i6$i = $$sroa$077$0;
        break L44;
       }
      }
     }
    } while(0);
    if ((label|0) == 46) {
     label = 0;
     if ($126) {
      $$pre$i2$i$i6$i = 0;
      break;
     } else {
      $$sroa$077$2 = 0;
     }
    }
    $139 = HEAP32[$__b>>2]|0;
    $140 = (($139) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($139) + 16|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($141|0)==($143|0);
    if ($144) {
     $145 = HEAP32[$139>>2]|0;
     $146 = (($145) + 36|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (FUNCTION_TABLE_ii[$147 & 1023]($139)|0);
     $$0$i$i$i27 = $148;
    } else {
     $149 = HEAP8[$141>>0]|0;
     $150 = $149&255;
     $$0$i$i$i27 = $150;
    }
    $151 = $$0$i$i$i27&255;
    $isascii1$i$i = ($151<<24>>24)>(-1);
    if (!($isascii1$i$i)) {
     $$pre$i2$i$i6$i = $$sroa$077$2;
     break;
    }
    $sext$i = $$0$i$i$i27 << 24;
    $152 = $sext$i >> 24;
    $153 = HEAP32[$113>>2]|0;
    $154 = (($153) + ($152<<1)|0);
    $155 = HEAP16[$154>>1]|0;
    $156 = $155 & 8192;
    $157 = ($156<<16>>16)==(0);
    if ($157) {
     $$pre$i2$i$i6$i = $$sroa$077$2;
     break;
    }
    $158 = HEAP32[$__b>>2]|0;
    $159 = (($158) + 12|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (($158) + 16|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ($160|0)==($162|0);
    if ($163) {
     $164 = HEAP32[$158>>2]|0;
     $165 = (($164) + 40|0);
     $166 = HEAP32[$165>>2]|0;
     (FUNCTION_TABLE_ii[$166 & 1023]($158)|0);
     $$sroa$077$0 = $$sroa$077$2;
     continue;
    } else {
     $167 = (($160) + 1|0);
     HEAP32[$159>>2] = $167;
     $$sroa$077$0 = $$sroa$077$2;
     continue;
    }
   }
   $168 = HEAP32[$__b>>2]|0;
   $169 = ($168|0)==(0|0);
   do {
    if ($169) {
     $181 = 0;
    } else {
     $170 = (($168) + 12|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (($168) + 16|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ($171|0)==($173|0);
     if ($174) {
      $175 = HEAP32[$168>>2]|0;
      $176 = (($175) + 36|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (FUNCTION_TABLE_ii[$177 & 1023]($168)|0);
      $179 = ($178|0)==(-1);
      if ($179) {
       HEAP32[$__b>>2] = 0;
       $181 = 0;
       break;
      } else {
       $$pre$i$i$i2$i30 = HEAP32[$__b>>2]|0;
       $181 = $$pre$i$i$i2$i30;
       break;
      }
     } else {
      $181 = $168;
     }
    }
   } while(0);
   $180 = ($181|0)==(0|0);
   $182 = ($$pre$i2$i$i6$i|0)==(0|0);
   do {
    if ($182) {
     label = 65;
    } else {
     $183 = (($$pre$i2$i$i6$i) + 12|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (($$pre$i2$i$i6$i) + 16|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($184|0)==($186|0);
     if ($187) {
      $188 = HEAP32[$$pre$i2$i$i6$i>>2]|0;
      $189 = (($188) + 36|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (FUNCTION_TABLE_ii[$190 & 1023]($$pre$i2$i$i6$i)|0);
      $192 = ($191|0)==(-1);
      if ($192) {
       label = 65;
       break;
      }
     }
     if ($180) {
      break L11;
     }
    }
   } while(0);
   if ((label|0) == 65) {
    if (!($180)) {
     break L11;
    }
   }
   $193 = HEAP32[$__err>>2]|0;
   $194 = $193 | 2;
   HEAP32[$__err>>2] = $194;
   break;
  }
  case 106:  {
   $87 = HEAP32[$__e>>2]|0;
   $88 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$87,$__err,$14,3)|0);
   $89 = HEAP32[$__err>>2]|0;
   $90 = $89 & 4;
   $91 = ($90|0)==(0);
   $92 = ($88|0)<(366);
   $or$cond$i12 = $91 & $92;
   if ($or$cond$i12) {
    $93 = (($__tm) + 28|0);
    HEAP32[$93>>2] = $88;
    break L11;
   } else {
    $94 = $89 | 4;
    HEAP32[$__err>>2] = $94;
    break L11;
   }
   break;
  }
  case 37:  {
   $294 = HEAP32[$__e>>2]|0;
   $295 = HEAP32[$__b>>2]|0;
   $296 = ($295|0)==(0|0);
   do {
    if ($296) {
     $308 = 0;
    } else {
     $297 = (($295) + 12|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = (($295) + 16|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = ($298|0)==($300|0);
     if ($301) {
      $302 = HEAP32[$295>>2]|0;
      $303 = (($302) + 36|0);
      $304 = HEAP32[$303>>2]|0;
      $305 = (FUNCTION_TABLE_ii[$304 & 1023]($295)|0);
      $306 = ($305|0)==(-1);
      if ($306) {
       HEAP32[$__b>>2] = 0;
       $308 = 0;
       break;
      } else {
       $$pre$i$i$i$i = HEAP32[$__b>>2]|0;
       $308 = $$pre$i$i$i$i;
       break;
      }
     } else {
      $308 = $295;
     }
    }
   } while(0);
   $307 = ($308|0)==(0|0);
   $309 = ($294|0)==(0|0);
   do {
    if ($309) {
     label = 107;
    } else {
     $310 = (($294) + 12|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = (($294) + 16|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ($311|0)==($313|0);
     if ($314) {
      $315 = HEAP32[$294>>2]|0;
      $316 = (($315) + 36|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = (FUNCTION_TABLE_ii[$317 & 1023]($294)|0);
      $319 = ($318|0)==(-1);
      if ($319) {
       label = 107;
       break;
      }
     }
     if ($307) {
      $$pre$i2$i$i611$i = $294;
     } else {
      label = 108;
     }
    }
   } while(0);
   if ((label|0) == 107) {
    if ($307) {
     label = 108;
    } else {
     $$pre$i2$i$i611$i = 0;
    }
   }
   if ((label|0) == 108) {
    $320 = HEAP32[$__err>>2]|0;
    $321 = $320 | 6;
    HEAP32[$__err>>2] = $321;
    break L11;
   }
   $322 = HEAP32[$__b>>2]|0;
   $323 = (($322) + 12|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($322) + 16|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = ($324|0)==($326|0);
   if ($327) {
    $328 = HEAP32[$322>>2]|0;
    $329 = (($328) + 36|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = (FUNCTION_TABLE_ii[$330 & 1023]($322)|0);
    $$0$i$i$i = $331;
   } else {
    $332 = HEAP8[$324>>0]|0;
    $333 = $332&255;
    $$0$i$i$i = $333;
   }
   $334 = $$0$i$i$i&255;
   $335 = HEAP32[$14>>2]|0;
   $336 = (($335) + 36|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = (FUNCTION_TABLE_iiii[$337 & 1023]($14,$334,0)|0);
   $339 = ($338<<24>>24)==(37);
   if (!($339)) {
    $340 = HEAP32[$__err>>2]|0;
    $341 = $340 | 4;
    HEAP32[$__err>>2] = $341;
    break L11;
   }
   $342 = HEAP32[$__b>>2]|0;
   $343 = (($342) + 12|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = (($342) + 16|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = ($344|0)==($346|0);
   if ($347) {
    $348 = HEAP32[$342>>2]|0;
    $349 = (($348) + 40|0);
    $350 = HEAP32[$349>>2]|0;
    (FUNCTION_TABLE_ii[$350 & 1023]($342)|0);
   } else {
    $351 = (($344) + 1|0);
    HEAP32[$343>>2] = $351;
   }
   $352 = HEAP32[$__b>>2]|0;
   $353 = ($352|0)==(0|0);
   do {
    if ($353) {
     $365 = 0;
    } else {
     $354 = (($352) + 12|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = (($352) + 16|0);
     $357 = HEAP32[$356>>2]|0;
     $358 = ($355|0)==($357|0);
     if ($358) {
      $359 = HEAP32[$352>>2]|0;
      $360 = (($359) + 36|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = (FUNCTION_TABLE_ii[$361 & 1023]($352)|0);
      $363 = ($362|0)==(-1);
      if ($363) {
       HEAP32[$__b>>2] = 0;
       $365 = 0;
       break;
      } else {
       $$pre$i$i$i2$i = HEAP32[$__b>>2]|0;
       $365 = $$pre$i$i$i2$i;
       break;
      }
     } else {
      $365 = $352;
     }
    }
   } while(0);
   $364 = ($365|0)==(0|0);
   $366 = ($$pre$i2$i$i611$i|0)==(0|0);
   do {
    if ($366) {
     label = 126;
    } else {
     $367 = (($$pre$i2$i$i611$i) + 12|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = (($$pre$i2$i$i611$i) + 16|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($368|0)==($370|0);
     if ($371) {
      $372 = HEAP32[$$pre$i2$i$i611$i>>2]|0;
      $373 = (($372) + 36|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (FUNCTION_TABLE_ii[$374 & 1023]($$pre$i2$i$i611$i)|0);
      $376 = ($375|0)==(-1);
      if ($376) {
       label = 126;
       break;
      }
     }
     if ($364) {
      break L11;
     }
    }
   } while(0);
   if ((label|0) == 126) {
    if (!($364)) {
     break L11;
    }
   }
   $377 = HEAP32[$__err>>2]|0;
   $378 = $377 | 2;
   HEAP32[$__err>>2] = $378;
   break;
  }
  case 120:  {
   $259 = HEAP32[$this>>2]|0;
   $260 = (($259) + 20|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $262;
   $263 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $263;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;
   ;HEAP32[$$byval_copy81+0>>2]=HEAP32[$8+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$261 & 1023]($agg$result,$this,$$byval_copy,$$byval_copy81,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 114:  {
   $235 = HEAP32[$__b>>2]|0;
   $236 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$235,$236,$__iob,$__err,$__tm,10696,((10696 + 11|0)));
   $237 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $237;
   break;
  }
  case 89:  {
   $287 = HEAP32[$__e>>2]|0;
   $288 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$287,$__err,$14,4)|0);
   $289 = HEAP32[$__err>>2]|0;
   $290 = $289 & 4;
   $291 = ($290|0)==(0);
   if ($291) {
    $292 = (($__tm) + 20|0);
    $293 = (($288) + -1900)|0;
    HEAP32[$292>>2] = $293;
   }
   break;
  }
  case 121:  {
   $285 = (($__tm) + 20|0);
   $286 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($285,$__b,$286,$__err,$14);
   break;
  }
  case 82:  {
   $238 = HEAP32[$__b>>2]|0;
   $239 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5,$this,$238,$239,$__iob,$__err,$__tm,10712,((10712 + 5|0)));
   $240 = HEAP32[$5>>2]|0;
   HEAP32[$__b>>2] = $240;
   break;
  }
  case 83:  {
   $241 = HEAP32[$__e>>2]|0;
   $242 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$241,$__err,$14,2)|0);
   $243 = HEAP32[$__err>>2]|0;
   $244 = $243 & 4;
   $245 = ($244|0)==(0);
   $246 = ($242|0)<(61);
   $or$cond$i40 = $245 & $246;
   if ($or$cond$i40) {
    HEAP32[$__tm>>2] = $242;
    break L11;
   } else {
    $247 = $243 | 4;
    HEAP32[$__err>>2] = $247;
    break L11;
   }
   break;
  }
  case 112:  {
   $195 = (($__tm) + 8|0);
   $196 = HEAP32[$__e>>2]|0;
   $197 = (($this) + 8|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($198) + 8|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (FUNCTION_TABLE_ii[$200 & 1023]($197)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202 & 1;
   $204 = ($203<<24>>24)==(0);
   if ($204) {
    $207 = $202&255;
    $208 = $207 >>> 1;
    $220 = $208;
   } else {
    $205 = (($201) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $220 = $206;
   }
   $209 = (($201) + 12|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $210 & 1;
   $212 = ($211<<24>>24)==(0);
   if ($212) {
    $215 = $210&255;
    $216 = $215 >>> 1;
    $218 = $216;
   } else {
    $213 = (($201) + 16|0);
    $214 = HEAP32[$213>>2]|0;
    $218 = $214;
   }
   $217 = (0 - ($218))|0;
   $219 = ($220|0)==($217|0);
   if ($219) {
    $221 = HEAP32[$__err>>2]|0;
    $222 = $221 | 4;
    HEAP32[$__err>>2] = $222;
    break L11;
   }
   $223 = (($201) + 24|0);
   $224 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$196,$201,$223,$14,$__err,0)|0);
   $225 = $224;
   $226 = $201;
   $227 = (($225) - ($226))|0;
   $228 = ($224|0)==($201|0);
   if ($228) {
    $229 = HEAP32[$195>>2]|0;
    $230 = ($229|0)==(12);
    if ($230) {
     HEAP32[$195>>2] = 0;
     break L11;
    }
   }
   $231 = ($227|0)==(12);
   if ($231) {
    $232 = HEAP32[$195>>2]|0;
    $233 = ($232|0)<(12);
    if ($233) {
     $234 = (($232) + 12)|0;
     HEAP32[$195>>2] = $234;
    }
   }
   break;
  }
  case 119:  {
   $251 = HEAP32[$__e>>2]|0;
   $252 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$251,$__err,$14,1)|0);
   $253 = HEAP32[$__err>>2]|0;
   $254 = $253 & 4;
   $255 = ($254|0)==(0);
   $256 = ($252|0)<(7);
   $or$cond$i43 = $255 & $256;
   if ($or$cond$i43) {
    $257 = (($__tm) + 24|0);
    HEAP32[$257>>2] = $252;
    break L11;
   } else {
    $258 = $253 | 4;
    HEAP32[$__err>>2] = $258;
    break L11;
   }
   break;
  }
  case 88:  {
   $264 = (($this) + 8|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = (($265) + 24|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = (FUNCTION_TABLE_ii[$267 & 1023]($264)|0);
   $269 = HEAP32[$__b>>2]|0;
   $270 = HEAP32[$__e>>2]|0;
   $271 = HEAP8[$268>>0]|0;
   $272 = $271 & 1;
   $273 = ($272<<24>>24)==(0);
   if ($273) {
    $278 = (($268) + 1|0);
    $279 = $271&255;
    $280 = $279 >>> 1;
    $282 = $278;$283 = $280;
   } else {
    $274 = (($268) + 8|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($268) + 4|0);
    $277 = HEAP32[$276>>2]|0;
    $282 = $275;$283 = $277;
   }
   $281 = (($282) + ($283)|0);
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($9,$this,$269,$270,$__iob,$__err,$__tm,$282,$281);
   $284 = HEAP32[$9>>2]|0;
   HEAP32[$__b>>2] = $284;
   break;
  }
  case 84:  {
   $248 = HEAP32[$__b>>2]|0;
   $249 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6,$this,$248,$249,$__iob,$__err,$__tm,10720,((10720 + 8|0)));
   $250 = HEAP32[$6>>2]|0;
   HEAP32[$__b>>2] = $250;
   break;
  }
  default: {
   $379 = HEAP32[$__err>>2]|0;
   $380 = $379 | 4;
   HEAP32[$__err>>2] = $380;
  }
  }
 } while(0);
 $381 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $381;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$$pre$i2$i$i7 = 0, $$$pre$i2$i$i73 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = ($__e$0|0)==(0|0);
 do {
  if ($14) {
   label = 10;
  } else {
   $15 = (($__e$0) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($__e$0) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$__e$0>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($__e$0)|0);
    $24 = ($23|0)==(-1);
    if ($24) {
     label = 10;
     break;
    }
   }
   if ($12) {
    $155 = $__e$0;
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  if ($12) {
   label = 11;
  } else {
   $155 = 0;
  }
 }
 if ((label|0) == 11) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 6;
  HEAP32[$__err>>2] = $26;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  $34 = (($33) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
  $$0$i$i = $36;
 } else {
  $37 = HEAP8[$29>>0]|0;
  $38 = $37&255;
  $$0$i$i = $38;
 }
 $39 = $$0$i$i&255;
 $isascii1$i = ($39<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = (($__ct) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($40<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 & 2048;
  $46 = ($45<<16>>16)==(0);
  if (!($46)) {
   $49 = HEAP32[$__ct>>2]|0;
   $50 = (($49) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($__ct,$39,0)|0);
   $53 = $52 << 24 >> 24;
   $54 = HEAP32[$__b>>2]|0;
   $55 = (($54) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$54>>2]|0;
    $61 = (($60) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    (FUNCTION_TABLE_ii[$62 & 1023]($54)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $155;$79 = $155;$__r$0$in = $53;
   } else {
    $63 = (($56) + 1|0);
    HEAP32[$55>>2] = $63;
    $$0$in = $__n;$$pre$i2$i$i7 = $155;$79 = $155;$__r$0$in = $53;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $64 = HEAP32[$__b>>2]|0;
    $65 = ($64|0)==(0|0);
    do {
     if ($65) {
      $77 = 0;
     } else {
      $66 = (($64) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($64) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)==($69|0);
      if ($70) {
       $71 = HEAP32[$64>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (FUNCTION_TABLE_ii[$73 & 1023]($64)|0);
       $75 = ($74|0)==(-1);
       if ($75) {
        HEAP32[$__b>>2] = 0;
        $77 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $77 = $$pre$i$i$i3;
        break;
       }
      } else {
       $77 = $64;
      }
     }
    } while(0);
    $76 = ($77|0)==(0|0);
    $78 = ($79|0)==(0|0);
    if ($78) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
    } else {
     $80 = (($79) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($81|0)==($83|0);
     if ($84) {
      $85 = HEAP32[$79>>2]|0;
      $86 = (($85) + 36|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (FUNCTION_TABLE_ii[$87 & 1023]($79)|0);
      $89 = ($88|0)==(-1);
      $$$pre$i2$i$i7 = $89 ? 0 : $$pre$i2$i$i7;
      $$$pre$i2$i$i73 = $89 ? 0 : $$pre$i2$i$i7;
      $$pre$i2$i$i20 = $$$pre$i2$i$i7;$91 = $$$pre$i2$i$i73;
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
     }
    }
    $90 = ($91|0)==(0|0);
    $tmp$i$i9 = $76 ^ $90;
    $92 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $92;
    $93 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 38;
     break;
    }
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($93) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$93>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 1023]($93)|0);
     $$0$i$i10 = $102;
    } else {
     $103 = HEAP8[$95>>0]|0;
     $104 = $103&255;
     $$0$i$i10 = $104;
    }
    $105 = $$0$i$i10&255;
    $isascii1$i12 = ($105<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 49;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $106 = $sext24 >> 24;
    $107 = HEAP32[$41>>2]|0;
    $108 = (($107) + ($106<<1)|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109 & 2048;
    $111 = ($110<<16>>16)==(0);
    if ($111) {
     $$01 = $__r$0;
     label = 49;
     break;
    }
    $112 = ($__r$0*10)|0;
    $113 = HEAP32[$__ct>>2]|0;
    $114 = (($113) + 36|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (FUNCTION_TABLE_iiii[$115 & 1023]($__ct,$105,0)|0);
    $117 = $116 << 24 >> 24;
    $118 = (($117) + ($112))|0;
    $119 = HEAP32[$__b>>2]|0;
    $120 = (($119) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($119) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($121|0)==($123|0);
    if ($124) {
     $125 = HEAP32[$119>>2]|0;
     $126 = (($125) + 40|0);
     $127 = HEAP32[$126>>2]|0;
     (FUNCTION_TABLE_ii[$127 & 1023]($119)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $118;
     continue;
    } else {
     $128 = (($121) + 1|0);
     HEAP32[$120>>2] = $128;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $118;
     continue;
    }
   }
   if ((label|0) == 38) {
    $129 = ($93|0)==(0|0);
    do {
     if ($129) {
      $141 = 0;
     } else {
      $130 = (($93) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (($93) + 16|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = ($131|0)==($133|0);
      if ($134) {
       $135 = HEAP32[$93>>2]|0;
       $136 = (($135) + 36|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = (FUNCTION_TABLE_ii[$137 & 1023]($93)|0);
       $139 = ($138|0)==(-1);
       if ($139) {
        HEAP32[$__b>>2] = 0;
        $141 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $141 = $$pre$i$i$i16;
        break;
       }
      } else {
       $141 = $93;
      }
     }
    } while(0);
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($142) {
      label = 47;
     } else {
      $143 = (($$pre$i2$i$i20) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i20) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (FUNCTION_TABLE_ii[$150 & 1023]($$pre$i2$i$i20)|0);
       $152 = ($151|0)==(-1);
       if ($152) {
        label = 47;
        break;
       }
      }
      if ($140) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 47) {
     if (!($140)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $153 = HEAP32[$__err>>2]|0;
    $154 = $153 | 2;
    HEAP32[$__err>>2] = $154;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 49) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $47 = HEAP32[$__err>>2]|0;
 $48 = $47 | 4;
 HEAP32[$__err>>2] = $48;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b$0,$__e$0,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b$0 = $__b$0|0;
 $__e$0 = $__e$0|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$ = 0, $$$pre$i$i$i20 = 0, $$$pre$i$i$i5 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i9 = 0, $$0$i$i15 = 0, $$0$ph$be = 0, $$0$ph42 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$4 = 0, $$5 = 0, $$__b$sroa$0$1 = 0;
 var $$__b$sroa$0$13 = 0, $$__b$sroa$0$4 = 0, $$byval_copy = 0, $$byval_copy6 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i11 = 0, $$pre$i3$i$i1144 = 0, $$pre$i3$i$i1145 = 0, $$pre43 = 0, $$pre43$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__b$sroa$0$5 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0;
 var $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, $phitmp$i4$i$i12 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy6 = sp + 16|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = sp + 12|0;
 $3 = (($__iob) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 __THREW__ = 0;
 $7 = (invoke_iii(556,($4|0),(11744|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $43 = ___cxa_find_matching_catch()|0;
  $44 = tempRet0;
  $45 = (($4) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($43|0);
   // unreachable;
  }
  $48 = HEAP32[$4>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 1023]($4);
  ___resumeException($43|0);
  // unreachable;
 }
 $10 = (($4) + 4|0);
 $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[$4>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 1023]($4);
 }
 HEAP32[$__err>>2] = 0;
 $16 = ($__fmtb|0)==($__fmte|0);
 L11: do {
  if ($16) {
   $$pre$i$i$i20 = $__b$0;$__e$sroa$0$10 = $__e$0;
  } else {
   $$0$ph42 = $__fmtb;$$pre43 = 0;$__b$sroa$0$0 = $__b$0;$__e$sroa$0$0 = $__e$0;
   L13: while(1) {
    $18 = $$pre43;$__b$sroa$0$1 = $__b$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
    while(1) {
     $17 = ($18|0)==(0);
     if (!($17)) {
      $$pre$i$i$i20 = $__b$sroa$0$1;$__e$sroa$0$10 = $__e$sroa$0$1;
      break L11;
     }
     $19 = ($__b$sroa$0$1|0)==(0|0);
     if ($19) {
      $192 = 1;$74 = 0;$__b$sroa$0$2 = 0;
     } else {
      $20 = (($__b$sroa$0$1) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($__b$sroa$0$1) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $25 = HEAP32[$__b$sroa$0$1>>2]|0;
       $26 = (($25) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (FUNCTION_TABLE_ii[$27 & 1023]($__b$sroa$0$1)|0);
       $$0$i$i$i$i = $28;
      } else {
       $29 = HEAP32[$21>>2]|0;
       $$0$i$i$i$i = $29;
      }
      $30 = ($$0$i$i$i$i|0)==(-1);
      $$__b$sroa$0$1 = $30 ? 0 : $__b$sroa$0$1;
      $$__b$sroa$0$13 = $30 ? 0 : $__b$sroa$0$1;
      $$ = $30 ? 1 : 0;
      $192 = $$;$74 = $$__b$sroa$0$13;$__b$sroa$0$2 = $$__b$sroa$0$1;
     }
     $31 = ($__e$sroa$0$1|0)==(0|0);
     if ($31) {
      label = 18;
     } else {
      $32 = (($__e$sroa$0$1) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($__e$sroa$0$1) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if ($36) {
       $37 = HEAP32[$__e$sroa$0$1>>2]|0;
       $38 = (($37) + 36|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (FUNCTION_TABLE_ii[$39 & 1023]($__e$sroa$0$1)|0);
       $$0$i$i1$i$i = $40;
      } else {
       $41 = HEAP32[$33>>2]|0;
       $$0$i$i1$i$i = $41;
      }
      $42 = ($$0$i$i1$i$i|0)==(-1);
      if ($42) {
       label = 18;
      } else {
       if ($192) {
        $__e$sroa$0$4 = $__e$sroa$0$1;
       } else {
        $__e$sroa$0$3 = $__e$sroa$0$1;
        label = 20;
        break L13;
       }
      }
     }
     if ((label|0) == 18) {
      label = 0;
      if ($192) {
       $__e$sroa$0$3 = 0;
       label = 20;
       break L13;
      } else {
       $__e$sroa$0$4 = 0;
      }
     }
     $51 = HEAP32[$$0$ph42>>2]|0;
     $52 = HEAP32[$7>>2]|0;
     $53 = (($52) + 52|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_iiii[$54 & 1023]($7,$51,0)|0);
     $56 = ($55<<24>>24)==(37);
     if ($56) {
      label = 25;
      break;
     }
     $78 = HEAP32[$$0$ph42>>2]|0;
     $79 = HEAP32[$7>>2]|0;
     $80 = (($79) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (FUNCTION_TABLE_iiii[$81 & 1023]($7,8192,$78)|0);
     if ($82) {
      $$0$pn = $$0$ph42;
      label = 35;
      break;
     }
     $137 = (($74) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($74) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     if ($141) {
      $142 = HEAP32[$74>>2]|0;
      $143 = (($142) + 36|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (FUNCTION_TABLE_ii[$144 & 1023]($74)|0);
      $$0$i$i15 = $145;
     } else {
      $146 = HEAP32[$138>>2]|0;
      $$0$i$i15 = $146;
     }
     $147 = HEAP32[$7>>2]|0;
     $148 = (($147) + 28|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (FUNCTION_TABLE_iii[$149 & 1023]($7,$$0$i$i15)|0);
     $151 = HEAP32[$$0$ph42>>2]|0;
     $152 = HEAP32[$7>>2]|0;
     $153 = (($152) + 28|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (FUNCTION_TABLE_iii[$154 & 1023]($7,$151)|0);
     $156 = ($150|0)==($155|0);
     if ($156) {
      label = 61;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $18 = 4;$__b$sroa$0$1 = $__b$sroa$0$2;$__e$sroa$0$1 = $__e$sroa$0$4;
    }
    L42: do {
     if ((label|0) == 25) {
      label = 0;
      $57 = (($$0$ph42) + 4|0);
      $58 = ($57|0)==($__fmte|0);
      if ($58) {
       label = 26;
       break L13;
      }
      $59 = HEAP32[$57>>2]|0;
      $60 = HEAP32[$7>>2]|0;
      $61 = (($60) + 52|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = (FUNCTION_TABLE_iiii[$62 & 1023]($7,$59,0)|0);
      if ((($63<<24>>24) == 48) | (($63<<24>>24) == 69)) {
       $64 = (($$0$ph42) + 8|0);
       $65 = ($64|0)==($__fmte|0);
       if ($65) {
        label = 29;
        break L13;
       }
       $66 = HEAP32[$64>>2]|0;
       $67 = HEAP32[$7>>2]|0;
       $68 = (($67) + 52|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($7,$66,0)|0);
       $$1 = $64;$__cmd$0 = $70;$__opt$0 = $63;
      } else {
       $$1 = $57;$__cmd$0 = $63;$__opt$0 = 0;
      }
      $71 = HEAP32[$this>>2]|0;
      $72 = (($71) + 36|0);
      $73 = HEAP32[$72>>2]|0;
      HEAP32[$1>>2] = $74;
      HEAP32[$2>>2] = $__e$sroa$0$4;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
      ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$2+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$73 & 255]($0,$this,$$byval_copy,$$byval_copy6,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $75 = HEAP32[$0>>2]|0;
      $76 = (($$1) + 4|0);
      $$0$ph$be = $76;$__b$sroa$0$3 = $75;$__e$sroa$0$5 = $__e$sroa$0$4;
     }
     else if ((label|0) == 35) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 4|0);
       $83 = ($$2|0)==($__fmte|0);
       if ($83) {
        $$2$lcssa = $__fmte;
        break;
       }
       $84 = HEAP32[$$2>>2]|0;
       $85 = HEAP32[$7>>2]|0;
       $86 = (($85) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (FUNCTION_TABLE_iiii[$87 & 1023]($7,8192,$84)|0);
       if ($88) {
        $$0$pn = $$2;
        label = 35;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i5 = $74;$$pre$i3$i$i11 = $__e$sroa$0$4;$102 = $__e$sroa$0$4;$__b$sroa$0$4 = $__b$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$4;
      while(1) {
       $89 = ($$pre$i$i$i5|0)==(0|0);
       if ($89) {
        $114 = 1;$116 = 0;$__b$sroa$0$5 = $__b$sroa$0$4;
       } else {
        $90 = (($$pre$i$i$i5) + 12|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = (($$pre$i$i$i5) + 16|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($91|0)==($93|0);
        if ($94) {
         $95 = HEAP32[$$pre$i$i$i5>>2]|0;
         $96 = (($95) + 36|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = (FUNCTION_TABLE_ii[$97 & 1023]($$pre$i$i$i5)|0);
         $$0$i$i$i$i3 = $98;
        } else {
         $99 = HEAP32[$91>>2]|0;
         $$0$i$i$i$i3 = $99;
        }
        $100 = ($$0$i$i$i$i3|0)==(-1);
        $$__b$sroa$0$4 = $100 ? 0 : $__b$sroa$0$4;
        $$$pre$i$i$i5 = $100 ? 0 : $$pre$i$i$i5;
        $$4 = $100 ? 1 : 0;
        $114 = $$4;$116 = $$$pre$i$i$i5;$__b$sroa$0$5 = $$__b$sroa$0$4;
       }
       $101 = ($102|0)==(0|0);
       if ($101) {
        $$pre$i3$i$i1145 = $$pre$i3$i$i11;$__e$sroa$0$7 = $__e$sroa$0$6;
        label = 48;
       } else {
        $103 = (($102) + 12|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = (($102) + 16|0);
        $106 = HEAP32[$105>>2]|0;
        $107 = ($104|0)==($106|0);
        if ($107) {
         $108 = HEAP32[$102>>2]|0;
         $109 = (($108) + 36|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = (FUNCTION_TABLE_ii[$110 & 1023]($102)|0);
         $$0$i$i1$i$i9 = $111;
        } else {
         $112 = HEAP32[$104>>2]|0;
         $$0$i$i1$i$i9 = $112;
        }
        $113 = ($$0$i$i1$i$i9|0)==(-1);
        if ($113) {
         $$pre$i3$i$i1145 = 0;$__e$sroa$0$7 = 0;
         label = 48;
        } else {
         $phitmp$i4$i$i12 = ($$pre$i3$i$i11|0)==(0|0);
         $tmp$i$i14 = $114 ^ $phitmp$i4$i$i12;
         if ($tmp$i$i14) {
          $$pre$i3$i$i1144 = $$pre$i3$i$i11;$193 = $$pre$i3$i$i11;$__e$sroa$0$8 = $__e$sroa$0$6;
         } else {
          $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
          break L42;
         }
        }
       }
       if ((label|0) == 48) {
        label = 0;
        if ($114) {
         $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$7;
         break L42;
        } else {
         $$pre$i3$i$i1144 = $$pre$i3$i$i1145;$193 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $115 = (($116) + 12|0);
       $117 = HEAP32[$115>>2]|0;
       $118 = (($116) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($117|0)==($119|0);
       if ($120) {
        $121 = HEAP32[$116>>2]|0;
        $122 = (($121) + 36|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (FUNCTION_TABLE_ii[$123 & 1023]($116)|0);
        $$0$i$i = $124;
       } else {
        $125 = HEAP32[$117>>2]|0;
        $$0$i$i = $125;
       }
       $126 = HEAP32[$7>>2]|0;
       $127 = (($126) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = (FUNCTION_TABLE_iiii[$128 & 1023]($7,8192,$$0$i$i)|0);
       if (!($129)) {
        $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
        break L42;
       }
       $130 = HEAP32[$115>>2]|0;
       $131 = HEAP32[$118>>2]|0;
       $132 = ($130|0)==($131|0);
       if ($132) {
        $133 = HEAP32[$116>>2]|0;
        $134 = (($133) + 40|0);
        $135 = HEAP32[$134>>2]|0;
        (FUNCTION_TABLE_ii[$135 & 1023]($116)|0);
        $$pre$i$i$i5 = $116;$$pre$i3$i$i11 = $$pre$i3$i$i1144;$102 = $193;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
        continue;
       } else {
        $136 = (($130) + 4|0);
        HEAP32[$115>>2] = $136;
        $$pre$i$i$i5 = $116;$$pre$i3$i$i11 = $$pre$i3$i$i1144;$102 = $193;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
        continue;
       }
      }
     }
     else if ((label|0) == 61) {
      label = 0;
      $157 = HEAP32[$137>>2]|0;
      $158 = HEAP32[$139>>2]|0;
      $159 = ($157|0)==($158|0);
      if ($159) {
       $160 = HEAP32[$74>>2]|0;
       $161 = (($160) + 40|0);
       $162 = HEAP32[$161>>2]|0;
       (FUNCTION_TABLE_ii[$162 & 1023]($74)|0);
      } else {
       $163 = (($157) + 4|0);
       HEAP32[$137>>2] = $163;
      }
      $164 = (($$0$ph42) + 4|0);
      $$0$ph$be = $164;$__b$sroa$0$3 = $__b$sroa$0$2;$__e$sroa$0$5 = $__e$sroa$0$4;
     }
    } while(0);
    $77 = ($$0$ph$be|0)==($__fmte|0);
    if ($77) {
     $$pre$i$i$i20 = $__b$sroa$0$3;$__e$sroa$0$10 = $__e$sroa$0$5;
     break L11;
    }
    $$pre43$pre = HEAP32[$__err>>2]|0;
    $$0$ph42 = $$0$ph$be;$$pre43 = $$pre43$pre;$__b$sroa$0$0 = $__b$sroa$0$3;$__e$sroa$0$0 = $__e$sroa$0$5;
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $74;$__e$sroa$0$10 = $__e$sroa$0$3;
    break;
   }
   else if ((label|0) == 26) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $74;$__e$sroa$0$10 = $__e$sroa$0$4;
    break;
   }
   else if ((label|0) == 29) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $74;$__e$sroa$0$10 = $__e$sroa$0$4;
    break;
   }
  }
 } while(0);
 $165 = ($$pre$i$i$i20|0)==(0|0);
 if ($165) {
  $191 = 0;$194 = 1;
 } else {
  $166 = (($$pre$i$i$i20) + 12|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($$pre$i$i$i20) + 16|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($167|0)==($169|0);
  if ($170) {
   $171 = HEAP32[$$pre$i$i$i20>>2]|0;
   $172 = (($171) + 36|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (FUNCTION_TABLE_ii[$173 & 1023]($$pre$i$i$i20)|0);
   $$0$i$i$i$i18 = $174;
  } else {
   $175 = HEAP32[$167>>2]|0;
   $$0$i$i$i$i18 = $175;
  }
  $176 = ($$0$i$i$i$i18|0)==(-1);
  $$$pre$i$i$i20 = $176 ? 0 : $$pre$i$i$i20;
  $$5 = $176 ? 1 : 0;
  $191 = $$$pre$i$i$i20;$194 = $$5;
 }
 $177 = ($__e$sroa$0$10|0)==(0|0);
 if ($177) {
  label = 76;
 } else {
  $178 = (($__e$sroa$0$10) + 12|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (($__e$sroa$0$10) + 16|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($179|0)==($181|0);
  if ($182) {
   $183 = HEAP32[$__e$sroa$0$10>>2]|0;
   $184 = (($183) + 36|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (FUNCTION_TABLE_ii[$185 & 1023]($__e$sroa$0$10)|0);
   $$0$i$i1$i$i24 = $186;
  } else {
   $187 = HEAP32[$179>>2]|0;
   $$0$i$i1$i$i24 = $187;
  }
  $188 = ($$0$i$i1$i$i24|0)==(-1);
  if ($188) {
   label = 76;
  } else {
   if ($194) {
    HEAP32[$agg$result>>2] = $191;
    STACKTOP = sp;return;
   }
  }
 }
 if ((label|0) == 76) {
  if (!($194)) {
   HEAP32[$agg$result>>2] = $191;
   STACKTOP = sp;return;
  }
 }
 $189 = HEAP32[$__err>>2]|0;
 $190 = $189 | 2;
 HEAP32[$__err>>2] = $190;
 HEAP32[$agg$result>>2] = $191;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$0,$1,$__iob,$__err,$__tm,10824,((10824 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = HEAP32[$__b>>2]|0;
 $6 = HEAP32[$__e>>2]|0;
 $7 = HEAP8[$4>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = (($4) + 4|0);
  $15 = $7&255;
  $16 = $15 >>> 1;
  $18 = $14;$19 = $16;
 } else {
  $10 = (($4) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($4) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $11;$19 = $13;
 }
 $17 = (($18) + ($19<<2)|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$5,$6,$__iob,$__err,$__tm,$18,$17);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11744|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = (($1) + 4|0);
  $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($1);
  }
  $13 = (($__tm) + 24|0);
  $14 = HEAP32[$__e>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$13,$__b,$14,$__err,$4);
  $15 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $18 = (($1) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+-1)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___resumeException($16|0);
  // unreachable;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($1);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($0)|0);
 $4 = (($3) + 168|0);
 $5 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$3,$4,$__ct,$__err,0)|0);
 $6 = $5;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)<(168);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($8|0) / 12)&-1;
 $11 = (($10|0) % 7)&-1;
 HEAP32[$__w>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11744|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = (($1) + 4|0);
  $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($1);
  }
  $13 = (($__tm) + 16|0);
  $14 = HEAP32[$__e>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$13,$__b,$14,$__err,$4);
  $15 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $18 = (($1) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+-1)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___resumeException($16|0);
  // unreachable;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($1);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = (($4) + 288|0);
 $6 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$4,$5,$__ct,$__err,0)|0);
 $7 = $6;
 $8 = $4;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)<(288);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($9|0) / 12)&-1;
 $12 = (($11|0) % 12)&-1;
 HEAP32[$__m>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11744|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = (($1) + 4|0);
  $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($1);
  }
  $13 = (($__tm) + 20|0);
  $14 = HEAP32[$__e>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($13,$__b,$14,$__err,$4);
  $15 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $18 = (($1) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+-1)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___resumeException($16|0);
  // unreachable;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($1);
 ___resumeException($16|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__y,$__b,$__e$0,$__err,$__ct) {
 $__y = $__y|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = ($0|0)<(69);
 if ($4) {
  $5 = (($0) + 2000)|0;
  $__t$0 = $5;
 } else {
  $$off = (($0) + -69)|0;
  $6 = ($$off>>>0)<(31);
  $7 = (($0) + 1900)|0;
  $$ = $6 ? $7 : $0;
  $__t$0 = $$;
 }
 $8 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i$i22 = 0, $$0$i$i$i$i1$i = 0, $$0$i$i$i$i1$i32 = 0, $$0$i$i$i30 = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i$i28 = 0, $$0$i$i1$i$i7$i = 0, $$0$i$i1$i$i7$i38 = 0, $$byval_copy = 0, $$byval_copy87 = 0, $$off$i = 0, $$off$i9 = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i24 = 0, $$pre$i$i$i3$i = 0, $$pre$i$i$i3$i34 = 0, $$pre$i3$i$i9$i = 0, $$pre$i3$i$i915$i = 0;
 var $$sroa$083$0 = 0, $$sroa$083$2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond$i = 0, $or$cond$i12 = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i46 = 0, $or$cond$i49 = 0, $phitmp$i$i$i$i = 0, $phitmp$i$i$i$i25 = 0, $phitmp$i$i$i4$i = 0, $phitmp$i$i$i4$i35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy87 = sp + 40|0;
 $$byval_copy = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 $9 = sp + 16|0;
 HEAP32[$__err>>2] = 0;
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_iii(556,($11|0),(11744|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $26 = (($11) + 4|0);
  $27 = HEAP32[$26>>2]|0;HEAP32[$26>>2] = (($27+-1)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   ___resumeException($24|0);
   // unreachable;
  }
  $29 = HEAP32[$11>>2]|0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vi[$31 & 1023]($11);
  ___resumeException($24|0);
  // unreachable;
 }
 $17 = (($11) + 4|0);
 $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+-1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($11);
 }
 $23 = $__fmt << 24 >> 24;
 L11: do {
  switch ($23|0) {
  case 104: case 66: case 98:  {
   $34 = (($__tm) + 16|0);
   $35 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$34,$__b,$35,$__err,$14);
   break;
  }
  case 70:  {
   $68 = HEAP32[$__b>>2]|0;
   $69 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3,$this,$68,$69,$__iob,$__err,$__tm,10888,((10888 + 32|0)));
   $70 = HEAP32[$3>>2]|0;
   HEAP32[$__b>>2] = $70;
   break;
  }
  case 99:  {
   $36 = (($this) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_ii[$39 & 1023]($36)|0);
   $41 = HEAP32[$__b>>2]|0;
   $42 = HEAP32[$__e>>2]|0;
   $43 = HEAP8[$40>>0]|0;
   $44 = $43 & 1;
   $45 = ($44<<24>>24)==(0);
   if ($45) {
    $50 = (($40) + 4|0);
    $51 = $43&255;
    $52 = $51 >>> 1;
    $54 = $50;$55 = $52;
   } else {
    $46 = (($40) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($40) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $54 = $47;$55 = $49;
   }
   $53 = (($54) + ($55<<2)|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($1,$this,$41,$42,$__iob,$__err,$__tm,$54,$53);
   $56 = HEAP32[$1>>2]|0;
   HEAP32[$__b>>2] = $56;
   break;
  }
  case 106:  {
   $87 = HEAP32[$__e>>2]|0;
   $88 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$87,$__err,$14,3)|0);
   $89 = HEAP32[$__err>>2]|0;
   $90 = $89 & 4;
   $91 = ($90|0)==(0);
   $92 = ($88|0)<(366);
   $or$cond$i12 = $91 & $92;
   if ($or$cond$i12) {
    $93 = (($__tm) + 28|0);
    HEAP32[$93>>2] = $88;
    break L11;
   } else {
    $94 = $89 | 4;
    HEAP32[$__err>>2] = $94;
    break L11;
   }
   break;
  }
  case 68:  {
   $65 = HEAP32[$__b>>2]|0;
   $66 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2,$this,$65,$66,$__iob,$__err,$__tm,10856,((10856 + 32|0)));
   $67 = HEAP32[$2>>2]|0;
   HEAP32[$__b>>2] = $67;
   break;
  }
  case 109:  {
   $95 = HEAP32[$__e>>2]|0;
   $96 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$95,$__err,$14,2)|0);
   $97 = HEAP32[$__err>>2]|0;
   $98 = $97 & 4;
   $99 = ($98|0)==(0);
   $100 = ($96|0)<(13);
   $or$cond$i15 = $99 & $100;
   if ($or$cond$i15) {
    $101 = (($__tm) + 16|0);
    $102 = (($96) + -1)|0;
    HEAP32[$101>>2] = $102;
    break L11;
   } else {
    $103 = $97 | 4;
    HEAP32[$__err>>2] = $103;
    break L11;
   }
   break;
  }
  case 72:  {
   $71 = HEAP32[$__e>>2]|0;
   $72 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$71,$__err,$14,2)|0);
   $73 = HEAP32[$__err>>2]|0;
   $74 = $73 & 4;
   $75 = ($74|0)==(0);
   $76 = ($72|0)<(24);
   $or$cond$i = $75 & $76;
   if ($or$cond$i) {
    $77 = (($__tm) + 8|0);
    HEAP32[$77>>2] = $72;
    break L11;
   } else {
    $78 = $73 | 4;
    HEAP32[$__err>>2] = $78;
    break L11;
   }
   break;
  }
  case 77:  {
   $104 = HEAP32[$__e>>2]|0;
   $105 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$104,$__err,$14,2)|0);
   $106 = HEAP32[$__err>>2]|0;
   $107 = $106 & 4;
   $108 = ($107|0)==(0);
   $109 = ($105|0)<(60);
   $or$cond$i18 = $108 & $109;
   if ($or$cond$i18) {
    $110 = (($__tm) + 4|0);
    HEAP32[$110>>2] = $105;
    break L11;
   } else {
    $111 = $106 | 4;
    HEAP32[$__err>>2] = $111;
    break L11;
   }
   break;
  }
  case 101: case 100:  {
   $57 = (($__tm) + 12|0);
   $58 = HEAP32[$__e>>2]|0;
   $59 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$58,$__err,$14,2)|0);
   $60 = HEAP32[$__err>>2]|0;
   $61 = $60 & 4;
   $62 = ($61|0)==(0);
   if ($62) {
    $$off$i = (($59) + -1)|0;
    $63 = ($$off$i>>>0)<(31);
    if ($63) {
     HEAP32[$57>>2] = $59;
     break L11;
    }
   }
   $64 = $60 | 4;
   HEAP32[$__err>>2] = $64;
   break;
  }
  case 65: case 97:  {
   $32 = (($__tm) + 24|0);
   $33 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$32,$__b,$33,$__err,$14);
   break;
  }
  case 73:  {
   $79 = (($__tm) + 8|0);
   $80 = HEAP32[$__e>>2]|0;
   $81 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$80,$__err,$14,2)|0);
   $82 = HEAP32[$__err>>2]|0;
   $83 = $82 & 4;
   $84 = ($83|0)==(0);
   if ($84) {
    $$off$i9 = (($81) + -1)|0;
    $85 = ($$off$i9>>>0)<(12);
    if ($85) {
     HEAP32[$79>>2] = $81;
     break L11;
    }
   }
   $86 = $82 | 4;
   HEAP32[$__err>>2] = $86;
   break;
  }
  case 116: case 110:  {
   $112 = HEAP32[$__e>>2]|0;
   $$sroa$083$0 = $112;
   while(1) {
    $113 = HEAP32[$__b>>2]|0;
    $114 = ($113|0)==(0|0);
    do {
     if ($114) {
      $375 = 1;
     } else {
      $115 = (($113) + 12|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (($113) + 16|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($116|0)==($118|0);
      if ($119) {
       $120 = HEAP32[$113>>2]|0;
       $121 = (($120) + 36|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = (FUNCTION_TABLE_ii[$122 & 1023]($113)|0);
       $$0$i$i$i$i$i22 = $123;
      } else {
       $124 = HEAP32[$116>>2]|0;
       $$0$i$i$i$i$i22 = $124;
      }
      $125 = ($$0$i$i$i$i$i22|0)==(-1);
      if ($125) {
       HEAP32[$__b>>2] = 0;
       $375 = 1;
       break;
      } else {
       $$pre$i$i$i$i24 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i$i25 = ($$pre$i$i$i$i24|0)==(0|0);
       $375 = $phitmp$i$i$i$i25;
       break;
      }
     }
    } while(0);
    $126 = ($$sroa$083$0|0)==(0|0);
    if ($126) {
     label = 49;
    } else {
     $127 = (($$sroa$083$0) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($$sroa$083$0) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$sroa$083$0>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_ii[$134 & 1023]($$sroa$083$0)|0);
      $$0$i$i1$i$i$i28 = $135;
     } else {
      $136 = HEAP32[$128>>2]|0;
      $$0$i$i1$i$i$i28 = $136;
     }
     $137 = ($$0$i$i1$i$i$i28|0)==(-1);
     if ($137) {
      label = 49;
     } else {
      if ($375) {
       $$sroa$083$2 = $$sroa$083$0;
      } else {
       $$pre$i3$i$i9$i = $$sroa$083$0;
       break;
      }
     }
    }
    if ((label|0) == 49) {
     label = 0;
     if ($375) {
      $$pre$i3$i$i9$i = 0;
      break;
     } else {
      $$sroa$083$2 = 0;
     }
    }
    $138 = HEAP32[$__b>>2]|0;
    $139 = (($138) + 12|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + 16|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($140|0)==($142|0);
    if ($143) {
     $144 = HEAP32[$138>>2]|0;
     $145 = (($144) + 36|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (FUNCTION_TABLE_ii[$146 & 1023]($138)|0);
     $$0$i$i$i30 = $147;
    } else {
     $148 = HEAP32[$140>>2]|0;
     $$0$i$i$i30 = $148;
    }
    $149 = HEAP32[$14>>2]|0;
    $150 = (($149) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (FUNCTION_TABLE_iiii[$151 & 1023]($14,8192,$$0$i$i$i30)|0);
    if (!($152)) {
     $$pre$i3$i$i9$i = $$sroa$083$2;
     break;
    }
    $153 = HEAP32[$__b>>2]|0;
    $154 = (($153) + 12|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($153) + 16|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($155|0)==($157|0);
    if ($158) {
     $159 = HEAP32[$153>>2]|0;
     $160 = (($159) + 40|0);
     $161 = HEAP32[$160>>2]|0;
     (FUNCTION_TABLE_ii[$161 & 1023]($153)|0);
     $$sroa$083$0 = $$sroa$083$2;
     continue;
    } else {
     $162 = (($155) + 4|0);
     HEAP32[$154>>2] = $162;
     $$sroa$083$0 = $$sroa$083$2;
     continue;
    }
   }
   $163 = HEAP32[$__b>>2]|0;
   $164 = ($163|0)==(0|0);
   do {
    if ($164) {
     $376 = 1;
    } else {
     $165 = (($163) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($163) + 16|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($166|0)==($168|0);
     if ($169) {
      $170 = HEAP32[$163>>2]|0;
      $171 = (($170) + 36|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = (FUNCTION_TABLE_ii[$172 & 1023]($163)|0);
      $$0$i$i$i$i1$i32 = $173;
     } else {
      $174 = HEAP32[$166>>2]|0;
      $$0$i$i$i$i1$i32 = $174;
     }
     $175 = ($$0$i$i$i$i1$i32|0)==(-1);
     if ($175) {
      HEAP32[$__b>>2] = 0;
      $376 = 1;
      break;
     } else {
      $$pre$i$i$i3$i34 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4$i35 = ($$pre$i$i$i3$i34|0)==(0|0);
      $376 = $phitmp$i$i$i4$i35;
      break;
     }
    }
   } while(0);
   $176 = ($$pre$i3$i$i9$i|0)==(0|0);
   if ($176) {
    label = 70;
   } else {
    $177 = (($$pre$i3$i$i9$i) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($$pre$i3$i$i9$i) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$$pre$i3$i$i9$i>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (FUNCTION_TABLE_ii[$184 & 1023]($$pre$i3$i$i9$i)|0);
     $$0$i$i1$i$i7$i38 = $185;
    } else {
     $186 = HEAP32[$178>>2]|0;
     $$0$i$i1$i$i7$i38 = $186;
    }
    $187 = ($$0$i$i1$i$i7$i38|0)==(-1);
    if ($187) {
     label = 70;
    } else {
     if ($376) {
      break L11;
     }
    }
   }
   if ((label|0) == 70) {
    if (!($376)) {
     break L11;
    }
   }
   $188 = HEAP32[$__err>>2]|0;
   $189 = $188 | 2;
   HEAP32[$__err>>2] = $189;
   break;
  }
  case 120:  {
   $254 = HEAP32[$this>>2]|0;
   $255 = (($254) + 20|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = HEAP32[$__b>>2]|0;
   HEAP32[$7>>2] = $257;
   $258 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $258;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;
   ;HEAP32[$$byval_copy87+0>>2]=HEAP32[$8+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$256 & 1023]($agg$result,$this,$$byval_copy,$$byval_copy87,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $289 = HEAP32[$__e>>2]|0;
   $290 = HEAP32[$__b>>2]|0;
   $291 = ($290|0)==(0|0);
   do {
    if ($291) {
     $377 = 1;
    } else {
     $292 = (($290) + 12|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = (($290) + 16|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ($293|0)==($295|0);
     if ($296) {
      $297 = HEAP32[$290>>2]|0;
      $298 = (($297) + 36|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = (FUNCTION_TABLE_ii[$299 & 1023]($290)|0);
      $$0$i$i$i$i$i = $300;
     } else {
      $301 = HEAP32[$293>>2]|0;
      $$0$i$i$i$i$i = $301;
     }
     $302 = ($$0$i$i$i$i$i|0)==(-1);
     if ($302) {
      HEAP32[$__b>>2] = 0;
      $377 = 1;
      break;
     } else {
      $$pre$i$i$i$i = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i$i = ($$pre$i$i$i$i|0)==(0|0);
      $377 = $phitmp$i$i$i$i;
      break;
     }
    }
   } while(0);
   $303 = ($289|0)==(0|0);
   if ($303) {
    label = 116;
   } else {
    $304 = (($289) + 12|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (($289) + 16|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ($305|0)==($307|0);
    if ($308) {
     $309 = HEAP32[$289>>2]|0;
     $310 = (($309) + 36|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = (FUNCTION_TABLE_ii[$311 & 1023]($289)|0);
     $$0$i$i1$i$i$i = $312;
    } else {
     $313 = HEAP32[$305>>2]|0;
     $$0$i$i1$i$i$i = $313;
    }
    $314 = ($$0$i$i1$i$i$i|0)==(-1);
    if ($314) {
     label = 116;
    } else {
     if ($377) {
      $$pre$i3$i$i915$i = $289;
     } else {
      label = 118;
     }
    }
   }
   if ((label|0) == 116) {
    if ($377) {
     label = 118;
    } else {
     $$pre$i3$i$i915$i = 0;
    }
   }
   if ((label|0) == 118) {
    $315 = HEAP32[$__err>>2]|0;
    $316 = $315 | 6;
    HEAP32[$__err>>2] = $316;
    break L11;
   }
   $317 = HEAP32[$__b>>2]|0;
   $318 = (($317) + 12|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($317) + 16|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = ($319|0)==($321|0);
   if ($322) {
    $323 = HEAP32[$317>>2]|0;
    $324 = (($323) + 36|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = (FUNCTION_TABLE_ii[$325 & 1023]($317)|0);
    $$0$i$i$i = $326;
   } else {
    $327 = HEAP32[$319>>2]|0;
    $$0$i$i$i = $327;
   }
   $328 = HEAP32[$14>>2]|0;
   $329 = (($328) + 52|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = (FUNCTION_TABLE_iiii[$330 & 1023]($14,$$0$i$i$i,0)|0);
   $332 = ($331<<24>>24)==(37);
   if (!($332)) {
    $333 = HEAP32[$__err>>2]|0;
    $334 = $333 | 4;
    HEAP32[$__err>>2] = $334;
    break L11;
   }
   $335 = HEAP32[$__b>>2]|0;
   $336 = (($335) + 12|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = (($335) + 16|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = ($337|0)==($339|0);
   if ($340) {
    $341 = HEAP32[$335>>2]|0;
    $342 = (($341) + 40|0);
    $343 = HEAP32[$342>>2]|0;
    (FUNCTION_TABLE_ii[$343 & 1023]($335)|0);
   } else {
    $344 = (($337) + 4|0);
    HEAP32[$336>>2] = $344;
   }
   $345 = HEAP32[$__b>>2]|0;
   $346 = ($345|0)==(0|0);
   do {
    if ($346) {
     $378 = 1;
    } else {
     $347 = (($345) + 12|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = (($345) + 16|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = ($348|0)==($350|0);
     if ($351) {
      $352 = HEAP32[$345>>2]|0;
      $353 = (($352) + 36|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = (FUNCTION_TABLE_ii[$354 & 1023]($345)|0);
      $$0$i$i$i$i1$i = $355;
     } else {
      $356 = HEAP32[$348>>2]|0;
      $$0$i$i$i$i1$i = $356;
     }
     $357 = ($$0$i$i$i$i1$i|0)==(-1);
     if ($357) {
      HEAP32[$__b>>2] = 0;
      $378 = 1;
      break;
     } else {
      $$pre$i$i$i3$i = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4$i = ($$pre$i$i$i3$i|0)==(0|0);
      $378 = $phitmp$i$i$i4$i;
      break;
     }
    }
   } while(0);
   $358 = ($$pre$i3$i$i915$i|0)==(0|0);
   if ($358) {
    label = 139;
   } else {
    $359 = (($$pre$i3$i$i915$i) + 12|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (($$pre$i3$i$i915$i) + 16|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ($360|0)==($362|0);
    if ($363) {
     $364 = HEAP32[$$pre$i3$i$i915$i>>2]|0;
     $365 = (($364) + 36|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = (FUNCTION_TABLE_ii[$366 & 1023]($$pre$i3$i$i915$i)|0);
     $$0$i$i1$i$i7$i = $367;
    } else {
     $368 = HEAP32[$360>>2]|0;
     $$0$i$i1$i$i7$i = $368;
    }
    $369 = ($$0$i$i1$i$i7$i|0)==(-1);
    if ($369) {
     label = 139;
    } else {
     if ($378) {
      break L11;
     }
    }
   }
   if ((label|0) == 139) {
    if (!($378)) {
     break L11;
    }
   }
   $370 = HEAP32[$__err>>2]|0;
   $371 = $370 | 2;
   HEAP32[$__err>>2] = $371;
   break;
  }
  case 83:  {
   $236 = HEAP32[$__e>>2]|0;
   $237 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$236,$__err,$14,2)|0);
   $238 = HEAP32[$__err>>2]|0;
   $239 = $238 & 4;
   $240 = ($239|0)==(0);
   $241 = ($237|0)<(61);
   $or$cond$i46 = $240 & $241;
   if ($or$cond$i46) {
    HEAP32[$__tm>>2] = $237;
    break L11;
   } else {
    $242 = $238 | 4;
    HEAP32[$__err>>2] = $242;
    break L11;
   }
   break;
  }
  case 112:  {
   $190 = (($__tm) + 8|0);
   $191 = HEAP32[$__e>>2]|0;
   $192 = (($this) + 8|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($193) + 8|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (FUNCTION_TABLE_ii[$195 & 1023]($192)|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197 & 1;
   $199 = ($198<<24>>24)==(0);
   if ($199) {
    $202 = $197&255;
    $203 = $202 >>> 1;
    $215 = $203;
   } else {
    $200 = (($196) + 4|0);
    $201 = HEAP32[$200>>2]|0;
    $215 = $201;
   }
   $204 = (($196) + 12|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = $205 & 1;
   $207 = ($206<<24>>24)==(0);
   if ($207) {
    $210 = $205&255;
    $211 = $210 >>> 1;
    $213 = $211;
   } else {
    $208 = (($196) + 16|0);
    $209 = HEAP32[$208>>2]|0;
    $213 = $209;
   }
   $212 = (0 - ($213))|0;
   $214 = ($215|0)==($212|0);
   if ($214) {
    $216 = HEAP32[$__err>>2]|0;
    $217 = $216 | 4;
    HEAP32[$__err>>2] = $217;
    break L11;
   }
   $218 = (($196) + 24|0);
   $219 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$191,$196,$218,$14,$__err,0)|0);
   $220 = $219;
   $221 = $196;
   $222 = (($220) - ($221))|0;
   $223 = ($219|0)==($196|0);
   if ($223) {
    $224 = HEAP32[$190>>2]|0;
    $225 = ($224|0)==(12);
    if ($225) {
     HEAP32[$190>>2] = 0;
     break L11;
    }
   }
   $226 = ($222|0)==(12);
   if ($226) {
    $227 = HEAP32[$190>>2]|0;
    $228 = ($227|0)<(12);
    if ($228) {
     $229 = (($227) + 12)|0;
     HEAP32[$190>>2] = $229;
    }
   }
   break;
  }
  case 82:  {
   $233 = HEAP32[$__b>>2]|0;
   $234 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5,$this,$233,$234,$__iob,$__err,$__tm,10968,((10968 + 20|0)));
   $235 = HEAP32[$5>>2]|0;
   HEAP32[$__b>>2] = $235;
   break;
  }
  case 121:  {
   $280 = (($__tm) + 20|0);
   $281 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($280,$__b,$281,$__err,$14);
   break;
  }
  case 114:  {
   $230 = HEAP32[$__b>>2]|0;
   $231 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$230,$231,$__iob,$__err,$__tm,10920,((10920 + 44|0)));
   $232 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $232;
   break;
  }
  case 89:  {
   $282 = HEAP32[$__e>>2]|0;
   $283 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$282,$__err,$14,4)|0);
   $284 = HEAP32[$__err>>2]|0;
   $285 = $284 & 4;
   $286 = ($285|0)==(0);
   if ($286) {
    $287 = (($__tm) + 20|0);
    $288 = (($283) + -1900)|0;
    HEAP32[$287>>2] = $288;
   }
   break;
  }
  case 88:  {
   $259 = (($this) + 8|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + 24|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (FUNCTION_TABLE_ii[$262 & 1023]($259)|0);
   $264 = HEAP32[$__b>>2]|0;
   $265 = HEAP32[$__e>>2]|0;
   $266 = HEAP8[$263>>0]|0;
   $267 = $266 & 1;
   $268 = ($267<<24>>24)==(0);
   if ($268) {
    $273 = (($263) + 4|0);
    $274 = $266&255;
    $275 = $274 >>> 1;
    $277 = $273;$278 = $275;
   } else {
    $269 = (($263) + 8|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = (($263) + 4|0);
    $272 = HEAP32[$271>>2]|0;
    $277 = $270;$278 = $272;
   }
   $276 = (($277) + ($278<<2)|0);
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($9,$this,$264,$265,$__iob,$__err,$__tm,$277,$276);
   $279 = HEAP32[$9>>2]|0;
   HEAP32[$__b>>2] = $279;
   break;
  }
  case 119:  {
   $246 = HEAP32[$__e>>2]|0;
   $247 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$246,$__err,$14,1)|0);
   $248 = HEAP32[$__err>>2]|0;
   $249 = $248 & 4;
   $250 = ($249|0)==(0);
   $251 = ($247|0)<(7);
   $or$cond$i49 = $250 & $251;
   if ($or$cond$i49) {
    $252 = (($__tm) + 24|0);
    HEAP32[$252>>2] = $247;
    break L11;
   } else {
    $253 = $248 | 4;
    HEAP32[$__err>>2] = $253;
    break L11;
   }
   break;
  }
  case 84:  {
   $243 = HEAP32[$__b>>2]|0;
   $244 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6,$this,$243,$244,$__iob,$__err,$__tm,10992,((10992 + 32|0)));
   $245 = HEAP32[$6>>2]|0;
   HEAP32[$__b>>2] = $245;
   break;
  }
  default: {
   $372 = HEAP32[$__err>>2]|0;
   $373 = $372 | 4;
   HEAP32[$__err>>2] = $373;
  }
  }
 } while(0);
 $374 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $374;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$$pre$i3$i$i10 = 0, $$$pre$i3$i$i103 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$phitmp$i4$i$i11 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $146 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $146 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $146 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = ($__e$0|0)==(0|0);
 if ($13) {
  label = 13;
 } else {
  $14 = (($__e$0) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($__e$0) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)==($17|0);
  if ($18) {
   $19 = HEAP32[$__e$0>>2]|0;
   $20 = (($19) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_ii[$21 & 1023]($__e$0)|0);
   $$0$i$i1$i$i = $22;
  } else {
   $23 = HEAP32[$15>>2]|0;
   $$0$i$i1$i$i = $23;
  }
  $24 = ($$0$i$i1$i$i|0)==(-1);
  if ($24) {
   label = 13;
  } else {
   if ($146) {
    $147 = $__e$0;
   } else {
    label = 15;
   }
  }
 }
 if ((label|0) == 13) {
  if ($146) {
   label = 15;
  } else {
   $147 = 0;
  }
 }
 if ((label|0) == 15) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 6;
  HEAP32[$__err>>2] = $26;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  $34 = (($33) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
  $$0$i$i = $36;
 } else {
  $37 = HEAP32[$29>>2]|0;
  $$0$i$i = $37;
 }
 $38 = HEAP32[$__ct>>2]|0;
 $39 = (($38) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (FUNCTION_TABLE_iiii[$40 & 1023]($__ct,2048,$$0$i$i)|0);
 if (!($41)) {
  $42 = HEAP32[$__err>>2]|0;
  $43 = $42 | 4;
  HEAP32[$__err>>2] = $43;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $44 = HEAP32[$__ct>>2]|0;
 $45 = (($44) + 52|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (FUNCTION_TABLE_iiii[$46 & 1023]($__ct,$$0$i$i,0)|0);
 $48 = $47 << 24 >> 24;
 $49 = HEAP32[$__b>>2]|0;
 $50 = (($49) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($51|0)==($53|0);
 if ($54) {
  $55 = HEAP32[$49>>2]|0;
  $56 = (($55) + 40|0);
  $57 = HEAP32[$56>>2]|0;
  (FUNCTION_TABLE_ii[$57 & 1023]($49)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $147;$73 = $147;$__r$0$in = $48;
 } else {
  $58 = (($51) + 4|0);
  HEAP32[$50>>2] = $58;
  $$0$in = $__n;$$pre$i3$i$i10 = $147;$73 = $147;$__r$0$in = $48;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $59 = HEAP32[$__b>>2]|0;
  $60 = ($59|0)==(0|0);
  do {
   if ($60) {
    $85 = 1;
   } else {
    $61 = (($59) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($59) + 16|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($62|0)==($64|0);
    if ($65) {
     $66 = HEAP32[$59>>2]|0;
     $67 = (($66) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (FUNCTION_TABLE_ii[$68 & 1023]($59)|0);
     $$0$i$i$i$i2 = $69;
    } else {
     $70 = HEAP32[$62>>2]|0;
     $$0$i$i$i$i2 = $70;
    }
    $71 = ($$0$i$i$i$i2|0)==(-1);
    if ($71) {
     HEAP32[$__b>>2] = 0;
     $85 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $85 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $72 = ($73|0)==(0|0);
  if ($72) {
   $$pre$i3$i$i25 = $$pre$i3$i$i10;$148 = 0;$86 = 1;
  } else {
   $74 = (($73) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($75|0)==($77|0);
   if ($78) {
    $79 = HEAP32[$73>>2]|0;
    $80 = (($79) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_ii[$81 & 1023]($73)|0);
    $$0$i$i1$i$i8 = $82;
   } else {
    $83 = HEAP32[$75>>2]|0;
    $$0$i$i1$i$i8 = $83;
   }
   $84 = ($$0$i$i1$i$i8|0)==(-1);
   $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
   $$$pre$i3$i$i10 = $84 ? 0 : $$pre$i3$i$i10;
   $$$pre$i3$i$i103 = $84 ? 0 : $$pre$i3$i$i10;
   $$phitmp$i4$i$i11 = $84 ? 1 : $phitmp$i4$i$i11;
   $$pre$i3$i$i25 = $$$pre$i3$i$i10;$148 = $$$pre$i3$i$i103;$86 = $$phitmp$i4$i$i11;
  }
  $tmp$i$i13 = $85 ^ $86;
  $87 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $87;
  $88 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $89 = (($88) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$88>>2]|0;
   $95 = (($94) + 36|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (FUNCTION_TABLE_ii[$96 & 1023]($88)|0);
   $$0$i$i14 = $97;
  } else {
   $98 = HEAP32[$90>>2]|0;
   $$0$i$i14 = $98;
  }
  $99 = HEAP32[$__ct>>2]|0;
  $100 = (($99) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (FUNCTION_TABLE_iiii[$101 & 1023]($__ct,2048,$$0$i$i14)|0);
  if (!($102)) {
   $$01 = $__r$0;
   label = 59;
   break;
  }
  $103 = ($__r$0*10)|0;
  $104 = HEAP32[$__ct>>2]|0;
  $105 = (($104) + 52|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_iiii[$106 & 1023]($__ct,$$0$i$i14,0)|0);
  $108 = $107 << 24 >> 24;
  $109 = (($108) + ($103))|0;
  $110 = HEAP32[$__b>>2]|0;
  $111 = (($110) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112|0)==($114|0);
  if ($115) {
   $116 = HEAP32[$110>>2]|0;
   $117 = (($116) + 40|0);
   $118 = HEAP32[$117>>2]|0;
   (FUNCTION_TABLE_ii[$118 & 1023]($110)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $148;$__r$0$in = $109;
   continue;
  } else {
   $119 = (($112) + 4|0);
   HEAP32[$111>>2] = $119;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $148;$__r$0$in = $109;
   continue;
  }
 }
 if ((label|0) == 59) {
  STACKTOP = sp;return ($$01|0);
 }
 $120 = ($88|0)==(0|0);
 do {
  if ($120) {
   $149 = 1;
  } else {
   $121 = (($88) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($88) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$88>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 1023]($88)|0);
    $$0$i$i$i$i17 = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i$i$i17 = $130;
   }
   $131 = ($$0$i$i$i$i17|0)==(-1);
   if ($131) {
    HEAP32[$__b>>2] = 0;
    $149 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $149 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $132 = ($$pre$i3$i$i25|0)==(0|0);
 if ($132) {
  label = 56;
 } else {
  $133 = (($$pre$i3$i$i25) + 12|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($$pre$i3$i$i25) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($134|0)==($136|0);
  if ($137) {
   $138 = HEAP32[$$pre$i3$i$i25>>2]|0;
   $139 = (($138) + 36|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (FUNCTION_TABLE_ii[$140 & 1023]($$pre$i3$i$i25)|0);
   $$0$i$i1$i$i23 = $141;
  } else {
   $142 = HEAP32[$134>>2]|0;
   $$0$i$i1$i$i23 = $142;
  }
  $143 = ($$0$i$i1$i$i23|0)==(-1);
  if ($143) {
   label = 56;
  } else {
   if ($149) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 if ((label|0) == 56) {
  if (!($149)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $144 = HEAP32[$__err>>2]|0;
 $145 = $144 | 2;
 HEAP32[$__err>>2] = $145;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(574)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ($0|0)==($1|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[$this>>2]|0;
  __THREW__ = 0;
  invoke_vi(585,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $25 = $5;
  HEAP32[$agg$result>>2] = $25;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$22 = $5;$9 = $5;
 }
 while(1) {
  $7 = HEAP8[$$01$i$i>>0]|0;
  $8 = ($9|0)==(0|0);
  do {
   if ($8) {
    $26 = $22;$27 = 0;
   } else {
    $10 = (($9) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $22;
     $$7$i = $21 ? 0 : $9;
     $26 = $$$i;$27 = $$7$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $26 = $22;$27 = $9;
     break;
    }
   }
  } while(0);
  $23 = (($$01$i$i) + 1|0);
  $24 = ($23|0)==($4|0);
  if ($24) {
   $25 = $26;
   break;
  } else {
   $$01$i$i = $23;$22 = $26;$9 = $27;
  }
 }
 HEAP32[$agg$result>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__nar = 0, $__nar$i = 0, $__nb$i = 0, $__ne$i = 0, $mb$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar$i = sp + 416|0;
 $__ne$i = sp + 8|0;
 $mb$i = sp;
 $__nb$i = sp + 12|0;
 $__nar = sp + 16|0;
 $2 = (($this) + 8|0);
 $3 = (($__nar$i) + 100|0);
 HEAP32[$__ne$i>>2] = $3;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($2,$__nar$i,$__ne$i,$__tm,$__fmt,$__mod);
 $4 = $mb$i;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 HEAP32[$__nb$i>>2] = $__nar$i;
 $8 = HEAP32[$2>>2]|0;
 $9 = (_uselocale(($8|0))|0);
 $10 = (_mbsrtowcs($__nar,$__nb$i,100,$mb$i)|0);
 $11 = ($9|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  (invoke_ii(576,($9|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ($10|0)==(-1);
 if ($16) {
  __ZNSt3__121__throw_runtime_errorEPKc(12592);
  // unreachable;
 }
 $17 = (($__nar) + ($10<<2)|0);
 $18 = HEAP32[$__s>>2]|0;
 $19 = ($10|0)==(0);
 if ($19) {
  $37 = $18;
  HEAP32[$agg$result>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$22 = $18;$34 = $18;
 }
 while(1) {
  $20 = HEAP32[$$01$i$i>>2]|0;
  $21 = ($22|0)==(0|0);
  if ($21) {
   $38 = $34;$39 = 0;
  } else {
   $23 = (($22) + 24|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($24|0)==($26|0);
   if ($27) {
    $28 = HEAP32[$22>>2]|0;
    $29 = (($28) + 52|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (FUNCTION_TABLE_iii[$30 & 1023]($22,$20)|0);
    $$0$i$i$i$i = $31;
   } else {
    $32 = (($24) + 4|0);
    HEAP32[$23>>2] = $32;
    HEAP32[$24>>2] = $20;
    $$0$i$i$i$i = $20;
   }
   $33 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $33 ? 0 : $34;
   $$7$i = $33 ? 0 : $22;
   $38 = $$$i;$39 = $$7$i;
  }
  $35 = (($$01$i$i) + 4|0);
  $36 = ($35|0)==($17|0);
  if ($36) {
   $37 = $38;
   break;
  } else {
   $$01$i$i = $35;$22 = $39;$34 = $38;
  }
 }
 HEAP32[$agg$result>>2] = $37;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0] = 45;
 $1 = (($agg$result) + 2|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0] = 45;
 $1 = (($agg$result) + 2|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 4|0);
 $$012$i$i = 1;$$03$i$i = $0;
 while(1) {
  $1 = (($$012$i$i) + -1)|0;
  $2 = (($$03$i$i) + 4|0);
  HEAP32[$$03$i$i>>2] = 45;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012$i$i = $1;$$03$i$i = $2;
  }
 }
 $4 = (($0) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 4|0);
 $$012$i$i = 1;$$03$i$i = $0;
 while(1) {
  $1 = (($$012$i$i) + -1)|0;
  $2 = (($$03$i$i) + 4|0);
  HEAP32[$$03$i$i>>2] = 45;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012$i$i = $1;$$03$i$i = $2;
  }
 }
 $4 = (($0) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$pre = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__wbuf = sp + 132|0;
 $__wb = sp + 8|0;
 $__wn = sp + 16|0;
 $__neg = sp + 20|0;
 $__atoms = sp + 22|0;
 $__nbuf = sp + 32|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 586;
 $1 = (($__iob) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($4+1)|0);
 __THREW__ = 0;
 $5 = (invoke_iii(556,($2|0),(11752|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if ($7) {
   label = 10;
  } else {
   $8 = (($__wbuf) + 100|0);
   HEAP8[$__neg>>0] = 0;
   $9 = HEAP32[$__e>>2]|0;
   $10 = (($__iob) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $12 = (invoke_iiiiiiiiiiii(587,($__b|0),($9|0),($__intl|0),($2|0),($11|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($8|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 10;
   } else {
    if ($12) {
     $15 = HEAP32[$5>>2]|0;
     $16 = (($15) + 32|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($17|0,($5|0),(11384|0),(((11384 + 10|0))|0),($__atoms|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      label = 10;
      break;
     }
     $20 = HEAP32[$__wn>>2]|0;
     $21 = HEAP32[$__wb>>2]|0;
     $22 = $20;
     $23 = $21;
     $24 = (($22) - ($23))|0;
     $25 = ($24|0)>(98);
     if ($25) {
      $26 = (($24) + 2)|0;
      $27 = (_malloc($26)|0);
      $28 = ($27|0)==(0|0);
      if ($28) {
       $29 = (___cxa_allocate_exception(4)|0);
       HEAP32[$29>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($29|0),(20008|0),(386|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        $32 = ___cxa_find_matching_catch()|0;
        $33 = tempRet0;
        $$0 = $32;$$01 = $33;
        break;
       } else {
        // unreachable;
       }
      } else {
       $38 = $27;$__nc$0 = $27;
      }
     } else {
      $38 = 0;$__nc$0 = $__nbuf;
     }
     $39 = HEAP8[$__neg>>0]|0;
     $40 = ($39<<24>>24)==(0);
     if ($40) {
      $__nc$1 = $__nc$0;
     } else {
      $41 = (($__nc$0) + 1|0);
      HEAP8[$__nc$0>>0] = 45;
      $__nc$1 = $41;
     }
     $42 = ($21>>>0)<($20>>>0);
     if ($42) {
      $43 = (($__atoms) + 10|0);
      $44 = $__atoms;
      $__nc$27 = $__nc$1;$__w$08 = $21;
      while(1) {
       $45 = HEAP8[$__w$08>>0]|0;
       $$01$i = $__atoms;
       while(1) {
        $48 = HEAP8[$$01$i>>0]|0;
        $49 = ($48<<24>>24)==($45<<24>>24);
        $47 = (($$01$i) + 1|0);
        if ($49) {
         $$0$lcssa$i = $$01$i;
         break;
        }
        $46 = ($47|0)==($43|0);
        if ($46) {
         $$0$lcssa$i = $43;
         break;
        } else {
         $$01$i = $47;
        }
       }
       $50 = $$0$lcssa$i;
       $51 = (($50) - ($44))|0;
       $52 = (11384 + ($51)|0);
       $53 = HEAP8[$52>>0]|0;
       HEAP8[$__nc$27>>0] = $53;
       $54 = (($__w$08) + 1|0);
       $55 = (($__nc$27) + 1|0);
       $56 = HEAP32[$__wn>>2]|0;
       $57 = ($54>>>0)<($56>>>0);
       if ($57) {
        $__nc$27 = $55;$__w$08 = $54;
       } else {
        $__nc$2$lcssa = $55;
        break;
       }
      }
     } else {
      $__nc$2$lcssa = $__nc$1;
     }
     HEAP8[$__nc$2$lcssa>>0] = 0;
     HEAP32[$vararg_buffer>>2] = $__v;
     $58 = (_sscanf($__nbuf,11400,$vararg_buffer)|0);
     $59 = ($58|0)==(1);
     if (!($59)) {
      __THREW__ = 0;
      invoke_vi(557,(11408|0));
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       $36 = ___cxa_find_matching_catch()|0;
       $37 = tempRet0;
       _free($38);
       $$0 = $36;$$01 = $37;
       break;
      }
     }
     _free($38);
    }
    $62 = HEAP32[$__b>>2]|0;
    $63 = ($62|0)==(0|0);
    if ($63) {
     $77 = 0;
    } else {
     $64 = (($62) + 12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($62) + 16|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = HEAP32[$62>>2]|0;
      $70 = (($69) + 36|0);
      $71 = HEAP32[$70>>2]|0;
      __THREW__ = 0;
      $72 = (invoke_ii($71|0,($62|0))|0);
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if ($74) {
       label = 10;
       break;
      }
      $75 = ($72|0)==(-1);
      if ($75) {
       HEAP32[$__b>>2] = 0;
       $77 = 0;
      } else {
       $77 = $62;
      }
     } else {
      $77 = $62;
     }
    }
    $76 = ($77|0)==(0|0);
    $78 = HEAP32[$__e>>2]|0;
    $79 = ($78|0)==(0|0);
    do {
     if ($79) {
      label = 34;
     } else {
      $80 = (($78) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (($78) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($81|0)==($83|0);
      if (!($84)) {
       if ($76) {
        break;
       } else {
        label = 36;
        break;
       }
      }
      $85 = HEAP32[$78>>2]|0;
      $86 = (($85) + 36|0);
      $87 = HEAP32[$86>>2]|0;
      __THREW__ = 0;
      $88 = (invoke_ii($87|0,($78|0))|0);
      $89 = __THREW__; __THREW__ = 0;
      $90 = $89&1;
      if ($90) {
       label = 10;
       break L1;
      }
      $91 = ($88|0)==(-1);
      if ($91) {
       HEAP32[$__e>>2] = 0;
       label = 34;
       break;
      } else {
       if ($76) {
        break;
       } else {
        label = 36;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 34) {
     if ($76) {
      label = 36;
     }
    }
    if ((label|0) == 36) {
     $92 = HEAP32[$__err>>2]|0;
     $93 = $92 | 2;
     HEAP32[$__err>>2] = $93;
    }
    HEAP32[$agg$result>>2] = $77;
    $94 = (($2) + 4|0);
    $95 = HEAP32[$94>>2]|0;HEAP32[$94>>2] = (($95+-1)|0);
    $96 = ($95|0)==(0);
    if ($96) {
     $97 = HEAP32[$2>>2]|0;
     $98 = (($97) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     FUNCTION_TABLE_vi[$99 & 1023]($2);
    }
    $100 = HEAP32[$__wb>>2]|0;
    HEAP32[$__wb>>2] = 0;
    $101 = ($100|0)==(0|0);
    if ($101) {
     STACKTOP = sp;return;
    }
    $102 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($102|0,($100|0));
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $$0 = $34;$$01 = $35;
 }
 $107 = (($2) + 4|0);
 $108 = HEAP32[$107>>2]|0;HEAP32[$107>>2] = (($108+-1)|0);
 $109 = ($108|0)==(0);
 if ($109) {
  $110 = HEAP32[$2>>2]|0;
  $111 = (($110) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vi[$112 & 1023]($2);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $113 = ($$pre|0)==(0|0);
 if ($113) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $$pre18 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($$pre18|0,($$pre|0));
 $114 = __THREW__; __THREW__ = 0;
 $115 = $114&1;
 if ($115) {
  $116 = ___cxa_find_matching_catch(0|0)|0;
  $117 = tempRet0;
  ___clang_call_terminate($116);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e$0,$__intl,$__loc$0$0$val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__intl = $__intl|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i115 = 0, $$0$i$i125 = 0, $$0$i$i142 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i60 = 0, $$0$i$i79 = 0, $$0$i$i82 = 0, $$0$i$i99 = 0, $$283 = 0, $$284 = 0, $$285 = 0, $$286 = 0;
 var $$288 = 0, $$phi$trans$insert = 0, $$phi$trans$insert5 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i129 = 0, $$pre$i$i$i146 = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i65 = 0, $$pre$i$i$i89 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i133 = 0, $$pre$i2$i$i150 = 0, $$pre$i2$i$i150238 = 0, $$pre$i2$i$i150239 = 0, $$pre$i2$i$i244$ph = 0, $$pre$i2$i$i244281 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39235 = 0;
 var $$pre$i2$i$i39237 = 0, $$pre$i2$i$i69 = 0, $$pre$i2$i$i69242$ph = 0, $$pre$i2$i$i69242278 = 0, $$pre$i2$i$i93 = 0, $$pre268 = 0, $$pre269 = 0, $$pre270 = 0, $$pre271 = 0, $$pre272 = 0, $$pre273 = 0, $$pre3 = 0, $$pre4 = 0, $$pre6 = 0, $$sum = 0, $$sum274 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
 var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$11 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$14 = 0;
 var $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$17 = 0, $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gb = 0, $__gbuf = 0;
 var $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0227 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0229 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0;
 var $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i123 = 0, $isascii1$i156 = 0, $isascii1$i48 = 0, $isascii1$i58 = 0, $lpad$phi$index = 0, $lpad$phi$index17 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond292 = 0, $or$cond7$not = 0, $or$cond8 = 0, $sext = 0, $sext194 = 0, $sext195 = 0, $sext196 = 0, $storemerge$i = 0;
 var $switch = 0, $tmp$i$i = 0, $tmp$i$i135 = 0, $tmp$i$i152 = 0, $tmp$i$i41 = 0, $tmp$i$i71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 592|0;
 $1 = sp + 580|0;
 $2 = sp + 568|0;
 $3 = sp + 556|0;
 $4 = sp + 544|0;
 $5 = sp + 540|0;
 $6 = sp + 528|0;
 $7 = sp + 516|0;
 $8 = sp + 504|0;
 $9 = sp + 492|0;
 $10 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 16|0;
 $__gn = sp;
 $__ge = sp + 4|0;
 $__pat = sp + 8|0;
 $__grp = sp + 24|0;
 $__sym = sp + 36|0;
 $__psn = sp + 48|0;
 $__nsn = sp + 60|0;
 $__spaces = sp + 72|0;
 $__et = sp + 84|0;
 HEAP32[$10>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $11 = (($__gb) + 4|0);
 HEAP32[$11>>2] = 586;
 HEAP32[$__gn>>2] = $__gbuf;
 $12 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $12;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 do {
  if ($__intl) {
   __THREW__ = 0;
   $13 = (invoke_iii(556,($__loc$0$0$val|0),(11208|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 81;
   } else {
    $16 = HEAP32[$13>>2]|0;
    $17 = (($16) + 44|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    invoke_vii($18|0,($0|0),($13|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 81;
    } else {
     $21 = HEAP32[$0>>2]|0;
     HEAP32[$__pat>>2] = $21;
     $22 = HEAP32[$13>>2]|0;
     $23 = (($22) + 32|0);
     $24 = HEAP32[$23>>2]|0;
     __THREW__ = 0;
     invoke_vii($24|0,($1|0),($13|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 81;
     } else {
      $27 = HEAP8[$__nsn>>0]|0;
      $28 = $27 & 1;
      $29 = ($28<<24>>24)==(0);
      if ($29) {
       $33 = (($__nsn) + 1|0);
       HEAP8[$33>>0] = 0;
       HEAP8[$__nsn>>0] = 0;
      } else {
       $30 = (($__nsn) + 8|0);
       $31 = HEAP32[$30>>2]|0;
       HEAP8[$31>>0] = 0;
       $32 = (($__nsn) + 4|0);
       HEAP32[$32>>2] = 0;
      }
      __THREW__ = 0;
      invoke_vi(588,($__nsn|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $36 = ___cxa_find_matching_catch(0|0)|0;
       $37 = tempRet0;
       ___clang_call_terminate($36);
       // unreachable;
      }
      ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      $38 = HEAP32[$13>>2]|0;
      $39 = (($38) + 28|0);
      $40 = HEAP32[$39>>2]|0;
      __THREW__ = 0;
      invoke_vii($40|0,($2|0),($13|0));
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 81;
      } else {
       $43 = HEAP8[$__psn>>0]|0;
       $44 = $43 & 1;
       $45 = ($44<<24>>24)==(0);
       if ($45) {
        $49 = (($__psn) + 1|0);
        HEAP8[$49>>0] = 0;
        HEAP8[$__psn>>0] = 0;
       } else {
        $46 = (($__psn) + 8|0);
        $47 = HEAP32[$46>>2]|0;
        HEAP8[$47>>0] = 0;
        $48 = (($__psn) + 4|0);
        HEAP32[$48>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(588,($__psn|0));
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        $52 = ___cxa_find_matching_catch(0|0)|0;
        $53 = tempRet0;
        ___clang_call_terminate($52);
        // unreachable;
       }
       ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
       ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
       $54 = HEAP32[$13>>2]|0;
       $55 = (($54) + 12|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_ii($56|0,($13|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        label = 81;
       } else {
        $60 = HEAP32[$13>>2]|0;
        $61 = (($60) + 16|0);
        $62 = HEAP32[$61>>2]|0;
        __THREW__ = 0;
        $63 = (invoke_ii($62|0,($13|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         label = 81;
        } else {
         $66 = HEAP32[$13>>2]|0;
         $67 = (($66) + 20|0);
         $68 = HEAP32[$67>>2]|0;
         __THREW__ = 0;
         invoke_vii($68|0,($3|0),($13|0));
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          label = 81;
         } else {
          $71 = HEAP8[$__grp>>0]|0;
          $72 = $71 & 1;
          $73 = ($72<<24>>24)==(0);
          if ($73) {
           $77 = (($__grp) + 1|0);
           HEAP8[$77>>0] = 0;
           HEAP8[$__grp>>0] = 0;
          } else {
           $74 = (($__grp) + 8|0);
           $75 = HEAP32[$74>>2]|0;
           HEAP8[$75>>0] = 0;
           $76 = (($__grp) + 4|0);
           HEAP32[$76>>2] = 0;
          }
          __THREW__ = 0;
          invoke_vi(588,($__grp|0));
          $78 = __THREW__; __THREW__ = 0;
          $79 = $78&1;
          if ($79) {
           $80 = ___cxa_find_matching_catch(0|0)|0;
           $81 = tempRet0;
           ___clang_call_terminate($80);
           // unreachable;
          }
          ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
          ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
          $82 = HEAP32[$13>>2]|0;
          $83 = (($82) + 24|0);
          $84 = HEAP32[$83>>2]|0;
          __THREW__ = 0;
          invoke_vii($84|0,($4|0),($13|0));
          $85 = __THREW__; __THREW__ = 0;
          $86 = $85&1;
          if ($86) {
           label = 81;
          } else {
           $87 = HEAP8[$__sym>>0]|0;
           $88 = $87 & 1;
           $89 = ($88<<24>>24)==(0);
           if ($89) {
            $93 = (($__sym) + 1|0);
            HEAP8[$93>>0] = 0;
            HEAP8[$__sym>>0] = 0;
           } else {
            $90 = (($__sym) + 8|0);
            $91 = HEAP32[$90>>2]|0;
            HEAP8[$91>>0] = 0;
            $92 = (($__sym) + 4|0);
            HEAP32[$92>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(588,($__sym|0));
           $94 = __THREW__; __THREW__ = 0;
           $95 = $94&1;
           if ($95) {
            $96 = ___cxa_find_matching_catch(0|0)|0;
            $97 = tempRet0;
            ___clang_call_terminate($96);
            // unreachable;
           } else {
            ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
            ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
            $98 = HEAP32[$13>>2]|0;
            $99 = (($98) + 36|0);
            $100 = HEAP32[$99>>2]|0;
            __THREW__ = 0;
            $101 = (invoke_ii($100|0,($13|0))|0);
            $102 = __THREW__; __THREW__ = 0;
            $103 = $102&1;
            if ($103) {
             label = 81;
             break;
            } else {
             $__dp$0 = $57;$__ts$0 = $63;$storemerge$i = $101;
             label = 60;
             break;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   __THREW__ = 0;
   $104 = (invoke_iii(556,($__loc$0$0$val|0),(11144|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    label = 81;
   } else {
    $107 = HEAP32[$104>>2]|0;
    $108 = (($107) + 44|0);
    $109 = HEAP32[$108>>2]|0;
    __THREW__ = 0;
    invoke_vii($109|0,($5|0),($104|0));
    $110 = __THREW__; __THREW__ = 0;
    $111 = $110&1;
    if ($111) {
     label = 81;
    } else {
     $112 = HEAP32[$5>>2]|0;
     HEAP32[$__pat>>2] = $112;
     $113 = HEAP32[$104>>2]|0;
     $114 = (($113) + 32|0);
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     invoke_vii($115|0,($6|0),($104|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 81;
     } else {
      $118 = HEAP8[$__nsn>>0]|0;
      $119 = $118 & 1;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $124 = (($__nsn) + 1|0);
       HEAP8[$124>>0] = 0;
       HEAP8[$__nsn>>0] = 0;
      } else {
       $121 = (($__nsn) + 8|0);
       $122 = HEAP32[$121>>2]|0;
       HEAP8[$122>>0] = 0;
       $123 = (($__nsn) + 4|0);
       HEAP32[$123>>2] = 0;
      }
      __THREW__ = 0;
      invoke_vi(588,($__nsn|0));
      $125 = __THREW__; __THREW__ = 0;
      $126 = $125&1;
      if ($126) {
       $127 = ___cxa_find_matching_catch(0|0)|0;
       $128 = tempRet0;
       ___clang_call_terminate($127);
       // unreachable;
      }
      ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
      ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $129 = HEAP32[$104>>2]|0;
      $130 = (($129) + 28|0);
      $131 = HEAP32[$130>>2]|0;
      __THREW__ = 0;
      invoke_vii($131|0,($7|0),($104|0));
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       label = 81;
      } else {
       $134 = HEAP8[$__psn>>0]|0;
       $135 = $134 & 1;
       $136 = ($135<<24>>24)==(0);
       if ($136) {
        $140 = (($__psn) + 1|0);
        HEAP8[$140>>0] = 0;
        HEAP8[$__psn>>0] = 0;
       } else {
        $137 = (($__psn) + 8|0);
        $138 = HEAP32[$137>>2]|0;
        HEAP8[$138>>0] = 0;
        $139 = (($__psn) + 4|0);
        HEAP32[$139>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(588,($__psn|0));
       $141 = __THREW__; __THREW__ = 0;
       $142 = $141&1;
       if ($142) {
        $143 = ___cxa_find_matching_catch(0|0)|0;
        $144 = tempRet0;
        ___clang_call_terminate($143);
        // unreachable;
       }
       ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
       ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
       $145 = HEAP32[$104>>2]|0;
       $146 = (($145) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_ii($147|0,($104|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        label = 81;
       } else {
        $151 = HEAP32[$104>>2]|0;
        $152 = (($151) + 16|0);
        $153 = HEAP32[$152>>2]|0;
        __THREW__ = 0;
        $154 = (invoke_ii($153|0,($104|0))|0);
        $155 = __THREW__; __THREW__ = 0;
        $156 = $155&1;
        if ($156) {
         label = 81;
        } else {
         $157 = HEAP32[$104>>2]|0;
         $158 = (($157) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         __THREW__ = 0;
         invoke_vii($159|0,($8|0),($104|0));
         $160 = __THREW__; __THREW__ = 0;
         $161 = $160&1;
         if ($161) {
          label = 81;
         } else {
          $162 = HEAP8[$__grp>>0]|0;
          $163 = $162 & 1;
          $164 = ($163<<24>>24)==(0);
          if ($164) {
           $168 = (($__grp) + 1|0);
           HEAP8[$168>>0] = 0;
           HEAP8[$__grp>>0] = 0;
          } else {
           $165 = (($__grp) + 8|0);
           $166 = HEAP32[$165>>2]|0;
           HEAP8[$166>>0] = 0;
           $167 = (($__grp) + 4|0);
           HEAP32[$167>>2] = 0;
          }
          __THREW__ = 0;
          invoke_vi(588,($__grp|0));
          $169 = __THREW__; __THREW__ = 0;
          $170 = $169&1;
          if ($170) {
           $171 = ___cxa_find_matching_catch(0|0)|0;
           $172 = tempRet0;
           ___clang_call_terminate($171);
           // unreachable;
          }
          ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
          ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
          $173 = HEAP32[$104>>2]|0;
          $174 = (($173) + 24|0);
          $175 = HEAP32[$174>>2]|0;
          __THREW__ = 0;
          invoke_vii($175|0,($9|0),($104|0));
          $176 = __THREW__; __THREW__ = 0;
          $177 = $176&1;
          if ($177) {
           label = 81;
          } else {
           $178 = HEAP8[$__sym>>0]|0;
           $179 = $178 & 1;
           $180 = ($179<<24>>24)==(0);
           if ($180) {
            $184 = (($__sym) + 1|0);
            HEAP8[$184>>0] = 0;
            HEAP8[$__sym>>0] = 0;
           } else {
            $181 = (($__sym) + 8|0);
            $182 = HEAP32[$181>>2]|0;
            HEAP8[$182>>0] = 0;
            $183 = (($__sym) + 4|0);
            HEAP32[$183>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(588,($__sym|0));
           $185 = __THREW__; __THREW__ = 0;
           $186 = $185&1;
           if ($186) {
            $187 = ___cxa_find_matching_catch(0|0)|0;
            $188 = tempRet0;
            ___clang_call_terminate($187);
            // unreachable;
           } else {
            ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
            ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
            $189 = HEAP32[$104>>2]|0;
            $190 = (($189) + 36|0);
            $191 = HEAP32[$190>>2]|0;
            __THREW__ = 0;
            $192 = (invoke_ii($191|0,($104|0))|0);
            $193 = __THREW__; __THREW__ = 0;
            $194 = $193&1;
            if ($194) {
             label = 81;
             break;
            } else {
             $__dp$0 = $148;$__ts$0 = $154;$storemerge$i = $192;
             label = 60;
             break;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 L76: do {
  if ((label|0) == 60) {
   $195 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $195;
   $196 = (($__ct) + 8|0);
   $197 = (($__nsn) + 1|0);
   $198 = (($__nsn) + 4|0);
   $199 = (($__nsn) + 8|0);
   $200 = (($__psn) + 1|0);
   $201 = (($__psn) + 4|0);
   $202 = (($__psn) + 8|0);
   $203 = $__flags & 512;
   $204 = ($203|0)!=(0);
   $205 = (($__sym) + 1|0);
   $206 = (($__sym) + 8|0);
   $207 = (($__sym) + 4|0);
   $208 = (($__spaces) + 1|0);
   $209 = (($__spaces) + 8|0);
   $210 = (($__spaces) + 4|0);
   $211 = (($__pat) + 3|0);
   $212 = (($__grp) + 4|0);
   $1101 = $__gbuf;$__e$sroa$0$0 = $__e$0;$__fd$0 = $storemerge$i;$__p$0227 = 0;$__trailing_sign$0229 = 0;
   L78: while(1) {
    $213 = HEAP32[$__b>>2]|0;
    $214 = ($213|0)==(0|0);
    do {
     if ($214) {
      $228 = 0;
     } else {
      $215 = (($213) + 12|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = (($213) + 16|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ($216|0)==($218|0);
      if ($219) {
       $220 = HEAP32[$213>>2]|0;
       $221 = (($220) + 36|0);
       $222 = HEAP32[$221>>2]|0;
       __THREW__ = 0;
       $223 = (invoke_ii($222|0,($213|0))|0);
       $224 = __THREW__; __THREW__ = 0;
       $225 = $224&1;
       if ($225) {
        label = 80;
        break L78;
       }
       $226 = ($223|0)==(-1);
       if ($226) {
        HEAP32[$__b>>2] = 0;
        $228 = 0;
        break;
       } else {
        $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
        $228 = $$pre$i$i$i19;
        break;
       }
      } else {
       $228 = $213;
      }
     }
    } while(0);
    $227 = ($228|0)==(0|0);
    $229 = ($__e$sroa$0$0|0)==(0|0);
    do {
     if ($229) {
      label = 72;
     } else {
      $230 = (($__e$sroa$0$0) + 12|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = (($__e$sroa$0$0) + 16|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = ($231|0)==($233|0);
      if (!($234)) {
       if ($227) {
        $__e$sroa$0$2 = $__e$sroa$0$0;
        break;
       } else {
        $1068 = $1101;$1102 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
        label = 340;
        break L78;
       }
      }
      $235 = HEAP32[$__e$sroa$0$0>>2]|0;
      $236 = (($235) + 36|0);
      $237 = HEAP32[$236>>2]|0;
      __THREW__ = 0;
      $238 = (invoke_ii($237|0,($__e$sroa$0$0|0))|0);
      $239 = __THREW__; __THREW__ = 0;
      $240 = $239&1;
      if ($240) {
       label = 80;
       break L78;
      }
      $241 = ($238|0)==(-1);
      if ($241) {
       label = 72;
      } else {
       if ($227) {
        $__e$sroa$0$2 = $__e$sroa$0$0;
       } else {
        $1068 = $1101;$1102 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
        label = 340;
        break L78;
       }
      }
     }
    } while(0);
    if ((label|0) == 72) {
     label = 0;
     if ($227) {
      $1068 = $1101;$1102 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
      label = 340;
      break;
     } else {
      $__e$sroa$0$2 = 0;
     }
    }
    $242 = (($__pat) + ($__p$0227)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243 << 24 >> 24;
    L98: do {
     switch ($244|0) {
     case 0:  {
      label = 107;
      break;
     }
     case 1:  {
      $cond = ($__p$0227|0)==(3);
      if ($cond) {
       $1068 = $1101;$1102 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
       label = 340;
       break L78;
      }
      $291 = HEAP32[$__b>>2]|0;
      $292 = (($291) + 12|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = (($291) + 16|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = ($293|0)==($295|0);
      if ($296) {
       $297 = HEAP32[$291>>2]|0;
       $298 = (($297) + 36|0);
       $299 = HEAP32[$298>>2]|0;
       __THREW__ = 0;
       $300 = (invoke_ii($299|0,($291|0))|0);
       $301 = __THREW__; __THREW__ = 0;
       $302 = $301&1;
       if ($302) {
        label = 80;
        break L78;
       } else {
        $$0$i$i29 = $300;
       }
      } else {
       $303 = HEAP8[$293>>0]|0;
       $304 = $303&255;
       $$0$i$i29 = $304;
      }
      $305 = $$0$i$i29&255;
      $isascii1$i = ($305<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 106;
       break L78;
      }
      $sext196 = $$0$i$i29 << 24;
      $306 = $sext196 >> 24;
      $307 = HEAP32[$196>>2]|0;
      $308 = (($307) + ($306<<1)|0);
      $309 = HEAP16[$308>>1]|0;
      $310 = $309 & 8192;
      $311 = ($310<<16>>16)==(0);
      if ($311) {
       label = 106;
       break L78;
      }
      $312 = HEAP32[$__b>>2]|0;
      $313 = (($312) + 12|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = (($312) + 16|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = ($314|0)==($316|0);
      if ($317) {
       $318 = HEAP32[$312>>2]|0;
       $319 = (($318) + 40|0);
       $320 = HEAP32[$319>>2]|0;
       __THREW__ = 0;
       $321 = (invoke_ii($320|0,($312|0))|0);
       $322 = __THREW__; __THREW__ = 0;
       $323 = $322&1;
       if ($323) {
        label = 80;
        break L78;
       } else {
        $$0$i$i32 = $321;
       }
      } else {
       $324 = (($314) + 1|0);
       HEAP32[$313>>2] = $324;
       $325 = HEAP8[$314>>0]|0;
       $326 = $325&255;
       $$0$i$i32 = $326;
      }
      $327 = $$0$i$i32&255;
      __THREW__ = 0;
      invoke_vii(589,($__spaces|0),($327|0));
      $328 = __THREW__; __THREW__ = 0;
      $329 = $328&1;
      if ($329) {
       label = 80;
       break L78;
      } else {
       label = 107;
      }
      break;
     }
     case 3:  {
      $403 = HEAP8[$__psn>>0]|0;
      $404 = $403 & 1;
      $405 = ($404<<24>>24)==(0);
      if ($405) {
       $407 = $403&255;
       $408 = $407 >>> 1;
       $418 = $408;
      } else {
       $406 = HEAP32[$201>>2]|0;
       $418 = $406;
      }
      $409 = HEAP8[$__nsn>>0]|0;
      $410 = $409 & 1;
      $411 = ($410<<24>>24)==(0);
      if ($411) {
       $413 = $409&255;
       $414 = $413 >>> 1;
       $416 = $414;
      } else {
       $412 = HEAP32[$198>>2]|0;
       $416 = $412;
      }
      $415 = (0 - ($416))|0;
      $417 = ($418|0)==($415|0);
      if ($417) {
       $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
      } else {
       if ($405) {
        $420 = $403&255;
        $421 = $420 >>> 1;
        $423 = $421;
       } else {
        $419 = HEAP32[$201>>2]|0;
        $423 = $419;
       }
       $422 = ($423|0)==(0);
       if (!($422)) {
        if ($411) {
         $425 = $409&255;
         $426 = $425 >>> 1;
         $428 = $426;
        } else {
         $424 = HEAP32[$198>>2]|0;
         $428 = $424;
        }
        $427 = ($428|0)==(0);
        if (!($427)) {
         $510 = HEAP32[$__b>>2]|0;
         $511 = (($510) + 12|0);
         $512 = HEAP32[$511>>2]|0;
         $513 = (($510) + 16|0);
         $514 = HEAP32[$513>>2]|0;
         $515 = ($512|0)==($514|0);
         if ($515) {
          $516 = HEAP32[$510>>2]|0;
          $517 = (($516) + 36|0);
          $518 = HEAP32[$517>>2]|0;
          __THREW__ = 0;
          $519 = (invoke_ii($518|0,($510|0))|0);
          $520 = __THREW__; __THREW__ = 0;
          $521 = $520&1;
          if ($521) {
           label = 80;
           break L78;
          }
          $$pre270 = HEAP8[$__psn>>0]|0;
          $$pre3 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert = (($$pre3) + 12|0);
          $$pre4 = HEAP32[$$phi$trans$insert>>2]|0;
          $$phi$trans$insert5 = (($$pre3) + 16|0);
          $$pre6 = HEAP32[$$phi$trans$insert5>>2]|0;
          $$0$i$i106 = $519;$526 = $$pre270;$532 = $$pre3;$534 = $$pre4;$535 = $$pre6;
         } else {
          $522 = HEAP8[$512>>0]|0;
          $523 = $522&255;
          $$0$i$i106 = $523;$526 = $403;$532 = $510;$534 = $512;$535 = $514;
         }
         $524 = $$0$i$i106&255;
         $525 = $526 & 1;
         $527 = ($525<<24>>24)==(0);
         $528 = HEAP32[$202>>2]|0;
         $$284 = $527 ? $200 : $528;
         $529 = HEAP8[$$284>>0]|0;
         $530 = ($524<<24>>24)==($529<<24>>24);
         $531 = (($532) + 12|0);
         $533 = ($534|0)==($535|0);
         if ($530) {
          if ($533) {
           $536 = HEAP32[$532>>2]|0;
           $537 = (($536) + 40|0);
           $538 = HEAP32[$537>>2]|0;
           __THREW__ = 0;
           (invoke_ii($538|0,($532|0))|0);
           $539 = __THREW__; __THREW__ = 0;
           $540 = $539&1;
           if ($540) {
            label = 80;
            break L78;
           }
          } else {
           $541 = (($534) + 1|0);
           HEAP32[$531>>2] = $541;
          }
          $542 = HEAP8[$__psn>>0]|0;
          $543 = $542 & 1;
          $544 = ($543<<24>>24)==(0);
          if ($544) {
           $546 = $542&255;
           $547 = $546 >>> 1;
           $549 = $547;
          } else {
           $545 = HEAP32[$201>>2]|0;
           $549 = $545;
          }
          $548 = ($549>>>0)>(1);
          $__psn$__trailing_sign$05 = $548 ? $__psn : $__trailing_sign$0229;
          $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$05;
          break L98;
         }
         if ($533) {
          $550 = HEAP32[$532>>2]|0;
          $551 = (($550) + 36|0);
          $552 = HEAP32[$551>>2]|0;
          __THREW__ = 0;
          $553 = (invoke_ii($552|0,($532|0))|0);
          $554 = __THREW__; __THREW__ = 0;
          $555 = $554&1;
          if ($555) {
           label = 80;
           break L78;
          } else {
           $$0$i$i115 = $553;
          }
         } else {
          $556 = HEAP8[$534>>0]|0;
          $557 = $556&255;
          $$0$i$i115 = $557;
         }
         $558 = $$0$i$i115&255;
         $559 = HEAP8[$__nsn>>0]|0;
         $560 = $559 & 1;
         $561 = ($560<<24>>24)==(0);
         $562 = HEAP32[$199>>2]|0;
         $$285 = $561 ? $197 : $562;
         $563 = HEAP8[$$285>>0]|0;
         $564 = ($558<<24>>24)==($563<<24>>24);
         if (!($564)) {
          label = 197;
          break L78;
         }
         $565 = HEAP32[$__b>>2]|0;
         $566 = (($565) + 12|0);
         $567 = HEAP32[$566>>2]|0;
         $568 = (($565) + 16|0);
         $569 = HEAP32[$568>>2]|0;
         $570 = ($567|0)==($569|0);
         if ($570) {
          $571 = HEAP32[$565>>2]|0;
          $572 = (($571) + 40|0);
          $573 = HEAP32[$572>>2]|0;
          __THREW__ = 0;
          (invoke_ii($573|0,($565|0))|0);
          $574 = __THREW__; __THREW__ = 0;
          $575 = $574&1;
          if ($575) {
           label = 80;
           break L78;
          }
         } else {
          $576 = (($567) + 1|0);
          HEAP32[$566>>2] = $576;
         }
         HEAP8[$__neg>>0] = 1;
         $577 = HEAP8[$__nsn>>0]|0;
         $578 = $577 & 1;
         $579 = ($578<<24>>24)==(0);
         if ($579) {
          $581 = $577&255;
          $582 = $581 >>> 1;
          $584 = $582;
         } else {
          $580 = HEAP32[$198>>2]|0;
          $584 = $580;
         }
         $583 = ($584>>>0)>(1);
         $__nsn$__trailing_sign$06 = $583 ? $__nsn : $__trailing_sign$0229;
         $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$06;
         break L98;
        }
       }
       if ($405) {
        $430 = $403&255;
        $431 = $430 >>> 1;
        $433 = $431;
       } else {
        $429 = HEAP32[$201>>2]|0;
        $433 = $429;
       }
       $432 = ($433|0)==(0);
       $434 = HEAP32[$__b>>2]|0;
       $435 = (($434) + 12|0);
       $436 = HEAP32[$435>>2]|0;
       $437 = (($434) + 16|0);
       $438 = HEAP32[$437>>2]|0;
       $439 = ($436|0)==($438|0);
       if ($432) {
        if ($439) {
         $475 = HEAP32[$434>>2]|0;
         $476 = (($475) + 36|0);
         $477 = HEAP32[$476>>2]|0;
         __THREW__ = 0;
         $478 = (invoke_ii($477|0,($434|0))|0);
         $479 = __THREW__; __THREW__ = 0;
         $480 = $479&1;
         if ($480) {
          label = 80;
          break L78;
         }
         $$pre268 = HEAP8[$__nsn>>0]|0;
         $$0$i$i99 = $478;$485 = $$pre268;
        } else {
         $481 = HEAP8[$436>>0]|0;
         $482 = $481&255;
         $$0$i$i99 = $482;$485 = $409;
        }
        $483 = $$0$i$i99&255;
        $484 = $485 & 1;
        $486 = ($484<<24>>24)==(0);
        $487 = HEAP32[$199>>2]|0;
        $$283 = $486 ? $197 : $487;
        $488 = HEAP8[$$283>>0]|0;
        $489 = ($483<<24>>24)==($488<<24>>24);
        if (!($489)) {
         $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
         break L98;
        }
        $490 = HEAP32[$__b>>2]|0;
        $491 = (($490) + 12|0);
        $492 = HEAP32[$491>>2]|0;
        $493 = (($490) + 16|0);
        $494 = HEAP32[$493>>2]|0;
        $495 = ($492|0)==($494|0);
        if ($495) {
         $496 = HEAP32[$490>>2]|0;
         $497 = (($496) + 40|0);
         $498 = HEAP32[$497>>2]|0;
         __THREW__ = 0;
         (invoke_ii($498|0,($490|0))|0);
         $499 = __THREW__; __THREW__ = 0;
         $500 = $499&1;
         if ($500) {
          label = 80;
          break L78;
         }
        } else {
         $501 = (($492) + 1|0);
         HEAP32[$491>>2] = $501;
        }
        HEAP8[$__neg>>0] = 1;
        $502 = HEAP8[$__nsn>>0]|0;
        $503 = $502 & 1;
        $504 = ($503<<24>>24)==(0);
        if ($504) {
         $506 = $502&255;
         $507 = $506 >>> 1;
         $509 = $507;
        } else {
         $505 = HEAP32[$198>>2]|0;
         $509 = $505;
        }
        $508 = ($509>>>0)>(1);
        $__nsn$__trailing_sign$0 = $508 ? $__nsn : $__trailing_sign$0229;
        $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L98;
       }
       if ($439) {
        $440 = HEAP32[$434>>2]|0;
        $441 = (($440) + 36|0);
        $442 = HEAP32[$441>>2]|0;
        __THREW__ = 0;
        $443 = (invoke_ii($442|0,($434|0))|0);
        $444 = __THREW__; __THREW__ = 0;
        $445 = $444&1;
        if ($445) {
         label = 80;
         break L78;
        }
        $$pre269 = HEAP8[$__psn>>0]|0;
        $$0$i$i79 = $443;$450 = $$pre269;
       } else {
        $446 = HEAP8[$436>>0]|0;
        $447 = $446&255;
        $$0$i$i79 = $447;$450 = $403;
       }
       $448 = $$0$i$i79&255;
       $449 = $450 & 1;
       $451 = ($449<<24>>24)==(0);
       $452 = HEAP32[$202>>2]|0;
       $$ = $451 ? $200 : $452;
       $453 = HEAP8[$$>>0]|0;
       $454 = ($448<<24>>24)==($453<<24>>24);
       if (!($454)) {
        HEAP8[$__neg>>0] = 1;
        $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
        break L98;
       }
       $455 = HEAP32[$__b>>2]|0;
       $456 = (($455) + 12|0);
       $457 = HEAP32[$456>>2]|0;
       $458 = (($455) + 16|0);
       $459 = HEAP32[$458>>2]|0;
       $460 = ($457|0)==($459|0);
       if ($460) {
        $461 = HEAP32[$455>>2]|0;
        $462 = (($461) + 40|0);
        $463 = HEAP32[$462>>2]|0;
        __THREW__ = 0;
        (invoke_ii($463|0,($455|0))|0);
        $464 = __THREW__; __THREW__ = 0;
        $465 = $464&1;
        if ($465) {
         label = 80;
         break L78;
        }
       } else {
        $466 = (($457) + 1|0);
        HEAP32[$456>>2] = $466;
       }
       $467 = HEAP8[$__psn>>0]|0;
       $468 = $467 & 1;
       $469 = ($468<<24>>24)==(0);
       if ($469) {
        $471 = $467&255;
        $472 = $471 >>> 1;
        $474 = $472;
       } else {
        $470 = HEAP32[$201>>2]|0;
        $474 = $470;
       }
       $473 = ($474>>>0)>(1);
       $__psn$__trailing_sign$0 = $473 ? $__psn : $__trailing_sign$0229;
       $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $587 = ($__trailing_sign$0229|0)!=(0|0);
      $588 = ($__p$0227>>>0)<(2);
      $or$cond = $587 | $588;
      if (!($or$cond)) {
       $589 = ($__p$0227|0)==(2);
       if ($589) {
        $590 = HEAP8[$211>>0]|0;
        $591 = ($590<<24>>24)!=(0);
        $592 = $591;
       } else {
        $592 = 0;
       }
       $brmerge = $204 | $592;
       if (!($brmerge)) {
        $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = 0;
        break L98;
       }
      }
      $593 = HEAP8[$__sym>>0]|0;
      $594 = $593 & 1;
      $595 = ($594<<24>>24)==(0);
      $596 = HEAP32[$206>>2]|0;
      $$286 = $595 ? $205 : $596;
      $597 = ($__p$0227|0)==(0);
      L206: do {
       if ($597) {
        $$pre$i2$i$i150 = $__e$sroa$0$2;$646 = $593;$656 = $$286;$674 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
       } else {
        $598 = (($__p$0227) + -1)|0;
        $599 = (($__pat) + ($598)|0);
        $600 = HEAP8[$599>>0]|0;
        $switch = ($600&255)<(2);
        if ($switch) {
         $601 = $593&255;
         $602 = $601 >>> 1;
         $603 = HEAP32[$207>>2]|0;
         $$288 = $595 ? $602 : $603;
         $604 = (($$286) + ($$288)|0);
         $606 = $$286;
         while(1) {
          $605 = ($606|0)==($604|0);
          if ($605) {
           break;
          }
          $607 = HEAP8[$606>>0]|0;
          $isascii1$i156 = ($607<<24>>24)>(-1);
          if (!($isascii1$i156)) {
           break;
          }
          $608 = $607 << 24 >> 24;
          $609 = HEAP32[$196>>2]|0;
          $610 = (($609) + ($608<<1)|0);
          $611 = HEAP16[$610>>1]|0;
          $612 = $611 & 8192;
          $613 = ($612<<16>>16)==(0);
          $614 = (($606) + 1|0);
          if ($613) {
           break;
          } else {
           $606 = $614;
          }
         }
         $615 = $606;
         $616 = $$286;
         $617 = (($615) - ($616))|0;
         $618 = HEAP8[$__spaces>>0]|0;
         $619 = $618 & 1;
         $620 = ($619<<24>>24)==(0);
         if ($620) {
          $622 = $618&255;
          $623 = $622 >>> 1;
          $625 = $623;
         } else {
          $621 = HEAP32[$210>>2]|0;
          $625 = $621;
         }
         $624 = ($617>>>0)>($625>>>0);
         if ($624) {
          $$pre$i2$i$i150 = $__e$sroa$0$2;$646 = $593;$656 = $$286;$674 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
         } else {
          if ($620) {
           $629 = $618&255;
           $630 = $629 >>> 1;
           $$sum274 = (($630) - ($617))|0;
           $631 = ((($__spaces) + ($$sum274)|0) + 1|0);
           $633 = $208;$634 = $630;$636 = $631;
          } else {
           $626 = HEAP32[$209>>2]|0;
           $627 = HEAP32[$210>>2]|0;
           $$sum = (($627) - ($617))|0;
           $628 = (($626) + ($$sum)|0);
           $633 = $626;$634 = $627;$636 = $628;
          }
          $632 = (($633) + ($634)|0);
          $635 = ($636|0)==($632|0);
          if ($635) {
           $$pre$i2$i$i150 = $__e$sroa$0$2;$646 = $593;$656 = $606;$674 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
          } else {
           $638 = $636;$640 = $$286;
           while(1) {
            $637 = HEAP8[$638>>0]|0;
            $639 = HEAP8[$640>>0]|0;
            $641 = ($637<<24>>24)==($639<<24>>24);
            if (!($641)) {
             $$pre$i2$i$i150 = $__e$sroa$0$2;$646 = $593;$656 = $$286;$674 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L206;
            }
            $642 = (($638) + 1|0);
            $643 = (($640) + 1|0);
            $644 = ($642|0)==($632|0);
            if ($644) {
             $$pre$i2$i$i150 = $__e$sroa$0$2;$646 = $593;$656 = $606;$674 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break;
            } else {
             $638 = $642;$640 = $643;
            }
           }
          }
         }
        } else {
         $$pre$i2$i$i150 = $__e$sroa$0$2;$646 = $593;$656 = $$286;$674 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
        }
       }
      } while(0);
      L226: while(1) {
       $645 = $646 & 1;
       $647 = ($645<<24>>24)==(0);
       if ($647) {
        $650 = $646&255;
        $651 = $650 >>> 1;
        $653 = $205;$654 = $651;
       } else {
        $648 = HEAP32[$206>>2]|0;
        $649 = HEAP32[$207>>2]|0;
        $653 = $648;$654 = $649;
       }
       $652 = (($653) + ($654)|0);
       $655 = ($656|0)==($652|0);
       if ($655) {
        $1106 = $$pre$i2$i$i150;$__e$sroa$0$9 = $__e$sroa$0$6;
        break;
       }
       $657 = HEAP32[$__b>>2]|0;
       $658 = ($657|0)==(0|0);
       do {
        if ($658) {
         $672 = 0;
        } else {
         $659 = (($657) + 12|0);
         $660 = HEAP32[$659>>2]|0;
         $661 = (($657) + 16|0);
         $662 = HEAP32[$661>>2]|0;
         $663 = ($660|0)==($662|0);
         if ($663) {
          $664 = HEAP32[$657>>2]|0;
          $665 = (($664) + 36|0);
          $666 = HEAP32[$665>>2]|0;
          __THREW__ = 0;
          $667 = (invoke_ii($666|0,($657|0))|0);
          $668 = __THREW__; __THREW__ = 0;
          $669 = $668&1;
          if ($669) {
           label = 78;
           break L78;
          }
          $670 = ($667|0)==(-1);
          if ($670) {
           HEAP32[$__b>>2] = 0;
           $672 = 0;
           break;
          } else {
           $$pre$i$i$i146 = HEAP32[$__b>>2]|0;
           $672 = $$pre$i$i$i146;
           break;
          }
         } else {
          $672 = $657;
         }
        }
       } while(0);
       $671 = ($672|0)==(0|0);
       $673 = ($674|0)==(0|0);
       do {
        if ($673) {
         $$pre$i2$i$i150239 = $$pre$i2$i$i150;$__e$sroa$0$7 = $__e$sroa$0$6;
         label = 233;
        } else {
         $675 = (($674) + 12|0);
         $676 = HEAP32[$675>>2]|0;
         $677 = (($674) + 16|0);
         $678 = HEAP32[$677>>2]|0;
         $679 = ($676|0)==($678|0);
         if (!($679)) {
          if ($671) {
           $$pre$i2$i$i150238 = $$pre$i2$i$i150;$1107 = $674;$__e$sroa$0$8 = $__e$sroa$0$6;
           break;
          } else {
           $1106 = $$pre$i2$i$i150;$__e$sroa$0$9 = $__e$sroa$0$6;
           break L226;
          }
         }
         $680 = HEAP32[$674>>2]|0;
         $681 = (($680) + 36|0);
         $682 = HEAP32[$681>>2]|0;
         __THREW__ = 0;
         $683 = (invoke_ii($682|0,($674|0))|0);
         $684 = __THREW__; __THREW__ = 0;
         $685 = $684&1;
         if ($685) {
          label = 78;
          break L78;
         }
         $686 = ($683|0)==(-1);
         if ($686) {
          $$pre$i2$i$i150239 = 0;$__e$sroa$0$7 = 0;
          label = 233;
         } else {
          $687 = ($$pre$i2$i$i150|0)==(0|0);
          $tmp$i$i152 = $671 ^ $687;
          if ($tmp$i$i152) {
           $$pre$i2$i$i150238 = $$pre$i2$i$i150;$1107 = $$pre$i2$i$i150;$__e$sroa$0$8 = $__e$sroa$0$6;
          } else {
           $1106 = $$pre$i2$i$i150;$__e$sroa$0$9 = $__e$sroa$0$6;
           break L226;
          }
         }
        }
       } while(0);
       if ((label|0) == 233) {
        label = 0;
        if ($671) {
         $1106 = $$pre$i2$i$i150239;$__e$sroa$0$9 = $__e$sroa$0$7;
         break;
        } else {
         $$pre$i2$i$i150238 = $$pre$i2$i$i150239;$1107 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $688 = HEAP32[$__b>>2]|0;
       $689 = (($688) + 12|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = (($688) + 16|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ($690|0)==($692|0);
       if ($693) {
        $694 = HEAP32[$688>>2]|0;
        $695 = (($694) + 36|0);
        $696 = HEAP32[$695>>2]|0;
        __THREW__ = 0;
        $697 = (invoke_ii($696|0,($688|0))|0);
        $698 = __THREW__; __THREW__ = 0;
        $699 = $698&1;
        if ($699) {
         label = 78;
         break L78;
        } else {
         $$0$i$i142 = $697;
        }
       } else {
        $700 = HEAP8[$690>>0]|0;
        $701 = $700&255;
        $$0$i$i142 = $701;
       }
       $702 = $$0$i$i142&255;
       $703 = HEAP8[$656>>0]|0;
       $704 = ($702<<24>>24)==($703<<24>>24);
       if (!($704)) {
        $1106 = $$pre$i2$i$i150238;$__e$sroa$0$9 = $__e$sroa$0$8;
        break;
       }
       $705 = HEAP32[$__b>>2]|0;
       $706 = (($705) + 12|0);
       $707 = HEAP32[$706>>2]|0;
       $708 = (($705) + 16|0);
       $709 = HEAP32[$708>>2]|0;
       $710 = ($707|0)==($709|0);
       if ($710) {
        $711 = HEAP32[$705>>2]|0;
        $712 = (($711) + 40|0);
        $713 = HEAP32[$712>>2]|0;
        __THREW__ = 0;
        (invoke_ii($713|0,($705|0))|0);
        $714 = __THREW__; __THREW__ = 0;
        $715 = $714&1;
        if ($715) {
         label = 78;
         break L78;
        }
       } else {
        $716 = (($707) + 1|0);
        HEAP32[$706>>2] = $716;
       }
       $717 = (($656) + 1|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i150 = $$pre$i2$i$i150238;$646 = $$pre;$656 = $717;$674 = $1107;$__e$sroa$0$6 = $__e$sroa$0$8;
      }
      if ($204) {
       $718 = HEAP8[$__sym>>0]|0;
       $719 = $718 & 1;
       $720 = ($719<<24>>24)==(0);
       if ($720) {
        $723 = $718&255;
        $724 = $723 >>> 1;
        $726 = $205;$727 = $724;
       } else {
        $721 = HEAP32[$206>>2]|0;
        $722 = HEAP32[$207>>2]|0;
        $726 = $721;$727 = $722;
       }
       $725 = (($726) + ($727)|0);
       $728 = ($656|0)==($725|0);
       if ($728) {
        $1103 = $1106;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
       } else {
        label = 248;
        break L78;
       }
      } else {
       $1103 = $1106;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
      }
      break;
     }
     case 4:  {
      $$pre$i2$i$i133 = $__e$sroa$0$2;$748 = $__e$sroa$0$2;$801 = $1101;$__e$sroa$0$10 = $__e$sroa$0$2;$__ng$0 = 0;
      L266: while(1) {
       $731 = HEAP32[$__b>>2]|0;
       $732 = ($731|0)==(0|0);
       do {
        if ($732) {
         $746 = 0;
        } else {
         $733 = (($731) + 12|0);
         $734 = HEAP32[$733>>2]|0;
         $735 = (($731) + 16|0);
         $736 = HEAP32[$735>>2]|0;
         $737 = ($734|0)==($736|0);
         if ($737) {
          $738 = HEAP32[$731>>2]|0;
          $739 = (($738) + 36|0);
          $740 = HEAP32[$739>>2]|0;
          __THREW__ = 0;
          $741 = (invoke_ii($740|0,($731|0))|0);
          $742 = __THREW__; __THREW__ = 0;
          $743 = $742&1;
          if ($743) {
           label = 76;
           break L78;
          }
          $744 = ($741|0)==(-1);
          if ($744) {
           HEAP32[$__b>>2] = 0;
           $746 = 0;
           break;
          } else {
           $$pre$i$i$i129 = HEAP32[$__b>>2]|0;
           $746 = $$pre$i$i$i129;
           break;
          }
         } else {
          $746 = $731;
         }
        }
       } while(0);
       $745 = ($746|0)==(0|0);
       $747 = ($748|0)==(0|0);
       do {
        if ($747) {
         $1108 = $$pre$i2$i$i133;$__e$sroa$0$11 = $__e$sroa$0$10;
         label = 260;
        } else {
         $749 = (($748) + 12|0);
         $750 = HEAP32[$749>>2]|0;
         $751 = (($748) + 16|0);
         $752 = HEAP32[$751>>2]|0;
         $753 = ($750|0)==($752|0);
         if (!($753)) {
          if ($745) {
           $1109 = $$pre$i2$i$i133;$1110 = $748;$__e$sroa$0$12 = $__e$sroa$0$10;
           break;
          } else {
           $$pre$i2$i$i93 = $$pre$i2$i$i133;$__e$sroa$0$13 = $__e$sroa$0$10;
           break L266;
          }
         }
         $754 = HEAP32[$748>>2]|0;
         $755 = (($754) + 36|0);
         $756 = HEAP32[$755>>2]|0;
         __THREW__ = 0;
         $757 = (invoke_ii($756|0,($748|0))|0);
         $758 = __THREW__; __THREW__ = 0;
         $759 = $758&1;
         if ($759) {
          label = 76;
          break L78;
         }
         $760 = ($757|0)==(-1);
         if ($760) {
          $1108 = 0;$__e$sroa$0$11 = 0;
          label = 260;
         } else {
          $761 = ($$pre$i2$i$i133|0)==(0|0);
          $tmp$i$i135 = $745 ^ $761;
          if ($tmp$i$i135) {
           $1109 = $$pre$i2$i$i133;$1110 = $$pre$i2$i$i133;$__e$sroa$0$12 = $__e$sroa$0$10;
          } else {
           $$pre$i2$i$i93 = $$pre$i2$i$i133;$__e$sroa$0$13 = $__e$sroa$0$10;
           break L266;
          }
         }
        }
       } while(0);
       if ((label|0) == 260) {
        label = 0;
        if ($745) {
         $$pre$i2$i$i93 = $1108;$__e$sroa$0$13 = $__e$sroa$0$11;
         break;
        } else {
         $1109 = $1108;$1110 = 0;$__e$sroa$0$12 = $__e$sroa$0$11;
        }
       }
       $762 = HEAP32[$__b>>2]|0;
       $763 = (($762) + 12|0);
       $764 = HEAP32[$763>>2]|0;
       $765 = (($762) + 16|0);
       $766 = HEAP32[$765>>2]|0;
       $767 = ($764|0)==($766|0);
       if ($767) {
        $768 = HEAP32[$762>>2]|0;
        $769 = (($768) + 36|0);
        $770 = HEAP32[$769>>2]|0;
        __THREW__ = 0;
        $771 = (invoke_ii($770|0,($762|0))|0);
        $772 = __THREW__; __THREW__ = 0;
        $773 = $772&1;
        if ($773) {
         label = 76;
         break L78;
        } else {
         $$0$i$i125 = $771;
        }
       } else {
        $774 = HEAP8[$764>>0]|0;
        $775 = $774&255;
        $$0$i$i125 = $775;
       }
       $776 = $$0$i$i125&255;
       $isascii1$i123 = ($776<<24>>24)>(-1);
       if ($isascii1$i123) {
        $sext194 = $$0$i$i125 << 24;
        $777 = $sext194 >> 24;
        $778 = HEAP32[$196>>2]|0;
        $779 = (($778) + ($777<<1)|0);
        $780 = HEAP16[$779>>1]|0;
        $781 = $780 & 2048;
        $782 = ($781<<16>>16)==(0);
        if ($782) {
         label = 271;
        } else {
         $783 = HEAP32[$__wn>>2]|0;
         $784 = HEAP32[$10>>2]|0;
         $785 = ($783|0)==($784|0);
         if ($785) {
          __THREW__ = 0;
          invoke_viii(590,($__wb|0),($__wn|0),($10|0));
          $786 = __THREW__; __THREW__ = 0;
          $787 = $786&1;
          if ($787) {
           label = 76;
           break L78;
          }
          $$pre272 = HEAP32[$__wn>>2]|0;
          $789 = $$pre272;
         } else {
          $789 = $783;
         }
         $788 = (($789) + 1|0);
         HEAP32[$__wn>>2] = $788;
         HEAP8[$789>>0] = $776;
         $790 = (($__ng$0) + 1)|0;
         $1111 = $801;$__ng$1 = $790;
        }
       } else {
        label = 271;
       }
       if ((label|0) == 271) {
        label = 0;
        $791 = HEAP8[$__grp>>0]|0;
        $792 = $791 & 1;
        $793 = ($792<<24>>24)==(0);
        if ($793) {
         $795 = $791&255;
         $796 = $795 >>> 1;
         $797 = $796;
        } else {
         $794 = HEAP32[$212>>2]|0;
         $797 = $794;
        }
        $notlhs = ($797|0)!=(0);
        $notrhs = ($__ng$0|0)!=(0);
        $or$cond7$not = $notrhs & $notlhs;
        $798 = ($776<<24>>24)==($__ts$0<<24>>24);
        $or$cond292 = $or$cond7$not & $798;
        if (!($or$cond292)) {
         $$pre$i2$i$i93 = $1109;$__e$sroa$0$13 = $__e$sroa$0$12;
         break;
        }
        $799 = HEAP32[$__ge>>2]|0;
        $800 = ($801|0)==($799|0);
        if ($800) {
         __THREW__ = 0;
         invoke_viii(591,($__gb|0),($__gn|0),($__ge|0));
         $802 = __THREW__; __THREW__ = 0;
         $803 = $802&1;
         if ($803) {
          label = 76;
          break L78;
         }
         $$pre273 = HEAP32[$__gn>>2]|0;
         $805 = $$pre273;
        } else {
         $805 = $801;
        }
        $804 = (($805) + 4|0);
        HEAP32[$__gn>>2] = $804;
        HEAP32[$805>>2] = $__ng$0;
        $1111 = $804;$__ng$1 = 0;
       }
       $806 = HEAP32[$__b>>2]|0;
       $807 = (($806) + 12|0);
       $808 = HEAP32[$807>>2]|0;
       $809 = (($806) + 16|0);
       $810 = HEAP32[$809>>2]|0;
       $811 = ($808|0)==($810|0);
       if ($811) {
        $812 = HEAP32[$806>>2]|0;
        $813 = (($812) + 40|0);
        $814 = HEAP32[$813>>2]|0;
        __THREW__ = 0;
        (invoke_ii($814|0,($806|0))|0);
        $815 = __THREW__; __THREW__ = 0;
        $816 = $815&1;
        if ($816) {
         label = 76;
         break L78;
        } else {
         $$pre$i2$i$i133 = $1109;$748 = $1110;$801 = $1111;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $817 = (($808) + 1|0);
        HEAP32[$807>>2] = $817;
        $$pre$i2$i$i133 = $1109;$748 = $1110;$801 = $1111;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $818 = HEAP32[$__gb>>2]|0;
      $819 = ($818|0)==($801|0);
      $820 = ($__ng$0|0)==(0);
      $or$cond8 = $819 | $820;
      if ($or$cond8) {
       $1112 = $801;
      } else {
       $821 = HEAP32[$__ge>>2]|0;
       $822 = ($801|0)==($821|0);
       if ($822) {
        __THREW__ = 0;
        invoke_viii(591,($__gb|0),($__gn|0),($__ge|0));
        $823 = __THREW__; __THREW__ = 0;
        $824 = $823&1;
        if ($824) {
         label = 80;
         break L78;
        }
        $$pre271 = HEAP32[$__gn>>2]|0;
        $826 = $$pre271;
       } else {
        $826 = $801;
       }
       $825 = (($826) + 4|0);
       HEAP32[$__gn>>2] = $825;
       HEAP32[$826>>2] = $__ng$0;
       $1112 = $825;
      }
      $827 = ($__fd$0|0)>(0);
      if ($827) {
       $828 = HEAP32[$__b>>2]|0;
       $829 = ($828|0)==(0|0);
       do {
        if ($829) {
         $843 = 0;
        } else {
         $830 = (($828) + 12|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = (($828) + 16|0);
         $833 = HEAP32[$832>>2]|0;
         $834 = ($831|0)==($833|0);
         if ($834) {
          $835 = HEAP32[$828>>2]|0;
          $836 = (($835) + 36|0);
          $837 = HEAP32[$836>>2]|0;
          __THREW__ = 0;
          $838 = (invoke_ii($837|0,($828|0))|0);
          $839 = __THREW__; __THREW__ = 0;
          $840 = $839&1;
          if ($840) {
           label = 80;
           break L78;
          }
          $841 = ($838|0)==(-1);
          if ($841) {
           HEAP32[$__b>>2] = 0;
           $843 = 0;
           break;
          } else {
           $$pre$i$i$i89 = HEAP32[$__b>>2]|0;
           $843 = $$pre$i$i$i89;
           break;
          }
         } else {
          $843 = $828;
         }
        }
       } while(0);
       $842 = ($843|0)==(0|0);
       $844 = ($$pre$i2$i$i93|0)==(0|0);
       do {
        if ($844) {
         $__e$sroa$0$14 = $__e$sroa$0$13;
         label = 299;
        } else {
         $845 = (($$pre$i2$i$i93) + 12|0);
         $846 = HEAP32[$845>>2]|0;
         $847 = (($$pre$i2$i$i93) + 16|0);
         $848 = HEAP32[$847>>2]|0;
         $849 = ($846|0)==($848|0);
         if (!($849)) {
          if ($842) {
           $1114 = $$pre$i2$i$i93;$__e$sroa$0$15 = $__e$sroa$0$13;
           break;
          } else {
           label = 305;
           break L78;
          }
         }
         $850 = HEAP32[$$pre$i2$i$i93>>2]|0;
         $851 = (($850) + 36|0);
         $852 = HEAP32[$851>>2]|0;
         __THREW__ = 0;
         $853 = (invoke_ii($852|0,($$pre$i2$i$i93|0))|0);
         $854 = __THREW__; __THREW__ = 0;
         $855 = $854&1;
         if ($855) {
          label = 80;
          break L78;
         }
         $856 = ($853|0)==(-1);
         if ($856) {
          $__e$sroa$0$14 = 0;
          label = 299;
         } else {
          if ($842) {
           $1114 = $$pre$i2$i$i93;$__e$sroa$0$15 = $__e$sroa$0$13;
          } else {
           label = 305;
           break L78;
          }
         }
        }
       } while(0);
       if ((label|0) == 299) {
        label = 0;
        if ($842) {
         label = 305;
         break L78;
        } else {
         $1114 = 0;$__e$sroa$0$15 = $__e$sroa$0$14;
        }
       }
       $857 = HEAP32[$__b>>2]|0;
       $858 = (($857) + 12|0);
       $859 = HEAP32[$858>>2]|0;
       $860 = (($857) + 16|0);
       $861 = HEAP32[$860>>2]|0;
       $862 = ($859|0)==($861|0);
       if ($862) {
        $863 = HEAP32[$857>>2]|0;
        $864 = (($863) + 36|0);
        $865 = HEAP32[$864>>2]|0;
        __THREW__ = 0;
        $866 = (invoke_ii($865|0,($857|0))|0);
        $867 = __THREW__; __THREW__ = 0;
        $868 = $867&1;
        if ($868) {
         label = 80;
         break L78;
        } else {
         $$0$i$i82 = $866;
        }
       } else {
        $869 = HEAP8[$859>>0]|0;
        $870 = $869&255;
        $$0$i$i82 = $870;
       }
       $871 = $$0$i$i82&255;
       $872 = ($871<<24>>24)==($__dp$0<<24>>24);
       if (!($872)) {
        label = 305;
        break L78;
       }
       $875 = HEAP32[$__b>>2]|0;
       $876 = (($875) + 12|0);
       $877 = HEAP32[$876>>2]|0;
       $878 = (($875) + 16|0);
       $879 = HEAP32[$878>>2]|0;
       $880 = ($877|0)==($879|0);
       if ($880) {
        $881 = HEAP32[$875>>2]|0;
        $882 = (($881) + 40|0);
        $883 = HEAP32[$882>>2]|0;
        __THREW__ = 0;
        (invoke_ii($883|0,($875|0))|0);
        $884 = __THREW__; __THREW__ = 0;
        $885 = $884&1;
        if ($885) {
         label = 80;
         break L78;
        } else {
         $$pre$i2$i$i69 = $1114;$904 = $1114;$964 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
        }
       } else {
        $886 = (($877) + 1|0);
        HEAP32[$876>>2] = $886;
        $$pre$i2$i$i69 = $1114;$904 = $1114;$964 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
       }
       while(1) {
        $887 = HEAP32[$__b>>2]|0;
        $888 = ($887|0)==(0|0);
        do {
         if ($888) {
          $902 = 0;
         } else {
          $889 = (($887) + 12|0);
          $890 = HEAP32[$889>>2]|0;
          $891 = (($887) + 16|0);
          $892 = HEAP32[$891>>2]|0;
          $893 = ($890|0)==($892|0);
          if ($893) {
           $894 = HEAP32[$887>>2]|0;
           $895 = (($894) + 36|0);
           $896 = HEAP32[$895>>2]|0;
           __THREW__ = 0;
           $897 = (invoke_ii($896|0,($887|0))|0);
           $898 = __THREW__; __THREW__ = 0;
           $899 = $898&1;
           if ($899) {
            label = 77;
            break L78;
           }
           $900 = ($897|0)==(-1);
           if ($900) {
            HEAP32[$__b>>2] = 0;
            $902 = 0;
            break;
           } else {
            $$pre$i$i$i65 = HEAP32[$__b>>2]|0;
            $902 = $$pre$i$i$i65;
            break;
           }
          } else {
           $902 = $887;
          }
         }
        } while(0);
        $901 = ($902|0)==(0|0);
        $903 = ($904|0)==(0|0);
        do {
         if ($903) {
          $$pre$i2$i$i69242$ph = $$pre$i2$i$i69;$__e$sroa$0$17 = $__e$sroa$0$16;
          label = 320;
         } else {
          $905 = (($904) + 12|0);
          $906 = HEAP32[$905>>2]|0;
          $907 = (($904) + 16|0);
          $908 = HEAP32[$907>>2]|0;
          $909 = ($906|0)==($908|0);
          if (!($909)) {
           if ($901) {
            $$pre$i2$i$i69242278 = $$pre$i2$i$i69;$1115 = $904;$__e$sroa$0$18 = $__e$sroa$0$16;
            break;
           } else {
            label = 327;
            break L78;
           }
          }
          $910 = HEAP32[$904>>2]|0;
          $911 = (($910) + 36|0);
          $912 = HEAP32[$911>>2]|0;
          __THREW__ = 0;
          $913 = (invoke_ii($912|0,($904|0))|0);
          $914 = __THREW__; __THREW__ = 0;
          $915 = $914&1;
          if ($915) {
           label = 77;
           break L78;
          }
          $916 = ($913|0)==(-1);
          if ($916) {
           $$pre$i2$i$i69242$ph = 0;$__e$sroa$0$17 = 0;
           label = 320;
           break;
          }
          $917 = ($$pre$i2$i$i69|0)==(0|0);
          $tmp$i$i71 = $901 ^ $917;
          if ($tmp$i$i71) {
           $$pre$i2$i$i69242278 = $$pre$i2$i$i69;$1115 = $$pre$i2$i$i69;$__e$sroa$0$18 = $__e$sroa$0$16;
          } else {
           label = 327;
           break L78;
          }
         }
        } while(0);
        if ((label|0) == 320) {
         label = 0;
         if ($901) {
          label = 327;
          break L78;
         } else {
          $$pre$i2$i$i69242278 = $$pre$i2$i$i69242$ph;$1115 = 0;$__e$sroa$0$18 = $__e$sroa$0$17;
         }
        }
        $918 = HEAP32[$__b>>2]|0;
        $919 = (($918) + 12|0);
        $920 = HEAP32[$919>>2]|0;
        $921 = (($918) + 16|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = ($920|0)==($922|0);
        if ($923) {
         $924 = HEAP32[$918>>2]|0;
         $925 = (($924) + 36|0);
         $926 = HEAP32[$925>>2]|0;
         __THREW__ = 0;
         $927 = (invoke_ii($926|0,($918|0))|0);
         $928 = __THREW__; __THREW__ = 0;
         $929 = $928&1;
         if ($929) {
          label = 77;
          break L78;
         } else {
          $$0$i$i60 = $927;
         }
        } else {
         $930 = HEAP8[$920>>0]|0;
         $931 = $930&255;
         $$0$i$i60 = $931;
        }
        $932 = $$0$i$i60&255;
        $isascii1$i58 = ($932<<24>>24)>(-1);
        if (!($isascii1$i58)) {
         label = 327;
         break L78;
        }
        $sext = $$0$i$i60 << 24;
        $933 = $sext >> 24;
        $934 = HEAP32[$196>>2]|0;
        $935 = (($934) + ($933<<1)|0);
        $936 = HEAP16[$935>>1]|0;
        $937 = $936 & 2048;
        $938 = ($937<<16>>16)==(0);
        if ($938) {
         label = 327;
         break L78;
        }
        $941 = HEAP32[$__wn>>2]|0;
        $942 = HEAP32[$10>>2]|0;
        $943 = ($941|0)==($942|0);
        if ($943) {
         __THREW__ = 0;
         invoke_viii(590,($__wb|0),($__wn|0),($10|0));
         $944 = __THREW__; __THREW__ = 0;
         $945 = $944&1;
         if ($945) {
          label = 77;
          break L78;
         }
        }
        $946 = HEAP32[$__b>>2]|0;
        $947 = (($946) + 12|0);
        $948 = HEAP32[$947>>2]|0;
        $949 = (($946) + 16|0);
        $950 = HEAP32[$949>>2]|0;
        $951 = ($948|0)==($950|0);
        if ($951) {
         $952 = HEAP32[$946>>2]|0;
         $953 = (($952) + 36|0);
         $954 = HEAP32[$953>>2]|0;
         __THREW__ = 0;
         $955 = (invoke_ii($954|0,($946|0))|0);
         $956 = __THREW__; __THREW__ = 0;
         $957 = $956&1;
         if ($957) {
          label = 77;
          break L78;
         } else {
          $$0$i$i53 = $955;
         }
        } else {
         $958 = HEAP8[$948>>0]|0;
         $959 = $958&255;
         $$0$i$i53 = $959;
        }
        $960 = $$0$i$i53&255;
        $961 = HEAP32[$__wn>>2]|0;
        $962 = (($961) + 1|0);
        HEAP32[$__wn>>2] = $962;
        HEAP8[$961>>0] = $960;
        $963 = (($964) + -1)|0;
        $965 = HEAP32[$__b>>2]|0;
        $966 = (($965) + 12|0);
        $967 = HEAP32[$966>>2]|0;
        $968 = (($965) + 16|0);
        $969 = HEAP32[$968>>2]|0;
        $970 = ($967|0)==($969|0);
        if ($970) {
         $971 = HEAP32[$965>>2]|0;
         $972 = (($971) + 40|0);
         $973 = HEAP32[$972>>2]|0;
         __THREW__ = 0;
         (invoke_ii($973|0,($965|0))|0);
         $974 = __THREW__; __THREW__ = 0;
         $975 = $974&1;
         if ($975) {
          label = 77;
          break L78;
         }
        } else {
         $977 = (($967) + 1|0);
         HEAP32[$966>>2] = $977;
        }
        $976 = ($963|0)>(0);
        if ($976) {
         $$pre$i2$i$i69 = $$pre$i2$i$i69242278;$904 = $1115;$964 = $963;$__e$sroa$0$16 = $__e$sroa$0$18;
        } else {
         $1113 = $$pre$i2$i$i69242278;$__e$sroa$0$19 = $__e$sroa$0$18;$__fd$1 = $963;
         break;
        }
       }
      } else {
       $1113 = $$pre$i2$i$i93;$__e$sroa$0$19 = $__e$sroa$0$13;$__fd$1 = $__fd$0;
      }
      $978 = HEAP32[$__wn>>2]|0;
      $979 = HEAP32[$__wb>>2]|0;
      $980 = ($978|0)==($979|0);
      if ($980) {
       label = 338;
       break L78;
      } else {
       $1103 = $1113;$1104 = $1112;$__e$sroa$0$20 = $__e$sroa$0$19;$__fd$2 = $__fd$1;$__trailing_sign$1 = $__trailing_sign$0229;
      }
      break;
     }
     default: {
      $1103 = $__e$sroa$0$2;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
     }
     }
    } while(0);
    L386: do {
     if ((label|0) == 107) {
      label = 0;
      $332 = ($__p$0227|0)==(3);
      if ($332) {
       $1068 = $1101;$1102 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0229;
       label = 340;
       break L78;
      } else {
       $$pre$i2$i$i39 = $__e$sroa$0$2;$350 = $__e$sroa$0$2;$__e$sroa$0$3 = $__e$sroa$0$2;
      }
      while(1) {
       $333 = HEAP32[$__b>>2]|0;
       $334 = ($333|0)==(0|0);
       do {
        if ($334) {
         $348 = 0;
        } else {
         $335 = (($333) + 12|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = (($333) + 16|0);
         $338 = HEAP32[$337>>2]|0;
         $339 = ($336|0)==($338|0);
         if ($339) {
          $340 = HEAP32[$333>>2]|0;
          $341 = (($340) + 36|0);
          $342 = HEAP32[$341>>2]|0;
          __THREW__ = 0;
          $343 = (invoke_ii($342|0,($333|0))|0);
          $344 = __THREW__; __THREW__ = 0;
          $345 = $344&1;
          if ($345) {
           label = 79;
           break L78;
          }
          $346 = ($343|0)==(-1);
          if ($346) {
           HEAP32[$__b>>2] = 0;
           $348 = 0;
           break;
          } else {
           $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
           $348 = $$pre$i$i$i35;
           break;
          }
         } else {
          $348 = $333;
         }
        }
       } while(0);
       $347 = ($348|0)==(0|0);
       $349 = ($350|0)==(0|0);
       do {
        if ($349) {
         $$pre$i2$i$i39235 = $$pre$i2$i$i39;$__e$sroa$0$4 = $__e$sroa$0$3;
         label = 119;
        } else {
         $351 = (($350) + 12|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = (($350) + 16|0);
         $354 = HEAP32[$353>>2]|0;
         $355 = ($352|0)==($354|0);
         if (!($355)) {
          if ($347) {
           $$pre$i2$i$i39237 = $$pre$i2$i$i39;$1105 = $350;$__e$sroa$0$5 = $__e$sroa$0$3;
           break;
          } else {
           $1103 = $$pre$i2$i$i39;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
           break L386;
          }
         }
         $356 = HEAP32[$350>>2]|0;
         $357 = (($356) + 36|0);
         $358 = HEAP32[$357>>2]|0;
         __THREW__ = 0;
         $359 = (invoke_ii($358|0,($350|0))|0);
         $360 = __THREW__; __THREW__ = 0;
         $361 = $360&1;
         if ($361) {
          label = 79;
          break L78;
         }
         $362 = ($359|0)==(-1);
         if ($362) {
          $$pre$i2$i$i39235 = 0;$__e$sroa$0$4 = 0;
          label = 119;
         } else {
          $363 = ($$pre$i2$i$i39|0)==(0|0);
          $tmp$i$i41 = $347 ^ $363;
          if ($tmp$i$i41) {
           $$pre$i2$i$i39237 = $$pre$i2$i$i39;$1105 = $$pre$i2$i$i39;$__e$sroa$0$5 = $__e$sroa$0$3;
          } else {
           $1103 = $$pre$i2$i$i39;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
           break L386;
          }
         }
        }
       } while(0);
       if ((label|0) == 119) {
        label = 0;
        if ($347) {
         $1103 = $$pre$i2$i$i39235;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$4;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
         break L386;
        } else {
         $$pre$i2$i$i39237 = $$pre$i2$i$i39235;$1105 = 0;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       }
       $364 = HEAP32[$__b>>2]|0;
       $365 = (($364) + 12|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = (($364) + 16|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = ($366|0)==($368|0);
       if ($369) {
        $370 = HEAP32[$364>>2]|0;
        $371 = (($370) + 36|0);
        $372 = HEAP32[$371>>2]|0;
        __THREW__ = 0;
        $373 = (invoke_ii($372|0,($364|0))|0);
        $374 = __THREW__; __THREW__ = 0;
        $375 = $374&1;
        if ($375) {
         label = 79;
         break L78;
        } else {
         $$0$i$i45 = $373;
        }
       } else {
        $376 = HEAP8[$366>>0]|0;
        $377 = $376&255;
        $$0$i$i45 = $377;
       }
       $378 = $$0$i$i45&255;
       $isascii1$i48 = ($378<<24>>24)>(-1);
       if (!($isascii1$i48)) {
        $1103 = $$pre$i2$i$i39237;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
        break L386;
       }
       $sext195 = $$0$i$i45 << 24;
       $379 = $sext195 >> 24;
       $380 = HEAP32[$196>>2]|0;
       $381 = (($380) + ($379<<1)|0);
       $382 = HEAP16[$381>>1]|0;
       $383 = $382 & 8192;
       $384 = ($383<<16>>16)==(0);
       if ($384) {
        $1103 = $$pre$i2$i$i39237;$1104 = $1101;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0229;
        break L386;
       }
       $385 = HEAP32[$__b>>2]|0;
       $386 = (($385) + 12|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = (($385) + 16|0);
       $389 = HEAP32[$388>>2]|0;
       $390 = ($387|0)==($389|0);
       if ($390) {
        $391 = HEAP32[$385>>2]|0;
        $392 = (($391) + 40|0);
        $393 = HEAP32[$392>>2]|0;
        __THREW__ = 0;
        $394 = (invoke_ii($393|0,($385|0))|0);
        $395 = __THREW__; __THREW__ = 0;
        $396 = $395&1;
        if ($396) {
         label = 79;
         break L78;
        } else {
         $$0$i$i50 = $394;
        }
       } else {
        $397 = (($387) + 1|0);
        HEAP32[$386>>2] = $397;
        $398 = HEAP8[$387>>0]|0;
        $399 = $398&255;
        $$0$i$i50 = $399;
       }
       $400 = $$0$i$i50&255;
       __THREW__ = 0;
       invoke_vii(589,($__spaces|0),($400|0));
       $401 = __THREW__; __THREW__ = 0;
       $402 = $401&1;
       if ($402) {
        label = 79;
        break L78;
       } else {
        $$pre$i2$i$i39 = $$pre$i2$i$i39237;$350 = $1105;$__e$sroa$0$3 = $__e$sroa$0$5;
       }
      }
     }
    } while(0);
    $983 = (($__p$0227) + 1)|0;
    $984 = ($983>>>0)<(4);
    if ($984) {
     $1101 = $1104;$__e$sroa$0$0 = $__e$sroa$0$20;$__fd$0 = $__fd$2;$__p$0227 = $983;$__trailing_sign$0229 = $__trailing_sign$1;
    } else {
     $1068 = $1104;$1102 = $1103;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 340;
     break;
    }
   }
   L419:    switch (label|0) {
    case 76: {
     $247 = ___cxa_find_matching_catch()|0;
     $248 = tempRet0;
     $lpad$phi$index = $247;$lpad$phi$index17 = $248;
     break L76;
     break;
    }
    case 77: {
     $249 = ___cxa_find_matching_catch()|0;
     $250 = tempRet0;
     $lpad$phi$index = $249;$lpad$phi$index17 = $250;
     break L76;
     break;
    }
    case 78: {
     $251 = ___cxa_find_matching_catch()|0;
     $252 = tempRet0;
     $lpad$phi$index = $251;$lpad$phi$index17 = $252;
     break L76;
     break;
    }
    case 79: {
     $253 = ___cxa_find_matching_catch()|0;
     $254 = tempRet0;
     $lpad$phi$index = $253;$lpad$phi$index17 = $254;
     break L76;
     break;
    }
    case 80: {
     $255 = ___cxa_find_matching_catch()|0;
     $256 = tempRet0;
     $lpad$phi$index = $255;$lpad$phi$index17 = $256;
     break L76;
     break;
    }
    case 106: {
     $330 = HEAP32[$__err>>2]|0;
     $331 = $330 | 4;
     HEAP32[$__err>>2] = $331;
     $$0 = 0;
     break;
    }
    case 197: {
     $585 = HEAP32[$__err>>2]|0;
     $586 = $585 | 4;
     HEAP32[$__err>>2] = $586;
     $$0 = 0;
     break;
    }
    case 248: {
     $729 = HEAP32[$__err>>2]|0;
     $730 = $729 | 4;
     HEAP32[$__err>>2] = $730;
     $$0 = 0;
     break;
    }
    case 305: {
     $873 = HEAP32[$__err>>2]|0;
     $874 = $873 | 4;
     HEAP32[$__err>>2] = $874;
     $$0 = 0;
     break;
    }
    case 327: {
     $939 = HEAP32[$__err>>2]|0;
     $940 = $939 | 4;
     HEAP32[$__err>>2] = $940;
     $$0 = 0;
     break;
    }
    case 338: {
     $981 = HEAP32[$__err>>2]|0;
     $982 = $981 | 4;
     HEAP32[$__err>>2] = $982;
     $$0 = 0;
     break;
    }
    case 340: {
     $985 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L421: do {
      if (!($985)) {
       $986 = (($__trailing_sign$0$lcssa) + 1|0);
       $987 = (($__trailing_sign$0$lcssa) + 8|0);
       $988 = (($__trailing_sign$0$lcssa) + 4|0);
       $$pre$i2$i$i = $1102;$1014 = $1102;$__i$0 = 1;
       L423: while(1) {
        $989 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $990 = $989 & 1;
        $991 = ($990<<24>>24)==(0);
        if ($991) {
         $993 = $989&255;
         $994 = $993 >>> 1;
         $996 = $994;
        } else {
         $992 = HEAP32[$988>>2]|0;
         $996 = $992;
        }
        $995 = ($__i$0>>>0)<($996>>>0);
        if (!($995)) {
         break L421;
        }
        $997 = HEAP32[$__b>>2]|0;
        $998 = ($997|0)==(0|0);
        do {
         if ($998) {
          $1012 = 0;
         } else {
          $999 = (($997) + 12|0);
          $1000 = HEAP32[$999>>2]|0;
          $1001 = (($997) + 16|0);
          $1002 = HEAP32[$1001>>2]|0;
          $1003 = ($1000|0)==($1002|0);
          if ($1003) {
           $1004 = HEAP32[$997>>2]|0;
           $1005 = (($1004) + 36|0);
           $1006 = HEAP32[$1005>>2]|0;
           __THREW__ = 0;
           $1007 = (invoke_ii($1006|0,($997|0))|0);
           $1008 = __THREW__; __THREW__ = 0;
           $1009 = $1008&1;
           if ($1009) {
            label = 75;
            break L423;
           }
           $1010 = ($1007|0)==(-1);
           if ($1010) {
            HEAP32[$__b>>2] = 0;
            $1012 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $1012 = $$pre$i$i$i;
            break;
           }
          } else {
           $1012 = $997;
          }
         }
        } while(0);
        $1011 = ($1012|0)==(0|0);
        $1013 = ($1014|0)==(0|0);
        do {
         if ($1013) {
          $$pre$i2$i$i244$ph = $$pre$i2$i$i;
          label = 357;
         } else {
          $1015 = (($1014) + 12|0);
          $1016 = HEAP32[$1015>>2]|0;
          $1017 = (($1014) + 16|0);
          $1018 = HEAP32[$1017>>2]|0;
          $1019 = ($1016|0)==($1018|0);
          if (!($1019)) {
           if ($1011) {
            $$pre$i2$i$i244281 = $$pre$i2$i$i;$1116 = $1014;
            break;
           } else {
            label = 365;
            break L423;
           }
          }
          $1020 = HEAP32[$1014>>2]|0;
          $1021 = (($1020) + 36|0);
          $1022 = HEAP32[$1021>>2]|0;
          __THREW__ = 0;
          $1023 = (invoke_ii($1022|0,($1014|0))|0);
          $1024 = __THREW__; __THREW__ = 0;
          $1025 = $1024&1;
          if ($1025) {
           label = 75;
           break L423;
          }
          $1026 = ($1023|0)==(-1);
          if ($1026) {
           $$pre$i2$i$i244$ph = 0;
           label = 357;
          } else {
           $1027 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $1011 ^ $1027;
           if ($tmp$i$i) {
            $$pre$i2$i$i244281 = $$pre$i2$i$i;$1116 = $$pre$i2$i$i;
           } else {
            label = 365;
            break L423;
           }
          }
         }
        } while(0);
        if ((label|0) == 357) {
         label = 0;
         if ($1011) {
          label = 365;
          break;
         } else {
          $$pre$i2$i$i244281 = $$pre$i2$i$i244$ph;$1116 = 0;
         }
        }
        $1028 = HEAP32[$__b>>2]|0;
        $1029 = (($1028) + 12|0);
        $1030 = HEAP32[$1029>>2]|0;
        $1031 = (($1028) + 16|0);
        $1032 = HEAP32[$1031>>2]|0;
        $1033 = ($1030|0)==($1032|0);
        if ($1033) {
         $1034 = HEAP32[$1028>>2]|0;
         $1035 = (($1034) + 36|0);
         $1036 = HEAP32[$1035>>2]|0;
         __THREW__ = 0;
         $1037 = (invoke_ii($1036|0,($1028|0))|0);
         $1038 = __THREW__; __THREW__ = 0;
         $1039 = $1038&1;
         if ($1039) {
          label = 75;
          break;
         } else {
          $$0$i$i = $1037;
         }
        } else {
         $1040 = HEAP8[$1030>>0]|0;
         $1041 = $1040&255;
         $$0$i$i = $1041;
        }
        $1042 = $$0$i$i&255;
        $1043 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1044 = $1043 & 1;
        $1045 = ($1044<<24>>24)==(0);
        if ($1045) {
         $1048 = $986;
        } else {
         $1046 = HEAP32[$987>>2]|0;
         $1048 = $1046;
        }
        $1047 = (($1048) + ($__i$0)|0);
        $1049 = HEAP8[$1047>>0]|0;
        $1050 = ($1042<<24>>24)==($1049<<24>>24);
        if (!($1050)) {
         label = 365;
         break;
        }
        $1053 = (($__i$0) + 1)|0;
        $1054 = HEAP32[$__b>>2]|0;
        $1055 = (($1054) + 12|0);
        $1056 = HEAP32[$1055>>2]|0;
        $1057 = (($1054) + 16|0);
        $1058 = HEAP32[$1057>>2]|0;
        $1059 = ($1056|0)==($1058|0);
        if ($1059) {
         $1060 = HEAP32[$1054>>2]|0;
         $1061 = (($1060) + 40|0);
         $1062 = HEAP32[$1061>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1062|0,($1054|0))|0);
         $1063 = __THREW__; __THREW__ = 0;
         $1064 = $1063&1;
         if ($1064) {
          label = 75;
          break;
         } else {
          $$pre$i2$i$i = $$pre$i2$i$i244281;$1014 = $1116;$__i$0 = $1053;
          continue;
         }
        } else {
         $1065 = (($1056) + 1|0);
         HEAP32[$1055>>2] = $1065;
         $$pre$i2$i$i = $$pre$i2$i$i244281;$1014 = $1116;$__i$0 = $1053;
         continue;
        }
       }
       if ((label|0) == 75) {
        $245 = ___cxa_find_matching_catch()|0;
        $246 = tempRet0;
        $lpad$phi$index = $245;$lpad$phi$index17 = $246;
        break L76;
       }
       else if ((label|0) == 365) {
        $1051 = HEAP32[$__err>>2]|0;
        $1052 = $1051 | 4;
        HEAP32[$__err>>2] = $1052;
        $$0 = 0;
        break L419;
       }
      }
     } while(0);
     $1066 = HEAP32[$__gb>>2]|0;
     $1067 = ($1066|0)==($1068|0);
     if ($1067) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$1066,$1068,$__et);
      $1069 = HEAP32[$__et>>2]|0;
      $1070 = ($1069|0)==(0);
      if ($1070) {
       $$0 = 1;
      } else {
       $1071 = HEAP32[$__err>>2]|0;
       $1072 = $1071 | 4;
       HEAP32[$__err>>2] = $1072;
       $$0 = 0;
      }
     }
     break;
    }
   }
   $1073 = HEAP8[$__spaces>>0]|0;
   $1074 = $1073 & 1;
   $1075 = ($1074<<24>>24)==(0);
   if (!($1075)) {
    $1076 = HEAP32[$209>>2]|0;
    _free($1076);
   }
   $1077 = HEAP8[$__nsn>>0]|0;
   $1078 = $1077 & 1;
   $1079 = ($1078<<24>>24)==(0);
   if (!($1079)) {
    $1080 = HEAP32[$199>>2]|0;
    _free($1080);
   }
   $1081 = HEAP8[$__psn>>0]|0;
   $1082 = $1081 & 1;
   $1083 = ($1082<<24>>24)==(0);
   if (!($1083)) {
    $1084 = HEAP32[$202>>2]|0;
    _free($1084);
   }
   $1085 = HEAP8[$__sym>>0]|0;
   $1086 = $1085 & 1;
   $1087 = ($1086<<24>>24)==(0);
   if (!($1087)) {
    $1088 = HEAP32[$206>>2]|0;
    _free($1088);
   }
   $1089 = HEAP8[$__grp>>0]|0;
   $1090 = $1089 & 1;
   $1091 = ($1090<<24>>24)==(0);
   if (!($1091)) {
    $1092 = (($__grp) + 8|0);
    $1093 = HEAP32[$1092>>2]|0;
    _free($1093);
   }
   $1094 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $1095 = ($1094|0)==(0|0);
   if ($1095) {
    STACKTOP = sp;return ($$0|0);
   }
   $1096 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   invoke_vi($1096|0,($1094|0));
   $1097 = __THREW__; __THREW__ = 0;
   $1098 = $1097&1;
   if ($1098) {
    $1099 = ___cxa_find_matching_catch(0|0)|0;
    $1100 = tempRet0;
    ___clang_call_terminate($1099);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 81) {
   $257 = ___cxa_find_matching_catch()|0;
   $258 = tempRet0;
   $lpad$phi$index = $257;$lpad$phi$index17 = $258;
  }
 } while(0);
 $259 = HEAP8[$__spaces>>0]|0;
 $260 = $259 & 1;
 $261 = ($260<<24>>24)==(0);
 if (!($261)) {
  $262 = (($__spaces) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  _free($263);
 }
 $264 = HEAP8[$__nsn>>0]|0;
 $265 = $264 & 1;
 $266 = ($265<<24>>24)==(0);
 if (!($266)) {
  $267 = (($__nsn) + 8|0);
  $268 = HEAP32[$267>>2]|0;
  _free($268);
 }
 $269 = HEAP8[$__psn>>0]|0;
 $270 = $269 & 1;
 $271 = ($270<<24>>24)==(0);
 if (!($271)) {
  $272 = (($__psn) + 8|0);
  $273 = HEAP32[$272>>2]|0;
  _free($273);
 }
 $274 = HEAP8[$__sym>>0]|0;
 $275 = $274 & 1;
 $276 = ($275<<24>>24)==(0);
 if (!($276)) {
  $277 = (($__sym) + 8|0);
  $278 = HEAP32[$277>>2]|0;
  _free($278);
 }
 $279 = HEAP8[$__grp>>0]|0;
 $280 = $279 & 1;
 $281 = ($280<<24>>24)==(0);
 if (!($281)) {
  $282 = (($__grp) + 8|0);
  $283 = HEAP32[$282>>2]|0;
  _free($283);
 }
 $284 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $285 = ($284|0)==(0|0);
 if ($285) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $286 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_vi($286|0,($284|0));
 $287 = __THREW__; __THREW__ = 0;
 $288 = $287&1;
 if ($288) {
  $289 = ___cxa_find_matching_catch(0|0)|0;
  $290 = tempRet0;
  ___clang_call_terminate($289);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((20176 + 8|0));
 $1 = (($0) + 4|0);
 $2 = (_strlen(($msg|0))|0);
 $3 = (($2) + 13)|0;
 __THREW__ = 0;
 $4 = (invoke_ii(559,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($11|0);
  // unreachable;
 } else {
  $7 = (($2) + 1)|0;
  $8 = (($4) + 4|0);
  HEAP32[$8>>2] = $2;
  HEAP32[$4>>2] = $2;
  $9 = (($4) + 12|0);
  HEAP32[$1>>2] = $9;
  $10 = (($4) + 8|0);
  HEAP32[$10>>2] = 0;
  _memcpy(($9|0),($msg|0),($7|0))|0;
  ___cxa_throw(($0|0),(20384|0),(392|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$01$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__neg = 0, $__p$02$i = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i = 0, $scevgep$i = 0, $scevgep3$i = 0;
 var $scevgep4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__wbuf = sp + 16|0;
 $__wb = sp;
 $__wn = sp + 8|0;
 $__neg = sp + 12|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 586;
 $1 = (($__iob) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($4+1)|0);
 __THREW__ = 0;
 $5 = (invoke_iii(556,($2|0),(11752|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if (!($7)) {
   $8 = (($__wbuf) + 100|0);
   HEAP8[$__neg>>0] = 0;
   $9 = HEAP32[$__e>>2]|0;
   $10 = (($__iob) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $12 = (invoke_iiiiiiiiiiii(587,($__b|0),($9|0),($__intl|0),($2|0),($11|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($8|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    do {
     if ($12) {
      $15 = HEAP8[$__v>>0]|0;
      $16 = $15 & 1;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       $21 = (($__v) + 1|0);
       HEAP8[$21>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $18 = (($__v) + 8|0);
       $19 = HEAP32[$18>>2]|0;
       HEAP8[$19>>0] = 0;
       $20 = (($__v) + 4|0);
       HEAP32[$20>>2] = 0;
      }
      $22 = HEAP8[$__neg>>0]|0;
      $23 = ($22<<24>>24)==(0);
      if (!($23)) {
       $24 = HEAP32[$5>>2]|0;
       $25 = (($24) + 28|0);
       $26 = HEAP32[$25>>2]|0;
       __THREW__ = 0;
       $27 = (invoke_iii($26|0,($5|0),45)|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        break L1;
       }
       __THREW__ = 0;
       invoke_vii(589,($__v|0),($27|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break L1;
       }
      }
      $32 = HEAP32[$5>>2]|0;
      $33 = (($32) + 28|0);
      $34 = HEAP32[$33>>2]|0;
      __THREW__ = 0;
      $35 = (invoke_iii($34|0,($5|0),48)|0);
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break L1;
      }
      $38 = HEAP32[$__wb>>2]|0;
      $39 = HEAP32[$__wn>>2]|0;
      $40 = (($39) + -1|0);
      $41 = ($38>>>0)<($40>>>0);
      L15: do {
       if ($41) {
        $__w$05 = $38;
        while(1) {
         $44 = HEAP8[$__w$05>>0]|0;
         $45 = ($44<<24>>24)==($35<<24>>24);
         $43 = (($__w$05) + 1|0);
         if (!($45)) {
          $__w$0$lcssa = $__w$05;
          break L15;
         }
         $42 = ($43>>>0)<($40>>>0);
         if ($42) {
          $__w$05 = $43;
         } else {
          $__w$0$lcssa = $43;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $38;
       }
      } while(0);
      $46 = $__w$0$lcssa;
      $47 = HEAP8[$__v>>0]|0;
      $48 = $47 & 1;
      $49 = ($48<<24>>24)==(0);
      if ($49) {
       $50 = $47&255;
       $51 = $50 >>> 1;
       $146 = $47;$61 = 10;$62 = $51;
      } else {
       $52 = (($__v) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = HEAP32[$__v>>2]|0;
       $55 = $54 & -2;
       $phitmp$i$i = (($55) + -1)|0;
       $56 = $54&255;
       $146 = $56;$61 = $phitmp$i$i;$62 = $53;
      }
      $57 = $39;
      $58 = (($57) - ($46))|0;
      $59 = ($39|0)==($__w$0$lcssa|0);
      if (!($59)) {
       $60 = (($61) - ($62))|0;
       $63 = ($60>>>0)<($58>>>0);
       if ($63) {
        $64 = (($62) + ($58))|0;
        $65 = (($64) - ($61))|0;
        __THREW__ = 0;
        invoke_viiiiii(592,($__v|0),($61|0),($65|0),($62|0),($62|0),0);
        $66 = __THREW__; __THREW__ = 0;
        $67 = $66&1;
        if ($67) {
         break L1;
        }
        $$pre$i = HEAP8[$__v>>0]|0;
        $69 = $$pre$i;
       } else {
        $69 = $146;
       }
       $68 = $69 & 1;
       $70 = ($68<<24>>24)==(0);
       if ($70) {
        $73 = (($__v) + 1|0);
        $75 = $73;
       } else {
        $71 = (($__v) + 8|0);
        $72 = HEAP32[$71>>2]|0;
        $75 = $72;
       }
       $74 = (($75) + ($62)|0);
       $76 = (($62) - ($46))|0;
       $scevgep$i = (($39) + ($76)|0);
       $scevgep3$i = $scevgep$i;
       $$01$i = $__w$0$lcssa;$__p$02$i = $74;
       while(1) {
        $77 = HEAP8[$$01$i>>0]|0;
        HEAP8[$__p$02$i>>0] = $77;
        $78 = (($$01$i) + 1|0);
        $79 = ($78|0)==($39|0);
        if ($79) {
         break;
        }
        $80 = (($__p$02$i) + 1|0);
        $$01$i = $78;$__p$02$i = $80;
       }
       $scevgep4$i = (($75) + ($scevgep3$i)|0);
       HEAP8[$scevgep4$i>>0] = 0;
       $81 = (($62) + ($58))|0;
       $82 = HEAP8[$__v>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       if ($84) {
        $86 = $81 << 1;
        $87 = $86&255;
        HEAP8[$__v>>0] = $87;
        break;
       } else {
        $85 = (($__v) + 4|0);
        HEAP32[$85>>2] = $81;
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[$__b>>2]|0;
    $89 = ($88|0)==(0|0);
    if ($89) {
     $103 = 0;
    } else {
     $90 = (($88) + 12|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($88) + 16|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($91|0)==($93|0);
     if ($94) {
      $95 = HEAP32[$88>>2]|0;
      $96 = (($95) + 36|0);
      $97 = HEAP32[$96>>2]|0;
      __THREW__ = 0;
      $98 = (invoke_ii($97|0,($88|0))|0);
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       break;
      }
      $101 = ($98|0)==(-1);
      if ($101) {
       HEAP32[$__b>>2] = 0;
       $103 = 0;
      } else {
       $103 = $88;
      }
     } else {
      $103 = $88;
     }
    }
    $102 = ($103|0)==(0|0);
    $104 = ($9|0)==(0|0);
    do {
     if ($104) {
      label = 41;
     } else {
      $105 = (($9) + 12|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (($9) + 16|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($106|0)==($108|0);
      if (!($109)) {
       if ($102) {
        break;
       } else {
        label = 43;
        break;
       }
      }
      $110 = HEAP32[$9>>2]|0;
      $111 = (($110) + 36|0);
      $112 = HEAP32[$111>>2]|0;
      __THREW__ = 0;
      $113 = (invoke_ii($112|0,($9|0))|0);
      $114 = __THREW__; __THREW__ = 0;
      $115 = $114&1;
      if ($115) {
       break L1;
      }
      $116 = ($113|0)==(-1);
      if ($116) {
       HEAP32[$__e>>2] = 0;
       label = 41;
       break;
      } else {
       if ($102) {
        break;
       } else {
        label = 43;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 41) {
     if ($102) {
      label = 43;
     }
    }
    if ((label|0) == 43) {
     $117 = HEAP32[$__err>>2]|0;
     $118 = $117 | 2;
     HEAP32[$__err>>2] = $118;
    }
    HEAP32[$agg$result>>2] = $103;
    $119 = (($2) + 4|0);
    $120 = HEAP32[$119>>2]|0;HEAP32[$119>>2] = (($120+-1)|0);
    $121 = ($120|0)==(0);
    if ($121) {
     $122 = HEAP32[$2>>2]|0;
     $123 = (($122) + 8|0);
     $124 = HEAP32[$123>>2]|0;
     FUNCTION_TABLE_vi[$124 & 1023]($2);
    }
    $125 = HEAP32[$__wb>>2]|0;
    HEAP32[$__wb>>2] = 0;
    $126 = ($125|0)==(0|0);
    if ($126) {
     STACKTOP = sp;return;
    }
    $127 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($127|0,($125|0));
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     $130 = ___cxa_find_matching_catch(0|0)|0;
     $131 = tempRet0;
     ___clang_call_terminate($130);
     // unreachable;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $132 = ___cxa_find_matching_catch()|0;
 $133 = tempRet0;
 $134 = (($2) + 4|0);
 $135 = HEAP32[$134>>2]|0;HEAP32[$134>>2] = (($135+-1)|0);
 $136 = ($135|0)==(0);
 if ($136) {
  $137 = HEAP32[$2>>2]|0;
  $138 = (($137) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  FUNCTION_TABLE_vi[$139 & 1023]($2);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $140 = ($$pre|0)==(0|0);
 if ($140) {
  ___resumeException($132|0);
  // unreachable;
 }
 $141 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($141|0,($$pre|0));
 $142 = __THREW__; __THREW__ = 0;
 $143 = $142&1;
 if ($143) {
  $144 = ___cxa_find_matching_catch(0|0)|0;
  $145 = tempRet0;
  ___clang_call_terminate($144);
  // unreachable;
 } else {
  ___resumeException($132|0);
  // unreachable;
 }
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(586|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = (___cxa_allocate_exception(4)|0);
  HEAP32[$16>>2] = ((19952 + 8|0));
  ___cxa_throw(($16|0),(20008|0),(386|0));
  // unreachable;
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $24 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $24 = $14;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 593;
 $23 = (($24) + ($12)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($$)|0);
 HEAP32[$__e>>2] = $26;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(586|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = (___cxa_allocate_exception(4)|0);
  HEAP32[$17>>2] = ((19952 + 8|0));
  ___cxa_throw(($17|0),(20008|0),(386|0));
  // unreachable;
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $26 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $18 = ($$pr|0)==(0|0);
   if ($18) {
    $26 = $15;
   } else {
    $19 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($19|0,($$pr|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $26 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 593;
 $24 = $$ >>> 2;
 $25 = (($26) + ($13<<2)|0);
 HEAP32[$__n>>2] = $25;
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + ($24<<2)|0);
 HEAP32[$__e>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0;
 var $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__wbuf = sp + 64|0;
 $__wb = sp + 8|0;
 $__wn = sp + 16|0;
 $__neg = sp + 564|0;
 $__atoms = sp + 24|0;
 $__nbuf = sp + 464|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 586;
 $1 = (($__iob) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($4+1)|0);
 __THREW__ = 0;
 $5 = (invoke_iii(556,($2|0),(11744|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if ($7) {
   label = 10;
  } else {
   $8 = (($__wbuf) + 400|0);
   HEAP8[$__neg>>0] = 0;
   $9 = HEAP32[$__e>>2]|0;
   $10 = (($__iob) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $12 = (invoke_iiiiiiiiiiii(594,($__b|0),($9|0),($__intl|0),($2|0),($11|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($8|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 10;
   } else {
    if ($12) {
     $15 = HEAP32[$5>>2]|0;
     $16 = (($15) + 48|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($17|0,($5|0),(11464|0),(((11464 + 10|0))|0),($__atoms|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      label = 10;
      break;
     }
     $20 = HEAP32[$__wn>>2]|0;
     $21 = HEAP32[$__wb>>2]|0;
     $22 = $20;
     $23 = $21;
     $24 = (($22) - ($23))|0;
     $25 = ($24|0)>(392);
     if ($25) {
      $26 = $24 >> 2;
      $27 = (($26) + 2)|0;
      $28 = (_malloc($27)|0);
      $29 = ($28|0)==(0|0);
      if ($29) {
       $30 = (___cxa_allocate_exception(4)|0);
       HEAP32[$30>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($30|0),(20008|0),(386|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if ($32) {
        $33 = ___cxa_find_matching_catch()|0;
        $34 = tempRet0;
        $$0 = $33;$$01 = $34;
        break;
       } else {
        // unreachable;
       }
      } else {
       $39 = $28;$__nc$0 = $28;
      }
     } else {
      $39 = 0;$__nc$0 = $__nbuf;
     }
     $40 = HEAP8[$__neg>>0]|0;
     $41 = ($40<<24>>24)==(0);
     if ($41) {
      $__nc$1 = $__nc$0;
     } else {
      $42 = (($__nc$0) + 1|0);
      HEAP8[$__nc$0>>0] = 45;
      $__nc$1 = $42;
     }
     $43 = ($21>>>0)<($20>>>0);
     if ($43) {
      $44 = (($__atoms) + 40|0);
      $45 = $__atoms;
      $__nc$26 = $__nc$1;$__w$07 = $21;
      while(1) {
       $46 = HEAP32[$__w$07>>2]|0;
       $$01$i = $__atoms;
       while(1) {
        $49 = HEAP32[$$01$i>>2]|0;
        $50 = ($49|0)==($46|0);
        $48 = (($$01$i) + 4|0);
        if ($50) {
         $$0$lcssa$i = $$01$i;
         break;
        }
        $47 = ($48|0)==($44|0);
        if ($47) {
         $$0$lcssa$i = $44;
         break;
        } else {
         $$01$i = $48;
        }
       }
       $51 = $$0$lcssa$i;
       $52 = (($51) - ($45))|0;
       $53 = $52 >> 2;
       $54 = (11464 + ($53)|0);
       $55 = HEAP8[$54>>0]|0;
       HEAP8[$__nc$26>>0] = $55;
       $56 = (($__w$07) + 4|0);
       $57 = (($__nc$26) + 1|0);
       $58 = HEAP32[$__wn>>2]|0;
       $59 = ($56>>>0)<($58>>>0);
       if ($59) {
        $__nc$26 = $57;$__w$07 = $56;
       } else {
        $__nc$2$lcssa = $57;
        break;
       }
      }
     } else {
      $__nc$2$lcssa = $__nc$1;
     }
     HEAP8[$__nc$2$lcssa>>0] = 0;
     HEAP32[$vararg_buffer>>2] = $__v;
     $60 = (_sscanf($__nbuf,11400,$vararg_buffer)|0);
     $61 = ($60|0)==(1);
     if (!($61)) {
      __THREW__ = 0;
      invoke_vi(557,(11408|0));
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       $37 = ___cxa_find_matching_catch()|0;
       $38 = tempRet0;
       _free($39);
       $$0 = $37;$$01 = $38;
       break;
      }
     }
     _free($39);
    }
    $64 = HEAP32[$__b>>2]|0;
    $65 = ($64|0)==(0|0);
    if ($65) {
     $121 = 1;$96 = 0;
    } else {
     $66 = (($64) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($64) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$64>>2]|0;
      $72 = (($71) + 36|0);
      $73 = HEAP32[$72>>2]|0;
      __THREW__ = 0;
      $74 = (invoke_ii($73|0,($64|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 10;
       break;
      } else {
       $$0$i$i$i$i = $74;
      }
     } else {
      $77 = HEAP32[$67>>2]|0;
      $$0$i$i$i$i = $77;
     }
     $78 = ($$0$i$i$i$i|0)==(-1);
     if ($78) {
      HEAP32[$__b>>2] = 0;
      $121 = 1;$96 = 0;
     } else {
      $121 = 0;$96 = $64;
     }
    }
    $79 = HEAP32[$__e>>2]|0;
    $80 = ($79|0)==(0|0);
    do {
     if ($80) {
      label = 35;
     } else {
      $81 = (($79) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($79) + 16|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($82|0)==($84|0);
      if ($85) {
       $86 = HEAP32[$79>>2]|0;
       $87 = (($86) + 36|0);
       $88 = HEAP32[$87>>2]|0;
       __THREW__ = 0;
       $89 = (invoke_ii($88|0,($79|0))|0);
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        label = 10;
        break L1;
       } else {
        $$0$i$i1$i$i = $89;
       }
      } else {
       $92 = HEAP32[$82>>2]|0;
       $$0$i$i1$i$i = $92;
      }
      $93 = ($$0$i$i1$i$i|0)==(-1);
      if ($93) {
       HEAP32[$__e>>2] = 0;
       label = 35;
       break;
      } else {
       if ($121) {
        break;
       } else {
        label = 37;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 35) {
     if ($121) {
      label = 37;
     }
    }
    if ((label|0) == 37) {
     $94 = HEAP32[$__err>>2]|0;
     $95 = $94 | 2;
     HEAP32[$__err>>2] = $95;
    }
    HEAP32[$agg$result>>2] = $96;
    $97 = (($2) + 4|0);
    $98 = HEAP32[$97>>2]|0;HEAP32[$97>>2] = (($98+-1)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     $100 = HEAP32[$2>>2]|0;
     $101 = (($100) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     FUNCTION_TABLE_vi[$102 & 1023]($2);
    }
    $103 = HEAP32[$__wb>>2]|0;
    HEAP32[$__wb>>2] = 0;
    $104 = ($103|0)==(0|0);
    if ($104) {
     STACKTOP = sp;return;
    }
    $105 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($105|0,($103|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     $108 = ___cxa_find_matching_catch(0|0)|0;
     $109 = tempRet0;
     ___clang_call_terminate($108);
     // unreachable;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  $$0 = $35;$$01 = $36;
 }
 $110 = (($2) + 4|0);
 $111 = HEAP32[$110>>2]|0;HEAP32[$110>>2] = (($111+-1)|0);
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[$2>>2]|0;
  $114 = (($113) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  FUNCTION_TABLE_vi[$115 & 1023]($2);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $116 = ($$pre|0)==(0|0);
 if ($116) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $$pre16 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($$pre16|0,($$pre|0));
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 if ($118) {
  $119 = ___cxa_find_matching_catch(0|0)|0;
  $120 = tempRet0;
  ___clang_call_terminate($119);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e$0,$__intl,$__loc$0$0$val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__intl = $__intl|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i$i$i144 = 0, $$0$i$i$i$i169 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i78 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i118 = 0, $$0$i$i1$i$i150 = 0, $$0$i$i1$i$i175 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0, $$0$i$i1$i$i84 = 0, $$0$i$i105 = 0, $$0$i$i108 = 0, $$0$i$i130 = 0;
 var $$0$i$i141 = 0, $$0$i$i165 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i72 = 0, $$0$i$i75 = 0, $$0$i$i96 = 0, $$292 = 0, $$293 = 0, $$294 = 0, $$295 = 0, $$296 = 0, $$phi$trans$insert = 0, $$phi$trans$insert6 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i114 = 0;
 var $$pre$i$i$i146 = 0, $$pre$i$i$i171 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i80 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i120 = 0, $$pre$i3$i$i152 = 0, $$pre$i3$i$i177 = 0, $$pre$i3$i$i177258 = 0, $$pre$i3$i$i177259 = 0, $$pre$i3$i$i264$ph = 0, $$pre$i3$i$i264291 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47255 = 0, $$pre$i3$i$i47257 = 0, $$pre$i3$i$i86 = 0, $$pre$i3$i$i86262$ph = 0, $$pre$i3$i$i86262288 = 0, $$pre276 = 0;
 var $$pre277 = 0, $$pre278 = 0, $$pre279 = 0, $$pre280 = 0, $$pre281 = 0, $$pre282 = 0, $$pre283 = 0, $$pre4 = 0, $$pre5 = 0, $$pre7 = 0, $$sum = 0, $$sum284 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$11 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$14 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$17 = 0;
 var $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0;
 var $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0245 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0247 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0, $brmerge = 0, $cond = 0, $lpad$phi$index = 0;
 var $lpad$phi$index19 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond299 = 0, $or$cond7$not = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i115 = 0, $phitmp$i$i$i147 = 0, $phitmp$i$i$i172 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i81 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i153 = 0, $phitmp$i4$i$i178 = 0, $phitmp$i4$i$i48 = 0, $phitmp$i4$i$i87 = 0, $storemerge$i = 0;
 var $switch = 0, $tmp$i$i = 0, $tmp$i$i155 = 0, $tmp$i$i180 = 0, $tmp$i$i50 = 0, $tmp$i$i89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 592|0;
 $1 = sp + 580|0;
 $2 = sp + 568|0;
 $3 = sp + 556|0;
 $4 = sp + 544|0;
 $5 = sp + 540|0;
 $6 = sp + 528|0;
 $7 = sp + 516|0;
 $8 = sp + 504|0;
 $9 = sp + 492|0;
 $10 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 16|0;
 $__gn = sp;
 $__ge = sp + 4|0;
 $__pat = sp + 8|0;
 $__grp = sp + 24|0;
 $__sym = sp + 36|0;
 $__psn = sp + 48|0;
 $__nsn = sp + 60|0;
 $__spaces = sp + 72|0;
 $__et = sp + 84|0;
 HEAP32[$10>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $11 = (($__gb) + 4|0);
 HEAP32[$11>>2] = 586;
 HEAP32[$__gn>>2] = $__gbuf;
 $12 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $12;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 do {
  if ($__intl) {
   __THREW__ = 0;
   $13 = (invoke_iii(556,($__loc$0$0$val|0),(11336|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 83;
   } else {
    $16 = HEAP32[$13>>2]|0;
    $17 = (($16) + 44|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    invoke_vii($18|0,($0|0),($13|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 83;
    } else {
     $21 = HEAP32[$0>>2]|0;
     HEAP32[$__pat>>2] = $21;
     $22 = HEAP32[$13>>2]|0;
     $23 = (($22) + 32|0);
     $24 = HEAP32[$23>>2]|0;
     __THREW__ = 0;
     invoke_vii($24|0,($1|0),($13|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 83;
     } else {
      $27 = HEAP8[$__nsn>>0]|0;
      $28 = $27 & 1;
      $29 = ($28<<24>>24)==(0);
      if ($29) {
       $33 = (($__nsn) + 4|0);
       HEAP32[$33>>2] = 0;
       HEAP8[$__nsn>>0] = 0;
      } else {
       $30 = (($__nsn) + 8|0);
       $31 = HEAP32[$30>>2]|0;
       HEAP32[$31>>2] = 0;
       $32 = (($__nsn) + 4|0);
       HEAP32[$32>>2] = 0;
      }
      __THREW__ = 0;
      invoke_vi(595,($__nsn|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $36 = ___cxa_find_matching_catch(0|0)|0;
       $37 = tempRet0;
       ___clang_call_terminate($36);
       // unreachable;
      }
      ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      $38 = HEAP32[$13>>2]|0;
      $39 = (($38) + 28|0);
      $40 = HEAP32[$39>>2]|0;
      __THREW__ = 0;
      invoke_vii($40|0,($2|0),($13|0));
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 83;
      } else {
       $43 = HEAP8[$__psn>>0]|0;
       $44 = $43 & 1;
       $45 = ($44<<24>>24)==(0);
       if ($45) {
        $49 = (($__psn) + 4|0);
        HEAP32[$49>>2] = 0;
        HEAP8[$__psn>>0] = 0;
       } else {
        $46 = (($__psn) + 8|0);
        $47 = HEAP32[$46>>2]|0;
        HEAP32[$47>>2] = 0;
        $48 = (($__psn) + 4|0);
        HEAP32[$48>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(595,($__psn|0));
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        $52 = ___cxa_find_matching_catch(0|0)|0;
        $53 = tempRet0;
        ___clang_call_terminate($52);
        // unreachable;
       }
       ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
       ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
       $54 = HEAP32[$13>>2]|0;
       $55 = (($54) + 12|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_ii($56|0,($13|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        label = 83;
       } else {
        $60 = HEAP32[$13>>2]|0;
        $61 = (($60) + 16|0);
        $62 = HEAP32[$61>>2]|0;
        __THREW__ = 0;
        $63 = (invoke_ii($62|0,($13|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         label = 83;
        } else {
         $66 = HEAP32[$13>>2]|0;
         $67 = (($66) + 20|0);
         $68 = HEAP32[$67>>2]|0;
         __THREW__ = 0;
         invoke_vii($68|0,($3|0),($13|0));
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          label = 83;
         } else {
          $71 = HEAP8[$__grp>>0]|0;
          $72 = $71 & 1;
          $73 = ($72<<24>>24)==(0);
          if ($73) {
           $77 = (($__grp) + 1|0);
           HEAP8[$77>>0] = 0;
           HEAP8[$__grp>>0] = 0;
          } else {
           $74 = (($__grp) + 8|0);
           $75 = HEAP32[$74>>2]|0;
           HEAP8[$75>>0] = 0;
           $76 = (($__grp) + 4|0);
           HEAP32[$76>>2] = 0;
          }
          __THREW__ = 0;
          invoke_vi(588,($__grp|0));
          $78 = __THREW__; __THREW__ = 0;
          $79 = $78&1;
          if ($79) {
           $80 = ___cxa_find_matching_catch(0|0)|0;
           $81 = tempRet0;
           ___clang_call_terminate($80);
           // unreachable;
          }
          ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
          ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
          $82 = HEAP32[$13>>2]|0;
          $83 = (($82) + 24|0);
          $84 = HEAP32[$83>>2]|0;
          __THREW__ = 0;
          invoke_vii($84|0,($4|0),($13|0));
          $85 = __THREW__; __THREW__ = 0;
          $86 = $85&1;
          if ($86) {
           label = 83;
          } else {
           $87 = HEAP8[$__sym>>0]|0;
           $88 = $87 & 1;
           $89 = ($88<<24>>24)==(0);
           if ($89) {
            $93 = (($__sym) + 4|0);
            HEAP32[$93>>2] = 0;
            HEAP8[$__sym>>0] = 0;
           } else {
            $90 = (($__sym) + 8|0);
            $91 = HEAP32[$90>>2]|0;
            HEAP32[$91>>2] = 0;
            $92 = (($__sym) + 4|0);
            HEAP32[$92>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(595,($__sym|0));
           $94 = __THREW__; __THREW__ = 0;
           $95 = $94&1;
           if ($95) {
            $96 = ___cxa_find_matching_catch(0|0)|0;
            $97 = tempRet0;
            ___clang_call_terminate($96);
            // unreachable;
           } else {
            ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
            ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
            $98 = HEAP32[$13>>2]|0;
            $99 = (($98) + 36|0);
            $100 = HEAP32[$99>>2]|0;
            __THREW__ = 0;
            $101 = (invoke_ii($100|0,($13|0))|0);
            $102 = __THREW__; __THREW__ = 0;
            $103 = $102&1;
            if ($103) {
             label = 83;
             break;
            } else {
             $__dp$0 = $57;$__ts$0 = $63;$storemerge$i = $101;
             label = 60;
             break;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   __THREW__ = 0;
   $104 = (invoke_iii(556,($__loc$0$0$val|0),(11272|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    label = 83;
   } else {
    $107 = HEAP32[$104>>2]|0;
    $108 = (($107) + 44|0);
    $109 = HEAP32[$108>>2]|0;
    __THREW__ = 0;
    invoke_vii($109|0,($5|0),($104|0));
    $110 = __THREW__; __THREW__ = 0;
    $111 = $110&1;
    if ($111) {
     label = 83;
    } else {
     $112 = HEAP32[$5>>2]|0;
     HEAP32[$__pat>>2] = $112;
     $113 = HEAP32[$104>>2]|0;
     $114 = (($113) + 32|0);
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     invoke_vii($115|0,($6|0),($104|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 83;
     } else {
      $118 = HEAP8[$__nsn>>0]|0;
      $119 = $118 & 1;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $124 = (($__nsn) + 4|0);
       HEAP32[$124>>2] = 0;
       HEAP8[$__nsn>>0] = 0;
      } else {
       $121 = (($__nsn) + 8|0);
       $122 = HEAP32[$121>>2]|0;
       HEAP32[$122>>2] = 0;
       $123 = (($__nsn) + 4|0);
       HEAP32[$123>>2] = 0;
      }
      __THREW__ = 0;
      invoke_vi(595,($__nsn|0));
      $125 = __THREW__; __THREW__ = 0;
      $126 = $125&1;
      if ($126) {
       $127 = ___cxa_find_matching_catch(0|0)|0;
       $128 = tempRet0;
       ___clang_call_terminate($127);
       // unreachable;
      }
      ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
      ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $129 = HEAP32[$104>>2]|0;
      $130 = (($129) + 28|0);
      $131 = HEAP32[$130>>2]|0;
      __THREW__ = 0;
      invoke_vii($131|0,($7|0),($104|0));
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       label = 83;
      } else {
       $134 = HEAP8[$__psn>>0]|0;
       $135 = $134 & 1;
       $136 = ($135<<24>>24)==(0);
       if ($136) {
        $140 = (($__psn) + 4|0);
        HEAP32[$140>>2] = 0;
        HEAP8[$__psn>>0] = 0;
       } else {
        $137 = (($__psn) + 8|0);
        $138 = HEAP32[$137>>2]|0;
        HEAP32[$138>>2] = 0;
        $139 = (($__psn) + 4|0);
        HEAP32[$139>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(595,($__psn|0));
       $141 = __THREW__; __THREW__ = 0;
       $142 = $141&1;
       if ($142) {
        $143 = ___cxa_find_matching_catch(0|0)|0;
        $144 = tempRet0;
        ___clang_call_terminate($143);
        // unreachable;
       }
       ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
       ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
       $145 = HEAP32[$104>>2]|0;
       $146 = (($145) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_ii($147|0,($104|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        label = 83;
       } else {
        $151 = HEAP32[$104>>2]|0;
        $152 = (($151) + 16|0);
        $153 = HEAP32[$152>>2]|0;
        __THREW__ = 0;
        $154 = (invoke_ii($153|0,($104|0))|0);
        $155 = __THREW__; __THREW__ = 0;
        $156 = $155&1;
        if ($156) {
         label = 83;
        } else {
         $157 = HEAP32[$104>>2]|0;
         $158 = (($157) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         __THREW__ = 0;
         invoke_vii($159|0,($8|0),($104|0));
         $160 = __THREW__; __THREW__ = 0;
         $161 = $160&1;
         if ($161) {
          label = 83;
         } else {
          $162 = HEAP8[$__grp>>0]|0;
          $163 = $162 & 1;
          $164 = ($163<<24>>24)==(0);
          if ($164) {
           $168 = (($__grp) + 1|0);
           HEAP8[$168>>0] = 0;
           HEAP8[$__grp>>0] = 0;
          } else {
           $165 = (($__grp) + 8|0);
           $166 = HEAP32[$165>>2]|0;
           HEAP8[$166>>0] = 0;
           $167 = (($__grp) + 4|0);
           HEAP32[$167>>2] = 0;
          }
          __THREW__ = 0;
          invoke_vi(588,($__grp|0));
          $169 = __THREW__; __THREW__ = 0;
          $170 = $169&1;
          if ($170) {
           $171 = ___cxa_find_matching_catch(0|0)|0;
           $172 = tempRet0;
           ___clang_call_terminate($171);
           // unreachable;
          }
          ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
          ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
          $173 = HEAP32[$104>>2]|0;
          $174 = (($173) + 24|0);
          $175 = HEAP32[$174>>2]|0;
          __THREW__ = 0;
          invoke_vii($175|0,($9|0),($104|0));
          $176 = __THREW__; __THREW__ = 0;
          $177 = $176&1;
          if ($177) {
           label = 83;
          } else {
           $178 = HEAP8[$__sym>>0]|0;
           $179 = $178 & 1;
           $180 = ($179<<24>>24)==(0);
           if ($180) {
            $184 = (($__sym) + 4|0);
            HEAP32[$184>>2] = 0;
            HEAP8[$__sym>>0] = 0;
           } else {
            $181 = (($__sym) + 8|0);
            $182 = HEAP32[$181>>2]|0;
            HEAP32[$182>>2] = 0;
            $183 = (($__sym) + 4|0);
            HEAP32[$183>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(595,($__sym|0));
           $185 = __THREW__; __THREW__ = 0;
           $186 = $185&1;
           if ($186) {
            $187 = ___cxa_find_matching_catch(0|0)|0;
            $188 = tempRet0;
            ___clang_call_terminate($187);
            // unreachable;
           } else {
            ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
            ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
            $189 = HEAP32[$104>>2]|0;
            $190 = (($189) + 36|0);
            $191 = HEAP32[$190>>2]|0;
            __THREW__ = 0;
            $192 = (invoke_ii($191|0,($104|0))|0);
            $193 = __THREW__; __THREW__ = 0;
            $194 = $193&1;
            if ($194) {
             label = 83;
             break;
            } else {
             $__dp$0 = $148;$__ts$0 = $154;$storemerge$i = $192;
             label = 60;
             break;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 L76: do {
  if ((label|0) == 60) {
   $195 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $195;
   $196 = (($__nsn) + 4|0);
   $197 = (($__nsn) + 8|0);
   $198 = (($__psn) + 4|0);
   $199 = (($__psn) + 8|0);
   $200 = $__flags & 512;
   $201 = ($200|0)!=(0);
   $202 = (($__sym) + 4|0);
   $203 = (($__sym) + 8|0);
   $204 = (($__spaces) + 4|0);
   $205 = (($__spaces) + 8|0);
   $206 = (($__pat) + 3|0);
   $207 = (($__grp) + 4|0);
   $1080 = $__gbuf;$__e$sroa$0$0 = $__e$0;$__fd$0 = $storemerge$i;$__p$0245 = 0;$__trailing_sign$0247 = 0;
   L78: while(1) {
    $208 = HEAP32[$__b>>2]|0;
    $209 = ($208|0)==(0|0);
    do {
     if ($209) {
      $1081 = 1;
     } else {
      $210 = (($208) + 12|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = (($208) + 16|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = ($211|0)==($213|0);
      if ($214) {
       $215 = HEAP32[$208>>2]|0;
       $216 = (($215) + 36|0);
       $217 = HEAP32[$216>>2]|0;
       __THREW__ = 0;
       $218 = (invoke_ii($217|0,($208|0))|0);
       $219 = __THREW__; __THREW__ = 0;
       $220 = $219&1;
       if ($220) {
        label = 82;
        break L78;
       } else {
        $$0$i$i$i$i18 = $218;
       }
      } else {
       $221 = HEAP32[$211>>2]|0;
       $$0$i$i$i$i18 = $221;
      }
      $222 = ($$0$i$i$i$i18|0)==(-1);
      if ($222) {
       HEAP32[$__b>>2] = 0;
       $1081 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
       $1081 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    $223 = ($__e$sroa$0$0|0)==(0|0);
    if ($223) {
     label = 73;
    } else {
     $224 = (($__e$sroa$0$0) + 12|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($__e$sroa$0$0) + 16|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = ($225|0)==($227|0);
     if ($228) {
      $229 = HEAP32[$__e$sroa$0$0>>2]|0;
      $230 = (($229) + 36|0);
      $231 = HEAP32[$230>>2]|0;
      __THREW__ = 0;
      $232 = (invoke_ii($231|0,($__e$sroa$0$0|0))|0);
      $233 = __THREW__; __THREW__ = 0;
      $234 = $233&1;
      if ($234) {
       label = 82;
       break;
      } else {
       $$0$i$i1$i$i24 = $232;
      }
     } else {
      $235 = HEAP32[$225>>2]|0;
      $$0$i$i1$i$i24 = $235;
     }
     $236 = ($$0$i$i1$i$i24|0)==(-1);
     if ($236) {
      label = 73;
     } else {
      if ($1081) {
       $__e$sroa$0$2 = $__e$sroa$0$0;
      } else {
       $1047 = $1080;$1082 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
       label = 352;
       break;
      }
     }
    }
    if ((label|0) == 73) {
     label = 0;
     if ($1081) {
      $1047 = $1080;$1082 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
      label = 352;
      break;
     } else {
      $__e$sroa$0$2 = 0;
     }
    }
    $237 = (($__pat) + ($__p$0245)|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238 << 24 >> 24;
    L100: do {
     switch ($239|0) {
     case 0:  {
      label = 109;
      break;
     }
     case 1:  {
      $cond = ($__p$0245|0)==(3);
      if ($cond) {
       $1047 = $1080;$1082 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
       label = 352;
       break L78;
      }
      $288 = HEAP32[$__b>>2]|0;
      $289 = (($288) + 12|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 16|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = ($290|0)==($292|0);
      if ($293) {
       $294 = HEAP32[$288>>2]|0;
       $295 = (($294) + 36|0);
       $296 = HEAP32[$295>>2]|0;
       __THREW__ = 0;
       $297 = (invoke_ii($296|0,($288|0))|0);
       $298 = __THREW__; __THREW__ = 0;
       $299 = $298&1;
       if ($299) {
        label = 82;
        break L78;
       } else {
        $$0$i$i33 = $297;
       }
      } else {
       $300 = HEAP32[$290>>2]|0;
       $$0$i$i33 = $300;
      }
      $301 = HEAP32[$__ct>>2]|0;
      $302 = (($301) + 12|0);
      $303 = HEAP32[$302>>2]|0;
      __THREW__ = 0;
      $304 = (invoke_iiii($303|0,($__ct|0),8192,($$0$i$i33|0))|0);
      $305 = __THREW__; __THREW__ = 0;
      $306 = $305&1;
      if ($306) {
       label = 82;
       break L78;
      }
      if (!($304)) {
       label = 108;
       break L78;
      }
      $307 = HEAP32[$__b>>2]|0;
      $308 = (($307) + 12|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 16|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = ($309|0)==($311|0);
      if ($312) {
       $313 = HEAP32[$307>>2]|0;
       $314 = (($313) + 40|0);
       $315 = HEAP32[$314>>2]|0;
       __THREW__ = 0;
       $316 = (invoke_ii($315|0,($307|0))|0);
       $317 = __THREW__; __THREW__ = 0;
       $318 = $317&1;
       if ($318) {
        label = 82;
        break L78;
       } else {
        $$0$i$i37 = $316;
       }
      } else {
       $319 = (($309) + 4|0);
       HEAP32[$308>>2] = $319;
       $320 = HEAP32[$309>>2]|0;
       $$0$i$i37 = $320;
      }
      __THREW__ = 0;
      invoke_vii(596,($__spaces|0),($$0$i$i37|0));
      $321 = __THREW__; __THREW__ = 0;
      $322 = $321&1;
      if ($322) {
       label = 82;
       break L78;
      } else {
       label = 109;
      }
      break;
     }
     case 3:  {
      $392 = HEAP8[$__psn>>0]|0;
      $393 = $392 & 1;
      $394 = ($393<<24>>24)==(0);
      if ($394) {
       $396 = $392&255;
       $397 = $396 >>> 1;
       $407 = $397;
      } else {
       $395 = HEAP32[$198>>2]|0;
       $407 = $395;
      }
      $398 = HEAP8[$__nsn>>0]|0;
      $399 = $398 & 1;
      $400 = ($399<<24>>24)==(0);
      if ($400) {
       $402 = $398&255;
       $403 = $402 >>> 1;
       $405 = $403;
      } else {
       $401 = HEAP32[$196>>2]|0;
       $405 = $401;
      }
      $404 = (0 - ($405))|0;
      $406 = ($407|0)==($404|0);
      if ($406) {
       $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
      } else {
       if ($394) {
        $409 = $392&255;
        $410 = $409 >>> 1;
        $412 = $410;
       } else {
        $408 = HEAP32[$198>>2]|0;
        $412 = $408;
       }
       $411 = ($412|0)==(0);
       if (!($411)) {
        if ($400) {
         $414 = $398&255;
         $415 = $414 >>> 1;
         $417 = $415;
        } else {
         $413 = HEAP32[$196>>2]|0;
         $417 = $413;
        }
        $416 = ($417|0)==(0);
        if (!($416)) {
         $495 = HEAP32[$__b>>2]|0;
         $496 = (($495) + 12|0);
         $497 = HEAP32[$496>>2]|0;
         $498 = (($495) + 16|0);
         $499 = HEAP32[$498>>2]|0;
         $500 = ($497|0)==($499|0);
         if ($500) {
          $501 = HEAP32[$495>>2]|0;
          $502 = (($501) + 36|0);
          $503 = HEAP32[$502>>2]|0;
          __THREW__ = 0;
          $504 = (invoke_ii($503|0,($495|0))|0);
          $505 = __THREW__; __THREW__ = 0;
          $506 = $505&1;
          if ($506) {
           label = 82;
           break L78;
          }
          $$pre278 = HEAP8[$__psn>>0]|0;
          $$pre4 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert = (($$pre4) + 12|0);
          $$pre5 = HEAP32[$$phi$trans$insert>>2]|0;
          $$phi$trans$insert6 = (($$pre4) + 16|0);
          $$pre7 = HEAP32[$$phi$trans$insert6>>2]|0;
          $$0$i$i108 = $504;$509 = $$pre278;$515 = $$pre4;$517 = $$pre5;$518 = $$pre7;
         } else {
          $507 = HEAP32[$497>>2]|0;
          $$0$i$i108 = $507;$509 = $392;$515 = $495;$517 = $497;$518 = $499;
         }
         $508 = $509 & 1;
         $510 = ($508<<24>>24)==(0);
         $511 = HEAP32[$199>>2]|0;
         $$293 = $510 ? $198 : $511;
         $512 = HEAP32[$$293>>2]|0;
         $513 = ($$0$i$i108|0)==($512|0);
         $514 = (($515) + 12|0);
         $516 = ($517|0)==($518|0);
         if ($513) {
          if ($516) {
           $519 = HEAP32[$515>>2]|0;
           $520 = (($519) + 40|0);
           $521 = HEAP32[$520>>2]|0;
           __THREW__ = 0;
           (invoke_ii($521|0,($515|0))|0);
           $522 = __THREW__; __THREW__ = 0;
           $523 = $522&1;
           if ($523) {
            label = 82;
            break L78;
           }
          } else {
           $524 = (($517) + 4|0);
           HEAP32[$514>>2] = $524;
          }
          $525 = HEAP8[$__psn>>0]|0;
          $526 = $525 & 1;
          $527 = ($526<<24>>24)==(0);
          if ($527) {
           $529 = $525&255;
           $530 = $529 >>> 1;
           $532 = $530;
          } else {
           $528 = HEAP32[$198>>2]|0;
           $532 = $528;
          }
          $531 = ($532>>>0)>(1);
          $__psn$__trailing_sign$05 = $531 ? $__psn : $__trailing_sign$0247;
          $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$05;
          break L100;
         }
         if ($516) {
          $533 = HEAP32[$515>>2]|0;
          $534 = (($533) + 36|0);
          $535 = HEAP32[$534>>2]|0;
          __THREW__ = 0;
          $536 = (invoke_ii($535|0,($515|0))|0);
          $537 = __THREW__; __THREW__ = 0;
          $538 = $537&1;
          if ($538) {
           label = 82;
           break L78;
          } else {
           $$0$i$i130 = $536;
          }
         } else {
          $539 = HEAP32[$517>>2]|0;
          $$0$i$i130 = $539;
         }
         $540 = HEAP8[$__nsn>>0]|0;
         $541 = $540 & 1;
         $542 = ($541<<24>>24)==(0);
         $543 = HEAP32[$197>>2]|0;
         $$294 = $542 ? $196 : $543;
         $544 = HEAP32[$$294>>2]|0;
         $545 = ($$0$i$i130|0)==($544|0);
         if (!($545)) {
          label = 200;
          break L78;
         }
         $546 = HEAP32[$__b>>2]|0;
         $547 = (($546) + 12|0);
         $548 = HEAP32[$547>>2]|0;
         $549 = (($546) + 16|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = ($548|0)==($550|0);
         if ($551) {
          $552 = HEAP32[$546>>2]|0;
          $553 = (($552) + 40|0);
          $554 = HEAP32[$553>>2]|0;
          __THREW__ = 0;
          (invoke_ii($554|0,($546|0))|0);
          $555 = __THREW__; __THREW__ = 0;
          $556 = $555&1;
          if ($556) {
           label = 82;
           break L78;
          }
         } else {
          $557 = (($548) + 4|0);
          HEAP32[$547>>2] = $557;
         }
         HEAP8[$__neg>>0] = 1;
         $558 = HEAP8[$__nsn>>0]|0;
         $559 = $558 & 1;
         $560 = ($559<<24>>24)==(0);
         if ($560) {
          $562 = $558&255;
          $563 = $562 >>> 1;
          $565 = $563;
         } else {
          $561 = HEAP32[$196>>2]|0;
          $565 = $561;
         }
         $564 = ($565>>>0)>(1);
         $__nsn$__trailing_sign$06 = $564 ? $__nsn : $__trailing_sign$0247;
         $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$06;
         break L100;
        }
       }
       if ($394) {
        $419 = $392&255;
        $420 = $419 >>> 1;
        $422 = $420;
       } else {
        $418 = HEAP32[$198>>2]|0;
        $422 = $418;
       }
       $421 = ($422|0)==(0);
       $423 = HEAP32[$__b>>2]|0;
       $424 = (($423) + 12|0);
       $425 = HEAP32[$424>>2]|0;
       $426 = (($423) + 16|0);
       $427 = HEAP32[$426>>2]|0;
       $428 = ($425|0)==($427|0);
       if ($421) {
        if ($428) {
         $462 = HEAP32[$423>>2]|0;
         $463 = (($462) + 36|0);
         $464 = HEAP32[$463>>2]|0;
         __THREW__ = 0;
         $465 = (invoke_ii($464|0,($423|0))|0);
         $466 = __THREW__; __THREW__ = 0;
         $467 = $466&1;
         if ($467) {
          label = 82;
          break L78;
         }
         $$pre276 = HEAP8[$__nsn>>0]|0;
         $$0$i$i96 = $465;$470 = $$pre276;
        } else {
         $468 = HEAP32[$425>>2]|0;
         $$0$i$i96 = $468;$470 = $398;
        }
        $469 = $470 & 1;
        $471 = ($469<<24>>24)==(0);
        $472 = HEAP32[$197>>2]|0;
        $$292 = $471 ? $196 : $472;
        $473 = HEAP32[$$292>>2]|0;
        $474 = ($$0$i$i96|0)==($473|0);
        if (!($474)) {
         $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
         break L100;
        }
        $475 = HEAP32[$__b>>2]|0;
        $476 = (($475) + 12|0);
        $477 = HEAP32[$476>>2]|0;
        $478 = (($475) + 16|0);
        $479 = HEAP32[$478>>2]|0;
        $480 = ($477|0)==($479|0);
        if ($480) {
         $481 = HEAP32[$475>>2]|0;
         $482 = (($481) + 40|0);
         $483 = HEAP32[$482>>2]|0;
         __THREW__ = 0;
         (invoke_ii($483|0,($475|0))|0);
         $484 = __THREW__; __THREW__ = 0;
         $485 = $484&1;
         if ($485) {
          label = 82;
          break L78;
         }
        } else {
         $486 = (($477) + 4|0);
         HEAP32[$476>>2] = $486;
        }
        HEAP8[$__neg>>0] = 1;
        $487 = HEAP8[$__nsn>>0]|0;
        $488 = $487 & 1;
        $489 = ($488<<24>>24)==(0);
        if ($489) {
         $491 = $487&255;
         $492 = $491 >>> 1;
         $494 = $492;
        } else {
         $490 = HEAP32[$196>>2]|0;
         $494 = $490;
        }
        $493 = ($494>>>0)>(1);
        $__nsn$__trailing_sign$0 = $493 ? $__nsn : $__trailing_sign$0247;
        $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L100;
       }
       if ($428) {
        $429 = HEAP32[$423>>2]|0;
        $430 = (($429) + 36|0);
        $431 = HEAP32[$430>>2]|0;
        __THREW__ = 0;
        $432 = (invoke_ii($431|0,($423|0))|0);
        $433 = __THREW__; __THREW__ = 0;
        $434 = $433&1;
        if ($434) {
         label = 82;
         break L78;
        }
        $$pre277 = HEAP8[$__psn>>0]|0;
        $$0$i$i75 = $432;$437 = $$pre277;
       } else {
        $435 = HEAP32[$425>>2]|0;
        $$0$i$i75 = $435;$437 = $392;
       }
       $436 = $437 & 1;
       $438 = ($436<<24>>24)==(0);
       $439 = HEAP32[$199>>2]|0;
       $$ = $438 ? $198 : $439;
       $440 = HEAP32[$$>>2]|0;
       $441 = ($$0$i$i75|0)==($440|0);
       if (!($441)) {
        HEAP8[$__neg>>0] = 1;
        $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
        break L100;
       }
       $442 = HEAP32[$__b>>2]|0;
       $443 = (($442) + 12|0);
       $444 = HEAP32[$443>>2]|0;
       $445 = (($442) + 16|0);
       $446 = HEAP32[$445>>2]|0;
       $447 = ($444|0)==($446|0);
       if ($447) {
        $448 = HEAP32[$442>>2]|0;
        $449 = (($448) + 40|0);
        $450 = HEAP32[$449>>2]|0;
        __THREW__ = 0;
        (invoke_ii($450|0,($442|0))|0);
        $451 = __THREW__; __THREW__ = 0;
        $452 = $451&1;
        if ($452) {
         label = 82;
         break L78;
        }
       } else {
        $453 = (($444) + 4|0);
        HEAP32[$443>>2] = $453;
       }
       $454 = HEAP8[$__psn>>0]|0;
       $455 = $454 & 1;
       $456 = ($455<<24>>24)==(0);
       if ($456) {
        $458 = $454&255;
        $459 = $458 >>> 1;
        $461 = $459;
       } else {
        $457 = HEAP32[$198>>2]|0;
        $461 = $457;
       }
       $460 = ($461>>>0)>(1);
       $__psn$__trailing_sign$0 = $460 ? $__psn : $__trailing_sign$0247;
       $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $568 = ($__trailing_sign$0247|0)!=(0|0);
      $569 = ($__p$0245>>>0)<(2);
      $or$cond = $568 | $569;
      if (!($or$cond)) {
       $570 = ($__p$0245|0)==(2);
       if ($570) {
        $571 = HEAP8[$206>>0]|0;
        $572 = ($571<<24>>24)!=(0);
        $573 = $572;
       } else {
        $573 = 0;
       }
       $brmerge = $201 | $573;
       if (!($brmerge)) {
        $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = 0;
        break L100;
       }
      }
      $574 = HEAP8[$__sym>>0]|0;
      $575 = $574 & 1;
      $576 = ($575<<24>>24)==(0);
      $577 = HEAP32[$203>>2]|0;
      $$295 = $576 ? $202 : $577;
      $578 = ($__p$0245|0)==(0);
      L208: do {
       if ($578) {
        $$pre$i3$i$i177 = $__e$sroa$0$2;$638 = $574;$648 = $$295;$665 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
       } else {
        $579 = (($__p$0245) + -1)|0;
        $580 = (($__pat) + ($579)|0);
        $581 = HEAP8[$580>>0]|0;
        $switch = ($581&255)<(2);
        if ($switch) {
         $583 = $574;$593 = $$295;
         while(1) {
          $582 = $583 & 1;
          $584 = ($582<<24>>24)==(0);
          if ($584) {
           $587 = $583&255;
           $588 = $587 >>> 1;
           $590 = $202;$591 = $588;
          } else {
           $585 = HEAP32[$203>>2]|0;
           $586 = HEAP32[$202>>2]|0;
           $590 = $585;$591 = $586;
          }
          $589 = (($590) + ($591<<2)|0);
          $592 = ($593|0)==($589|0);
          if ($592) {
           $603 = $583;
           break;
          }
          $594 = HEAP32[$593>>2]|0;
          $595 = HEAP32[$__ct>>2]|0;
          $596 = (($595) + 12|0);
          $597 = HEAP32[$596>>2]|0;
          __THREW__ = 0;
          $598 = (invoke_iiii($597|0,($__ct|0),8192,($594|0))|0);
          $599 = __THREW__; __THREW__ = 0;
          $600 = $599&1;
          if ($600) {
           label = 79;
           break L78;
          }
          if (!($598)) {
           label = 214;
           break;
          }
          $601 = (($593) + 4|0);
          $$pre279 = HEAP8[$__sym>>0]|0;
          $583 = $$pre279;$593 = $601;
         }
         if ((label|0) == 214) {
          label = 0;
          $$pre280 = HEAP8[$__sym>>0]|0;
          $603 = $$pre280;
         }
         $602 = $603 & 1;
         $604 = ($602<<24>>24)==(0);
         $605 = HEAP32[$203>>2]|0;
         $$296 = $604 ? $202 : $605;
         $606 = $593;
         $607 = $$296;
         $608 = (($606) - ($607))|0;
         $609 = $608 >> 2;
         $610 = HEAP8[$__spaces>>0]|0;
         $611 = $610 & 1;
         $612 = ($611<<24>>24)==(0);
         if ($612) {
          $614 = $610&255;
          $615 = $614 >>> 1;
          $617 = $615;
         } else {
          $613 = HEAP32[$204>>2]|0;
          $617 = $613;
         }
         $616 = ($609>>>0)>($617>>>0);
         if ($616) {
          $$pre$i3$i$i177 = $__e$sroa$0$2;$638 = $603;$648 = $$296;$665 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
         } else {
          if ($612) {
           $621 = $610&255;
           $622 = $621 >>> 1;
           $$sum284 = (($622) - ($609))|0;
           $623 = (($204) + ($$sum284<<2)|0);
           $625 = $204;$626 = $622;$628 = $623;
          } else {
           $618 = HEAP32[$205>>2]|0;
           $619 = HEAP32[$204>>2]|0;
           $$sum = (($619) - ($609))|0;
           $620 = (($618) + ($$sum<<2)|0);
           $625 = $618;$626 = $619;$628 = $620;
          }
          $624 = (($625) + ($626<<2)|0);
          $627 = ($628|0)==($624|0);
          if ($627) {
           $$pre$i3$i$i177 = $__e$sroa$0$2;$638 = $603;$648 = $593;$665 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
          } else {
           $630 = $628;$632 = $$296;
           while(1) {
            $629 = HEAP32[$630>>2]|0;
            $631 = HEAP32[$632>>2]|0;
            $633 = ($629|0)==($631|0);
            if (!($633)) {
             $$pre$i3$i$i177 = $__e$sroa$0$2;$638 = $603;$648 = $$296;$665 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L208;
            }
            $634 = (($630) + 4|0);
            $635 = ($634|0)==($624|0);
            if ($635) {
             $$pre$i3$i$i177 = $__e$sroa$0$2;$638 = $603;$648 = $593;$665 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L208;
            }
            $636 = (($632) + 4|0);
            $630 = $634;$632 = $636;
           }
          }
         }
        } else {
         $$pre$i3$i$i177 = $__e$sroa$0$2;$638 = $574;$648 = $$295;$665 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
        }
       }
      } while(0);
      while(1) {
       $637 = $638 & 1;
       $639 = ($637<<24>>24)==(0);
       if ($639) {
        $642 = $638&255;
        $643 = $642 >>> 1;
        $645 = $202;$646 = $643;
       } else {
        $640 = HEAP32[$203>>2]|0;
        $641 = HEAP32[$202>>2]|0;
        $645 = $640;$646 = $641;
       }
       $644 = (($645) + ($646<<2)|0);
       $647 = ($648|0)==($644|0);
       if ($647) {
        $1086 = $$pre$i3$i$i177;$__e$sroa$0$9 = $__e$sroa$0$6;
        break;
       }
       $649 = HEAP32[$__b>>2]|0;
       $650 = ($649|0)==(0|0);
       do {
        if ($650) {
         $679 = 1;
        } else {
         $651 = (($649) + 12|0);
         $652 = HEAP32[$651>>2]|0;
         $653 = (($649) + 16|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = ($652|0)==($654|0);
         if ($655) {
          $656 = HEAP32[$649>>2]|0;
          $657 = (($656) + 36|0);
          $658 = HEAP32[$657>>2]|0;
          __THREW__ = 0;
          $659 = (invoke_ii($658|0,($649|0))|0);
          $660 = __THREW__; __THREW__ = 0;
          $661 = $660&1;
          if ($661) {
           label = 80;
           break L78;
          } else {
           $$0$i$i$i$i169 = $659;
          }
         } else {
          $662 = HEAP32[$652>>2]|0;
          $$0$i$i$i$i169 = $662;
         }
         $663 = ($$0$i$i$i$i169|0)==(-1);
         if ($663) {
          HEAP32[$__b>>2] = 0;
          $679 = 1;
          break;
         } else {
          $$pre$i$i$i171 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i172 = ($$pre$i$i$i171|0)==(0|0);
          $679 = $phitmp$i$i$i172;
          break;
         }
        }
       } while(0);
       $664 = ($665|0)==(0|0);
       if ($664) {
        $$pre$i3$i$i177259 = $$pre$i3$i$i177;$__e$sroa$0$7 = $__e$sroa$0$6;
        label = 242;
       } else {
        $666 = (($665) + 12|0);
        $667 = HEAP32[$666>>2]|0;
        $668 = (($665) + 16|0);
        $669 = HEAP32[$668>>2]|0;
        $670 = ($667|0)==($669|0);
        if ($670) {
         $671 = HEAP32[$665>>2]|0;
         $672 = (($671) + 36|0);
         $673 = HEAP32[$672>>2]|0;
         __THREW__ = 0;
         $674 = (invoke_ii($673|0,($665|0))|0);
         $675 = __THREW__; __THREW__ = 0;
         $676 = $675&1;
         if ($676) {
          label = 80;
          break L78;
         } else {
          $$0$i$i1$i$i175 = $674;
         }
        } else {
         $677 = HEAP32[$667>>2]|0;
         $$0$i$i1$i$i175 = $677;
        }
        $678 = ($$0$i$i1$i$i175|0)==(-1);
        if ($678) {
         $$pre$i3$i$i177259 = 0;$__e$sroa$0$7 = 0;
         label = 242;
        } else {
         $phitmp$i4$i$i178 = ($$pre$i3$i$i177|0)==(0|0);
         $tmp$i$i180 = $679 ^ $phitmp$i4$i$i178;
         if ($tmp$i$i180) {
          $$pre$i3$i$i177258 = $$pre$i3$i$i177;$1087 = $$pre$i3$i$i177;$__e$sroa$0$8 = $__e$sroa$0$6;
         } else {
          $1086 = $$pre$i3$i$i177;$__e$sroa$0$9 = $__e$sroa$0$6;
          break;
         }
        }
       }
       if ((label|0) == 242) {
        label = 0;
        if ($679) {
         $1086 = $$pre$i3$i$i177259;$__e$sroa$0$9 = $__e$sroa$0$7;
         break;
        } else {
         $$pre$i3$i$i177258 = $$pre$i3$i$i177259;$1087 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $680 = HEAP32[$__b>>2]|0;
       $681 = (($680) + 12|0);
       $682 = HEAP32[$681>>2]|0;
       $683 = (($680) + 16|0);
       $684 = HEAP32[$683>>2]|0;
       $685 = ($682|0)==($684|0);
       if ($685) {
        $686 = HEAP32[$680>>2]|0;
        $687 = (($686) + 36|0);
        $688 = HEAP32[$687>>2]|0;
        __THREW__ = 0;
        $689 = (invoke_ii($688|0,($680|0))|0);
        $690 = __THREW__; __THREW__ = 0;
        $691 = $690&1;
        if ($691) {
         label = 80;
         break L78;
        } else {
         $$0$i$i165 = $689;
        }
       } else {
        $692 = HEAP32[$682>>2]|0;
        $$0$i$i165 = $692;
       }
       $693 = HEAP32[$648>>2]|0;
       $694 = ($$0$i$i165|0)==($693|0);
       if (!($694)) {
        $1086 = $$pre$i3$i$i177258;$__e$sroa$0$9 = $__e$sroa$0$8;
        break;
       }
       $695 = HEAP32[$__b>>2]|0;
       $696 = (($695) + 12|0);
       $697 = HEAP32[$696>>2]|0;
       $698 = (($695) + 16|0);
       $699 = HEAP32[$698>>2]|0;
       $700 = ($697|0)==($699|0);
       if ($700) {
        $701 = HEAP32[$695>>2]|0;
        $702 = (($701) + 40|0);
        $703 = HEAP32[$702>>2]|0;
        __THREW__ = 0;
        (invoke_ii($703|0,($695|0))|0);
        $704 = __THREW__; __THREW__ = 0;
        $705 = $704&1;
        if ($705) {
         label = 80;
         break L78;
        }
       } else {
        $706 = (($697) + 4|0);
        HEAP32[$696>>2] = $706;
       }
       $707 = (($648) + 4|0);
       $$pre = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i177 = $$pre$i3$i$i177258;$638 = $$pre;$648 = $707;$665 = $1087;$__e$sroa$0$6 = $__e$sroa$0$8;
      }
      if ($201) {
       $708 = HEAP8[$__sym>>0]|0;
       $709 = $708 & 1;
       $710 = ($709<<24>>24)==(0);
       if ($710) {
        $713 = $708&255;
        $714 = $713 >>> 1;
        $716 = $202;$717 = $714;
       } else {
        $711 = HEAP32[$203>>2]|0;
        $712 = HEAP32[$202>>2]|0;
        $716 = $711;$717 = $712;
       }
       $715 = (($716) + ($717<<2)|0);
       $718 = ($648|0)==($715|0);
       if ($718) {
        $1083 = $1086;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
       } else {
        label = 257;
        break L78;
       }
      } else {
       $1083 = $1086;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
      }
      break;
     }
     case 4:  {
      $$pre$i3$i$i152 = $__e$sroa$0$2;$737 = $__e$sroa$0$2;$789 = $1080;$__e$sroa$0$10 = $__e$sroa$0$2;$__ng$0 = 0;
      while(1) {
       $721 = HEAP32[$__b>>2]|0;
       $722 = ($721|0)==(0|0);
       do {
        if ($722) {
         $751 = 1;
        } else {
         $723 = (($721) + 12|0);
         $724 = HEAP32[$723>>2]|0;
         $725 = (($721) + 16|0);
         $726 = HEAP32[$725>>2]|0;
         $727 = ($724|0)==($726|0);
         if ($727) {
          $728 = HEAP32[$721>>2]|0;
          $729 = (($728) + 36|0);
          $730 = HEAP32[$729>>2]|0;
          __THREW__ = 0;
          $731 = (invoke_ii($730|0,($721|0))|0);
          $732 = __THREW__; __THREW__ = 0;
          $733 = $732&1;
          if ($733) {
           label = 77;
           break L78;
          } else {
           $$0$i$i$i$i144 = $731;
          }
         } else {
          $734 = HEAP32[$724>>2]|0;
          $$0$i$i$i$i144 = $734;
         }
         $735 = ($$0$i$i$i$i144|0)==(-1);
         if ($735) {
          HEAP32[$__b>>2] = 0;
          $751 = 1;
          break;
         } else {
          $$pre$i$i$i146 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i147 = ($$pre$i$i$i146|0)==(0|0);
          $751 = $phitmp$i$i$i147;
          break;
         }
        }
       } while(0);
       $736 = ($737|0)==(0|0);
       if ($736) {
        $1088 = $$pre$i3$i$i152;$__e$sroa$0$11 = $__e$sroa$0$10;
        label = 270;
       } else {
        $738 = (($737) + 12|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = (($737) + 16|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = ($739|0)==($741|0);
        if ($742) {
         $743 = HEAP32[$737>>2]|0;
         $744 = (($743) + 36|0);
         $745 = HEAP32[$744>>2]|0;
         __THREW__ = 0;
         $746 = (invoke_ii($745|0,($737|0))|0);
         $747 = __THREW__; __THREW__ = 0;
         $748 = $747&1;
         if ($748) {
          label = 77;
          break L78;
         } else {
          $$0$i$i1$i$i150 = $746;
         }
        } else {
         $749 = HEAP32[$739>>2]|0;
         $$0$i$i1$i$i150 = $749;
        }
        $750 = ($$0$i$i1$i$i150|0)==(-1);
        if ($750) {
         $1088 = 0;$__e$sroa$0$11 = 0;
         label = 270;
        } else {
         $phitmp$i4$i$i153 = ($$pre$i3$i$i152|0)==(0|0);
         $tmp$i$i155 = $751 ^ $phitmp$i4$i$i153;
         if ($tmp$i$i155) {
          $1089 = $$pre$i3$i$i152;$1090 = $$pre$i3$i$i152;$__e$sroa$0$12 = $__e$sroa$0$10;
         } else {
          $$pre$i3$i$i120 = $$pre$i3$i$i152;$__e$sroa$0$13 = $__e$sroa$0$10;
          break;
         }
        }
       }
       if ((label|0) == 270) {
        label = 0;
        if ($751) {
         $$pre$i3$i$i120 = $1088;$__e$sroa$0$13 = $__e$sroa$0$11;
         break;
        } else {
         $1089 = $1088;$1090 = 0;$__e$sroa$0$12 = $__e$sroa$0$11;
        }
       }
       $752 = HEAP32[$__b>>2]|0;
       $753 = (($752) + 12|0);
       $754 = HEAP32[$753>>2]|0;
       $755 = (($752) + 16|0);
       $756 = HEAP32[$755>>2]|0;
       $757 = ($754|0)==($756|0);
       if ($757) {
        $758 = HEAP32[$752>>2]|0;
        $759 = (($758) + 36|0);
        $760 = HEAP32[$759>>2]|0;
        __THREW__ = 0;
        $761 = (invoke_ii($760|0,($752|0))|0);
        $762 = __THREW__; __THREW__ = 0;
        $763 = $762&1;
        if ($763) {
         label = 77;
         break L78;
        } else {
         $$0$i$i141 = $761;
        }
       } else {
        $764 = HEAP32[$754>>2]|0;
        $$0$i$i141 = $764;
       }
       $765 = HEAP32[$__ct>>2]|0;
       $766 = (($765) + 12|0);
       $767 = HEAP32[$766>>2]|0;
       __THREW__ = 0;
       $768 = (invoke_iiii($767|0,($__ct|0),2048,($$0$i$i141|0))|0);
       $769 = __THREW__; __THREW__ = 0;
       $770 = $769&1;
       if ($770) {
        label = 77;
        break L78;
       }
       if ($768) {
        $771 = HEAP32[$__wn>>2]|0;
        $772 = HEAP32[$10>>2]|0;
        $773 = ($771|0)==($772|0);
        if ($773) {
         __THREW__ = 0;
         invoke_viii(597,($__wb|0),($__wn|0),($10|0));
         $774 = __THREW__; __THREW__ = 0;
         $775 = $774&1;
         if ($775) {
          label = 77;
          break L78;
         }
         $$pre282 = HEAP32[$__wn>>2]|0;
         $777 = $$pre282;
        } else {
         $777 = $771;
        }
        $776 = (($777) + 4|0);
        HEAP32[$__wn>>2] = $776;
        HEAP32[$777>>2] = $$0$i$i141;
        $778 = (($__ng$0) + 1)|0;
        $1091 = $789;$__ng$1 = $778;
       } else {
        $779 = HEAP8[$__grp>>0]|0;
        $780 = $779 & 1;
        $781 = ($780<<24>>24)==(0);
        if ($781) {
         $783 = $779&255;
         $784 = $783 >>> 1;
         $785 = $784;
        } else {
         $782 = HEAP32[$207>>2]|0;
         $785 = $782;
        }
        $notlhs = ($785|0)!=(0);
        $notrhs = ($__ng$0|0)!=(0);
        $or$cond7$not = $notrhs & $notlhs;
        $786 = ($$0$i$i141|0)==($__ts$0|0);
        $or$cond299 = $or$cond7$not & $786;
        if (!($or$cond299)) {
         $$pre$i3$i$i120 = $1089;$__e$sroa$0$13 = $__e$sroa$0$12;
         break;
        }
        $787 = HEAP32[$__ge>>2]|0;
        $788 = ($789|0)==($787|0);
        if ($788) {
         __THREW__ = 0;
         invoke_viii(591,($__gb|0),($__gn|0),($__ge|0));
         $790 = __THREW__; __THREW__ = 0;
         $791 = $790&1;
         if ($791) {
          label = 77;
          break L78;
         }
         $$pre283 = HEAP32[$__gn>>2]|0;
         $793 = $$pre283;
        } else {
         $793 = $789;
        }
        $792 = (($793) + 4|0);
        HEAP32[$__gn>>2] = $792;
        HEAP32[$793>>2] = $__ng$0;
        $1091 = $792;$__ng$1 = 0;
       }
       $794 = HEAP32[$__b>>2]|0;
       $795 = (($794) + 12|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = (($794) + 16|0);
       $798 = HEAP32[$797>>2]|0;
       $799 = ($796|0)==($798|0);
       if ($799) {
        $800 = HEAP32[$794>>2]|0;
        $801 = (($800) + 40|0);
        $802 = HEAP32[$801>>2]|0;
        __THREW__ = 0;
        (invoke_ii($802|0,($794|0))|0);
        $803 = __THREW__; __THREW__ = 0;
        $804 = $803&1;
        if ($804) {
         label = 77;
         break L78;
        } else {
         $$pre$i3$i$i152 = $1089;$737 = $1090;$789 = $1091;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $805 = (($796) + 4|0);
        HEAP32[$795>>2] = $805;
        $$pre$i3$i$i152 = $1089;$737 = $1090;$789 = $1091;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $806 = HEAP32[$__gb>>2]|0;
      $807 = ($806|0)==($789|0);
      $808 = ($__ng$0|0)==(0);
      $or$cond8 = $807 | $808;
      if ($or$cond8) {
       $1092 = $789;
      } else {
       $809 = HEAP32[$__ge>>2]|0;
       $810 = ($789|0)==($809|0);
       if ($810) {
        __THREW__ = 0;
        invoke_viii(591,($__gb|0),($__gn|0),($__ge|0));
        $811 = __THREW__; __THREW__ = 0;
        $812 = $811&1;
        if ($812) {
         label = 82;
         break L78;
        }
        $$pre281 = HEAP32[$__gn>>2]|0;
        $814 = $$pre281;
       } else {
        $814 = $789;
       }
       $813 = (($814) + 4|0);
       HEAP32[$__gn>>2] = $813;
       HEAP32[$814>>2] = $__ng$0;
       $1092 = $813;
      }
      $815 = ($__fd$0|0)>(0);
      if ($815) {
       $816 = HEAP32[$__b>>2]|0;
       $817 = ($816|0)==(0|0);
       do {
        if ($817) {
         $1094 = 1;
        } else {
         $818 = (($816) + 12|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = (($816) + 16|0);
         $821 = HEAP32[$820>>2]|0;
         $822 = ($819|0)==($821|0);
         if ($822) {
          $823 = HEAP32[$816>>2]|0;
          $824 = (($823) + 36|0);
          $825 = HEAP32[$824>>2]|0;
          __THREW__ = 0;
          $826 = (invoke_ii($825|0,($816|0))|0);
          $827 = __THREW__; __THREW__ = 0;
          $828 = $827&1;
          if ($828) {
           label = 82;
           break L78;
          } else {
           $$0$i$i$i$i112 = $826;
          }
         } else {
          $829 = HEAP32[$819>>2]|0;
          $$0$i$i$i$i112 = $829;
         }
         $830 = ($$0$i$i$i$i112|0)==(-1);
         if ($830) {
          HEAP32[$__b>>2] = 0;
          $1094 = 1;
          break;
         } else {
          $$pre$i$i$i114 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i115 = ($$pre$i$i$i114|0)==(0|0);
          $1094 = $phitmp$i$i$i115;
          break;
         }
        }
       } while(0);
       $831 = ($$pre$i3$i$i120|0)==(0|0);
       if ($831) {
        $__e$sroa$0$14 = $__e$sroa$0$13;
        label = 310;
       } else {
        $832 = (($$pre$i3$i$i120) + 12|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = (($$pre$i3$i$i120) + 16|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ($833|0)==($835|0);
        if ($836) {
         $837 = HEAP32[$$pre$i3$i$i120>>2]|0;
         $838 = (($837) + 36|0);
         $839 = HEAP32[$838>>2]|0;
         __THREW__ = 0;
         $840 = (invoke_ii($839|0,($$pre$i3$i$i120|0))|0);
         $841 = __THREW__; __THREW__ = 0;
         $842 = $841&1;
         if ($842) {
          label = 82;
          break L78;
         } else {
          $$0$i$i1$i$i118 = $840;
         }
        } else {
         $843 = HEAP32[$833>>2]|0;
         $$0$i$i1$i$i118 = $843;
        }
        $844 = ($$0$i$i1$i$i118|0)==(-1);
        if ($844) {
         $__e$sroa$0$14 = 0;
         label = 310;
        } else {
         if ($1094) {
          $1095 = $$pre$i3$i$i120;$__e$sroa$0$15 = $__e$sroa$0$13;
         } else {
          label = 316;
          break L78;
         }
        }
       }
       if ((label|0) == 310) {
        label = 0;
        if ($1094) {
         label = 316;
         break L78;
        } else {
         $1095 = 0;$__e$sroa$0$15 = $__e$sroa$0$14;
        }
       }
       $845 = HEAP32[$__b>>2]|0;
       $846 = (($845) + 12|0);
       $847 = HEAP32[$846>>2]|0;
       $848 = (($845) + 16|0);
       $849 = HEAP32[$848>>2]|0;
       $850 = ($847|0)==($849|0);
       if ($850) {
        $851 = HEAP32[$845>>2]|0;
        $852 = (($851) + 36|0);
        $853 = HEAP32[$852>>2]|0;
        __THREW__ = 0;
        $854 = (invoke_ii($853|0,($845|0))|0);
        $855 = __THREW__; __THREW__ = 0;
        $856 = $855&1;
        if ($856) {
         label = 82;
         break L78;
        } else {
         $$0$i$i105 = $854;
        }
       } else {
        $857 = HEAP32[$847>>2]|0;
        $$0$i$i105 = $857;
       }
       $858 = ($$0$i$i105|0)==($__dp$0|0);
       if (!($858)) {
        label = 316;
        break L78;
       }
       $861 = HEAP32[$__b>>2]|0;
       $862 = (($861) + 12|0);
       $863 = HEAP32[$862>>2]|0;
       $864 = (($861) + 16|0);
       $865 = HEAP32[$864>>2]|0;
       $866 = ($863|0)==($865|0);
       if ($866) {
        $867 = HEAP32[$861>>2]|0;
        $868 = (($867) + 40|0);
        $869 = HEAP32[$868>>2]|0;
        __THREW__ = 0;
        (invoke_ii($869|0,($861|0))|0);
        $870 = __THREW__; __THREW__ = 0;
        $871 = $870&1;
        if ($871) {
         label = 82;
         break L78;
        } else {
         $$pre$i3$i$i86 = $1095;$889 = $1095;$946 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
        }
       } else {
        $872 = (($863) + 4|0);
        HEAP32[$862>>2] = $872;
        $$pre$i3$i$i86 = $1095;$889 = $1095;$946 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
       }
       while(1) {
        $873 = HEAP32[$__b>>2]|0;
        $874 = ($873|0)==(0|0);
        do {
         if ($874) {
          $903 = 1;
         } else {
          $875 = (($873) + 12|0);
          $876 = HEAP32[$875>>2]|0;
          $877 = (($873) + 16|0);
          $878 = HEAP32[$877>>2]|0;
          $879 = ($876|0)==($878|0);
          if ($879) {
           $880 = HEAP32[$873>>2]|0;
           $881 = (($880) + 36|0);
           $882 = HEAP32[$881>>2]|0;
           __THREW__ = 0;
           $883 = (invoke_ii($882|0,($873|0))|0);
           $884 = __THREW__; __THREW__ = 0;
           $885 = $884&1;
           if ($885) {
            label = 78;
            break L78;
           } else {
            $$0$i$i$i$i78 = $883;
           }
          } else {
           $886 = HEAP32[$876>>2]|0;
           $$0$i$i$i$i78 = $886;
          }
          $887 = ($$0$i$i$i$i78|0)==(-1);
          if ($887) {
           HEAP32[$__b>>2] = 0;
           $903 = 1;
           break;
          } else {
           $$pre$i$i$i80 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i81 = ($$pre$i$i$i80|0)==(0|0);
           $903 = $phitmp$i$i$i81;
           break;
          }
         }
        } while(0);
        $888 = ($889|0)==(0|0);
        if ($888) {
         $$pre$i3$i$i86262$ph = $$pre$i3$i$i86;$__e$sroa$0$17 = $__e$sroa$0$16;
         label = 332;
        } else {
         $890 = (($889) + 12|0);
         $891 = HEAP32[$890>>2]|0;
         $892 = (($889) + 16|0);
         $893 = HEAP32[$892>>2]|0;
         $894 = ($891|0)==($893|0);
         if ($894) {
          $895 = HEAP32[$889>>2]|0;
          $896 = (($895) + 36|0);
          $897 = HEAP32[$896>>2]|0;
          __THREW__ = 0;
          $898 = (invoke_ii($897|0,($889|0))|0);
          $899 = __THREW__; __THREW__ = 0;
          $900 = $899&1;
          if ($900) {
           label = 78;
           break L78;
          } else {
           $$0$i$i1$i$i84 = $898;
          }
         } else {
          $901 = HEAP32[$891>>2]|0;
          $$0$i$i1$i$i84 = $901;
         }
         $902 = ($$0$i$i1$i$i84|0)==(-1);
         if ($902) {
          $$pre$i3$i$i86262$ph = 0;$__e$sroa$0$17 = 0;
          label = 332;
         } else {
          $phitmp$i4$i$i87 = ($$pre$i3$i$i86|0)==(0|0);
          $tmp$i$i89 = $903 ^ $phitmp$i4$i$i87;
          if ($tmp$i$i89) {
           $$pre$i3$i$i86262288 = $$pre$i3$i$i86;$1096 = $$pre$i3$i$i86;$__e$sroa$0$18 = $__e$sroa$0$16;
          } else {
           label = 339;
           break L78;
          }
         }
        }
        if ((label|0) == 332) {
         label = 0;
         if ($903) {
          label = 339;
          break L78;
         } else {
          $$pre$i3$i$i86262288 = $$pre$i3$i$i86262$ph;$1096 = 0;$__e$sroa$0$18 = $__e$sroa$0$17;
         }
        }
        $904 = HEAP32[$__b>>2]|0;
        $905 = (($904) + 12|0);
        $906 = HEAP32[$905>>2]|0;
        $907 = (($904) + 16|0);
        $908 = HEAP32[$907>>2]|0;
        $909 = ($906|0)==($908|0);
        if ($909) {
         $910 = HEAP32[$904>>2]|0;
         $911 = (($910) + 36|0);
         $912 = HEAP32[$911>>2]|0;
         __THREW__ = 0;
         $913 = (invoke_ii($912|0,($904|0))|0);
         $914 = __THREW__; __THREW__ = 0;
         $915 = $914&1;
         if ($915) {
          label = 78;
          break L78;
         } else {
          $$0$i$i72 = $913;
         }
        } else {
         $916 = HEAP32[$906>>2]|0;
         $$0$i$i72 = $916;
        }
        $917 = HEAP32[$__ct>>2]|0;
        $918 = (($917) + 12|0);
        $919 = HEAP32[$918>>2]|0;
        __THREW__ = 0;
        $920 = (invoke_iiii($919|0,($__ct|0),2048,($$0$i$i72|0))|0);
        $921 = __THREW__; __THREW__ = 0;
        $922 = $921&1;
        if ($922) {
         label = 78;
         break L78;
        }
        if (!($920)) {
         label = 339;
         break L78;
        }
        $925 = HEAP32[$__wn>>2]|0;
        $926 = HEAP32[$10>>2]|0;
        $927 = ($925|0)==($926|0);
        if ($927) {
         __THREW__ = 0;
         invoke_viii(597,($__wb|0),($__wn|0),($10|0));
         $928 = __THREW__; __THREW__ = 0;
         $929 = $928&1;
         if ($929) {
          label = 78;
          break L78;
         }
        }
        $930 = HEAP32[$__b>>2]|0;
        $931 = (($930) + 12|0);
        $932 = HEAP32[$931>>2]|0;
        $933 = (($930) + 16|0);
        $934 = HEAP32[$933>>2]|0;
        $935 = ($932|0)==($934|0);
        if ($935) {
         $936 = HEAP32[$930>>2]|0;
         $937 = (($936) + 36|0);
         $938 = HEAP32[$937>>2]|0;
         __THREW__ = 0;
         $939 = (invoke_ii($938|0,($930|0))|0);
         $940 = __THREW__; __THREW__ = 0;
         $941 = $940&1;
         if ($941) {
          label = 78;
          break L78;
         } else {
          $$0$i$i64 = $939;
         }
        } else {
         $942 = HEAP32[$932>>2]|0;
         $$0$i$i64 = $942;
        }
        $943 = HEAP32[$__wn>>2]|0;
        $944 = (($943) + 4|0);
        HEAP32[$__wn>>2] = $944;
        HEAP32[$943>>2] = $$0$i$i64;
        $945 = (($946) + -1)|0;
        $947 = HEAP32[$__b>>2]|0;
        $948 = (($947) + 12|0);
        $949 = HEAP32[$948>>2]|0;
        $950 = (($947) + 16|0);
        $951 = HEAP32[$950>>2]|0;
        $952 = ($949|0)==($951|0);
        if ($952) {
         $953 = HEAP32[$947>>2]|0;
         $954 = (($953) + 40|0);
         $955 = HEAP32[$954>>2]|0;
         __THREW__ = 0;
         (invoke_ii($955|0,($947|0))|0);
         $956 = __THREW__; __THREW__ = 0;
         $957 = $956&1;
         if ($957) {
          label = 78;
          break L78;
         }
        } else {
         $959 = (($949) + 4|0);
         HEAP32[$948>>2] = $959;
        }
        $958 = ($945|0)>(0);
        if ($958) {
         $$pre$i3$i$i86 = $$pre$i3$i$i86262288;$889 = $1096;$946 = $945;$__e$sroa$0$16 = $__e$sroa$0$18;
        } else {
         $1093 = $$pre$i3$i$i86262288;$__e$sroa$0$19 = $__e$sroa$0$18;$__fd$1 = $945;
         break;
        }
       }
      } else {
       $1093 = $$pre$i3$i$i120;$__e$sroa$0$19 = $__e$sroa$0$13;$__fd$1 = $__fd$0;
      }
      $960 = HEAP32[$__wn>>2]|0;
      $961 = HEAP32[$__wb>>2]|0;
      $962 = ($960|0)==($961|0);
      if ($962) {
       label = 350;
       break L78;
      } else {
       $1083 = $1093;$1084 = $1092;$__e$sroa$0$20 = $__e$sroa$0$19;$__fd$2 = $__fd$1;$__trailing_sign$1 = $__trailing_sign$0247;
      }
      break;
     }
     default: {
      $1083 = $__e$sroa$0$2;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
     }
     }
    } while(0);
    L402: do {
     if ((label|0) == 109) {
      label = 0;
      $325 = ($__p$0245|0)==(3);
      if ($325) {
       $1047 = $1080;$1082 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0247;
       label = 352;
       break L78;
      } else {
       $$pre$i3$i$i47 = $__e$sroa$0$2;$342 = $__e$sroa$0$2;$__e$sroa$0$3 = $__e$sroa$0$2;
      }
      while(1) {
       $326 = HEAP32[$__b>>2]|0;
       $327 = ($326|0)==(0|0);
       do {
        if ($327) {
         $356 = 1;
        } else {
         $328 = (($326) + 12|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = (($326) + 16|0);
         $331 = HEAP32[$330>>2]|0;
         $332 = ($329|0)==($331|0);
         if ($332) {
          $333 = HEAP32[$326>>2]|0;
          $334 = (($333) + 36|0);
          $335 = HEAP32[$334>>2]|0;
          __THREW__ = 0;
          $336 = (invoke_ii($335|0,($326|0))|0);
          $337 = __THREW__; __THREW__ = 0;
          $338 = $337&1;
          if ($338) {
           label = 81;
           break L78;
          } else {
           $$0$i$i$i$i39 = $336;
          }
         } else {
          $339 = HEAP32[$329>>2]|0;
          $$0$i$i$i$i39 = $339;
         }
         $340 = ($$0$i$i$i$i39|0)==(-1);
         if ($340) {
          HEAP32[$__b>>2] = 0;
          $356 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
          $356 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       $341 = ($342|0)==(0|0);
       if ($341) {
        $$pre$i3$i$i47255 = $$pre$i3$i$i47;$__e$sroa$0$4 = $__e$sroa$0$3;
        label = 122;
       } else {
        $343 = (($342) + 12|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = (($342) + 16|0);
        $346 = HEAP32[$345>>2]|0;
        $347 = ($344|0)==($346|0);
        if ($347) {
         $348 = HEAP32[$342>>2]|0;
         $349 = (($348) + 36|0);
         $350 = HEAP32[$349>>2]|0;
         __THREW__ = 0;
         $351 = (invoke_ii($350|0,($342|0))|0);
         $352 = __THREW__; __THREW__ = 0;
         $353 = $352&1;
         if ($353) {
          label = 81;
          break L78;
         } else {
          $$0$i$i1$i$i45 = $351;
         }
        } else {
         $354 = HEAP32[$344>>2]|0;
         $$0$i$i1$i$i45 = $354;
        }
        $355 = ($$0$i$i1$i$i45|0)==(-1);
        if ($355) {
         $$pre$i3$i$i47255 = 0;$__e$sroa$0$4 = 0;
         label = 122;
        } else {
         $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
         $tmp$i$i50 = $356 ^ $phitmp$i4$i$i48;
         if ($tmp$i$i50) {
          $$pre$i3$i$i47257 = $$pre$i3$i$i47;$1085 = $$pre$i3$i$i47;$__e$sroa$0$5 = $__e$sroa$0$3;
         } else {
          $1083 = $$pre$i3$i$i47;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
          break L402;
         }
        }
       }
       if ((label|0) == 122) {
        label = 0;
        if ($356) {
         $1083 = $$pre$i3$i$i47255;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$4;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
         break L402;
        } else {
         $$pre$i3$i$i47257 = $$pre$i3$i$i47255;$1085 = 0;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       }
       $357 = HEAP32[$__b>>2]|0;
       $358 = (($357) + 12|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = (($357) + 16|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($359|0)==($361|0);
       if ($362) {
        $363 = HEAP32[$357>>2]|0;
        $364 = (($363) + 36|0);
        $365 = HEAP32[$364>>2]|0;
        __THREW__ = 0;
        $366 = (invoke_ii($365|0,($357|0))|0);
        $367 = __THREW__; __THREW__ = 0;
        $368 = $367&1;
        if ($368) {
         label = 81;
         break L78;
        } else {
         $$0$i$i54 = $366;
        }
       } else {
        $369 = HEAP32[$359>>2]|0;
        $$0$i$i54 = $369;
       }
       $370 = HEAP32[$__ct>>2]|0;
       $371 = (($370) + 12|0);
       $372 = HEAP32[$371>>2]|0;
       __THREW__ = 0;
       $373 = (invoke_iiii($372|0,($__ct|0),8192,($$0$i$i54|0))|0);
       $374 = __THREW__; __THREW__ = 0;
       $375 = $374&1;
       if ($375) {
        label = 81;
        break L78;
       }
       if (!($373)) {
        $1083 = $$pre$i3$i$i47257;$1084 = $1080;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0247;
        break L402;
       }
       $376 = HEAP32[$__b>>2]|0;
       $377 = (($376) + 12|0);
       $378 = HEAP32[$377>>2]|0;
       $379 = (($376) + 16|0);
       $380 = HEAP32[$379>>2]|0;
       $381 = ($378|0)==($380|0);
       if ($381) {
        $382 = HEAP32[$376>>2]|0;
        $383 = (($382) + 40|0);
        $384 = HEAP32[$383>>2]|0;
        __THREW__ = 0;
        $385 = (invoke_ii($384|0,($376|0))|0);
        $386 = __THREW__; __THREW__ = 0;
        $387 = $386&1;
        if ($387) {
         label = 81;
         break L78;
        } else {
         $$0$i$i59 = $385;
        }
       } else {
        $388 = (($378) + 4|0);
        HEAP32[$377>>2] = $388;
        $389 = HEAP32[$378>>2]|0;
        $$0$i$i59 = $389;
       }
       __THREW__ = 0;
       invoke_vii(596,($__spaces|0),($$0$i$i59|0));
       $390 = __THREW__; __THREW__ = 0;
       $391 = $390&1;
       if ($391) {
        label = 81;
        break L78;
       } else {
        $$pre$i3$i$i47 = $$pre$i3$i$i47257;$342 = $1085;$__e$sroa$0$3 = $__e$sroa$0$5;
       }
      }
     }
    } while(0);
    $965 = (($__p$0245) + 1)|0;
    $966 = ($965>>>0)<(4);
    if ($966) {
     $1080 = $1084;$__e$sroa$0$0 = $__e$sroa$0$20;$__fd$0 = $__fd$2;$__p$0245 = $965;$__trailing_sign$0247 = $__trailing_sign$1;
    } else {
     $1047 = $1084;$1082 = $1083;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 352;
     break;
    }
   }
   L437:    switch (label|0) {
    case 77: {
     $242 = ___cxa_find_matching_catch()|0;
     $243 = tempRet0;
     $lpad$phi$index = $242;$lpad$phi$index19 = $243;
     break L76;
     break;
    }
    case 78: {
     $244 = ___cxa_find_matching_catch()|0;
     $245 = tempRet0;
     $lpad$phi$index = $244;$lpad$phi$index19 = $245;
     break L76;
     break;
    }
    case 79: {
     $246 = ___cxa_find_matching_catch()|0;
     $247 = tempRet0;
     $lpad$phi$index = $246;$lpad$phi$index19 = $247;
     break L76;
     break;
    }
    case 80: {
     $248 = ___cxa_find_matching_catch()|0;
     $249 = tempRet0;
     $lpad$phi$index = $248;$lpad$phi$index19 = $249;
     break L76;
     break;
    }
    case 81: {
     $250 = ___cxa_find_matching_catch()|0;
     $251 = tempRet0;
     $lpad$phi$index = $250;$lpad$phi$index19 = $251;
     break L76;
     break;
    }
    case 82: {
     $252 = ___cxa_find_matching_catch()|0;
     $253 = tempRet0;
     $lpad$phi$index = $252;$lpad$phi$index19 = $253;
     break L76;
     break;
    }
    case 108: {
     $323 = HEAP32[$__err>>2]|0;
     $324 = $323 | 4;
     HEAP32[$__err>>2] = $324;
     $$0 = 0;
     break;
    }
    case 200: {
     $566 = HEAP32[$__err>>2]|0;
     $567 = $566 | 4;
     HEAP32[$__err>>2] = $567;
     $$0 = 0;
     break;
    }
    case 257: {
     $719 = HEAP32[$__err>>2]|0;
     $720 = $719 | 4;
     HEAP32[$__err>>2] = $720;
     $$0 = 0;
     break;
    }
    case 316: {
     $859 = HEAP32[$__err>>2]|0;
     $860 = $859 | 4;
     HEAP32[$__err>>2] = $860;
     $$0 = 0;
     break;
    }
    case 339: {
     $923 = HEAP32[$__err>>2]|0;
     $924 = $923 | 4;
     HEAP32[$__err>>2] = $924;
     $$0 = 0;
     break;
    }
    case 350: {
     $963 = HEAP32[$__err>>2]|0;
     $964 = $963 | 4;
     HEAP32[$__err>>2] = $964;
     $$0 = 0;
     break;
    }
    case 352: {
     $967 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L441: do {
      if (!($967)) {
       $968 = (($__trailing_sign$0$lcssa) + 4|0);
       $969 = (($__trailing_sign$0$lcssa) + 8|0);
       $$pre$i3$i$i = $1082;$994 = $1082;$__i$0 = 1;
       L443: while(1) {
        $970 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $971 = $970 & 1;
        $972 = ($971<<24>>24)==(0);
        if ($972) {
         $974 = $970&255;
         $975 = $974 >>> 1;
         $977 = $975;
        } else {
         $973 = HEAP32[$968>>2]|0;
         $977 = $973;
        }
        $976 = ($__i$0>>>0)<($977>>>0);
        if (!($976)) {
         break L441;
        }
        $978 = HEAP32[$__b>>2]|0;
        $979 = ($978|0)==(0|0);
        do {
         if ($979) {
          $1008 = 1;
         } else {
          $980 = (($978) + 12|0);
          $981 = HEAP32[$980>>2]|0;
          $982 = (($978) + 16|0);
          $983 = HEAP32[$982>>2]|0;
          $984 = ($981|0)==($983|0);
          if ($984) {
           $985 = HEAP32[$978>>2]|0;
           $986 = (($985) + 36|0);
           $987 = HEAP32[$986>>2]|0;
           __THREW__ = 0;
           $988 = (invoke_ii($987|0,($978|0))|0);
           $989 = __THREW__; __THREW__ = 0;
           $990 = $989&1;
           if ($990) {
            label = 76;
            break L443;
           } else {
            $$0$i$i$i$i = $988;
           }
          } else {
           $991 = HEAP32[$981>>2]|0;
           $$0$i$i$i$i = $991;
          }
          $992 = ($$0$i$i$i$i|0)==(-1);
          if ($992) {
           HEAP32[$__b>>2] = 0;
           $1008 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $1008 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $993 = ($994|0)==(0|0);
        if ($993) {
         $$pre$i3$i$i264$ph = $$pre$i3$i$i;
         label = 370;
        } else {
         $995 = (($994) + 12|0);
         $996 = HEAP32[$995>>2]|0;
         $997 = (($994) + 16|0);
         $998 = HEAP32[$997>>2]|0;
         $999 = ($996|0)==($998|0);
         if ($999) {
          $1000 = HEAP32[$994>>2]|0;
          $1001 = (($1000) + 36|0);
          $1002 = HEAP32[$1001>>2]|0;
          __THREW__ = 0;
          $1003 = (invoke_ii($1002|0,($994|0))|0);
          $1004 = __THREW__; __THREW__ = 0;
          $1005 = $1004&1;
          if ($1005) {
           label = 76;
           break;
          } else {
           $$0$i$i1$i$i = $1003;
          }
         } else {
          $1006 = HEAP32[$996>>2]|0;
          $$0$i$i1$i$i = $1006;
         }
         $1007 = ($$0$i$i1$i$i|0)==(-1);
         if ($1007) {
          $$pre$i3$i$i264$ph = 0;
          label = 370;
         } else {
          $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
          $tmp$i$i = $1008 ^ $phitmp$i4$i$i;
          if ($tmp$i$i) {
           $$pre$i3$i$i264291 = $$pre$i3$i$i;$1097 = $$pre$i3$i$i;
          } else {
           label = 378;
           break;
          }
         }
        }
        if ((label|0) == 370) {
         label = 0;
         if ($1008) {
          label = 378;
          break;
         } else {
          $$pre$i3$i$i264291 = $$pre$i3$i$i264$ph;$1097 = 0;
         }
        }
        $1009 = HEAP32[$__b>>2]|0;
        $1010 = (($1009) + 12|0);
        $1011 = HEAP32[$1010>>2]|0;
        $1012 = (($1009) + 16|0);
        $1013 = HEAP32[$1012>>2]|0;
        $1014 = ($1011|0)==($1013|0);
        if ($1014) {
         $1015 = HEAP32[$1009>>2]|0;
         $1016 = (($1015) + 36|0);
         $1017 = HEAP32[$1016>>2]|0;
         __THREW__ = 0;
         $1018 = (invoke_ii($1017|0,($1009|0))|0);
         $1019 = __THREW__; __THREW__ = 0;
         $1020 = $1019&1;
         if ($1020) {
          label = 76;
          break;
         } else {
          $$0$i$i = $1018;
         }
        } else {
         $1021 = HEAP32[$1011>>2]|0;
         $$0$i$i = $1021;
        }
        $1022 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1023 = $1022 & 1;
        $1024 = ($1023<<24>>24)==(0);
        if ($1024) {
         $1027 = $968;
        } else {
         $1025 = HEAP32[$969>>2]|0;
         $1027 = $1025;
        }
        $1026 = (($1027) + ($__i$0<<2)|0);
        $1028 = HEAP32[$1026>>2]|0;
        $1029 = ($$0$i$i|0)==($1028|0);
        if (!($1029)) {
         label = 378;
         break;
        }
        $1032 = (($__i$0) + 1)|0;
        $1033 = HEAP32[$__b>>2]|0;
        $1034 = (($1033) + 12|0);
        $1035 = HEAP32[$1034>>2]|0;
        $1036 = (($1033) + 16|0);
        $1037 = HEAP32[$1036>>2]|0;
        $1038 = ($1035|0)==($1037|0);
        if ($1038) {
         $1039 = HEAP32[$1033>>2]|0;
         $1040 = (($1039) + 40|0);
         $1041 = HEAP32[$1040>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1041|0,($1033|0))|0);
         $1042 = __THREW__; __THREW__ = 0;
         $1043 = $1042&1;
         if ($1043) {
          label = 76;
          break;
         } else {
          $$pre$i3$i$i = $$pre$i3$i$i264291;$994 = $1097;$__i$0 = $1032;
          continue;
         }
        } else {
         $1044 = (($1035) + 4|0);
         HEAP32[$1034>>2] = $1044;
         $$pre$i3$i$i = $$pre$i3$i$i264291;$994 = $1097;$__i$0 = $1032;
         continue;
        }
       }
       if ((label|0) == 76) {
        $240 = ___cxa_find_matching_catch()|0;
        $241 = tempRet0;
        $lpad$phi$index = $240;$lpad$phi$index19 = $241;
        break L76;
       }
       else if ((label|0) == 378) {
        $1030 = HEAP32[$__err>>2]|0;
        $1031 = $1030 | 4;
        HEAP32[$__err>>2] = $1031;
        $$0 = 0;
        break L437;
       }
      }
     } while(0);
     $1045 = HEAP32[$__gb>>2]|0;
     $1046 = ($1045|0)==($1047|0);
     if ($1046) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$1045,$1047,$__et);
      $1048 = HEAP32[$__et>>2]|0;
      $1049 = ($1048|0)==(0);
      if ($1049) {
       $$0 = 1;
      } else {
       $1050 = HEAP32[$__err>>2]|0;
       $1051 = $1050 | 4;
       HEAP32[$__err>>2] = $1051;
       $$0 = 0;
      }
     }
     break;
    }
   }
   $1052 = HEAP8[$__spaces>>0]|0;
   $1053 = $1052 & 1;
   $1054 = ($1053<<24>>24)==(0);
   if (!($1054)) {
    $1055 = HEAP32[$205>>2]|0;
    _free($1055);
   }
   $1056 = HEAP8[$__nsn>>0]|0;
   $1057 = $1056 & 1;
   $1058 = ($1057<<24>>24)==(0);
   if (!($1058)) {
    $1059 = HEAP32[$197>>2]|0;
    _free($1059);
   }
   $1060 = HEAP8[$__psn>>0]|0;
   $1061 = $1060 & 1;
   $1062 = ($1061<<24>>24)==(0);
   if (!($1062)) {
    $1063 = HEAP32[$199>>2]|0;
    _free($1063);
   }
   $1064 = HEAP8[$__sym>>0]|0;
   $1065 = $1064 & 1;
   $1066 = ($1065<<24>>24)==(0);
   if (!($1066)) {
    $1067 = HEAP32[$203>>2]|0;
    _free($1067);
   }
   $1068 = HEAP8[$__grp>>0]|0;
   $1069 = $1068 & 1;
   $1070 = ($1069<<24>>24)==(0);
   if (!($1070)) {
    $1071 = (($__grp) + 8|0);
    $1072 = HEAP32[$1071>>2]|0;
    _free($1072);
   }
   $1073 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $1074 = ($1073|0)==(0|0);
   if ($1074) {
    STACKTOP = sp;return ($$0|0);
   }
   $1075 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   invoke_vi($1075|0,($1073|0));
   $1076 = __THREW__; __THREW__ = 0;
   $1077 = $1076&1;
   if ($1077) {
    $1078 = ___cxa_find_matching_catch(0|0)|0;
    $1079 = tempRet0;
    ___clang_call_terminate($1078);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 83) {
   $254 = ___cxa_find_matching_catch()|0;
   $255 = tempRet0;
   $lpad$phi$index = $254;$lpad$phi$index19 = $255;
  }
 } while(0);
 $256 = HEAP8[$__spaces>>0]|0;
 $257 = $256 & 1;
 $258 = ($257<<24>>24)==(0);
 if (!($258)) {
  $259 = (($__spaces) + 8|0);
  $260 = HEAP32[$259>>2]|0;
  _free($260);
 }
 $261 = HEAP8[$__nsn>>0]|0;
 $262 = $261 & 1;
 $263 = ($262<<24>>24)==(0);
 if (!($263)) {
  $264 = (($__nsn) + 8|0);
  $265 = HEAP32[$264>>2]|0;
  _free($265);
 }
 $266 = HEAP8[$__psn>>0]|0;
 $267 = $266 & 1;
 $268 = ($267<<24>>24)==(0);
 if (!($268)) {
  $269 = (($__psn) + 8|0);
  $270 = HEAP32[$269>>2]|0;
  _free($270);
 }
 $271 = HEAP8[$__sym>>0]|0;
 $272 = $271 & 1;
 $273 = ($272<<24>>24)==(0);
 if (!($273)) {
  $274 = (($__sym) + 8|0);
  $275 = HEAP32[$274>>2]|0;
  _free($275);
 }
 $276 = HEAP8[$__grp>>0]|0;
 $277 = $276 & 1;
 $278 = ($277<<24>>24)==(0);
 if (!($278)) {
  $279 = (($__grp) + 8|0);
  $280 = HEAP32[$279>>2]|0;
  _free($280);
 }
 $281 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $282 = ($281|0)==(0|0);
 if ($282) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $283 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_vi($283|0,($281|0));
 $284 = __THREW__; __THREW__ = 0;
 $285 = $284&1;
 if ($285) {
  $286 = ___cxa_find_matching_catch(0|0)|0;
  $287 = tempRet0;
  ___clang_call_terminate($286);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$01$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__neg = 0;
 var $__p$0$lcssa$i = 0, $__p$02$i = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i = 0, $scevgep5$i = 0, $uglygep$i = 0, $uglygep4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__wbuf = sp + 16|0;
 $__wb = sp;
 $__wn = sp + 8|0;
 $__neg = sp + 416|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 586;
 $1 = (($__iob) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($4+1)|0);
 __THREW__ = 0;
 $5 = (invoke_iii(556,($2|0),(11744|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L1: do {
  if (!($7)) {
   $8 = (($__wbuf) + 400|0);
   HEAP8[$__neg>>0] = 0;
   $9 = HEAP32[$__e>>2]|0;
   $10 = (($__iob) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $12 = (invoke_iiiiiiiiiiii(594,($__b|0),($9|0),($__intl|0),($2|0),($11|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($8|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    do {
     if ($12) {
      $15 = HEAP8[$__v>>0]|0;
      $16 = $15 & 1;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       $21 = (($__v) + 4|0);
       HEAP32[$21>>2] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $18 = (($__v) + 8|0);
       $19 = HEAP32[$18>>2]|0;
       HEAP32[$19>>2] = 0;
       $20 = (($__v) + 4|0);
       HEAP32[$20>>2] = 0;
      }
      $22 = HEAP8[$__neg>>0]|0;
      $23 = ($22<<24>>24)==(0);
      if (!($23)) {
       $24 = HEAP32[$5>>2]|0;
       $25 = (($24) + 44|0);
       $26 = HEAP32[$25>>2]|0;
       __THREW__ = 0;
       $27 = (invoke_iii($26|0,($5|0),45)|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        break L1;
       }
       __THREW__ = 0;
       invoke_vii(596,($__v|0),($27|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        break L1;
       }
      }
      $32 = HEAP32[$5>>2]|0;
      $33 = (($32) + 44|0);
      $34 = HEAP32[$33>>2]|0;
      __THREW__ = 0;
      $35 = (invoke_iii($34|0,($5|0),48)|0);
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break L1;
      }
      $38 = HEAP32[$__wb>>2]|0;
      $39 = HEAP32[$__wn>>2]|0;
      $40 = (($39) + -4|0);
      $41 = ($38>>>0)<($40>>>0);
      L15: do {
       if ($41) {
        $__w$05 = $38;
        while(1) {
         $44 = HEAP32[$__w$05>>2]|0;
         $45 = ($44|0)==($35|0);
         $43 = (($__w$05) + 4|0);
         if (!($45)) {
          $__w$0$lcssa = $__w$05;
          break L15;
         }
         $42 = ($43>>>0)<($40>>>0);
         if ($42) {
          $__w$05 = $43;
         } else {
          $__w$0$lcssa = $43;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $38;
       }
      } while(0);
      $46 = $__w$0$lcssa;
      $47 = HEAP8[$__v>>0]|0;
      $48 = $47 & 1;
      $49 = ($48<<24>>24)==(0);
      if ($49) {
       $50 = $47&255;
       $51 = $50 >>> 1;
       $152 = $47;$62 = 1;$63 = $51;
      } else {
       $52 = (($__v) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = HEAP32[$__v>>2]|0;
       $55 = $54 & -2;
       $phitmp$i$i = (($55) + -1)|0;
       $56 = $54&255;
       $152 = $56;$62 = $phitmp$i$i;$63 = $53;
      }
      $57 = $39;
      $58 = (($57) - ($46))|0;
      $59 = $58 >> 2;
      $60 = ($59|0)==(0);
      if (!($60)) {
       $61 = (($62) - ($63))|0;
       $64 = ($61>>>0)<($59>>>0);
       if ($64) {
        $65 = (($63) + ($59))|0;
        $66 = (($65) - ($62))|0;
        __THREW__ = 0;
        invoke_viiiiiii(598,($__v|0),($62|0),($66|0),($63|0),($63|0),0,0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         break L1;
        }
        $$pre$i = HEAP8[$__v>>0]|0;
        $70 = $$pre$i;
       } else {
        $70 = $152;
       }
       $69 = $70 & 1;
       $71 = ($69<<24>>24)==(0);
       if ($71) {
        $74 = (($__v) + 4|0);
        $76 = $74;
       } else {
        $72 = (($__v) + 8|0);
        $73 = HEAP32[$72>>2]|0;
        $76 = $73;
       }
       $75 = (($76) + ($63<<2)|0);
       $77 = ($__w$0$lcssa|0)==($39|0);
       if ($77) {
        $__p$0$lcssa$i = $75;
       } else {
        $78 = (0 - ($46))|0;
        $uglygep$i = (($40) + ($78)|0);
        $uglygep4$i = $uglygep$i;
        $79 = $uglygep4$i >>> 2;
        $80 = (($63) + ($79))|0;
        $81 = (($80) + 1)|0;
        $$01$i = $__w$0$lcssa;$__p$02$i = $75;
        while(1) {
         $82 = HEAP32[$$01$i>>2]|0;
         HEAP32[$__p$02$i>>2] = $82;
         $83 = (($$01$i) + 4|0);
         $84 = ($83|0)==($39|0);
         if ($84) {
          break;
         }
         $85 = (($__p$02$i) + 4|0);
         $$01$i = $83;$__p$02$i = $85;
        }
        $scevgep5$i = (($76) + ($81<<2)|0);
        $__p$0$lcssa$i = $scevgep5$i;
       }
       HEAP32[$__p$0$lcssa$i>>2] = 0;
       $86 = (($63) + ($59))|0;
       $87 = HEAP8[$__v>>0]|0;
       $88 = $87 & 1;
       $89 = ($88<<24>>24)==(0);
       if ($89) {
        $91 = $86 << 1;
        $92 = $91&255;
        HEAP8[$__v>>0] = $92;
        break;
       } else {
        $90 = (($__v) + 4|0);
        HEAP32[$90>>2] = $86;
        break;
       }
      }
     }
    } while(0);
    $93 = HEAP32[$__b>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $124 = 0;$153 = 1;
    } else {
     $95 = (($93) + 12|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($93) + 16|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($96|0)==($98|0);
     if ($99) {
      $100 = HEAP32[$93>>2]|0;
      $101 = (($100) + 36|0);
      $102 = HEAP32[$101>>2]|0;
      __THREW__ = 0;
      $103 = (invoke_ii($102|0,($93|0))|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       break;
      } else {
       $$0$i$i$i$i = $103;
      }
     } else {
      $106 = HEAP32[$96>>2]|0;
      $$0$i$i$i$i = $106;
     }
     $107 = ($$0$i$i$i$i|0)==(-1);
     if ($107) {
      HEAP32[$__b>>2] = 0;
      $124 = 0;$153 = 1;
     } else {
      $124 = $93;$153 = 0;
     }
    }
    $108 = ($9|0)==(0|0);
    do {
     if ($108) {
      label = 44;
     } else {
      $109 = (($9) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($9) + 16|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($110|0)==($112|0);
      if ($113) {
       $114 = HEAP32[$9>>2]|0;
       $115 = (($114) + 36|0);
       $116 = HEAP32[$115>>2]|0;
       __THREW__ = 0;
       $117 = (invoke_ii($116|0,($9|0))|0);
       $118 = __THREW__; __THREW__ = 0;
       $119 = $118&1;
       if ($119) {
        break L1;
       } else {
        $$0$i$i1$i$i = $117;
       }
      } else {
       $120 = HEAP32[$110>>2]|0;
       $$0$i$i1$i$i = $120;
      }
      $121 = ($$0$i$i1$i$i|0)==(-1);
      if ($121) {
       HEAP32[$__e>>2] = 0;
       label = 44;
       break;
      } else {
       if ($153) {
        break;
       } else {
        label = 46;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 44) {
     if ($153) {
      label = 46;
     }
    }
    if ((label|0) == 46) {
     $122 = HEAP32[$__err>>2]|0;
     $123 = $122 | 2;
     HEAP32[$__err>>2] = $123;
    }
    HEAP32[$agg$result>>2] = $124;
    $125 = (($2) + 4|0);
    $126 = HEAP32[$125>>2]|0;HEAP32[$125>>2] = (($126+-1)|0);
    $127 = ($126|0)==(0);
    if ($127) {
     $128 = HEAP32[$2>>2]|0;
     $129 = (($128) + 8|0);
     $130 = HEAP32[$129>>2]|0;
     FUNCTION_TABLE_vi[$130 & 1023]($2);
    }
    $131 = HEAP32[$__wb>>2]|0;
    HEAP32[$__wb>>2] = 0;
    $132 = ($131|0)==(0|0);
    if ($132) {
     STACKTOP = sp;return;
    }
    $133 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($133|0,($131|0));
    $134 = __THREW__; __THREW__ = 0;
    $135 = $134&1;
    if ($135) {
     $136 = ___cxa_find_matching_catch(0|0)|0;
     $137 = tempRet0;
     ___clang_call_terminate($136);
     // unreachable;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $138 = ___cxa_find_matching_catch()|0;
 $139 = tempRet0;
 $140 = (($2) + 4|0);
 $141 = HEAP32[$140>>2]|0;HEAP32[$140>>2] = (($141+-1)|0);
 $142 = ($141|0)==(0);
 if ($142) {
  $143 = HEAP32[$2>>2]|0;
  $144 = (($143) + 8|0);
  $145 = HEAP32[$144>>2]|0;
  FUNCTION_TABLE_vi[$145 & 1023]($2);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $146 = ($$pre|0)==(0|0);
 if ($146) {
  ___resumeException($138|0);
  // unreachable;
 }
 $147 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($147|0,($$pre|0));
 $148 = __THREW__; __THREW__ = 0;
 $149 = $148&1;
 if ($149) {
  $150 = ___cxa_find_matching_catch(0|0)|0;
  $151 = tempRet0;
  ___clang_call_terminate($150);
  // unreachable;
 } else {
  ___resumeException($138|0);
  // unreachable;
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(586|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = (___cxa_allocate_exception(4)|0);
  HEAP32[$17>>2] = ((19952 + 8|0));
  ___cxa_throw(($17|0),(20008|0),(386|0));
  // unreachable;
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $26 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $18 = ($$pr|0)==(0|0);
   if ($18) {
    $26 = $15;
   } else {
    $19 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($19|0,($$pr|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $26 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 593;
 $24 = $$ >>> 2;
 $25 = (($26) + ($13<<2)|0);
 HEAP32[$__n>>2] = $25;
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + ($24<<2)|0);
 HEAP32[$__e>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0;
 var $vararg_buffer13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 272|0;
 $__bb = sp + 68|0;
 $__digits = sp + 72|0;
 $__pat = sp + 64|0;
 $__dp = sp + 373|0;
 $__ts = sp + 372|0;
 $__grp = sp + 44|0;
 $__sym = sp + 32|0;
 $__sn = sp + 20|0;
 $__fd = sp + 16|0;
 $__mbuf = sp + 172|0;
 $__mi = sp + 56|0;
 $__me = sp + 60|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $0 = (_snprintf($__buf,100,11520,$vararg_buffer)|0);
 $1 = ($0>>>0)>(99);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   $2 = (invoke_i(574)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   do {
    if ($4) {
     $155 = 0;
    } else {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $5 = (invoke_iiiii(580,($__bb|0),($2|0),(11520|0),($vararg_buffer13|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if ($7) {
      $155 = 0;
     } else {
      $8 = HEAP32[$__bb>>2]|0;
      $9 = ($8|0)==(0|0);
      if ($9) {
       $10 = (___cxa_allocate_exception(4)|0);
       HEAP32[$10>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($10|0),(20008|0),(386|0));
       $11 = __THREW__; __THREW__ = 0;
       $12 = $11&1;
       if ($12) {
        $155 = 0;
        break;
       }
       // unreachable;
      }
      $15 = (_malloc($5)|0);
      $16 = ($15|0)==(0|0);
      if (!($16)) {
       $130 = $15;$131 = $8;$__db$0 = $15;$__n$0 = $5;
       break L1;
      }
      $17 = (___cxa_allocate_exception(4)|0);
      HEAP32[$17>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($17|0),(20008|0),(386|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $155 = $8;
      } else {
       // unreachable;
      }
     }
    }
   } while(0);
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $$2 = $13;$$23 = $14;$153 = 0;$154 = $155;
   _free($153);
   _free($154);
   ___resumeException($$2|0);
   // unreachable;
  } else {
   $130 = 0;$131 = 0;$__db$0 = $__digits;$__n$0 = $0;
  }
 } while(0);
 $20 = (($__iob) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;HEAP32[$22>>2] = (($23+1)|0);
 __THREW__ = 0;
 $24 = (invoke_iii(556,($21|0),(11752|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  label = 36;
 } else {
  $27 = HEAP32[$__bb>>2]|0;
  $28 = (($27) + ($__n$0)|0);
  $29 = HEAP32[$24>>2]|0;
  $30 = (($29) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($31|0,($24|0),($27|0),($28|0),($__db$0|0))|0);
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   label = 36;
  } else {
   $34 = ($__n$0|0)==(0);
   if ($34) {
    $37 = 0;
   } else {
    $35 = HEAP8[$27>>0]|0;
    $36 = ($35<<24>>24)==(45);
    $37 = $36;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(599,($__intl|0),($37|0),($21|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   do {
    if ($39) {
     $92 = ___cxa_find_matching_catch()|0;
     $93 = tempRet0;
     $$0 = $92;$$01 = $93;
    } else {
     $40 = HEAP32[$__fd>>2]|0;
     $41 = ($__n$0|0)>($40|0);
     if ($41) {
      $42 = (($__n$0) - ($40))|0;
      $43 = $42 << 1;
      $44 = HEAP8[$__sn>>0]|0;
      $45 = $44 & 1;
      $46 = ($45<<24>>24)==(0);
      if ($46) {
       $49 = $44&255;
       $50 = $49 >>> 1;
       $60 = $50;
      } else {
       $47 = (($__sn) + 4|0);
       $48 = HEAP32[$47>>2]|0;
       $60 = $48;
      }
      $51 = HEAP8[$__sym>>0]|0;
      $52 = $51 & 1;
      $53 = ($52<<24>>24)==(0);
      if ($53) {
       $56 = $51&255;
       $57 = $56 >>> 1;
       $62 = $57;
      } else {
       $54 = (($__sym) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $62 = $55;
      }
      $58 = $43 | 1;
      $59 = (($60) + ($58))|0;
      $61 = (($59) + ($62))|0;
      $$pn = $61;
     } else {
      $63 = HEAP8[$__sn>>0]|0;
      $64 = $63 & 1;
      $65 = ($64<<24>>24)==(0);
      if ($65) {
       $68 = $63&255;
       $69 = $68 >>> 1;
       $78 = $69;
      } else {
       $66 = (($__sn) + 4|0);
       $67 = HEAP32[$66>>2]|0;
       $78 = $67;
      }
      $70 = HEAP8[$__sym>>0]|0;
      $71 = $70 & 1;
      $72 = ($71<<24>>24)==(0);
      if ($72) {
       $75 = $70&255;
       $76 = $75 >>> 1;
       $80 = $76;
      } else {
       $73 = (($__sym) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $80 = $74;
      }
      $77 = (($78) + 2)|0;
      $79 = (($77) + ($80))|0;
      $$pn = $79;
     }
     $81 = (($$pn) + ($40))|0;
     $82 = ($81>>>0)>(100);
     if ($82) {
      $83 = (_malloc($81)|0);
      $84 = ($83|0)==(0|0);
      if ($84) {
       $85 = (___cxa_allocate_exception(4)|0);
       HEAP32[$85>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($85|0),(20008|0),(386|0));
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        $88 = ___cxa_find_matching_catch()|0;
        $89 = tempRet0;
        $$0 = $88;$$01 = $89;
        break;
       } else {
        // unreachable;
       }
      } else {
       $96 = $83;$__mb$0 = $83;
      }
     } else {
      $96 = 0;$__mb$0 = $__mbuf;
     }
     $97 = (($__iob) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($__db$0) + ($__n$0)|0);
     $100 = HEAP8[$__dp>>0]|0;
     $101 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(600,($__mb$0|0),($__mi|0),($__me|0),($98|0),($__db$0|0),($99|0),($24|0),($37|0),($__pat|0),($100|0),($101|0),($__grp|0),($__sym|0),($__sn|0),($40|0));
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if (!($103)) {
      $104 = HEAP32[$__s>>2]|0;
      $105 = HEAP32[$__mi>>2]|0;
      $106 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      invoke_viiiiiii(428,($agg$result|0),($104|0),($__mb$0|0),($105|0),($106|0),($__iob|0),($__fl|0));
      $107 = __THREW__; __THREW__ = 0;
      $108 = $107&1;
      if (!($108)) {
       _free($96);
       $109 = HEAP8[$__sn>>0]|0;
       $110 = $109 & 1;
       $111 = ($110<<24>>24)==(0);
       if (!($111)) {
        $112 = (($__sn) + 8|0);
        $113 = HEAP32[$112>>2]|0;
        _free($113);
       }
       $114 = HEAP8[$__sym>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       if (!($116)) {
        $117 = (($__sym) + 8|0);
        $118 = HEAP32[$117>>2]|0;
        _free($118);
       }
       $119 = HEAP8[$__grp>>0]|0;
       $120 = $119 & 1;
       $121 = ($120<<24>>24)==(0);
       if (!($121)) {
        $122 = (($__grp) + 8|0);
        $123 = HEAP32[$122>>2]|0;
        _free($123);
       }
       $124 = (($21) + 4|0);
       $125 = HEAP32[$124>>2]|0;HEAP32[$124>>2] = (($125+-1)|0);
       $126 = ($125|0)==(0);
       if (!($126)) {
        _free($130);
        _free($131);
        STACKTOP = sp;return;
       }
       $127 = HEAP32[$21>>2]|0;
       $128 = (($127) + 8|0);
       $129 = HEAP32[$128>>2]|0;
       FUNCTION_TABLE_vi[$129 & 1023]($21);
       _free($130);
       _free($131);
       STACKTOP = sp;return;
      }
     }
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     _free($96);
     $$0 = $94;$$01 = $95;
    }
   } while(0);
   $132 = HEAP8[$__sn>>0]|0;
   $133 = $132 & 1;
   $134 = ($133<<24>>24)==(0);
   if (!($134)) {
    $135 = (($__sn) + 8|0);
    $136 = HEAP32[$135>>2]|0;
    _free($136);
   }
   $137 = HEAP8[$__sym>>0]|0;
   $138 = $137 & 1;
   $139 = ($138<<24>>24)==(0);
   if (!($139)) {
    $140 = (($__sym) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    _free($141);
   }
   $142 = HEAP8[$__grp>>0]|0;
   $143 = $142 & 1;
   $144 = ($143<<24>>24)==(0);
   if ($144) {
    $$1 = $$0;$$12 = $$01;
   } else {
    $145 = (($__grp) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    _free($146);
    $$1 = $$0;$$12 = $$01;
   }
  }
 }
 if ((label|0) == 36) {
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $$1 = $90;$$12 = $91;
 }
 $147 = (($21) + 4|0);
 $148 = HEAP32[$147>>2]|0;HEAP32[$147>>2] = (($148+-1)|0);
 $149 = ($148|0)==(0);
 if (!($149)) {
  $$2 = $$1;$$23 = $$12;$153 = $130;$154 = $131;
  _free($153);
  _free($154);
  ___resumeException($$2|0);
  // unreachable;
 }
 $150 = HEAP32[$21>>2]|0;
 $151 = (($150) + 8|0);
 $152 = HEAP32[$151>>2]|0;
 FUNCTION_TABLE_vi[$152 & 1023]($21);
 $$2 = $$1;$$23 = $$12;$153 = $130;$154 = $131;
 _free($153);
 _free($154);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc$0$0$val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp;
 $11 = sp + 40|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$0$0$val,11208)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 1|0);
     HEAP8[$26>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP8[$24>>0] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(588,($__sn|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 1|0);
     HEAP8[$43>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP8[$41>>0] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(588,($__sn|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(588,($__grp|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 1|0);
   HEAP8[$79>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77>>0] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(588,($__sym|0));
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$0$0$val,11144)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 1|0);
     HEAP8[$102>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP8[$100>>0] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(588,($__sn|0));
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 1|0);
     HEAP8[$119>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP8[$117>>0] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(588,($__sn|0));
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP8[$__dp>>0] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP8[$__ts>>0] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(588,($__grp|0));
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 1|0);
   HEAP8[$155>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP8[$153>>0] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(588,($__sym|0));
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$139 = 0;
 var $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$050;
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $brmerge = $44 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($51|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$56 = $51;
     while(1) {
      $55 = HEAP8[$56>>0]|0;
      HEAP8[$$01$i$i15>>0] = $55;
      $57 = (($56) + 1|0);
      $58 = (($$01$i$i15) + 1|0);
      $59 = ($57|0)==($50|0);
      if ($59) {
       $$0$lcssa$i$i17 = $58;
       break;
      } else {
       $$01$i$i15 = $58;$56 = $57;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$050;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$050) + 1|0);
   $$$0 = $__neg ? $61 : $$050;
   $62 = ($$$0>>>0)<($__de>>>0);
   L30: do {
    if ($62) {
     $__d$029 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$029>>0]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L30;
      }
      $66 = $65 << 24 >> 24;
      $67 = HEAP32[$12>>2]|0;
      $68 = (($67) + ($66<<1)|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 & 2048;
      $71 = ($70<<16>>16)==(0);
      $64 = (($__d$029) + 1|0);
      if ($71) {
       $__d$0$lcssa = $__d$029;
       break L30;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$029 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $72 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($72) {
     $73 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($73)|0);
     $scevgep59 = $scevgep;
     $74 = ($scevgep59>>>0)<($13>>>0);
     $umax = $74 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $78 = $60;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $75 = (($__d$132) + -1|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($78) + 1|0);
      HEAP32[$__me>>2] = $77;
      HEAP8[$78>>0] = $76;
      $79 = (($__f$033) + -1)|0;
      $80 = ($75>>>0)>($$$0>>>0);
      $81 = ($79|0)>(0);
      $or$cond = $80 & $81;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $78 = $$pre;$__d$132 = $75;$__f$033 = $79;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($81) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $89 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 1023]($__ct,48)|0);
     $89 = $85;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $86 = ($__f$0$lcssa71|0)>(0);
    $87 = HEAP32[$__me>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$__me>>2] = $88;
    if ($86) {
     $90 = $87;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$90>>0] = $89;
      $91 = (($__f$139) + -1)|0;
      $92 = ($91|0)>(0);
      $93 = HEAP32[$__me>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$__me>>2] = $94;
      if ($92) {
       $90 = $93;$__f$139 = $91;
      } else {
       $$lcssa38 = $93;
       break;
      }
     }
    } else {
     $$lcssa38 = $87;
    }
    HEAP8[$$lcssa38>>0] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $95 = ($__d$2|0)==($$$0|0);
   if ($95) {
    $96 = HEAP32[$__ct>>2]|0;
    $97 = (($96) + 28|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (FUNCTION_TABLE_iii[$98 & 1023]($__ct,48)|0);
    $100 = HEAP32[$__me>>2]|0;
    $101 = (($100) + 1|0);
    HEAP32[$__me>>2] = $101;
    HEAP8[$100>>0] = $99;
   } else {
    $102 = HEAP8[$__grp>>0]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if ($104) {
     $106 = $102&255;
     $107 = $106 >>> 1;
     $109 = $107;
    } else {
     $105 = HEAP32[$11>>2]|0;
     $109 = $105;
    }
    $108 = ($109|0)==(0);
    if ($108) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($104) {
      $112 = $9;
     } else {
      $110 = HEAP32[$10>>2]|0;
      $112 = $110;
     }
     $111 = HEAP8[$112>>0]|0;
     $113 = $111 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $113;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $114 = ($__ng$044|0)==($__gl$046|0);
     if ($114) {
      $115 = HEAP32[$__me>>2]|0;
      $116 = (($115) + 1|0);
      HEAP32[$__me>>2] = $116;
      HEAP8[$115>>0] = $__ts;
      $117 = (($__ig$045) + 1)|0;
      $118 = HEAP8[$__grp>>0]|0;
      $119 = $118 & 1;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $122 = $118&255;
       $123 = $122 >>> 1;
       $125 = $123;
      } else {
       $121 = HEAP32[$11>>2]|0;
       $125 = $121;
      }
      $124 = ($117>>>0)<($125>>>0);
      if ($124) {
       if ($120) {
        $128 = $9;
       } else {
        $126 = HEAP32[$10>>2]|0;
        $128 = $126;
       }
       $127 = (($128) + ($117)|0);
       $129 = HEAP8[$127>>0]|0;
       $130 = ($129<<24>>24)==(127);
       if ($130) {
        $__gl$1 = -1;$__ig$1 = $117;$__ng$1 = 0;
       } else {
        if ($120) {
         $133 = $9;
        } else {
         $131 = HEAP32[$10>>2]|0;
         $133 = $131;
        }
        $132 = (($133) + ($117)|0);
        $134 = HEAP8[$132>>0]|0;
        $135 = $134 << 24 >> 24;
        $__gl$1 = $135;$__ig$1 = $117;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $117;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $136 = (($__d$343) + -1|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = HEAP32[$__me>>2]|0;
     $139 = (($138) + 1|0);
     HEAP32[$__me>>2] = $139;
     HEAP8[$138>>0] = $137;
     $140 = (($__ng$1) + 1)|0;
     $141 = ($136|0)==($$$0|0);
     if ($141) {
      break;
     } else {
      $__d$343 = $136;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $140;
     }
    }
   }
   $142 = HEAP32[$__me>>2]|0;
   $143 = ($60|0)==($142|0);
   if ($143) {
    $$2 = $$$0;
   } else {
    $144 = (($142) + -1|0);
    $145 = ($144>>>0)>($60>>>0);
    if ($145) {
     $$012$i$i = $60;$148 = $144;
     while(1) {
      $146 = HEAP8[$$012$i$i>>0]|0;
      $147 = HEAP8[$148>>0]|0;
      HEAP8[$$012$i$i>>0] = $147;
      HEAP8[$148>>0] = $146;
      $149 = (($$012$i$i) + 1|0);
      $150 = (($148) + -1|0);
      $151 = ($149>>>0)<($150>>>0);
      if ($151) {
       $$012$i$i = $149;$148 = $150;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $152 = (($__p$049) + 1)|0;
  $exitcond = ($152|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $152;
  }
 }
 $153 = HEAP8[$__sn>>0]|0;
 $154 = $153 & 1;
 $155 = ($154<<24>>24)==(0);
 if ($155) {
  $157 = $153&255;
  $158 = $157 >>> 1;
  $160 = $158;
 } else {
  $156 = HEAP32[$2>>2]|0;
  $160 = $156;
 }
 $159 = ($160>>>0)>(1);
 if ($159) {
  if ($155) {
   $163 = $153&255;
   $164 = $163 >>> 1;
   $$pn = $0;$167 = $164;
  } else {
   $161 = HEAP32[$1>>2]|0;
   $162 = HEAP32[$2>>2]|0;
   $$pn = $161;$167 = $162;
  }
  $165 = (($$pn) + 1|0);
  $166 = (($$pn) + ($167)|0);
  $168 = HEAP32[$__me>>2]|0;
  $169 = ($165|0)==($166|0);
  if ($169) {
   $$0$lcssa$i$i = $168;
  } else {
   $$01$i$i = $168;$171 = $165;
   while(1) {
    $170 = HEAP8[$171>>0]|0;
    HEAP8[$$01$i$i>>0] = $170;
    $172 = (($171) + 1|0);
    $173 = (($$01$i$i) + 1|0);
    $174 = ($172|0)==($166|0);
    if ($174) {
     $$0$lcssa$i$i = $173;
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $175 = $__flags & 176;
 if ((($175|0) == 32)) {
  $176 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $176;
  STACKTOP = sp;return;
 } else if ((($175|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__pat = sp + 48|0;
 $__dp = sp + 52|0;
 $__ts = sp + 156|0;
 $__grp = sp + 36|0;
 $__sym = sp + 20|0;
 $__sn = sp + 8|0;
 $__fd = sp + 4|0;
 $__mbuf = sp + 56|0;
 $__mi = sp;
 $__me = sp + 32|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11752|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 38;
  } else {
   $7 = HEAP8[$__digits>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $7&255;
    $13 = $12 >>> 1;
    $15 = $13;
   } else {
    $10 = (($__digits) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $15 = $11;
   }
   $14 = ($15|0)==(0);
   if ($14) {
    $28 = 0;
   } else {
    if ($9) {
     $18 = (($__digits) + 1|0);
     $20 = $18;
    } else {
     $16 = (($__digits) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $20 = $17;
    }
    $19 = HEAP8[$20>>0]|0;
    $21 = HEAP32[$4>>2]|0;
    $22 = (($21) + 28|0);
    $23 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    $24 = (invoke_iii($23|0,($4|0),45)|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     label = 38;
     break;
    }
    $27 = ($19<<24>>24)==($24<<24>>24);
    $28 = $27;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(599,($__intl|0),($28|0),($1|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   do {
    if ($30) {
     $96 = ___cxa_find_matching_catch()|0;
     $97 = tempRet0;
     $$0 = $96;$$01 = $97;
    } else {
     $31 = HEAP8[$__digits>>0]|0;
     $32 = $31 & 1;
     $33 = ($32<<24>>24)==(0);
     if ($33) {
      $36 = $31&255;
      $37 = $36 >>> 1;
      $40 = $37;
     } else {
      $34 = (($__digits) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $40 = $35;
     }
     $38 = HEAP32[$__fd>>2]|0;
     $39 = ($40|0)>($38|0);
     if ($39) {
      if ($33) {
       $43 = $31&255;
       $44 = $43 >>> 1;
       $46 = $44;
      } else {
       $41 = (($__digits) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $46 = $42;
      }
      $45 = (($46) - ($38))|0;
      $47 = $45 << 1;
      $48 = HEAP8[$__sn>>0]|0;
      $49 = $48 & 1;
      $50 = ($49<<24>>24)==(0);
      if ($50) {
       $53 = $48&255;
       $54 = $53 >>> 1;
       $64 = $54;
      } else {
       $51 = (($__sn) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $64 = $52;
      }
      $55 = HEAP8[$__sym>>0]|0;
      $56 = $55 & 1;
      $57 = ($56<<24>>24)==(0);
      if ($57) {
       $60 = $55&255;
       $61 = $60 >>> 1;
       $66 = $61;
      } else {
       $58 = (($__sym) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       $66 = $59;
      }
      $62 = $47 | 1;
      $63 = (($64) + ($62))|0;
      $65 = (($63) + ($66))|0;
      $$pn = $65;
     } else {
      $67 = HEAP8[$__sn>>0]|0;
      $68 = $67 & 1;
      $69 = ($68<<24>>24)==(0);
      if ($69) {
       $72 = $67&255;
       $73 = $72 >>> 1;
       $82 = $73;
      } else {
       $70 = (($__sn) + 4|0);
       $71 = HEAP32[$70>>2]|0;
       $82 = $71;
      }
      $74 = HEAP8[$__sym>>0]|0;
      $75 = $74 & 1;
      $76 = ($75<<24>>24)==(0);
      if ($76) {
       $79 = $74&255;
       $80 = $79 >>> 1;
       $84 = $80;
      } else {
       $77 = (($__sym) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $84 = $78;
      }
      $81 = (($82) + 2)|0;
      $83 = (($81) + ($84))|0;
      $$pn = $83;
     }
     $85 = (($$pn) + ($38))|0;
     $86 = ($85>>>0)>(100);
     if ($86) {
      $87 = (_malloc($85)|0);
      $88 = ($87|0)==(0|0);
      if ($88) {
       $89 = (___cxa_allocate_exception(4)|0);
       HEAP32[$89>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($89|0),(20008|0),(386|0));
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        $92 = ___cxa_find_matching_catch()|0;
        $93 = tempRet0;
        $$0 = $92;$$01 = $93;
        break;
       } else {
        // unreachable;
       }
      } else {
       $100 = $87;$__mb$0 = $87;
      }
     } else {
      $100 = 0;$__mb$0 = $__mbuf;
     }
     $101 = (($__iob) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     if ($33) {
      $107 = (($__digits) + 1|0);
      $108 = $31&255;
      $109 = $108 >>> 1;
      $111 = $107;$112 = $109;
     } else {
      $103 = (($__digits) + 8|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($__digits) + 4|0);
      $106 = HEAP32[$105>>2]|0;
      $111 = $104;$112 = $106;
     }
     $110 = (($111) + ($112)|0);
     $113 = HEAP8[$__dp>>0]|0;
     $114 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(600,($__mb$0|0),($__mi|0),($__me|0),($102|0),($111|0),($110|0),($4|0),($28|0),($__pat|0),($113|0),($114|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if (!($116)) {
      $117 = HEAP32[$__s>>2]|0;
      $118 = HEAP32[$__mi>>2]|0;
      $119 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      invoke_viiiiiii(428,($agg$result|0),($117|0),($__mb$0|0),($118|0),($119|0),($__iob|0),($__fl|0));
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if (!($121)) {
       _free($100);
       $122 = HEAP8[$__sn>>0]|0;
       $123 = $122 & 1;
       $124 = ($123<<24>>24)==(0);
       if (!($124)) {
        $125 = (($__sn) + 8|0);
        $126 = HEAP32[$125>>2]|0;
        _free($126);
       }
       $127 = HEAP8[$__sym>>0]|0;
       $128 = $127 & 1;
       $129 = ($128<<24>>24)==(0);
       if (!($129)) {
        $130 = (($__sym) + 8|0);
        $131 = HEAP32[$130>>2]|0;
        _free($131);
       }
       $132 = HEAP8[$__grp>>0]|0;
       $133 = $132 & 1;
       $134 = ($133<<24>>24)==(0);
       if (!($134)) {
        $135 = (($__grp) + 8|0);
        $136 = HEAP32[$135>>2]|0;
        _free($136);
       }
       $137 = (($1) + 4|0);
       $138 = HEAP32[$137>>2]|0;HEAP32[$137>>2] = (($138+-1)|0);
       $139 = ($138|0)==(0);
       if (!($139)) {
        STACKTOP = sp;return;
       }
       $140 = HEAP32[$1>>2]|0;
       $141 = (($140) + 8|0);
       $142 = HEAP32[$141>>2]|0;
       FUNCTION_TABLE_vi[$142 & 1023]($1);
       STACKTOP = sp;return;
      }
     }
     $98 = ___cxa_find_matching_catch()|0;
     $99 = tempRet0;
     _free($100);
     $$0 = $98;$$01 = $99;
    }
   } while(0);
   $143 = HEAP8[$__sn>>0]|0;
   $144 = $143 & 1;
   $145 = ($144<<24>>24)==(0);
   if (!($145)) {
    $146 = (($__sn) + 8|0);
    $147 = HEAP32[$146>>2]|0;
    _free($147);
   }
   $148 = HEAP8[$__sym>>0]|0;
   $149 = $148 & 1;
   $150 = ($149<<24>>24)==(0);
   if (!($150)) {
    $151 = (($__sym) + 8|0);
    $152 = HEAP32[$151>>2]|0;
    _free($152);
   }
   $153 = HEAP8[$__grp>>0]|0;
   $154 = $153 & 1;
   $155 = ($154<<24>>24)==(0);
   if ($155) {
    $$1 = $$0;$$12 = $$01;
   } else {
    $156 = (($__grp) + 8|0);
    $157 = HEAP32[$156>>2]|0;
    _free($157);
    $$1 = $$0;$$12 = $$01;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $94 = ___cxa_find_matching_catch()|0;
  $95 = tempRet0;
  $$1 = $94;$$12 = $95;
 }
 $158 = (($1) + 4|0);
 $159 = HEAP32[$158>>2]|0;HEAP32[$158>>2] = (($159+-1)|0);
 $160 = ($159|0)==(0);
 if (!($160)) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $161 = HEAP32[$1>>2]|0;
 $162 = (($161) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 FUNCTION_TABLE_vi[$163 & 1023]($1);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$213 = 0, $$2312 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0;
 var $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 880|0;
 $__bb = sp + 872|0;
 $__digits = sp + 472|0;
 $__pat = sp + 468|0;
 $__dp = sp + 464|0;
 $__ts = sp + 876|0;
 $__grp = sp + 28|0;
 $__sym = sp + 16|0;
 $__sn = sp + 40|0;
 $__fd = sp + 460|0;
 $__mbuf = sp + 56|0;
 $__mi = sp + 456|0;
 $__me = sp + 52|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $0 = (_snprintf($__buf,100,11520,$vararg_buffer)|0);
 $1 = ($0>>>0)>(99);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   $2 = (invoke_i(574)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   do {
    if ($4) {
     $160 = 0;
    } else {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer14+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $5 = (invoke_iiiii(580,($__bb|0),($2|0),(11520|0),($vararg_buffer14|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if ($7) {
      $160 = 0;
     } else {
      $8 = HEAP32[$__bb>>2]|0;
      $9 = ($8|0)==(0|0);
      if ($9) {
       $10 = (___cxa_allocate_exception(4)|0);
       HEAP32[$10>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($10|0),(20008|0),(386|0));
       $11 = __THREW__; __THREW__ = 0;
       $12 = $11&1;
       if ($12) {
        $160 = 0;
        break;
       }
       // unreachable;
      }
      $15 = $5 << 2;
      $16 = (_malloc($15)|0);
      $17 = ($16|0)==(0|0);
      if (!($17)) {
       $135 = $16;$136 = $8;$__db$0 = $16;$__n$0 = $5;
       break L1;
      }
      $18 = (___cxa_allocate_exception(4)|0);
      HEAP32[$18>>2] = ((19952 + 8|0));
      __THREW__ = 0;
      invoke_viii(422,($18|0),(20008|0),(386|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       $160 = $8;
      } else {
       // unreachable;
      }
     }
    }
   } while(0);
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $$213 = $13;$$2312 = $14;$159 = $160;
   _free($159);
   ___resumeException($$213|0);
   // unreachable;
  } else {
   $135 = 0;$136 = 0;$__db$0 = $__digits;$__n$0 = $0;
  }
 } while(0);
 $21 = (($__iob) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+1)|0);
 __THREW__ = 0;
 $25 = (invoke_iii(556,($22|0),(11744|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  label = 36;
 } else {
  $28 = HEAP32[$__bb>>2]|0;
  $29 = (($28) + ($__n$0)|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = (($30) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($32|0,($25|0),($28|0),($29|0),($__db$0|0))|0);
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if ($34) {
   label = 36;
  } else {
   $35 = ($__n$0|0)==(0);
   if ($35) {
    $38 = 0;
   } else {
    $36 = HEAP8[$28>>0]|0;
    $37 = ($36<<24>>24)==(45);
    $38 = $37;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(601,($__intl|0),($38|0),($22|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   do {
    if ($40) {
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     $$0 = $94;$$01 = $95;
    } else {
     $41 = HEAP32[$__fd>>2]|0;
     $42 = ($__n$0|0)>($41|0);
     if ($42) {
      $43 = (($__n$0) - ($41))|0;
      $44 = $43 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($41))|0;
     $83 = ($82>>>0)>(100);
     if ($83) {
      $84 = $82 << 2;
      $85 = (_malloc($84)|0);
      $86 = ($85|0)==(0|0);
      if ($86) {
       $87 = (___cxa_allocate_exception(4)|0);
       HEAP32[$87>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($87|0),(20008|0),(386|0));
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        $90 = ___cxa_find_matching_catch()|0;
        $91 = tempRet0;
        $$0 = $90;$$01 = $91;
        break;
       } else {
        // unreachable;
       }
      } else {
       $99 = $85;$__mb$0 = $85;
      }
     } else {
      $99 = 0;$__mb$0 = $__mbuf;
     }
     $100 = (($__iob) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (($__db$0) + ($__n$0<<2)|0);
     $103 = HEAP32[$__dp>>2]|0;
     $104 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(602,($__mb$0|0),($__mi|0),($__me|0),($101|0),($__db$0|0),($102|0),($25|0),($38|0),($__pat|0),($103|0),($104|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if (!($106)) {
      $107 = HEAP32[$__s>>2]|0;
      $108 = HEAP32[$__mi>>2]|0;
      $109 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      invoke_viiiiiii(584,($agg$result|0),($107|0),($__mb$0|0),($108|0),($109|0),($__iob|0),($__fl|0));
      $110 = __THREW__; __THREW__ = 0;
      $111 = $110&1;
      if (!($111)) {
       $112 = ($99|0)==(0|0);
       if (!($112)) {
        _free($99);
       }
       $113 = HEAP8[$__sn>>0]|0;
       $114 = $113 & 1;
       $115 = ($114<<24>>24)==(0);
       if (!($115)) {
        $116 = (($__sn) + 8|0);
        $117 = HEAP32[$116>>2]|0;
        _free($117);
       }
       $118 = HEAP8[$__sym>>0]|0;
       $119 = $118 & 1;
       $120 = ($119<<24>>24)==(0);
       if (!($120)) {
        $121 = (($__sym) + 8|0);
        $122 = HEAP32[$121>>2]|0;
        _free($122);
       }
       $123 = HEAP8[$__grp>>0]|0;
       $124 = $123 & 1;
       $125 = ($124<<24>>24)==(0);
       if (!($125)) {
        $126 = (($__grp) + 8|0);
        $127 = HEAP32[$126>>2]|0;
        _free($127);
       }
       $128 = (($22) + 4|0);
       $129 = HEAP32[$128>>2]|0;HEAP32[$128>>2] = (($129+-1)|0);
       $130 = ($129|0)==(0);
       if ($130) {
        $131 = HEAP32[$22>>2]|0;
        $132 = (($131) + 8|0);
        $133 = HEAP32[$132>>2]|0;
        FUNCTION_TABLE_vi[$133 & 1023]($22);
       }
       $134 = ($135|0)==(0|0);
       if ($134) {
        _free($136);
        STACKTOP = sp;return;
       }
       _free($135);
       _free($136);
       STACKTOP = sp;return;
      }
     }
     $96 = ___cxa_find_matching_catch()|0;
     $97 = tempRet0;
     $98 = ($99|0)==(0|0);
     if ($98) {
      $$0 = $96;$$01 = $97;
     } else {
      _free($99);
      $$0 = $96;$$01 = $97;
     }
    }
   } while(0);
   $137 = HEAP8[$__sn>>0]|0;
   $138 = $137 & 1;
   $139 = ($138<<24>>24)==(0);
   if (!($139)) {
    $140 = (($__sn) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    _free($141);
   }
   $142 = HEAP8[$__sym>>0]|0;
   $143 = $142 & 1;
   $144 = ($143<<24>>24)==(0);
   if (!($144)) {
    $145 = (($__sym) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    _free($146);
   }
   $147 = HEAP8[$__grp>>0]|0;
   $148 = $147 & 1;
   $149 = ($148<<24>>24)==(0);
   if ($149) {
    $$1 = $$0;$$12 = $$01;
   } else {
    $150 = (($__grp) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    _free($151);
    $$1 = $$0;$$12 = $$01;
   }
  }
 }
 if ((label|0) == 36) {
  $92 = ___cxa_find_matching_catch()|0;
  $93 = tempRet0;
  $$1 = $92;$$12 = $93;
 }
 $152 = (($22) + 4|0);
 $153 = HEAP32[$152>>2]|0;HEAP32[$152>>2] = (($153+-1)|0);
 $154 = ($153|0)==(0);
 if ($154) {
  $155 = HEAP32[$22>>2]|0;
  $156 = (($155) + 8|0);
  $157 = HEAP32[$156>>2]|0;
  FUNCTION_TABLE_vi[$157 & 1023]($22);
 }
 $158 = ($135|0)==(0|0);
 if ($158) {
  $$213 = $$1;$$2312 = $$12;$159 = $136;
  _free($159);
  ___resumeException($$213|0);
  // unreachable;
 }
 _free($135);
 $$213 = $$1;$$2312 = $$12;$159 = $136;
 _free($159);
 ___resumeException($$213|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc$0$0$val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp;
 $11 = sp + 40|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$0$0$val,11336)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 4|0);
     HEAP32[$26>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP32[$24>>2] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(595,($__sn|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP32[$41>>2] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(595,($__sn|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(588,($__grp|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 4|0);
   HEAP32[$79>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$77>>2] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(595,($__sym|0));
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc$0$0$val,11272)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 4|0);
     HEAP32[$102>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$100>>2] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(595,($__sn|0));
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 4|0);
     HEAP32[$119>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP32[$117>>2] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(595,($__sn|0));
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(588,($__grp|0));
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 4|0);
   HEAP32[$155>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP32[$153>>2] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(595,($__sym|0));
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$pre = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $85$phi = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0;
 var $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$056$ph = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep70 = 0;
 var $uglygep$i$i = 0, $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$059) + 4|0);
   $$$0 = $__neg ? $60 : $$059;
   $61 = ($$$0>>>0)<($__de>>>0);
   L14: do {
    if ($61) {
     $__d$034 = $$$0;
     while(1) {
      $64 = HEAP32[$__d$034>>2]|0;
      $65 = HEAP32[$__ct>>2]|0;
      $66 = (($65) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_iiii[$67 & 1023]($__ct,2048,$64)|0);
      $63 = (($__d$034) + 4|0);
      if (!($68)) {
       $__d$0$lcssa = $__d$034;
       break L14;
      }
      $62 = ($63>>>0)<($__de>>>0);
      if ($62) {
       $__d$034 = $63;
      } else {
       $__d$0$lcssa = $63;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $69 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($69) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $73 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $70 = (($__d$137) + -4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($73) + 4|0);
      HEAP32[$73>>2] = $71;
      $74 = (($__f$038) + -1)|0;
      $75 = ($70>>>0)>($$$0>>>0);
      $76 = ($74|0)>(0);
      $or$cond = $75 & $76;
      if ($or$cond) {
       $73 = $72;$__d$137 = $70;$__f$038 = $74;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $72;
     if ($76) {
      $__d$1$lcssa79 = $70;$__f$0$lcssa77 = $74;
      label = 34;
     } else {
      $77 = (($73) + 8|0);
      HEAP32[$__me>>2] = $77;
      $$lcssa44 = $72;$__d$1$lcssa7880 = $70;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $78 = HEAP32[$__ct>>2]|0;
     $79 = (($78) + 44|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (FUNCTION_TABLE_iii[$80 & 1023]($__ct,48)|0);
     $82 = ($__f$0$lcssa77|0)>(0);
     $83 = HEAP32[$__me>>2]|0;
     $84 = (($83) + 4|0);
     HEAP32[$__me>>2] = $84;
     if ($82) {
      $85 = $83;$89 = $84;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$85>>2] = $81;
       $86 = (($__f$145) + -1)|0;
       $87 = ($86|0)>(0);
       $88 = (($89) + 4|0);
       if ($87) {
        $85$phi = $89;$89 = $88;$__f$145 = $86;$85 = $85$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($83) + ($$sum75<<2)|0);
      $scevgep70 = (($83) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $83;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $90 = ($__d$2|0)==($$$0|0);
   if ($90) {
    $91 = HEAP32[$__ct>>2]|0;
    $92 = (($91) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (FUNCTION_TABLE_iii[$93 & 1023]($__ct,48)|0);
    $95 = HEAP32[$__me>>2]|0;
    $96 = (($95) + 4|0);
    HEAP32[$__me>>2] = $96;
    HEAP32[$95>>2] = $94;
    $138 = $96;
   } else {
    $97 = HEAP8[$__grp>>0]|0;
    $98 = $97 & 1;
    $99 = ($98<<24>>24)==(0);
    if ($99) {
     $101 = $97&255;
     $102 = $101 >>> 1;
     $104 = $102;
    } else {
     $100 = HEAP32[$9>>2]|0;
     $104 = $100;
    }
    $103 = ($104|0)==(0);
    if ($103) {
     $__gl$056$ph = -1;
    } else {
     if ($99) {
      $107 = $7;
     } else {
      $105 = HEAP32[$8>>2]|0;
      $107 = $105;
     }
     $106 = HEAP8[$107>>0]|0;
     $108 = $106 << 24 >> 24;
     $__gl$056$ph = $108;
    }
    $$pre = HEAP32[$__me>>2]|0;
    $111 = $$pre;$__d$353 = $__d$2;$__gl$056 = $__gl$056$ph;$__ig$055 = 0;$__ng$054 = 0;
    while(1) {
     $109 = ($__ng$054|0)==($__gl$056|0);
     if ($109) {
      $110 = (($111) + 4|0);
      HEAP32[$__me>>2] = $110;
      HEAP32[$111>>2] = $__ts;
      $112 = (($__ig$055) + 1)|0;
      $113 = HEAP8[$__grp>>0]|0;
      $114 = $113 & 1;
      $115 = ($114<<24>>24)==(0);
      if ($115) {
       $117 = $113&255;
       $118 = $117 >>> 1;
       $120 = $118;
      } else {
       $116 = HEAP32[$9>>2]|0;
       $120 = $116;
      }
      $119 = ($112>>>0)<($120>>>0);
      if ($119) {
       if ($115) {
        $123 = $7;
       } else {
        $121 = HEAP32[$8>>2]|0;
        $123 = $121;
       }
       $122 = (($123) + ($112)|0);
       $124 = HEAP8[$122>>0]|0;
       $125 = ($124<<24>>24)==(127);
       if ($125) {
        $134 = $110;$__gl$1 = -1;$__ig$1 = $112;$__ng$1 = 0;
       } else {
        if ($115) {
         $128 = $7;
        } else {
         $126 = HEAP32[$8>>2]|0;
         $128 = $126;
        }
        $127 = (($128) + ($112)|0);
        $129 = HEAP8[$127>>0]|0;
        $130 = $129 << 24 >> 24;
        $134 = $110;$__gl$1 = $130;$__ig$1 = $112;$__ng$1 = 0;
       }
      } else {
       $134 = $110;$__gl$1 = $__gl$056;$__ig$1 = $112;$__ng$1 = 0;
      }
     } else {
      $134 = $111;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $131 = (($__d$353) + -4|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($134) + 4|0);
     HEAP32[$__me>>2] = $133;
     HEAP32[$134>>2] = $132;
     $135 = (($__ng$1) + 1)|0;
     $136 = ($131|0)==($$$0|0);
     if ($136) {
      $138 = $133;
      break;
     } else {
      $111 = $133;$__d$353 = $131;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $135;
     }
    }
   }
   $137 = ($59|0)==($138|0);
   if ($137) {
    $$2 = $$$0;
   } else {
    $139 = (($138) + -4|0);
    $140 = ($139>>>0)>($59>>>0);
    if ($140) {
     $$012$i$i = $59;$143 = $139;
     while(1) {
      $141 = HEAP32[$$012$i$i>>2]|0;
      $142 = HEAP32[$143>>2]|0;
      HEAP32[$$012$i$i>>2] = $142;
      HEAP32[$143>>2] = $141;
      $144 = (($$012$i$i) + 4|0);
      $145 = (($143) + -4|0);
      $146 = ($144>>>0)<($145>>>0);
      if ($146) {
       $$012$i$i = $144;$143 = $145;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $brmerge = $40 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($47|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $47;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $51 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($51)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $52 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$54 = $47;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$01$i$i19>>2] = $53;
      $55 = (($54) + 4|0);
      $56 = ($55|0)==($46|0);
      if ($56) {
       break;
      }
      $57 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $57;$54 = $55;
     }
     $58 = (($52) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($58<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $147 = (($__p$058) + 1)|0;
  $exitcond = ($147|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $147;
  }
 }
 $148 = HEAP8[$__sn>>0]|0;
 $149 = $148 & 1;
 $150 = ($149<<24>>24)==(0);
 if ($150) {
  $152 = $148&255;
  $153 = $152 >>> 1;
  $155 = $153;
 } else {
  $151 = HEAP32[$0>>2]|0;
  $155 = $151;
 }
 $154 = ($155>>>0)>(1);
 if ($154) {
  if ($150) {
   $158 = $148&255;
   $159 = $158 >>> 1;
   $$pn = $0;$162 = $159;
  } else {
   $156 = HEAP32[$1>>2]|0;
   $157 = HEAP32[$0>>2]|0;
   $$pn = $156;$162 = $157;
  }
  $160 = (($$pn) + 4|0);
  $161 = (($$pn) + ($162<<2)|0);
  $163 = HEAP32[$__me>>2]|0;
  $164 = ($160|0)==($161|0);
  if ($164) {
   $$0$lcssa$i$i = $163;
  } else {
   $$promoted4$i$i = $160;
   $$sum = (($162) + -1)|0;
   $scevgep$i$i = (($$pn) + ($$sum<<2)|0);
   $165 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($165)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $166 = $uglygep5$i$i >>> 2;
   $$01$i$i = $163;$168 = $160;
   while(1) {
    $167 = HEAP32[$168>>2]|0;
    HEAP32[$$01$i$i>>2] = $167;
    $169 = (($168) + 4|0);
    $170 = (($$01$i$i) + 4|0);
    $171 = ($169|0)==($161|0);
    if ($171) {
     break;
    } else {
     $$01$i$i = $170;$168 = $169;
    }
   }
   $172 = (($166) + 1)|0;
   $scevgep6$i$i = (($163) + ($172<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $173 = $__flags & 176;
 if ((($173|0) == 32)) {
  $174 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $174;
  STACKTOP = sp;return;
 } else if ((($173|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0;
 var $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__pat = sp + 460|0;
 $__dp = sp + 456|0;
 $__ts = sp + 452|0;
 $__grp = sp + 440|0;
 $__sym = sp + 428|0;
 $__sn = sp + 416|0;
 $__fd = sp + 408|0;
 $__mbuf = sp + 8|0;
 $__mi = sp;
 $__me = sp + 412|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_iii(556,($1|0),(11744|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 38;
  } else {
   $7 = HEAP8[$__digits>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $7&255;
    $13 = $12 >>> 1;
    $15 = $13;
   } else {
    $10 = (($__digits) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $15 = $11;
   }
   $14 = ($15|0)==(0);
   if ($14) {
    $28 = 0;
   } else {
    if ($9) {
     $18 = (($__digits) + 4|0);
     $20 = $18;
    } else {
     $16 = (($__digits) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $20 = $17;
    }
    $19 = HEAP32[$20>>2]|0;
    $21 = HEAP32[$4>>2]|0;
    $22 = (($21) + 44|0);
    $23 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    $24 = (invoke_iii($23|0,($4|0),45)|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     label = 38;
     break;
    }
    $27 = ($19|0)==($24|0);
    $28 = $27;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(601,($__intl|0),($28|0),($1|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   do {
    if ($30) {
     $97 = ___cxa_find_matching_catch()|0;
     $98 = tempRet0;
     $$0 = $97;$$01 = $98;
    } else {
     $31 = HEAP8[$__digits>>0]|0;
     $32 = $31 & 1;
     $33 = ($32<<24>>24)==(0);
     if ($33) {
      $36 = $31&255;
      $37 = $36 >>> 1;
      $40 = $37;
     } else {
      $34 = (($__digits) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $40 = $35;
     }
     $38 = HEAP32[$__fd>>2]|0;
     $39 = ($40|0)>($38|0);
     if ($39) {
      if ($33) {
       $43 = $31&255;
       $44 = $43 >>> 1;
       $46 = $44;
      } else {
       $41 = (($__digits) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $46 = $42;
      }
      $45 = (($46) - ($38))|0;
      $47 = $45 << 1;
      $48 = HEAP8[$__sn>>0]|0;
      $49 = $48 & 1;
      $50 = ($49<<24>>24)==(0);
      if ($50) {
       $53 = $48&255;
       $54 = $53 >>> 1;
       $64 = $54;
      } else {
       $51 = (($__sn) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $64 = $52;
      }
      $55 = HEAP8[$__sym>>0]|0;
      $56 = $55 & 1;
      $57 = ($56<<24>>24)==(0);
      if ($57) {
       $60 = $55&255;
       $61 = $60 >>> 1;
       $66 = $61;
      } else {
       $58 = (($__sym) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       $66 = $59;
      }
      $62 = $47 | 1;
      $63 = (($64) + ($62))|0;
      $65 = (($63) + ($66))|0;
      $$pn = $65;
     } else {
      $67 = HEAP8[$__sn>>0]|0;
      $68 = $67 & 1;
      $69 = ($68<<24>>24)==(0);
      if ($69) {
       $72 = $67&255;
       $73 = $72 >>> 1;
       $82 = $73;
      } else {
       $70 = (($__sn) + 4|0);
       $71 = HEAP32[$70>>2]|0;
       $82 = $71;
      }
      $74 = HEAP8[$__sym>>0]|0;
      $75 = $74 & 1;
      $76 = ($75<<24>>24)==(0);
      if ($76) {
       $79 = $74&255;
       $80 = $79 >>> 1;
       $84 = $80;
      } else {
       $77 = (($__sym) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $84 = $78;
      }
      $81 = (($82) + 2)|0;
      $83 = (($81) + ($84))|0;
      $$pn = $83;
     }
     $85 = (($$pn) + ($38))|0;
     $86 = ($85>>>0)>(100);
     if ($86) {
      $87 = $85 << 2;
      $88 = (_malloc($87)|0);
      $89 = ($88|0)==(0|0);
      if ($89) {
       $90 = (___cxa_allocate_exception(4)|0);
       HEAP32[$90>>2] = ((19952 + 8|0));
       __THREW__ = 0;
       invoke_viii(422,($90|0),(20008|0),(386|0));
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        $93 = ___cxa_find_matching_catch()|0;
        $94 = tempRet0;
        $$0 = $93;$$01 = $94;
        break;
       } else {
        // unreachable;
       }
      } else {
       $102 = $88;$__mb$0 = $88;
      }
     } else {
      $102 = 0;$__mb$0 = $__mbuf;
     }
     $103 = (($__iob) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     if ($33) {
      $109 = (($__digits) + 4|0);
      $110 = $31&255;
      $111 = $110 >>> 1;
      $113 = $109;$114 = $111;
     } else {
      $105 = (($__digits) + 8|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (($__digits) + 4|0);
      $108 = HEAP32[$107>>2]|0;
      $113 = $106;$114 = $108;
     }
     $112 = (($113) + ($114<<2)|0);
     $115 = HEAP32[$__dp>>2]|0;
     $116 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(602,($__mb$0|0),($__mi|0),($__me|0),($104|0),($113|0),($112|0),($4|0),($28|0),($__pat|0),($115|0),($116|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if (!($118)) {
      $119 = HEAP32[$__s>>2]|0;
      $120 = HEAP32[$__mi>>2]|0;
      $121 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      invoke_viiiiiii(584,($agg$result|0),($119|0),($__mb$0|0),($120|0),($121|0),($__iob|0),($__fl|0));
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if (!($123)) {
       $124 = ($102|0)==(0|0);
       if (!($124)) {
        _free($102);
       }
       $125 = HEAP8[$__sn>>0]|0;
       $126 = $125 & 1;
       $127 = ($126<<24>>24)==(0);
       if (!($127)) {
        $128 = (($__sn) + 8|0);
        $129 = HEAP32[$128>>2]|0;
        _free($129);
       }
       $130 = HEAP8[$__sym>>0]|0;
       $131 = $130 & 1;
       $132 = ($131<<24>>24)==(0);
       if (!($132)) {
        $133 = (($__sym) + 8|0);
        $134 = HEAP32[$133>>2]|0;
        _free($134);
       }
       $135 = HEAP8[$__grp>>0]|0;
       $136 = $135 & 1;
       $137 = ($136<<24>>24)==(0);
       if (!($137)) {
        $138 = (($__grp) + 8|0);
        $139 = HEAP32[$138>>2]|0;
        _free($139);
       }
       $140 = (($1) + 4|0);
       $141 = HEAP32[$140>>2]|0;HEAP32[$140>>2] = (($141+-1)|0);
       $142 = ($141|0)==(0);
       if (!($142)) {
        STACKTOP = sp;return;
       }
       $143 = HEAP32[$1>>2]|0;
       $144 = (($143) + 8|0);
       $145 = HEAP32[$144>>2]|0;
       FUNCTION_TABLE_vi[$145 & 1023]($1);
       STACKTOP = sp;return;
      }
     }
     $99 = ___cxa_find_matching_catch()|0;
     $100 = tempRet0;
     $101 = ($102|0)==(0|0);
     if ($101) {
      $$0 = $99;$$01 = $100;
     } else {
      _free($102);
      $$0 = $99;$$01 = $100;
     }
    }
   } while(0);
   $146 = HEAP8[$__sn>>0]|0;
   $147 = $146 & 1;
   $148 = ($147<<24>>24)==(0);
   if (!($148)) {
    $149 = (($__sn) + 8|0);
    $150 = HEAP32[$149>>2]|0;
    _free($150);
   }
   $151 = HEAP8[$__sym>>0]|0;
   $152 = $151 & 1;
   $153 = ($152<<24>>24)==(0);
   if (!($153)) {
    $154 = (($__sym) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    _free($155);
   }
   $156 = HEAP8[$__grp>>0]|0;
   $157 = $156 & 1;
   $158 = ($157<<24>>24)==(0);
   if ($158) {
    $$1 = $$0;$$12 = $$01;
   } else {
    $159 = (($__grp) + 8|0);
    $160 = HEAP32[$159>>2]|0;
    _free($160);
    $$1 = $$0;$$12 = $$01;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $95 = ___cxa_find_matching_catch()|0;
  $96 = tempRet0;
  $$1 = $95;$$12 = $96;
 }
 $161 = (($1) + 4|0);
 $162 = HEAP32[$161>>2]|0;HEAP32[$161>>2] = (($162+-1)|0);
 $163 = ($162|0)==(0);
 if (!($163)) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $164 = HEAP32[$1>>2]|0;
 $165 = (($164) + 8|0);
 $166 = HEAP32[$165>>2]|0;
 FUNCTION_TABLE_vi[$166 & 1023]($1);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index4 = 0, $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $11 = $7;$12 = $9;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $11 = $4;$12 = $6;
 }
 $10 = (($11) + ($12)|0);
 $13 = ($11>>>0)<($10>>>0);
 do {
  if ($13) {
   $$01$i7 = $11;
   while(1) {
    $18 = HEAP8[$$01$i7>>0]|0;
    __THREW__ = 0;
    invoke_vii(589,($__ndflt|0),($18|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 12;
     break;
    }
    $21 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($21|0)==($10|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $21;
    }
   }
   if ((label|0) == 12) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $lpad$phi$index = $34;$lpad$phi$index4 = $35;
    label = 14;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $22 = ($__c|0)==(-1);
   $23 = $__c << 1;
   $24 = $23;
   $25 = $22 ? (-1) : $24;
   if ($phitmp18) {
    $62 = $25;
    label = 10;
   } else {
    $26 = (($__ndflt) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $29 = $25;$30 = $27;
    label = 11;
   }
  } else {
   $14 = ($__c|0)==(-1);
   $15 = $__c << 1;
   $16 = $15;
   $17 = $14 ? (-1) : $16;
   $62 = $17;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $28 = (($__ndflt) + 1|0);
  $29 = $62;$30 = $28;
  label = 11;
 }
 L16: do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $31 = (invoke_iiiii(603,($29|0),($__set|0),($__msgid|0),($30|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index4 = $37;
    label = 14;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $38 = (_strlen(($31|0))|0);
   $39 = (($31) + ($38)|0);
   $40 = ($38|0)>(0);
   L21: do {
    if ($40) {
     $$01$i = $31;
     while(1) {
      $41 = HEAP8[$$01$i>>0]|0;
      __THREW__ = 0;
      invoke_vii(589,($agg$result|0),($41|0));
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       break;
      }
      $44 = (($$01$i) + 1|0);
      $exitcond$i = ($44|0)==($39|0);
      if ($exitcond$i) {
       break L21;
      } else {
       $$01$i = $44;
      }
     }
     $45 = ___cxa_find_matching_catch()|0;
     $46 = tempRet0;
     $47 = HEAP8[$agg$result>>0]|0;
     $48 = $47 & 1;
     $49 = ($48<<24>>24)==(0);
     if ($49) {
      $$01 = $45;$$02 = $46;
      break L16;
     }
     $50 = (($agg$result) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     _free($51);
     $$01 = $45;$$02 = $46;
     break L16;
    }
   } while(0);
   $52 = HEAP8[$__ndflt>>0]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   if ($54) {
    STACKTOP = sp;return;
   }
   $55 = (($__ndflt) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   _free($56);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 14) {
  $$01 = $lpad$phi$index;$$02 = $lpad$phi$index4;
 }
 $57 = HEAP8[$__ndflt>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if ($59) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $60 = (($__ndflt) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 _free($61);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre2 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0, $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0;
 var $lpad$phi$index = 0, $lpad$phi$index13 = 0, $lpad$phi38$index = 0, $lpad$phi38$index6 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, $phitmp = 0, $phitmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 60|0;
 $__wn$i = sp + 56|0;
 $__mb$i = sp;
 $__buf$i = sp + 64|0;
 $__bn$i = sp + 40|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 20|0;
 $0 = sp + 48|0;
 $1 = sp + 32|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((13360 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = $3&255;
  $12 = $11 >>> 1;
  $14 = $10;$15 = $12;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $14 = $7;$15 = $9;
 }
 $13 = (($14) + ($15<<2)|0);
 $16 = $__mb$i11;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ($14>>>0)<($13>>>0);
 L5: do {
  if ($20) {
   $21 = (($__buf$i13) + 32|0);
   $$04$i16 = $14;$23 = ((13360 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $22 = (($23) + 12|0);
    $24 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    $25 = (invoke_iiiiiiiii($24|0,($0|0),($__mb$i11|0),($$04$i16|0),($13|0),($__wn$i|0),($__buf$i13|0),($21|0),($__bn$i14|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     label = 23;
     break;
    }
    $28 = ($25|0)==(2);
    $29 = HEAP32[$__wn$i>>2]|0;
    $30 = ($29|0)==($$04$i16|0);
    $or$cond2$i17 = $28 | $30;
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $31 = HEAP32[$__bn$i14>>2]|0;
    $32 = ($__buf$i13>>>0)<($31>>>0);
    if ($32) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $35 = HEAP8[$__p$03$i20>>0]|0;
      __THREW__ = 0;
      invoke_vii(589,($__ndflt|0),($35|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       label = 22;
       break L7;
      }
      $38 = (($__p$03$i20) + 1|0);
      $39 = HEAP32[$__bn$i14>>2]|0;
      $40 = ($38>>>0)<($39>>>0);
      if ($40) {
       $__p$03$i20 = $38;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $42 = $$pre$i21;
    } else {
     $42 = $29;
    }
    $41 = ($42>>>0)<($13>>>0);
    if (!($41)) {
     label = 16;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $42;$23 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(557,(12592|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $60 = ___cxa_find_matching_catch()|0;
      $61 = tempRet0;
      $lpad$phi38$index = $60;$lpad$phi38$index6 = $61;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     $$pre2 = HEAP8[$__ndflt>>0]|0;
     $phitmp = $$pre2 & 1;
     $phitmp3 = ($phitmp<<24>>24)==(0);
     $119 = $phitmp3;
     label = 17;
     break L5;
    }
    else if ((label|0) == 22) {
     $56 = ___cxa_find_matching_catch()|0;
     $57 = tempRet0;
     $lpad$phi38$index = $56;$lpad$phi38$index6 = $57;
    }
    else if ((label|0) == 23) {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi38$index = $58;$lpad$phi38$index6 = $59;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index6;
  } else {
   $119 = 1;
   label = 17;
  }
 } while(0);
 L27: do {
  if ((label|0) == 17) {
   $43 = ($__c|0)==(-1);
   $44 = $__c << 1;
   $45 = $44;
   $46 = $43 ? (-1) : $45;
   if ($119) {
    $49 = (($__ndflt) + 1|0);
    $50 = $49;
   } else {
    $47 = (($__ndflt) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $50 = $48;
   }
   __THREW__ = 0;
   $51 = (invoke_iiiii(603,($46|0),($__set|0),($__msgid|0),($50|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $54 = ___cxa_find_matching_catch()|0;
    $55 = tempRet0;
    $$1 = $54;$$13 = $55;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $62 = (($1) + 4|0);
   HEAP32[$62>>2] = 0;
   HEAP32[$1>>2] = ((13464 + 8|0));
   $63 = (_strlen(($51|0))|0);
   $64 = (($51) + ($63)|0);
   $65 = $__mb$i;
   $66 = $65;
   HEAP32[$66>>2] = 0;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = 0;
   $69 = ($63|0)>(0);
   L36: do {
    if ($69) {
     $70 = $64;
     $71 = (($__buf$i) + 128|0);
     $$04$i = $51;$73 = ((13464 + 8|0));
     L38: while(1) {
      HEAP32[$__nn$i>>2] = $$04$i;
      $72 = (($73) + 16|0);
      $74 = HEAP32[$72>>2]|0;
      $75 = $$04$i;
      $76 = (($70) - ($75))|0;
      $77 = ($76|0)>(32);
      $78 = (($$04$i) + 32|0);
      $79 = $77 ? $78 : $64;
      __THREW__ = 0;
      $80 = (invoke_iiiiiiiii($74|0,($1|0),($__mb$i|0),($$04$i|0),($79|0),($__nn$i|0),($__buf$i|0),($71|0),($__bn$i|0))|0);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 42;
       break;
      }
      $83 = ($80|0)==(2);
      $84 = HEAP32[$__nn$i>>2]|0;
      $85 = ($84|0)==($$04$i|0);
      $or$cond2$i = $83 | $85;
      if ($or$cond2$i) {
       label = 31;
       break;
      }
      $86 = HEAP32[$__bn$i>>2]|0;
      $87 = ($__buf$i>>>0)<($86>>>0);
      if ($87) {
       $__p$03$i = $__buf$i;
       while(1) {
        $90 = HEAP32[$__p$03$i>>2]|0;
        __THREW__ = 0;
        invoke_vii(596,($agg$result|0),($90|0));
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         label = 41;
         break L38;
        }
        $93 = (($__p$03$i) + 4|0);
        $94 = HEAP32[$__bn$i>>2]|0;
        $95 = ($93>>>0)<($94>>>0);
        if ($95) {
         $__p$03$i = $93;
        } else {
         break;
        }
       }
       $$pre$i = HEAP32[$__nn$i>>2]|0;
       $97 = $$pre$i;
      } else {
       $97 = $84;
      }
      $96 = ($97>>>0)<($64>>>0);
      if (!($96)) {
       break L36;
      }
      $$pre44 = HEAP32[$1>>2]|0;
      $$04$i = $97;$73 = $$pre44;
     }
     do {
      if ((label|0) == 31) {
       __THREW__ = 0;
       invoke_vi(557,(12592|0));
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        $107 = ___cxa_find_matching_catch()|0;
        $108 = tempRet0;
        $lpad$phi$index = $107;$lpad$phi$index13 = $108;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 41) {
       $103 = ___cxa_find_matching_catch()|0;
       $104 = tempRet0;
       $lpad$phi$index = $103;$lpad$phi$index13 = $104;
      }
      else if ((label|0) == 42) {
       $105 = ___cxa_find_matching_catch()|0;
       $106 = tempRet0;
       $lpad$phi$index = $105;$lpad$phi$index13 = $106;
      }
     } while(0);
     $109 = HEAP8[$agg$result>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      $$1 = $lpad$phi$index;$$13 = $lpad$phi$index13;
      break L27;
     }
     $112 = (($agg$result) + 8|0);
     $113 = HEAP32[$112>>2]|0;
     _free($113);
     $$1 = $lpad$phi$index;$$13 = $lpad$phi$index13;
     break L27;
    }
   } while(0);
   $98 = HEAP8[$__ndflt>>0]|0;
   $99 = $98 & 1;
   $100 = ($99<<24>>24)==(0);
   if ($100) {
    STACKTOP = sp;return;
   }
   $101 = (($__ndflt) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   _free($102);
   STACKTOP = sp;return;
  }
 } while(0);
 $114 = HEAP8[$__ndflt>>0]|0;
 $115 = $114 & 1;
 $116 = ($115<<24>>24)==(0);
 if ($116) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $117 = (($__ndflt) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 _free($118);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11832 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(574)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ($1|0)==($2|0);
  if ($5) {
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(585,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((20152 + 8|0));
 $1 = (($0) + 4|0);
 $2 = (_strlen((11648|0))|0);
 $3 = (($2) + 13)|0;
 __THREW__ = 0;
 $4 = (invoke_ii(559,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($11|0);
  // unreachable;
 } else {
  $7 = (($2) + 1)|0;
  $8 = (($4) + 4|0);
  HEAP32[$8>>2] = $2;
  HEAP32[$4>>2] = $2;
  $9 = (($4) + 12|0);
  HEAP32[$1>>2] = $9;
  $10 = (($4) + 8|0);
  HEAP32[$10>>2] = 0;
  _memcpy(($9|0),(11648|0),($7|0))|0;
  HEAP32[$0>>2] = ((20232 + 8|0));
  ___cxa_throw(($0|0),(20280|0),(389|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$0$i$i$i37 = 0, $$0$i$i$i4 = 0, $$0$i1$i$i = 0, $$0$i3$i$i = 0, $$pre = 0, $$pre1$i$i$i = 0, $$pre2$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $__new_last2$i$i$i = 0, $__v$i$i$sroa$2$0 = 0, $__v$i$i$sroa$3 = 0, $or$cond$i$i$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i$sroa$3 = sp;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)>($id>>>0);
 do {
  if ($10) {
   $81 = $5;
  } else {
   $11 = (($id) + 1)|0;
   $12 = ($9>>>0)<($11>>>0);
   if (!($12)) {
    $66 = ($9>>>0)>($11>>>0);
    if (!($66)) {
     $81 = $5;
     break;
    }
    $67 = (($5) + ($11<<2)|0);
    $68 = ($3|0)==($67|0);
    if ($68) {
     $81 = $5;
     break;
    }
    $__new_last2$i$i$i = $67;
    $scevgep$i$i$i = (($3) + -4|0);
    $69 = (0 - ($__new_last2$i$i$i))|0;
    $uglygep$i$i$i = (($scevgep$i$i$i) + ($69)|0);
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $70 = $uglygep3$i$i$i >>> 2;
    $71 = $70 ^ -1;
    $scevgep4$i$i$i = (($3) + ($71<<2)|0);
    HEAP32[$2>>2] = $scevgep4$i$i$i;
    $81 = $5;
    break;
   }
   $13 = (($11) - ($9))|0;
   $14 = (($this) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15;
   $17 = (($16) - ($6))|0;
   $18 = $17 >> 2;
   $19 = ($18>>>0)<($13>>>0);
   L8: do {
    if ($19) {
     $26 = (($this) + 24|0);
     $27 = ($11>>>0)>(1073741823);
     do {
      if ($27) {
       __THREW__ = 0;
       invoke_v(432);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if (!($29)) {
        // unreachable;
       }
      } else {
       $30 = (($16) - ($7))|0;
       $31 = $30 >> 2;
       $32 = ($31>>>0)<(536870911);
       if ($32) {
        $33 = $30 >> 1;
        $34 = ($33>>>0)<($11>>>0);
        $35 = $34 ? $11 : $33;
        HEAP32[$__v$i$i$sroa$3>>2] = 0;
        $36 = ($35|0)==(0);
        if ($36) {
         $$0$i$i$i4 = 0;$46 = 0;
        } else {
         $37 = (($this) + 136|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = ($38<<24>>24)==(0);
         $40 = ($35>>>0)<(29);
         $or$cond$i$i$i$i$i = $39 & $40;
         if ($or$cond$i$i$i$i$i) {
          HEAP8[$37>>0] = 1;
          $$0$i$i$i4 = $35;$46 = $26;
         } else {
          $$0$i$i$i37 = $35;
          label = 15;
         }
        }
       } else {
        HEAP32[$__v$i$i$sroa$3>>2] = 0;
        $$0$i$i$i37 = 1073741823;
        label = 15;
       }
       if ((label|0) == 15) {
        $41 = $$0$i$i$i37 << 2;
        __THREW__ = 0;
        $42 = (invoke_ii(559,($41|0))|0);
        $43 = __THREW__; __THREW__ = 0;
        $44 = $43&1;
        if ($44) {
         break;
        }
        $$0$i$i$i4 = $$0$i$i$i37;$46 = $42;
       }
       $45 = (($46) + ($9<<2)|0);
       $47 = (($46) + ($$0$i$i$i4<<2)|0);
       HEAP32[$__v$i$i$sroa$3>>2] = $47;
       $$0$i3$i$i = $13;$__v$i$i$sroa$2$0 = $45;
       while(1) {
        $48 = ($__v$i$i$sroa$2$0|0)==(0|0);
        if ($48) {
         $50 = 0;
        } else {
         HEAP32[$__v$i$i$sroa$2$0>>2] = 0;
         $50 = $__v$i$i$sroa$2$0;
        }
        $49 = (($50) + 4|0);
        $51 = (($$0$i3$i$i) + -1)|0;
        $52 = ($51|0)==(0);
        if ($52) {
         break;
        } else {
         $$0$i3$i$i = $51;$__v$i$i$sroa$2$0 = $49;
        }
       }
       $53 = HEAP32[$4>>2]|0;
       $54 = HEAP32[$2>>2]|0;
       $55 = $54;
       $56 = $53;
       $57 = (($55) - ($56))|0;
       $58 = $57 >> 2;
       $$sum = (($9) - ($58))|0;
       $59 = (($46) + ($$sum<<2)|0);
       _memcpy(($59|0),($53|0),($57|0))|0;
       $60 = HEAP32[$4>>2]|0;
       HEAP32[$4>>2] = $59;
       HEAP32[$2>>2] = $49;
       $61 = HEAP32[$14>>2]|0;
       $62 = HEAP32[$__v$i$i$sroa$3>>2]|0;
       HEAP32[$14>>2] = $62;
       HEAP32[$__v$i$i$sroa$3>>2] = $61;
       $63 = ($60|0)==(0|0);
       if ($63) {
        break L8;
       }
       $64 = ($26|0)==($60|0);
       if ($64) {
        $65 = (($this) + 136|0);
        HEAP8[$65>>0] = 0;
        break L8;
       } else {
        _free($60);
        break L8;
       }
      }
     } while(0);
     $72 = ___cxa_find_matching_catch()|0;
     $73 = tempRet0;
     $74 = ($f|0)==(0|0);
     if ($74) {
      ___resumeException($72|0);
      // unreachable;
     }
     $75 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($75+-1)|0);
     $76 = ($75|0)==(0);
     if (!($76)) {
      ___resumeException($72|0);
      // unreachable;
     }
     $77 = HEAP32[$f>>2]|0;
     $78 = (($77) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     FUNCTION_TABLE_vi[$79 & 1023]($f);
     ___resumeException($72|0);
     // unreachable;
    } else {
     $$0$i1$i$i = $13;$21 = $3;
     while(1) {
      $20 = ($21|0)==(0|0);
      if ($20) {
       $23 = 0;
      } else {
       HEAP32[$21>>2] = 0;
       $$pre1$i$i$i = HEAP32[$2>>2]|0;
       $23 = $$pre1$i$i$i;
      }
      $22 = (($23) + 4|0);
      HEAP32[$2>>2] = $22;
      $24 = (($$0$i1$i$i) + -1)|0;
      $25 = ($24|0)==(0);
      if ($25) {
       break;
      } else {
       $$0$i1$i$i = $24;$21 = $22;
      }
     }
    }
   } while(0);
   $$pre2$pre = HEAP32[$4>>2]|0;
   $81 = $$pre2$pre;
  }
 } while(0);
 $80 = (($81) + ($id<<2)|0);
 $82 = HEAP32[$80>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  $91 = $81;
  $90 = (($91) + ($id<<2)|0);
  HEAP32[$90>>2] = $f;
  STACKTOP = sp;return;
 }
 $84 = (($82) + 4|0);
 $85 = HEAP32[$84>>2]|0;HEAP32[$84>>2] = (($85+-1)|0);
 $86 = ($85|0)==(0);
 if ($86) {
  $87 = HEAP32[$82>>2]|0;
  $88 = (($87) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  FUNCTION_TABLE_vi[$89 & 1023]($82);
 }
 $$pre = HEAP32[$4>>2]|0;
 $91 = $$pre;
 $90 = (($91) + ($id<<2)|0);
 HEAP32[$90>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11680 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $29 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $17 = $29;$19 = $6;
   } else {
    $9 = (($7) + 4|0);
    $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10+-1)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = HEAP32[$7>>2]|0;
     $13 = (($12) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     FUNCTION_TABLE_vi[$14 & 1023]($7);
    }
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $17 = $$pre;$19 = $$pre2;
   }
   $15 = (($i$01) + 1)|0;
   $16 = $17;
   $18 = $19;
   $20 = (($16) - ($18))|0;
   $21 = $20 >> 2;
   $22 = ($15>>>0)<($21>>>0);
   if ($22) {
    $29 = $17;$6 = $19;$i$01 = $15;
   } else {
    break;
   }
  }
 }
 $23 = (($this) + 144|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
  STACKTOP = sp;return;
 }
 $27 = (($this) + 152|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $$0$i$i$i$i$i$i$i = 0, $$pre1$i$i$i$i$i$i$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i$i$i$i$i = 0, $eh$lpad$body$i$i$i$i$i$indexZ2D = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, $uglygep$i$i$i$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11728>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $186 = HEAP32[11720>>2]|0;
  HEAP32[$this>>2] = $186;
  $187 = (($186) + 4|0);
  $188 = HEAP32[$187>>2]|0;HEAP32[$187>>2] = (($188+1)|0);
  STACKTOP = sp;return;
 }
 $2 = (___cxa_guard_acquire((11728|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $186 = HEAP32[11720>>2]|0;
  HEAP32[$this>>2] = $186;
  $187 = (($186) + 4|0);
  $188 = HEAP32[$187>>2]|0;HEAP32[$187>>2] = (($188+1)|0);
  STACKTOP = sp;return;
 }
 $4 = HEAP8[11712>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L7: do {
  if ($5) {
   $6 = (___cxa_guard_acquire((11712|0))|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    HEAP32[((16056 + 4|0))>>2] = 0;
    HEAP32[16056>>2] = ((11680 + 8|0));
    HEAP8[((16056 + 136|0))>>0] = 1;
    HEAP32[((16056 + 12|0))>>2] = ((16056 + 24|0));
    HEAP32[((16056 + 8|0))>>2] = ((16056 + 24|0));
    HEAP32[((16056 + 16|0))>>2] = ((16056 + 136|0));
    $$0$i$i$i$i$i$i$i = 28;$8 = ((16056 + 24|0));
    while(1) {
     HEAP32[$8>>2] = 0;
     $$pre1$i$i$i$i$i$i$i = HEAP32[((16056 + 12|0))>>2]|0;
     $9 = (($$pre1$i$i$i$i$i$i$i) + 4|0);
     HEAP32[((16056 + 12|0))>>2] = $9;
     $10 = (($$0$i$i$i$i$i$i$i) + -1)|0;
     $11 = ($10|0)==(0);
     if ($11) {
      break;
     } else {
      $$0$i$i$i$i$i$i$i = $10;$8 = $9;
     }
    }
    HEAP8[((16056 + 144|0))>>0] = 2;
    HEAP8[((16056 + 145|0))>>0] = 67;
    HEAP8[((16056 + 146|0))>>0] = 0;
    $12 = HEAP32[((16056 + 8|0))>>2]|0;
    $13 = ($9|0)==($12|0);
    if (!($13)) {
     $__new_last2$i$i$i$i$i$i$i$i = $12;
     $14 = (0 - ($__new_last2$i$i$i$i$i$i$i$i))|0;
     $uglygep$i$i$i$i$i$i$i$i = (($$pre1$i$i$i$i$i$i$i) + ($14)|0);
     $uglygep3$i$i$i$i$i$i$i$i = $uglygep$i$i$i$i$i$i$i$i;
     $15 = $uglygep3$i$i$i$i$i$i$i$i >>> 2;
     $$sum = (0 - ($15))|0;
     $scevgep4$i$i$i$i$i$i$i$i = (($$pre1$i$i$i$i$i$i$i) + ($$sum<<2)|0);
     HEAP32[((16056 + 12|0))>>2] = $scevgep4$i$i$i$i$i$i$i$i;
    }
    HEAP32[((16520 + 4|0))>>2] = 0;
    HEAP32[16520>>2] = ((10128 + 8|0));
    __THREW__ = 0;
    $16 = (invoke_ii(423,(10160|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    do {
     if ($18) {
      label = 73;
     } else {
      __THREW__ = 0;
      invoke_viii(604,(16056|0),(16520|0),($16|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       label = 73;
      } else {
       HEAP32[((16512 + 4|0))>>2] = 0;
       HEAP32[16512>>2] = ((10168 + 8|0));
       __THREW__ = 0;
       $21 = (invoke_ii(423,(10200|0))|0);
       $22 = __THREW__; __THREW__ = 0;
       $23 = $22&1;
       if ($23) {
        label = 73;
       } else {
        __THREW__ = 0;
        invoke_viii(604,(16056|0),(16512|0),($21|0));
        $24 = __THREW__; __THREW__ = 0;
        $25 = $24&1;
        if ($25) {
         label = 73;
        } else {
         HEAP32[((16496 + 4|0))>>2] = 0;
         HEAP32[16496>>2] = ((11760 + 8|0));
         HEAP32[((16496 + 8|0))>>2] = 0;
         HEAP8[((16496 + 12|0))>>0] = 0;
         __THREW__ = 0;
         $26 = (invoke_i(605)|0);
         $27 = __THREW__; __THREW__ = 0;
         $28 = $27&1;
         if ($28) {
          $29 = ___cxa_find_matching_catch(0|0)|0;
          $30 = tempRet0;
          ___clang_call_terminate($29);
          // unreachable;
         }
         $31 = HEAP32[$26>>2]|0;
         HEAP32[((16496 + 8|0))>>2] = $31;
         __THREW__ = 0;
         $32 = (invoke_ii(423,(11752|0))|0);
         $33 = __THREW__; __THREW__ = 0;
         $34 = $33&1;
         if ($34) {
          label = 73;
         } else {
          __THREW__ = 0;
          invoke_viii(604,(16056|0),(16496|0),($32|0));
          $35 = __THREW__; __THREW__ = 0;
          $36 = $35&1;
          if ($36) {
           label = 73;
          } else {
           HEAP32[((16488 + 4|0))>>2] = 0;
           HEAP32[16488>>2] = ((12680 + 8|0));
           __THREW__ = 0;
           $37 = (invoke_ii(423,(11744|0))|0);
           $38 = __THREW__; __THREW__ = 0;
           $39 = $38&1;
           if ($39) {
            label = 73;
           } else {
            __THREW__ = 0;
            invoke_viii(604,(16056|0),(16488|0),($37|0));
            $40 = __THREW__; __THREW__ = 0;
            $41 = $40&1;
            if ($41) {
             label = 73;
            } else {
             HEAP32[((16480 + 4|0))>>2] = 0;
             HEAP32[16480>>2] = ((12896 + 8|0));
             __THREW__ = 0;
             $42 = (invoke_ii(423,(11816|0))|0);
             $43 = __THREW__; __THREW__ = 0;
             $44 = $43&1;
             if ($44) {
              label = 73;
             } else {
              __THREW__ = 0;
              invoke_viii(604,(16056|0),(16480|0),($42|0));
              $45 = __THREW__; __THREW__ = 0;
              $46 = $45&1;
              if ($46) {
               label = 73;
              } else {
               HEAP32[((16464 + 4|0))>>2] = 0;
               HEAP32[16464>>2] = ((11832 + 8|0));
               __THREW__ = 0;
               $47 = (invoke_i(574)|0);
               $48 = __THREW__; __THREW__ = 0;
               $49 = $48&1;
               if ($49) {
                $50 = ___cxa_find_matching_catch(0|0)|0;
                $51 = tempRet0;
                $eh$lpad$body$i$i$i$i$i$indexZ2D = $50;
                break;
               }
               HEAP32[((16464 + 8|0))>>2] = $47;
               __THREW__ = 0;
               $52 = (invoke_ii(423,(11824|0))|0);
               $53 = __THREW__; __THREW__ = 0;
               $54 = $53&1;
               if ($54) {
                label = 73;
               } else {
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16464|0),($52|0));
                $55 = __THREW__; __THREW__ = 0;
                $56 = $55&1;
                if ($56) {
                 label = 73;
                 break;
                }
                HEAP32[((16456 + 4|0))>>2] = 0;
                HEAP32[16456>>2] = ((13120 + 8|0));
                __THREW__ = 0;
                $57 = (invoke_ii(423,(11880|0))|0);
                $58 = __THREW__; __THREW__ = 0;
                $59 = $58&1;
                if ($59) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16456|0),($57|0));
                $60 = __THREW__; __THREW__ = 0;
                $61 = $60&1;
                if ($61) {
                 label = 73;
                 break;
                }
                HEAP32[((16448 + 4|0))>>2] = 0;
                HEAP32[16448>>2] = ((13240 + 8|0));
                __THREW__ = 0;
                $62 = (invoke_ii(423,(11888|0))|0);
                $63 = __THREW__; __THREW__ = 0;
                $64 = $63&1;
                if ($64) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16448|0),($62|0));
                $65 = __THREW__; __THREW__ = 0;
                $66 = $65&1;
                if ($66) {
                 label = 73;
                 break;
                }
                HEAP32[((16424 + 4|0))>>2] = 0;
                HEAP32[16424>>2] = ((11912 + 8|0));
                HEAP8[((16424 + 8|0))>>0] = 46;
                HEAP8[((16424 + 9|0))>>0] = 44;
                ;HEAP32[((16424 + 12|0))+0>>2]=0|0;HEAP32[((16424 + 12|0))+4>>2]=0|0;HEAP32[((16424 + 12|0))+8>>2]=0|0;
                __THREW__ = 0;
                $67 = (invoke_ii(423,(11896|0))|0);
                $68 = __THREW__; __THREW__ = 0;
                $69 = $68&1;
                if ($69) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16424|0),($67|0));
                $70 = __THREW__; __THREW__ = 0;
                $71 = $70&1;
                if ($71) {
                 label = 73;
                 break;
                }
                HEAP32[((16392 + 4|0))>>2] = 0;
                HEAP32[16392>>2] = ((11952 + 8|0));
                HEAP32[((16392 + 8|0))>>2] = 46;
                HEAP32[((16392 + 12|0))>>2] = 44;
                ;HEAP32[((16392 + 16|0))+0>>2]=0|0;HEAP32[((16392 + 16|0))+4>>2]=0|0;HEAP32[((16392 + 16|0))+8>>2]=0|0;
                __THREW__ = 0;
                $72 = (invoke_ii(423,(11904|0))|0);
                $73 = __THREW__; __THREW__ = 0;
                $74 = $73&1;
                if ($74) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16392|0),($72|0));
                $75 = __THREW__; __THREW__ = 0;
                $76 = $75&1;
                if ($76) {
                 label = 73;
                 break;
                }
                HEAP32[((16384 + 4|0))>>2] = 0;
                HEAP32[16384>>2] = ((10208 + 8|0));
                __THREW__ = 0;
                $77 = (invoke_ii(423,(10272|0))|0);
                $78 = __THREW__; __THREW__ = 0;
                $79 = $78&1;
                if ($79) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16384|0),($77|0));
                $80 = __THREW__; __THREW__ = 0;
                $81 = $80&1;
                if ($81) {
                 label = 73;
                 break;
                }
                HEAP32[((16376 + 4|0))>>2] = 0;
                HEAP32[16376>>2] = ((10328 + 8|0));
                __THREW__ = 0;
                $82 = (invoke_ii(423,(10392|0))|0);
                $83 = __THREW__; __THREW__ = 0;
                $84 = $83&1;
                if ($84) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16376|0),($82|0));
                $85 = __THREW__; __THREW__ = 0;
                $86 = $85&1;
                if ($86) {
                 label = 73;
                 break;
                }
                HEAP32[((16368 + 4|0))>>2] = 0;
                HEAP32[16368>>2] = ((10400 + 8|0));
                __THREW__ = 0;
                $87 = (invoke_ii(423,(10456|0))|0);
                $88 = __THREW__; __THREW__ = 0;
                $89 = $88&1;
                if ($89) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16368|0),($87|0));
                $90 = __THREW__; __THREW__ = 0;
                $91 = $90&1;
                if ($91) {
                 label = 73;
                 break;
                }
                HEAP32[((16360 + 4|0))>>2] = 0;
                HEAP32[16360>>2] = ((10496 + 8|0));
                __THREW__ = 0;
                $92 = (invoke_ii(423,(10552|0))|0);
                $93 = __THREW__; __THREW__ = 0;
                $94 = $93&1;
                if ($94) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16360|0),($92|0));
                $95 = __THREW__; __THREW__ = 0;
                $96 = $95&1;
                if ($96) {
                 label = 73;
                 break;
                }
                HEAP32[((16352 + 4|0))>>2] = 0;
                HEAP32[16352>>2] = ((11088 + 8|0));
                __THREW__ = 0;
                $97 = (invoke_ii(423,(11144|0))|0);
                $98 = __THREW__; __THREW__ = 0;
                $99 = $98&1;
                if ($99) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16352|0),($97|0));
                $100 = __THREW__; __THREW__ = 0;
                $101 = $100&1;
                if ($101) {
                 label = 73;
                 break;
                }
                HEAP32[((16344 + 4|0))>>2] = 0;
                HEAP32[16344>>2] = ((11152 + 8|0));
                __THREW__ = 0;
                $102 = (invoke_ii(423,(11208|0))|0);
                $103 = __THREW__; __THREW__ = 0;
                $104 = $103&1;
                if ($104) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16344|0),($102|0));
                $105 = __THREW__; __THREW__ = 0;
                $106 = $105&1;
                if ($106) {
                 label = 73;
                 break;
                }
                HEAP32[((16336 + 4|0))>>2] = 0;
                HEAP32[16336>>2] = ((11216 + 8|0));
                __THREW__ = 0;
                $107 = (invoke_ii(423,(11272|0))|0);
                $108 = __THREW__; __THREW__ = 0;
                $109 = $108&1;
                if ($109) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16336|0),($107|0));
                $110 = __THREW__; __THREW__ = 0;
                $111 = $110&1;
                if ($111) {
                 label = 73;
                 break;
                }
                HEAP32[((16328 + 4|0))>>2] = 0;
                HEAP32[16328>>2] = ((11280 + 8|0));
                __THREW__ = 0;
                $112 = (invoke_ii(423,(11336|0))|0);
                $113 = __THREW__; __THREW__ = 0;
                $114 = $113&1;
                if ($114) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16328|0),($112|0));
                $115 = __THREW__; __THREW__ = 0;
                $116 = $115&1;
                if ($116) {
                 label = 73;
                 break;
                }
                HEAP32[((16320 + 4|0))>>2] = 0;
                HEAP32[16320>>2] = ((11344 + 8|0));
                __THREW__ = 0;
                $117 = (invoke_ii(423,(11376|0))|0);
                $118 = __THREW__; __THREW__ = 0;
                $119 = $118&1;
                if ($119) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16320|0),($117|0));
                $120 = __THREW__; __THREW__ = 0;
                $121 = $120&1;
                if ($121) {
                 label = 73;
                 break;
                }
                HEAP32[((16312 + 4|0))>>2] = 0;
                HEAP32[16312>>2] = ((11424 + 8|0));
                __THREW__ = 0;
                $122 = (invoke_ii(423,(11456|0))|0);
                $123 = __THREW__; __THREW__ = 0;
                $124 = $123&1;
                if ($124) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16312|0),($122|0));
                $125 = __THREW__; __THREW__ = 0;
                $126 = $125&1;
                if ($126) {
                 label = 73;
                 break;
                }
                HEAP32[((16304 + 4|0))>>2] = 0;
                HEAP32[16304>>2] = ((11480 + 8|0));
                __THREW__ = 0;
                $127 = (invoke_ii(423,(11512|0))|0);
                $128 = __THREW__; __THREW__ = 0;
                $129 = $128&1;
                if ($129) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16304|0),($127|0));
                $130 = __THREW__; __THREW__ = 0;
                $131 = $130&1;
                if ($131) {
                 label = 73;
                 break;
                }
                HEAP32[((16296 + 4|0))>>2] = 0;
                HEAP32[16296>>2] = ((11528 + 8|0));
                __THREW__ = 0;
                $132 = (invoke_ii(423,(11560|0))|0);
                $133 = __THREW__; __THREW__ = 0;
                $134 = $133&1;
                if ($134) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16296|0),($132|0));
                $135 = __THREW__; __THREW__ = 0;
                $136 = $135&1;
                if ($136) {
                 label = 73;
                 break;
                }
                HEAP32[((16280 + 4|0))>>2] = 0;
                HEAP32[16280>>2] = ((10576 + 8|0));
                HEAP32[((16280 + 8|0))>>2] = ((10576 + 56|0));
                __THREW__ = 0;
                $137 = (invoke_ii(423,(10664|0))|0);
                $138 = __THREW__; __THREW__ = 0;
                $139 = $138&1;
                if ($139) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16280|0),($137|0));
                $140 = __THREW__; __THREW__ = 0;
                $141 = $140&1;
                if ($141) {
                 label = 73;
                 break;
                }
                HEAP32[((16264 + 4|0))>>2] = 0;
                HEAP32[16264>>2] = ((10728 + 8|0));
                HEAP32[((16264 + 8|0))>>2] = ((10728 + 56|0));
                __THREW__ = 0;
                $142 = (invoke_ii(423,(10816|0))|0);
                $143 = __THREW__; __THREW__ = 0;
                $144 = $143&1;
                if ($144) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16264|0),($142|0));
                $145 = __THREW__; __THREW__ = 0;
                $146 = $145&1;
                if ($146) {
                 label = 73;
                 break;
                }
                HEAP32[((16248 + 4|0))>>2] = 0;
                HEAP32[16248>>2] = ((12616 + 8|0));
                __THREW__ = 0;
                $147 = (invoke_i(574)|0);
                $148 = __THREW__; __THREW__ = 0;
                $149 = $148&1;
                if ($149) {
                 $150 = ___cxa_find_matching_catch(0|0)|0;
                 $151 = tempRet0;
                 $eh$lpad$body$i$i$i$i$i$indexZ2D = $150;
                 break;
                }
                HEAP32[((16248 + 8|0))>>2] = $147;
                HEAP32[16248>>2] = ((11024 + 8|0));
                __THREW__ = 0;
                $152 = (invoke_ii(423,(11048|0))|0);
                $153 = __THREW__; __THREW__ = 0;
                $154 = $153&1;
                if ($154) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16248|0),($152|0));
                $155 = __THREW__; __THREW__ = 0;
                $156 = $155&1;
                if ($156) {
                 label = 73;
                 break;
                }
                HEAP32[((16232 + 4|0))>>2] = 0;
                HEAP32[16232>>2] = ((12616 + 8|0));
                __THREW__ = 0;
                $157 = (invoke_i(574)|0);
                $158 = __THREW__; __THREW__ = 0;
                $159 = $158&1;
                if ($159) {
                 $160 = ___cxa_find_matching_catch(0|0)|0;
                 $161 = tempRet0;
                 $eh$lpad$body$i$i$i$i$i$indexZ2D = $160;
                 break;
                }
                HEAP32[((16232 + 8|0))>>2] = $157;
                HEAP32[16232>>2] = ((11056 + 8|0));
                __THREW__ = 0;
                $162 = (invoke_ii(423,(11080|0))|0);
                $163 = __THREW__; __THREW__ = 0;
                $164 = $163&1;
                if ($164) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16232|0),($162|0));
                $165 = __THREW__; __THREW__ = 0;
                $166 = $165&1;
                if ($166) {
                 label = 73;
                 break;
                }
                HEAP32[((16224 + 4|0))>>2] = 0;
                HEAP32[16224>>2] = ((11568 + 8|0));
                __THREW__ = 0;
                $167 = (invoke_ii(423,(11600|0))|0);
                $168 = __THREW__; __THREW__ = 0;
                $169 = $168&1;
                if ($169) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16224|0),($167|0));
                $170 = __THREW__; __THREW__ = 0;
                $171 = $170&1;
                if ($171) {
                 label = 73;
                 break;
                }
                HEAP32[((16216 + 4|0))>>2] = 0;
                HEAP32[16216>>2] = ((11608 + 8|0));
                __THREW__ = 0;
                $172 = (invoke_ii(423,(11640|0))|0);
                $173 = __THREW__; __THREW__ = 0;
                $174 = $173&1;
                if ($174) {
                 label = 73;
                 break;
                }
                __THREW__ = 0;
                invoke_viii(604,(16056|0),(16216|0),($172|0));
                $175 = __THREW__; __THREW__ = 0;
                $176 = $175&1;
                if ($176) {
                 label = 73;
                 break;
                }
                HEAP32[11704>>2] = 16056;
                ___cxa_guard_release((11712|0));
                break L7;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     $177 = ___cxa_find_matching_catch(0|0)|0;
     $178 = tempRet0;
     $eh$lpad$body$i$i$i$i$i$indexZ2D = $177;
    }
    $179 = HEAP8[((16056 + 144|0))>>0]|0;
    $180 = $179 & 1;
    $181 = ($180<<24>>24)==(0);
    if ($181) {
     __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(((16056 + 8|0)));
     ___cxa_guard_abort((11712|0));
     ___cxa_guard_abort((11728|0));
     ___clang_call_terminate($eh$lpad$body$i$i$i$i$i$indexZ2D);
     // unreachable;
    }
    $182 = HEAP32[((16056 + 152|0))>>2]|0;
    _free($182);
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(((16056 + 8|0)));
    ___cxa_guard_abort((11712|0));
    ___cxa_guard_abort((11728|0));
    ___clang_call_terminate($eh$lpad$body$i$i$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $183 = HEAP32[11704>>2]|0;
 HEAP32[11720>>2] = $183;
 $184 = (($183) + 4|0);
 $185 = HEAP32[$184>>2]|0;HEAP32[$184>>2] = (($185+1)|0);
 ___cxa_guard_release((11728|0));
 $186 = HEAP32[11720>>2]|0;
 HEAP32[$this>>2] = $186;
 $187 = (($186) + 4|0);
 $188 = HEAP32[$187>>2]|0;HEAP32[$187>>2] = (($188+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if ($1) {
  $32 = (($this) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  STACKTOP = sp;return ($34|0);
 }
 (_pthread_mutex_lock((8912|0))|0);
 $2 = HEAP32[$this>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  while(1) {
   (_pthread_cond_wait((8936|0),(8912|0))|0);
   $4 = HEAP32[$this>>2]|0;
   $5 = ($4|0)==(1);
   if (!($5)) {
    break;
   }
  }
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  (_pthread_mutex_unlock((8912|0))|0);
  $32 = (($this) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  STACKTOP = sp;return ($34|0);
 }
 HEAP32[$this>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(606,(8912|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZNSt3__16locale2id6__initEv($this);
  __THREW__ = 0;
  (invoke_ii(607,(8912|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   HEAP32[$this>>2] = -1;
   __THREW__ = 0;
   (invoke_ii(606,(8912|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_ii(608,(8936|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     $32 = (($this) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (($33) + -1)|0;
     STACKTOP = sp;return ($34|0);
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(607,(8912|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$this>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(606,(8912|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(608,(8936|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(426);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(427);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this$0$0$val,$x) {
 $this$0$0$val = $this$0$0$val|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $1 = (($this$0$0$val) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this$0$0$val) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)>($0>>>0);
 if ($9) {
  $10 = (($4) + ($0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   STACKTOP = sp;return ($11|0);
  }
 }
 $13 = (___cxa_allocate_exception(4)|0);
 HEAP32[$13>>2] = ((20400 + 8|0));
 ___cxa_throw(($13|0),(20480|0),(396|0));
 // unreachable;
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11736>>2]|0;HEAP32[11736>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(605)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $vec;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $5 = (invoke_i(605)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 5;
    break;
   }
   $10 = HEAP32[$5>>2]|0;
   $11 = (($10) + ($4<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12;
  } else {
   $13 = 0;
  }
  HEAP16[$$03>>1] = $13;
  $14 = (($$012) + 4|0);
  $15 = (($$03) + 2|0);
  $16 = ($14|0)==($high|0);
  if ($16) {
   break;
  } else {
   $$012 = $14;$$03 = $15;
  }
 }
 if ((label|0) == 5) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$01 = $low;
 }
 while(1) {
  $1 = HEAP32[$$01>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(605)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$01;
    label = 7;
    break;
   }
  }
  $12 = (($$01) + 4|0);
  $13 = ($12|0)==($high|0);
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$01 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $3 = HEAP32[$$01>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    __THREW__ = 0;
    $4 = (invoke_i(605)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     break;
    }
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($3<<1)|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & $m;
    $13 = ($12<<16>>16)==(0);
    $2 = (($$01) + 4|0);
    if ($13) {
     $$0$lcssa = $$01;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break L1;
    } else {
     $$01 = $2;
    }
   }
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(609)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0;
 var $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low3))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep4 = $uglygep;
 $2 = $uglygep4 >>> 2;
 $3 = (($2) + 1)|0;
 $$01 = $low;
 while(1) {
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $5 = (invoke_i(609)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 5;
    break;
   }
   $10 = HEAP32[$5>>2]|0;
   $11 = (($10) + ($4<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12;
  } else {
   $13 = $4;
  }
  HEAP32[$$01>>2] = $13;
  $14 = (($$01) + 4|0);
  $15 = ($14|0)==($high|0);
  if ($15) {
   break;
  } else {
   $$01 = $14;
  }
 }
 if ((label|0) == 5) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 $scevgep5 = (($low) + ($3<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(610)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0;
 var $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low3))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep4 = $uglygep;
 $2 = $uglygep4 >>> 2;
 $3 = (($2) + 1)|0;
 $$01 = $low;
 while(1) {
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $5 = (invoke_i(610)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 5;
    break;
   }
   $10 = HEAP32[$5>>2]|0;
   $11 = (($10) + ($4<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12;
  } else {
   $13 = $4;
  }
  HEAP32[$$01>>2] = $13;
  $14 = (($$01) + 4|0);
  $15 = ($14|0)==($high|0);
  if ($15) {
   break;
  } else {
   $$01 = $14;
  }
 }
 if ((label|0) == 5) {
  $8 = ___cxa_find_matching_catch(0|0)|0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 $scevgep5 = (($low) + ($3<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11760 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   _free($1);
  }
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11760 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   _free($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(609)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(609)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$02>>0] = $12;
  $13 = (($$02) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(610)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(610)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$02>>0] = $12;
  $13 = (($$02) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11832 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(574)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ($1|0)==($2|0);
  if ($5) {
   _free($this);
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(585,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   _free($this);
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$01$lcssa$i$i = 0, $$0125$i$i = 0, $$0148 = 0, $$0247 = 0, $$026$i = 0, $$026$i$i = 0, $$04$$0$i = 0, $$0423$i = 0, $$1$i = 0, $$1$i$i = 0, $$1$lcssa = 0, $$13$i$i = 0, $$15$i = 0, $$19 = 0, $$214$i = 0, $$215$i$i = 0, $$24$lcssa$i$i = 0;
 var $$2424$i$i = 0, $$26$i = 0, $$3$i$i = 0, $$311$i = 0, $$35$i$i = 0, $$414$i$i = 0, $$5$i$i = 0, $$pn$i$i = 0, $$pre = 0, $$pre6 = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $$ws$i$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $buf$i$i = 0;
 var $cnt$024$i = 0, $cnt$1$i = 0, $cnt$212$i = 0, $cnt$212$i$ = 0, $cnt$3$i = 0, $dst$$i = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$$i = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond22$i = 0, $or$cond7$i = 0, $or$cond8$i = 0;
 var $or$cond810$i = 0, $p$012 = 0, $phitmp = 0, $s$018$i = 0, $s$025$i = 0, $s$1$i = 0, $s$213$i = 0, $tmp = 0, $ws$i$0 = 0, $ws$i$1 = 0, $ws$i$10 = 0, $ws$i$2 = 0, $ws$i$3 = 0, $ws$i$5 = 0, $ws$i$7 = 0, $ws$i$8 = 0, $ws$i$9 = 0, $ws2$07$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i$i = sp + 260|0;
 $buf$i = sp;
 $tmp = sp + 256|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $142 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   if ($5) {
    $142 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $fend$149;
     $9 = $$0148;
     $10 = (($8) - ($9))|0;
     $11 = $10 >> 2;
     $12 = $$0247;
     $13 = (($6) - ($12))|0;
     $14 = HEAP32[$7>>2]|0;
     $15 = (_uselocale(($14|0))|0);
     $16 = HEAP32[$frm_nxt>>2]|0;
     $17 = ($$0247|0)!=(0|0);
     $n$$i = $17 ? $13 : 256;
     $dst$$i = $17 ? $$0247 : $buf$i;
     $18 = ($16|0)==(0|0);
     $19 = ($n$$i|0)==(0);
     $or$cond22$i = $18 | $19;
     L9: do {
      if ($or$cond22$i) {
       $$1$i = $11;$$26$i = $n$$i;$cnt$1$i = 0;$s$018$i = $dst$$i;$ws$i$8 = $16;
      } else {
       $$026$i = $11;$$0423$i = $n$$i;$cnt$024$i = 0;$s$025$i = $dst$$i;$ws$i$0 = $16;
       while(1) {
        $20 = ($$026$i>>>0)>=($$0423$i>>>0);
        $21 = ($$026$i>>>0)>(32);
        $or$cond7$i = $20 | $21;
        if (!($or$cond7$i)) {
         $$1$i = $$026$i;$$26$i = $$0423$i;$cnt$1$i = $cnt$024$i;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$0;
         break L9;
        }
        $$04$$0$i = $20 ? $$0423$i : $$026$i;
        $22 = (($$026$i) - ($$04$$0$i))|0;
        $23 = ($s$025$i|0)==(0|0);
        L13: do {
         if ($23) {
          $25 = HEAP32[$ws$i$0>>2]|0;
          $26 = ($25|0)==(0);
          if ($26) {
           $$0$i$i2 = 0;$ws$i$7 = $ws$i$0;
          } else {
           $$026$i$i = 0;$28 = $25;$ws2$07$i$i = $ws$i$0;
           while(1) {
            $27 = ($28>>>0)>(127);
            if ($27) {
             $29 = (_wcrtomb($buf$i$i,$28)|0);
             $30 = ($29|0)==(-1);
             if ($30) {
              $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$0;
              break L9;
             } else {
              $$pn$i$i = $29;
             }
            } else {
             $$pn$i$i = 1;
            }
            $$13$i$i = (($$pn$i$i) + ($$026$i$i))|0;
            $31 = (($ws2$07$i$i) + 4|0);
            $32 = HEAP32[$31>>2]|0;
            $33 = ($32|0)==(0);
            if ($33) {
             $$0$i$i = $$13$i$i;$ws$i$5 = $ws$i$0;
             label = 32;
             break;
            } else {
             $$026$i$i = $$13$i$i;$28 = $32;$ws2$07$i$i = $31;
            }
           }
          }
         } else {
          $24 = ($$04$$0$i>>>0)>(3);
          L15: do {
           if ($24) {
            $$0125$i$i = $s$025$i;$$2424$i$i = $$04$$0$i;$ws$i$2 = $ws$i$0;
            while(1) {
             $35 = HEAP32[$ws$i$2>>2]|0;
             $36 = (($35) + -1)|0;
             $37 = ($36>>>0)>(126);
             if ($37) {
              $38 = ($35|0)==(0);
              if ($38) {
               break;
              }
              $40 = (_wcrtomb($$0125$i$i,$35)|0);
              $41 = ($40|0)==(-1);
              if ($41) {
               $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$2;
               break L9;
              }
              $42 = (($$0125$i$i) + ($40)|0);
              $43 = (($$2424$i$i) - ($40))|0;
              $$1$i$i = $42;$$35$i$i = $43;$48 = $ws$i$2;
             } else {
              $44 = $35&255;
              $45 = (($$0125$i$i) + 1|0);
              HEAP8[$$0125$i$i>>0] = $44;
              $46 = (($$2424$i$i) + -1)|0;
              $$1$i$i = $45;$$35$i$i = $46;$48 = $ws$i$2;
             }
             $47 = (($48) + 4|0);
             $49 = ($$35$i$i>>>0)>(3);
             if ($49) {
              $$0125$i$i = $$1$i$i;$$2424$i$i = $$35$i$i;$ws$i$2 = $47;
             } else {
              $$01$lcssa$i$i = $$1$i$i;$$24$lcssa$i$i = $$35$i$i;$ws$i$1 = $47;
              break L15;
             }
            }
            HEAP8[$$0125$i$i>>0] = 0;
            $39 = (($$04$$0$i) - ($$2424$i$i))|0;
            $$0$i$i = $39;$ws$i$5 = 0;
            label = 32;
            break L13;
           } else {
            $$01$lcssa$i$i = $s$025$i;$$24$lcssa$i$i = $$04$$0$i;$ws$i$1 = $ws$i$0;
           }
          } while(0);
          $34 = ($$24$lcssa$i$i|0)==(0);
          if ($34) {
           $$0$i$i = $$04$$0$i;$ws$i$5 = $ws$i$1;
           label = 32;
          } else {
           $$215$i$i = $$01$lcssa$i$i;$$414$i$i = $$24$lcssa$i$i;$ws$i$3 = $ws$i$1;
           while(1) {
            $50 = HEAP32[$ws$i$3>>2]|0;
            $51 = (($50) + -1)|0;
            $52 = ($51>>>0)>(126);
            if ($52) {
             $53 = ($50|0)==(0);
             if ($53) {
              label = 25;
              break;
             }
             $55 = (_wcrtomb($buf$i$i,$50)|0);
             $56 = ($55|0)==(-1);
             if ($56) {
              $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$3;
              break L9;
             }
             $57 = ($55>>>0)>($$414$i$i>>>0);
             if ($57) {
              label = 28;
              break;
             }
             $59 = HEAP32[$ws$i$3>>2]|0;
             (_wcrtomb($$215$i$i,$59)|0);
             $60 = (($$215$i$i) + ($55)|0);
             $61 = (($$414$i$i) - ($55))|0;
             $$3$i$i = $60;$$5$i$i = $61;$66 = $ws$i$3;
            } else {
             $62 = $50&255;
             $63 = (($$215$i$i) + 1|0);
             HEAP8[$$215$i$i>>0] = $62;
             $64 = (($$414$i$i) + -1)|0;
             $$3$i$i = $63;$$5$i$i = $64;$66 = $ws$i$3;
            }
            $65 = (($66) + 4|0);
            $67 = ($$5$i$i|0)==(0);
            if ($67) {
             $$0$i$i = $$04$$0$i;$ws$i$5 = $65;
             label = 32;
             break L13;
            } else {
             $$215$i$i = $$3$i$i;$$414$i$i = $$5$i$i;$ws$i$3 = $65;
            }
           }
           if ((label|0) == 25) {
            label = 0;
            HEAP8[$$215$i$i>>0] = 0;
            $54 = (($$04$$0$i) - ($$414$i$i))|0;
            $$0$i$i = $54;$ws$i$5 = 0;
            label = 32;
            break;
           }
           else if ((label|0) == 28) {
            label = 0;
            $58 = (($$04$$0$i) - ($$414$i$i))|0;
            $$0$i$i = $58;$ws$i$5 = $ws$i$3;
            label = 32;
            break;
           }
          }
         }
        } while(0);
        if ((label|0) == 32) {
         label = 0;
         $68 = ($$0$i$i|0)==(-1);
         if ($68) {
          $$1$i = $22;$$26$i = 0;$cnt$1$i = -1;$s$018$i = $s$025$i;$ws$i$8 = $ws$i$5;
          break L9;
         } else {
          $$0$i$i2 = $$0$i$i;$ws$i$7 = $ws$i$5;
         }
        }
        $69 = ($s$025$i|0)==($buf$i|0);
        if ($69) {
         $$15$i = $$0423$i;$s$1$i = $buf$i;
        } else {
         $70 = (($s$025$i) + ($$0$i$i2)|0);
         $71 = (($$0423$i) - ($$0$i$i2))|0;
         $$15$i = $71;$s$1$i = $70;
        }
        $72 = (($$0$i$i2) + ($cnt$024$i))|0;
        $73 = ($ws$i$7|0)==(0|0);
        $74 = ($$15$i|0)==(0);
        $or$cond$i = $73 | $74;
        if ($or$cond$i) {
         $$1$i = $22;$$26$i = $$15$i;$cnt$1$i = $72;$s$018$i = $s$1$i;$ws$i$8 = $ws$i$7;
         break;
        } else {
         $$026$i = $22;$$0423$i = $$15$i;$cnt$024$i = $72;$s$025$i = $s$1$i;$ws$i$0 = $ws$i$7;
        }
       }
      }
     } while(0);
     $75 = ($ws$i$8|0)==(0|0);
     L51: do {
      if ($75) {
       $cnt$3$i = $cnt$1$i;$ws$i$10 = $ws$i$8;
      } else {
       $76 = ($$26$i|0)==(0);
       $77 = ($$1$i|0)==(0);
       $or$cond810$i = $76 | $77;
       if ($or$cond810$i) {
        $cnt$3$i = $cnt$1$i;$ws$i$10 = $ws$i$8;
       } else {
        $$214$i = $$1$i;$$311$i = $$26$i;$cnt$212$i = $cnt$1$i;$s$213$i = $s$018$i;$ws$i$9 = $ws$i$8;
        while(1) {
         $78 = HEAP32[$ws$i$9>>2]|0;
         $79 = (_wcrtomb($s$213$i,$78)|0);
         $80 = (($79) + 1)|0;
         $81 = ($80>>>0)<(2);
         if ($81) {
          break;
         }
         $83 = (($ws$i$9) + 4|0);
         $84 = (($$214$i) + -1)|0;
         $85 = (($s$213$i) + ($79)|0);
         $86 = (($$311$i) - ($79))|0;
         $87 = (($cnt$212$i) + 1)|0;
         $88 = ($$311$i|0)==($79|0);
         $89 = ($84|0)==(0);
         $or$cond8$i = $88 | $89;
         if ($or$cond8$i) {
          $cnt$3$i = $87;$ws$i$10 = $83;
          break L51;
         } else {
          $$214$i = $84;$$311$i = $86;$cnt$212$i = $87;$s$213$i = $85;$ws$i$9 = $83;
         }
        }
        $82 = ($79|0)==(0);
        $$ws$i$9 = $82 ? 0 : $ws$i$9;
        $cnt$212$i$ = $82 ? $cnt$212$i : -1;
        $cnt$3$i = $cnt$212$i$;$ws$i$10 = $$ws$i$9;
       }
      }
     } while(0);
     if ($17) {
      HEAP32[$frm_nxt>>2] = $ws$i$10;
     }
     $90 = ($15|0)==(0|0);
     if (!($90)) {
      __THREW__ = 0;
      (invoke_ii(576,($15|0))|0);
      $91 = __THREW__; __THREW__ = 0;
      $92 = $91&1;
      if ($92) {
       label = 45;
       break;
      }
     }
     if ((($cnt$3$i|0) == -1)) {
      label = 47;
      break;
     } else if ((($cnt$3$i|0) == 0)) {
      $$0 = 1;
      label = 70;
      break;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = (($113) + ($cnt$3$i)|0);
     HEAP32[$to_nxt>>2] = $114;
     $115 = ($114|0)==($to_end|0);
     if ($115) {
      label = 68;
      break;
     }
     $116 = ($fend$149|0)==($frm_end|0);
     if ($116) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $139 = $$pre98;$141 = $114;$fend$3 = $frm_end;
     } else {
      $117 = HEAP32[$7>>2]|0;
      $118 = (_uselocale(($117|0))|0);
      HEAP8[$tmp>>0] = 0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       __THREW__ = 0;
       (invoke_ii(576,($118|0))|0);
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        label = 59;
        break;
       }
      }
      $124 = HEAP32[$to_nxt>>2]|0;
      $125 = ($124|0)==($to_end|0);
      if ($125) {
       $$0 = 1;
       label = 70;
       break;
      } else {
       $127 = $124;$128 = 0;$n$011 = 0;$p$012 = $tmp;
      }
      while(1) {
       $126 = (($127) + 1|0);
       HEAP32[$to_nxt>>2] = $126;
       HEAP8[$127>>0] = $128;
       $129 = ($n$011|0)==(0);
       if ($129) {
        break;
       }
       $130 = (($p$012) + 1|0);
       $$pre99 = HEAP32[$to_nxt>>2]|0;
       $phitmp = (($n$011) + -1)|0;
       $$pre6 = HEAP8[$130>>0]|0;
       $127 = $$pre99;$128 = $$pre6;$n$011 = $phitmp;$p$012 = $130;
      }
      $131 = HEAP32[$frm_nxt>>2]|0;
      $132 = (($131) + 4|0);
      HEAP32[$frm_nxt>>2] = $132;
      $133 = ($132|0)==($frm_end|0);
      L76: do {
       if ($133) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $132;
        while(1) {
         $136 = HEAP32[$fend$215>>2]|0;
         $137 = ($136|0)==(0);
         $135 = (($fend$215) + 4|0);
         if ($137) {
          $fend$2$lcssa = $fend$215;
          break L76;
         }
         $134 = ($135|0)==($frm_end|0);
         if ($134) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $135;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $139 = $132;$141 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $138 = ($139|0)==($frm_end|0);
     $140 = ($141|0)==($to_end|0);
     $or$cond = $138 | $140;
     if ($or$cond) {
      $142 = $139;
      break L1;
     } else {
      $$0148 = $139;$$0247 = $141;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 45) {
     $93 = ___cxa_find_matching_catch(0|0)|0;
     $94 = tempRet0;
     ___clang_call_terminate($93);
     // unreachable;
    }
    else if ((label|0) == 47) {
     HEAP32[$to_nxt>>2] = $$0247;
     $95 = HEAP32[$frm_nxt>>2]|0;
     $96 = ($$0148|0)==($95|0);
     L85: do {
      if ($96) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$100 = $$0247;
       while(1) {
        $97 = HEAP32[$$19>>2]|0;
        $98 = HEAP32[$7>>2]|0;
        $99 = (_uselocale(($98|0))|0);
        $101 = (_wcrtomb($100,$97)|0);
        $102 = ($99|0)==(0|0);
        if (!($102)) {
         __THREW__ = 0;
         (invoke_ii(576,($99|0))|0);
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          break;
         }
        }
        $107 = ($101|0)==(-1);
        if ($107) {
         $$1$lcssa = $$19;
         break L85;
        }
        $108 = HEAP32[$to_nxt>>2]|0;
        $109 = (($108) + ($101)|0);
        HEAP32[$to_nxt>>2] = $109;
        $110 = (($$19) + 4|0);
        $111 = HEAP32[$frm_nxt>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $$1$lcssa = $110;
         break L85;
        } else {
         $$19 = $110;$100 = $109;
        }
       }
       $105 = ___cxa_find_matching_catch(0|0)|0;
       $106 = tempRet0;
       ___clang_call_terminate($105);
       // unreachable;
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 59) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    }
    else if ((label|0) == 68) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $142 = $$pre;
     break;
    }
    else if ((label|0) == 70) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($142|0)!=($frm_end|0);
 $143 = $not$&1;
 $$0 = $143;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$026$i = 0, $$04$$i = 0, $$0423$i = 0, $$1$i = 0, $$1$lcssa = 0, $$115 = 0, $$15$i = 0, $$2 = 0, $$214$i = 0, $$26$i = 0, $$311$i = 0, $$pr$pre$i = 0, $$pr41$i = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt$024$i = 0, $cnt$1$i = 0, $cnt$212$i = 0, $cnt$3$i = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0, $fend$3 = 0;
 var $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond22$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond810$i = 0, $s$i = 0, $save_state = 0, $storemerge14 = 0, $wbuf$i = 0, $wcs$$i = 0, $wn$$i = 0, $ws$018$i = 0, $ws$025$i = 0, $ws$1$i = 0, $ws$213$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf$i = sp + 16|0;
 $s$i = sp + 8|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $109 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   if ($5) {
    $109 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     $26 = HEAP32[$frm_nxt>>2]|0;
     HEAP32[$s$i>>2] = $26;
     $27 = ($$0254|0)!=(0|0);
     $wn$$i = $27 ? $23 : 256;
     $wcs$$i = $27 ? $$0254 : $wbuf$i;
     $28 = ($26|0)==(0|0);
     $29 = ($wn$$i|0)==(0);
     $or$cond22$i = $28 | $29;
     L9: do {
      if ($or$cond22$i) {
       $$1$i = $20;$$26$i = $wn$$i;$44 = $26;$cnt$1$i = 0;$ws$018$i = $wcs$$i;
      } else {
       $$026$i = $20;$$0423$i = $wn$$i;$$pr41$i = $26;$cnt$024$i = 0;$ws$025$i = $wcs$$i;
       while(1) {
        $30 = $$026$i >>> 2;
        $31 = ($30>>>0)>=($$0423$i>>>0);
        $32 = ($$026$i>>>0)>(131);
        $or$cond7$i = $31 | $32;
        if (!($or$cond7$i)) {
         $$1$i = $$026$i;$$26$i = $$0423$i;$44 = $$pr41$i;$cnt$1$i = $cnt$024$i;$ws$018$i = $ws$025$i;
         break L9;
        }
        $$04$$i = $31 ? $$0423$i : $30;
        $33 = (($$026$i) - ($$04$$i))|0;
        $34 = (_mbsrtowcs($ws$025$i,$s$i,$$04$$i,$st)|0);
        $35 = ($34|0)==(-1);
        if ($35) {
         break;
        }
        $36 = ($ws$025$i|0)==($wbuf$i|0);
        if ($36) {
         $$15$i = $$0423$i;$ws$1$i = $wbuf$i;
        } else {
         $37 = (($ws$025$i) + ($34<<2)|0);
         $38 = (($$0423$i) - ($34))|0;
         $$15$i = $38;$ws$1$i = $37;
        }
        $39 = (($34) + ($cnt$024$i))|0;
        $40 = HEAP32[$s$i>>2]|0;
        $41 = ($40|0)==(0|0);
        $42 = ($$15$i|0)==(0);
        $or$cond$i = $41 | $42;
        if ($or$cond$i) {
         $$1$i = $33;$$26$i = $$15$i;$44 = $40;$cnt$1$i = $39;$ws$018$i = $ws$1$i;
         break L9;
        } else {
         $$026$i = $33;$$0423$i = $$15$i;$$pr41$i = $40;$cnt$024$i = $39;$ws$025$i = $ws$1$i;
        }
       }
       $$pr$pre$i = HEAP32[$s$i>>2]|0;
       $$1$i = $33;$$26$i = 0;$44 = $$pr$pre$i;$cnt$1$i = -1;$ws$018$i = $ws$025$i;
      }
     } while(0);
     $43 = ($44|0)==(0|0);
     L19: do {
      if ($43) {
       $58 = 0;$cnt$3$i = $cnt$1$i;
      } else {
       $45 = ($$26$i|0)==(0);
       $46 = ($$1$i|0)==(0);
       $or$cond810$i = $45 | $46;
       if ($or$cond810$i) {
        $58 = $44;$cnt$3$i = $cnt$1$i;
       } else {
        $$214$i = $$1$i;$$311$i = $$26$i;$47 = $44;$cnt$212$i = $cnt$1$i;$ws$213$i = $ws$018$i;
        while(1) {
         $48 = (_mbrtowc($ws$213$i,$47,$$214$i,$st)|0);
         $49 = (($48) + 2)|0;
         $50 = ($49>>>0)<(3);
         if ($50) {
          break;
         }
         $51 = (($47) + ($48)|0);
         HEAP32[$s$i>>2] = $51;
         $52 = (($$214$i) - ($48))|0;
         $53 = (($ws$213$i) + 4|0);
         $54 = (($$311$i) + -1)|0;
         $55 = (($cnt$212$i) + 1)|0;
         $56 = ($54|0)==(0);
         $57 = ($$214$i|0)==($48|0);
         $or$cond8$i = $56 | $57;
         if ($or$cond8$i) {
          $58 = $51;$cnt$3$i = $55;
          break L19;
         } else {
          $$214$i = $52;$$311$i = $54;$47 = $51;$cnt$212$i = $55;$ws$213$i = $53;
         }
        }
        if ((($48|0) == -1)) {
         $58 = $47;$cnt$3$i = -1;
         break;
        } else if ((($48|0) == 0)) {
         HEAP32[$s$i>>2] = 0;
         $58 = 0;$cnt$3$i = $cnt$212$i;
         break;
        } else {
         HEAP32[$st>>2] = 0;
         $58 = $47;$cnt$3$i = $cnt$212$i;
         break;
        }
       }
      }
     } while(0);
     if ($27) {
      HEAP32[$frm_nxt>>2] = $58;
     }
     $59 = ($25|0)==(0|0);
     if (!($59)) {
      __THREW__ = 0;
      (invoke_ii(576,($25|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 25;
       break;
      }
     }
     if ((($cnt$3$i|0) == -1)) {
      label = 27;
      break;
     } else if ((($cnt$3$i|0) == 0)) {
      $$0 = 2;
      label = 51;
      break;
     }
     $83 = HEAP32[$to_nxt>>2]|0;
     $84 = (($83) + ($cnt$3$i<<2)|0);
     HEAP32[$to_nxt>>2] = $84;
     $85 = ($84|0)==($to_end|0);
     if ($85) {
      label = 49;
      break;
     }
     $86 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($86) {
      $106 = $$pre113;$108 = $84;$fend$3 = $frm_end;
     } else {
      $87 = HEAP32[$7>>2]|0;
      $88 = (_uselocale(($87|0))|0);
      $89 = (_mbrtowc($84,$$pre113,1,$st)|0);
      $90 = ($88|0)==(0|0);
      if (!($90)) {
       __THREW__ = 0;
       (invoke_ii(576,($88|0))|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        label = 42;
        break;
       }
      }
      $95 = ($89|0)==(0);
      if (!($95)) {
       $$0 = 2;
       label = 51;
       break;
      }
      $96 = HEAP32[$to_nxt>>2]|0;
      $97 = (($96) + 4|0);
      HEAP32[$to_nxt>>2] = $97;
      $98 = HEAP32[$frm_nxt>>2]|0;
      $99 = (($98) + 1|0);
      HEAP32[$frm_nxt>>2] = $99;
      $100 = ($99|0)==($frm_end|0);
      L43: do {
       if ($100) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $99;
        while(1) {
         $103 = HEAP8[$fend$216>>0]|0;
         $104 = ($103<<24>>24)==(0);
         $102 = (($fend$216) + 1|0);
         if ($104) {
          $fend$2$lcssa = $fend$216;
          break L43;
         }
         $101 = ($102|0)==($frm_end|0);
         if ($101) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $102;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $106 = $99;$108 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $105 = ($106|0)==($frm_end|0);
     $107 = ($108|0)==($to_end|0);
     $or$cond = $105 | $107;
     if ($or$cond) {
      $109 = $106;
      break L1;
     } else {
      $$0155 = $106;$$0254 = $108;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 25) {
     $62 = ___cxa_find_matching_catch(0|0)|0;
     $63 = tempRet0;
     ___clang_call_terminate($62);
     // unreachable;
    }
    else if ((label|0) == 27) {
     HEAP32[$to_nxt>>2] = $$0254;
     $64 = HEAP32[$frm_nxt>>2]|0;
     $65 = ($$0155|0)==($64|0);
     L51: do {
      if ($65) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $66 = $$115;
        $67 = (($18) - ($66))|0;
        $68 = HEAP32[$7>>2]|0;
        $69 = (_uselocale(($68|0))|0);
        $70 = (_mbrtowc($storemerge14,$$115,$67,$save_state)|0);
        $71 = ($69|0)==(0|0);
        if (!($71)) {
         __THREW__ = 0;
         (invoke_ii(576,($69|0))|0);
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 30;
          break;
         }
        }
        if ((($70|0) == -2)) {
         label = 34;
         break;
        } else if ((($70|0) == 0)) {
         $76 = (($$115) + 1|0);
         $$2 = $76;
        } else if ((($70|0) == -1)) {
         label = 33;
         break;
        } else {
         $77 = (($$115) + ($70)|0);
         $$2 = $77;
        }
        $78 = HEAP32[$to_nxt>>2]|0;
        $79 = (($78) + 4|0);
        HEAP32[$to_nxt>>2] = $79;
        $80 = HEAP32[$frm_nxt>>2]|0;
        $81 = ($$2|0)==($80|0);
        if ($81) {
         $$1$lcssa = $$2;
         break L51;
        } else {
         $$115 = $$2;$storemerge14 = $79;
        }
       }
       if ((label|0) == 30) {
        $74 = ___cxa_find_matching_catch(0|0)|0;
        $75 = tempRet0;
        ___clang_call_terminate($74);
        // unreachable;
       }
       else if ((label|0) == 33) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 34) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $82 = $not$3&1;
     $$0 = $82;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 42) {
     $93 = ___cxa_find_matching_catch(0|0)|0;
     $94 = tempRet0;
     ___clang_call_terminate($93);
     // unreachable;
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $109 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($109|0)!=($frm_end|0);
 $110 = $not$&1;
 $$0 = $110;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 __THREW__ = 0;
 (invoke_ii(576,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(576,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $5 = ($2|0)==(0|0);
 if (!($5)) {
  __THREW__ = 0;
  (invoke_ii(576,($2|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch(0|0)|0;
   $9 = tempRet0;
   ___clang_call_terminate($8);
   // unreachable;
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 __THREW__ = 0;
 $12 = (invoke_ii(576,($10|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $15 = ($12|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __THREW__ = 0;
 (invoke_ii(576,($12|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $4 = ($st|0)!=(0|0);
 $5 = $4 ? $st : 19576;
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $6 = $$016;
  $7 = (($2) - ($6))|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (_uselocale(($8|0))|0);
  $10 = (_mbrtowc(0,$$016,$7,$5)|0);
  $11 = ($9|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(576,($9|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 5;
    break;
   }
  }
  if ((($10|0) == 0)) {
   $16 = (($$016) + 1|0);
   $$1 = $16;$$pn = 1;
  } else if ((($10|0) == -2) | (($10|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 10;
   break;
  } else {
   $17 = (($$016) + ($10)|0);
   $$1 = $17;$$pn = $10;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $18 = (($nwchar_t$08) + 1)|0;
  $19 = ($18>>>0)>=($mx>>>0);
  $20 = ($$1|0)==($frm_end|0);
  $or$cond = $19 | $20;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 10;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $18;
  }
 }
 if ((label|0) == 5) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(576,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(576,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $frm_end;
 $2 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($2) {
   $3 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $4 = HEAP16[$_frm_nxt$0>>1]|0;
    $5 = $4&65535;
    $6 = ($4&65535)<(128);
    do {
     if ($6) {
      $7 = $_to_nxt$0;
      $8 = (($3) - ($7))|0;
      $9 = ($8|0)<(1);
      if ($9) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $10 = $4&255;
      $11 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $10;
      $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $11;
     } else {
      $12 = ($4&65535)<(2048);
      if ($12) {
       $13 = $_to_nxt$0;
       $14 = (($3) - ($13))|0;
       $15 = ($14|0)<(2);
       if ($15) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $16 = $5 >>> 6;
       $17 = $16 | 192;
       $18 = $17&255;
       $19 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $18;
       $20 = $5 & 63;
       $21 = $20 | 128;
       $22 = $21&255;
       $23 = (($_to_nxt$0) + 2|0);
       HEAP8[$19>>0] = $22;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $23;
       break;
      }
      $24 = ($4&65535)<(55296);
      if ($24) {
       $25 = $_to_nxt$0;
       $26 = (($3) - ($25))|0;
       $27 = ($26|0)<(3);
       if ($27) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $28 = $5 >>> 12;
       $29 = $28 | 224;
       $30 = $29&255;
       $31 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $30;
       $32 = $5 >>> 6;
       $33 = $32 & 63;
       $34 = $33 | 128;
       $35 = $34&255;
       $36 = (($_to_nxt$0) + 2|0);
       HEAP8[$31>>0] = $35;
       $37 = $5 & 63;
       $38 = $37 | 128;
       $39 = $38&255;
       $40 = (($_to_nxt$0) + 3|0);
       HEAP8[$36>>0] = $39;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $40;
       break;
      }
      $41 = ($4&65535)<(56320);
      if (!($41)) {
       $83 = ($4&65535)<(57344);
       if ($83) {
        $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $84 = $_to_nxt$0;
       $85 = (($3) - ($84))|0;
       $86 = ($85|0)<(3);
       if ($86) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $87 = $5 >>> 12;
       $88 = $87 | 224;
       $89 = $88&255;
       $90 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $89;
       $91 = $5 >>> 6;
       $92 = $91 & 63;
       $93 = $92 | 128;
       $94 = $93&255;
       $95 = (($_to_nxt$0) + 2|0);
       HEAP8[$90>>0] = $94;
       $96 = $5 & 63;
       $97 = $96 | 128;
       $98 = $97&255;
       $99 = (($_to_nxt$0) + 3|0);
       HEAP8[$95>>0] = $98;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $99;
       break;
      }
      $42 = $_frm_nxt$0;
      $43 = (($1) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $45 = (($_frm_nxt$0) + 2|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46&65535;
      $48 = $47 & 64512;
      $49 = ($48|0)==(56320);
      if (!($49)) {
       $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $50 = $_to_nxt$0;
      $51 = (($3) - ($50))|0;
      $52 = ($51|0)<(4);
      if ($52) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $53 = $5 & 960;
      $54 = $53 << 10;
      $55 = (($54) + 65536)|0;
      $56 = ($55>>>0)>(1114111);
      if ($56) {
       $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $57 = $53 >>> 6;
      $58 = (($57) + 1)|0;
      $59 = $58 >>> 2;
      $60 = $59 | 240;
      $61 = $60&255;
      $62 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $61;
      $63 = $58 << 4;
      $64 = $63 & 48;
      $65 = $5 >>> 2;
      $66 = $65 & 15;
      $67 = $66 | $64;
      $68 = $67 | 128;
      $69 = $68&255;
      $70 = (($_to_nxt$0) + 2|0);
      HEAP8[$62>>0] = $69;
      $71 = $5 << 4;
      $72 = $71 & 48;
      $73 = $47 >>> 6;
      $74 = $73 & 15;
      $75 = $72 | $74;
      $76 = $75 | 128;
      $77 = $76&255;
      $78 = (($_to_nxt$0) + 3|0);
      HEAP8[$70>>0] = $77;
      $79 = $47 & 63;
      $80 = $79 | 128;
      $81 = $80&255;
      $82 = (($_to_nxt$0) + 4|0);
      HEAP8[$78>>0] = $81;
      $_frm_nxt$1 = $45;$_to_nxt$1 = $82;
     }
    } while(0);
    $100 = (($_frm_nxt$1) + 2|0);
    $101 = ($100>>>0)<($frm_end>>>0);
    if ($101) {
     $_frm_nxt$0 = $100;$_to_nxt$0 = $_to_nxt$1;
    } else {
     $$0$i = 0;$_frm_nxt$2 = $100;$_to_nxt$2 = $_to_nxt$1;
     break;
    }
   }
  } else {
   $$0$i = 0;$_frm_nxt$2 = $frm;$_to_nxt$2 = $to;
  }
 } while(0);
 $102 = $_frm_nxt$2;
 $103 = $frm;
 $104 = (($102) - ($103))|0;
 $105 = $104 >> 1;
 $106 = (($frm) + ($105<<1)|0);
 HEAP32[$frm_nxt>>2] = $106;
 $107 = $_to_nxt$2;
 $108 = $to;
 $109 = (($107) - ($108))|0;
 $110 = (($to) + ($109)|0);
 HEAP32[$to_nxt>>2] = $110;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_frm_nxt$0 = 0;
 var $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, $_to_nxt$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $frm_end;
   $3 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $4 = ($_to_nxt$0>>>0)<($to_end>>>0);
    if (!($4)) {
     $_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
     label = 31;
     break L1;
    }
    $5 = HEAP8[$_frm_nxt$0>>0]|0;
    $6 = $5&255;
    $7 = ($5<<24>>24)>(-1);
    do {
     if ($7) {
      $8 = $5&255;
      HEAP16[$_to_nxt$0>>1] = $8;
      $9 = (($_frm_nxt$0) + 1|0);
      $_frm_nxt$1 = $9;$_to_nxt$1 = $_to_nxt$0;
     } else {
      $10 = ($5&255)<(194);
      if ($10) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $11 = ($5&255)<(224);
      if ($11) {
       $12 = $_frm_nxt$0;
       $13 = (($2) - ($12))|0;
       $14 = ($13|0)<(2);
       if ($14) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $15 = (($_frm_nxt$0) + 1|0);
       $16 = HEAP8[$15>>0]|0;
       $17 = $16&255;
       $18 = $17 & 192;
       $19 = ($18|0)==(128);
       if (!($19)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $20 = $6 << 6;
       $21 = $17 & 63;
       $22 = $20 & 1984;
       $23 = $21 | $22;
       $24 = $23&65535;
       HEAP16[$_to_nxt$0>>1] = $24;
       $25 = (($_frm_nxt$0) + 2|0);
       $_frm_nxt$1 = $25;$_to_nxt$1 = $_to_nxt$0;
       break;
      }
      $26 = ($5&255)<(240);
      if ($26) {
       $27 = $_frm_nxt$0;
       $28 = (($2) - ($27))|0;
       $29 = ($28|0)<(3);
       if ($29) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $30 = (($_frm_nxt$0) + 1|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = (($_frm_nxt$0) + 2|0);
       $33 = HEAP8[$32>>0]|0;
       if ((($6|0) == 224)) {
        $34 = $31 & -32;
        $35 = ($34<<24>>24)==(-96);
        if (!($35)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       } else if ((($6|0) == 237)) {
        $36 = $31 & -32;
        $37 = ($36<<24>>24)==(-128);
        if (!($37)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       } else {
        $38 = $31 & -64;
        $39 = ($38<<24>>24)==(-128);
        if (!($39)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       }
       $40 = $33&255;
       $41 = $40 & 192;
       $42 = ($41|0)==(128);
       if (!($42)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $43 = $6 << 12;
       $44 = $31&255;
       $45 = $44 << 6;
       $46 = $45 & 4032;
       $47 = $46 | $43;
       $48 = $40 & 63;
       $49 = $47 | $48;
       $50 = $49&65535;
       HEAP16[$_to_nxt$0>>1] = $50;
       $51 = (($_frm_nxt$0) + 3|0);
       $_frm_nxt$1 = $51;$_to_nxt$1 = $_to_nxt$0;
       break;
      }
      $52 = ($5&255)<(245);
      if (!($52)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $53 = $_frm_nxt$0;
      $54 = (($2) - ($53))|0;
      $55 = ($54|0)<(4);
      if ($55) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $56 = (($_frm_nxt$0) + 1|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = (($_frm_nxt$0) + 2|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = (($_frm_nxt$0) + 3|0);
      $61 = HEAP8[$60>>0]|0;
      if ((($6|0) == 244)) {
       $63 = $57 & -16;
       $64 = ($63<<24>>24)==(-128);
       if (!($64)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      } else if ((($6|0) == 240)) {
       $$off$i = (($57) + 112)<<24>>24;
       $62 = ($$off$i&255)<(48);
       if (!($62)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      } else {
       $65 = $57 & -64;
       $66 = ($65<<24>>24)==(-128);
       if (!($66)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      }
      $67 = $59&255;
      $68 = $67 & 192;
      $69 = ($68|0)==(128);
      if (!($69)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $70 = $61&255;
      $71 = $70 & 192;
      $72 = ($71|0)==(128);
      if (!($72)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $73 = $_to_nxt$0;
      $74 = (($3) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $76 = $6 & 7;
      $77 = $76 << 18;
      $78 = $57&255;
      $79 = $78 << 12;
      $80 = $79 & 196608;
      $81 = $80 | $77;
      $82 = ($81>>>0)>(1114111);
      if ($82) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $83 = $70 & 63;
      $84 = $67 << 6;
      $85 = $76 << 2;
      $86 = $78 >>> 4;
      $87 = $86 & 3;
      $88 = $87 | $85;
      $89 = $88 << 6;
      $90 = (($89) + 16320)|0;
      $91 = $78 << 2;
      $92 = $91 & 60;
      $93 = $67 >>> 4;
      $94 = $93 & 3;
      $95 = $92 | $94;
      $96 = $95 | $90;
      $97 = $96 | 55296;
      $98 = $97&65535;
      HEAP16[$_to_nxt$0>>1] = $98;
      $99 = $84 & 960;
      $100 = $83 | $99;
      $101 = $100 | 56320;
      $102 = $101&65535;
      $103 = (($_to_nxt$0) + 2|0);
      HEAP16[$103>>1] = $102;
      $104 = (($_frm_nxt$0) + 4|0);
      $_frm_nxt$1 = $104;$_to_nxt$1 = $103;
     }
    } while(0);
    $105 = (($_to_nxt$1) + 2|0);
    $106 = ($_frm_nxt$1>>>0)<($frm_end>>>0);
    if ($106) {
     $_frm_nxt$0 = $_frm_nxt$1;$_to_nxt$0 = $105;
    } else {
     $_frm_nxt$2 = $_frm_nxt$1;$_to_nxt$2 = $105;
     label = 31;
     break;
    }
   }
  } else {
   $_frm_nxt$2 = $frm;$_to_nxt$2 = $to;
   label = 31;
  }
 } while(0);
 if ((label|0) == 31) {
  $107 = ($_frm_nxt$2>>>0)<($frm_end>>>0);
  $108 = $107&1;
  $$0$i = $108;$_frm_nxt$3 = $_frm_nxt$2;$_to_nxt$3 = $_to_nxt$2;
 }
 $109 = $_frm_nxt$3;
 $110 = $frm;
 $111 = (($109) - ($110))|0;
 $112 = (($frm) + ($111)|0);
 HEAP32[$frm_nxt>>2] = $112;
 $113 = $_to_nxt$3;
 $114 = $to;
 $115 = (($113) - ($114))|0;
 $116 = $115 >> 1;
 $117 = (($to) + ($116<<1)|0);
 HEAP32[$to_nxt>>2] = $117;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $9 = 0, $frm_nxt$1$lcssa$i = 0, $frm_nxt$115$i = 0, $frm_nxt$2$i = 0, $nchar16_t$014$i = 0, $nchar16_t$1$i = 0, $or$cond$i = 0, $or$cond13$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 $2 = ($mx|0)!=(0);
 $or$cond13$i = $1 & $2;
 L1: do {
  if ($or$cond13$i) {
   $3 = $frm_end;
   $frm_nxt$115$i = $frm;$nchar16_t$014$i = 0;
   L3: while(1) {
    $4 = HEAP8[$frm_nxt$115$i>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      $7 = (($frm_nxt$115$i) + 1|0);
      $frm_nxt$2$i = $7;$nchar16_t$1$i = $nchar16_t$014$i;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $frm_nxt$115$i;
       $11 = (($3) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $13 = (($frm_nxt$115$i) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14 & -64;
       $16 = ($15<<24>>24)==(-128);
       if (!($16)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $17 = (($frm_nxt$115$i) + 2|0);
       $frm_nxt$2$i = $17;$nchar16_t$1$i = $nchar16_t$014$i;
       break;
      }
      $18 = ($4&255)<(240);
      if ($18) {
       $19 = $frm_nxt$115$i;
       $20 = (($3) - ($19))|0;
       $21 = ($20|0)<(3);
       if ($21) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $22 = (($frm_nxt$115$i) + 1|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = (($frm_nxt$115$i) + 2|0);
       $25 = HEAP8[$24>>0]|0;
       if ((($5|0) == 237)) {
        $30 = $23 & -32;
        $31 = ($30<<24>>24)==(-128);
        if (!($31)) {
         label = 16;
         break L3;
        }
       } else if ((($5|0) == 224)) {
        $26 = $23 & -32;
        $27 = ($26<<24>>24)==(-96);
        if (!($27)) {
         label = 14;
         break L3;
        }
       } else {
        $34 = $23 & -64;
        $35 = ($34<<24>>24)==(-128);
        if (!($35)) {
         label = 18;
         break L3;
        }
       }
       $38 = $25 & -64;
       $39 = ($38<<24>>24)==(-128);
       if (!($39)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $40 = (($frm_nxt$115$i) + 3|0);
       $frm_nxt$2$i = $40;$nchar16_t$1$i = $nchar16_t$014$i;
       break;
      }
      $41 = ($4&255)<(245);
      if (!($41)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $42 = $frm_nxt$115$i;
      $43 = (($3) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $45 = (($mx) - ($nchar16_t$014$i))|0;
      $46 = ($45>>>0)<(2);
      if ($46) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $47 = (($frm_nxt$115$i) + 1|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = (($frm_nxt$115$i) + 2|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = (($frm_nxt$115$i) + 3|0);
      $52 = HEAP8[$51>>0]|0;
      if ((($5|0) == 244)) {
       $56 = $48 & -16;
       $57 = ($56<<24>>24)==(-128);
       if (!($57)) {
        label = 28;
        break L3;
       }
      } else if ((($5|0) == 240)) {
       $$off$i = (($48) + 112)<<24>>24;
       $53 = ($$off$i&255)<(48);
       if (!($53)) {
        label = 26;
        break L3;
       }
      } else {
       $60 = $48 & -64;
       $61 = ($60<<24>>24)==(-128);
       if (!($61)) {
        label = 30;
        break L3;
       }
      }
      $64 = $50 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $66 = $52 & -64;
      $67 = ($66<<24>>24)==(-128);
      if (!($67)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $68 = $5 << 18;
      $69 = $68 & 1835008;
      $70 = $48&255;
      $71 = $70 << 12;
      $72 = $71 & 196608;
      $73 = $72 | $69;
      $74 = ($73>>>0)>(1114111);
      if ($74) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $75 = (($nchar16_t$014$i) + 1)|0;
      $76 = (($frm_nxt$115$i) + 4|0);
      $frm_nxt$2$i = $76;$nchar16_t$1$i = $75;
     }
    } while(0);
    $77 = (($nchar16_t$1$i) + 1)|0;
    $78 = ($frm_nxt$2$i>>>0)<($frm_end>>>0);
    $79 = ($77>>>0)<($mx>>>0);
    $or$cond$i = $78 & $79;
    if ($or$cond$i) {
     $frm_nxt$115$i = $frm_nxt$2$i;$nchar16_t$014$i = $77;
    } else {
     $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
     break L1;
    }
   }
   if ((label|0) == 14) {
    $28 = $frm;
    $29 = (($19) - ($28))|0;
    $$0$i = $29;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 16) {
    $32 = $frm;
    $33 = (($19) - ($32))|0;
    $$0$i = $33;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 18) {
    $36 = $frm;
    $37 = (($19) - ($36))|0;
    $$0$i = $37;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 26) {
    $54 = $frm;
    $55 = (($42) - ($54))|0;
    $$0$i = $55;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 28) {
    $58 = $frm;
    $59 = (($42) - ($58))|0;
    $$0$i = $59;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 30) {
    $62 = $frm;
    $63 = (($42) - ($62))|0;
    $$0$i = $63;
    STACKTOP = sp;return ($$0$i|0);
   }
  } else {
   $frm_nxt$1$lcssa$i = $frm;
  }
 } while(0);
 $80 = $frm_nxt$1$lcssa$i;
 $81 = $frm;
 $82 = (($80) - ($81))|0;
 $$0$i = $82;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $3 = HEAP32[$_frm_nxt$0>>2]|0;
    $4 = $3 & -2048;
    $5 = ($4|0)==(55296);
    $6 = ($3>>>0)>(1114111);
    $or$cond$i = $5 | $6;
    if ($or$cond$i) {
     $$0$i = 2;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $7 = ($3>>>0)<(128);
    do {
     if ($7) {
      $8 = $_to_nxt$0;
      $9 = (($2) - ($8))|0;
      $10 = ($9|0)<(1);
      if ($10) {
       $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $11 = $3&255;
      $12 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $11;
      $_to_nxt$1 = $12;
     } else {
      $13 = ($3>>>0)<(2048);
      if ($13) {
       $14 = $_to_nxt$0;
       $15 = (($2) - ($14))|0;
       $16 = ($15|0)<(2);
       if ($16) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $17 = $3 >>> 6;
       $18 = $17 | 192;
       $19 = $18&255;
       $20 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $19;
       $21 = $3 & 63;
       $22 = $21 | 128;
       $23 = $22&255;
       $24 = (($_to_nxt$0) + 2|0);
       HEAP8[$20>>0] = $23;
       $_to_nxt$1 = $24;
       break;
      }
      $25 = ($3>>>0)<(65536);
      $26 = $_to_nxt$0;
      $27 = (($2) - ($26))|0;
      if ($25) {
       $28 = ($27|0)<(3);
       if ($28) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $29 = $3 >>> 12;
       $30 = $29 | 224;
       $31 = $30&255;
       $32 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $31;
       $33 = $3 >>> 6;
       $34 = $33 & 63;
       $35 = $34 | 128;
       $36 = $35&255;
       $37 = (($_to_nxt$0) + 2|0);
       HEAP8[$32>>0] = $36;
       $38 = $3 & 63;
       $39 = $38 | 128;
       $40 = $39&255;
       $41 = (($_to_nxt$0) + 3|0);
       HEAP8[$37>>0] = $40;
       $_to_nxt$1 = $41;
       break;
      } else {
       $42 = ($27|0)<(4);
       if ($42) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $43 = $3 >>> 18;
       $44 = $43 | 240;
       $45 = $44&255;
       $46 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $45;
       $47 = $3 >>> 12;
       $48 = $47 & 63;
       $49 = $48 | 128;
       $50 = $49&255;
       $51 = (($_to_nxt$0) + 2|0);
       HEAP8[$46>>0] = $50;
       $52 = $3 >>> 6;
       $53 = $52 & 63;
       $54 = $53 | 128;
       $55 = $54&255;
       $56 = (($_to_nxt$0) + 3|0);
       HEAP8[$51>>0] = $55;
       $57 = $3 & 63;
       $58 = $57 | 128;
       $59 = $58&255;
       $60 = (($_to_nxt$0) + 4|0);
       HEAP8[$56>>0] = $59;
       $_to_nxt$1 = $60;
       break;
      }
     }
    } while(0);
    $61 = (($_frm_nxt$0) + 4|0);
    $62 = ($61>>>0)<($frm_end>>>0);
    if ($62) {
     $_frm_nxt$0 = $61;$_to_nxt$0 = $_to_nxt$1;
    } else {
     $$0$i = 0;$_frm_nxt$1 = $61;$_to_nxt$2 = $_to_nxt$1;
     break;
    }
   }
  } else {
   $$0$i = 0;$_frm_nxt$1 = $frm;$_to_nxt$2 = $to;
  }
 } while(0);
 $63 = $_frm_nxt$1;
 $64 = $frm;
 $65 = (($63) - ($64))|0;
 $66 = $65 >> 2;
 $67 = (($frm) + ($66<<2)|0);
 HEAP32[$frm_nxt>>2] = $67;
 $68 = $_to_nxt$2;
 $69 = $to;
 $70 = (($68) - ($69))|0;
 $71 = (($to) + ($70)|0);
 HEAP32[$to_nxt>>2] = $71;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0;
 var $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $frm_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $3 = ($_to_nxt$0>>>0)<($to_end>>>0);
    if (!($3)) {
     $_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$1 = $_to_nxt$0;
     label = 30;
     break L1;
    }
    $4 = HEAP8[$_frm_nxt$0>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      HEAP32[$_to_nxt$0>>2] = $5;
      $7 = (($_frm_nxt$0) + 1|0);
      $_frm_nxt$1 = $7;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $_frm_nxt$0;
       $11 = (($2) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $13 = (($_frm_nxt$0) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14&255;
       $16 = $15 & 192;
       $17 = ($16|0)==(128);
       if (!($17)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $18 = $5 << 6;
       $19 = $15 & 63;
       $20 = $18 & 1984;
       $21 = $19 | $20;
       HEAP32[$_to_nxt$0>>2] = $21;
       $22 = (($_frm_nxt$0) + 2|0);
       $_frm_nxt$1 = $22;
       break;
      }
      $23 = ($4&255)<(240);
      if ($23) {
       $24 = $_frm_nxt$0;
       $25 = (($2) - ($24))|0;
       $26 = ($25|0)<(3);
       if ($26) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $27 = (($_frm_nxt$0) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = (($_frm_nxt$0) + 2|0);
       $30 = HEAP8[$29>>0]|0;
       if ((($5|0) == 224)) {
        $31 = $28 & -32;
        $32 = ($31<<24>>24)==(-96);
        if (!($32)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       } else if ((($5|0) == 237)) {
        $33 = $28 & -32;
        $34 = ($33<<24>>24)==(-128);
        if (!($34)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       } else {
        $35 = $28 & -64;
        $36 = ($35<<24>>24)==(-128);
        if (!($36)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       }
       $37 = $30&255;
       $38 = $37 & 192;
       $39 = ($38|0)==(128);
       if (!($39)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $40 = $28&255;
       $41 = $40 << 6;
       $42 = $5 << 12;
       $43 = $41 & 4032;
       $44 = $42 & 61440;
       $45 = $37 & 63;
       $46 = $43 | $44;
       $47 = $46 | $45;
       HEAP32[$_to_nxt$0>>2] = $47;
       $48 = (($_frm_nxt$0) + 3|0);
       $_frm_nxt$1 = $48;
       break;
      }
      $49 = ($4&255)<(245);
      if (!($49)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $50 = $_frm_nxt$0;
      $51 = (($2) - ($50))|0;
      $52 = ($51|0)<(4);
      if ($52) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $53 = (($_frm_nxt$0) + 1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = (($_frm_nxt$0) + 2|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = (($_frm_nxt$0) + 3|0);
      $58 = HEAP8[$57>>0]|0;
      if ((($5|0) == 240)) {
       $$off$i = (($54) + 112)<<24>>24;
       $59 = ($$off$i&255)<(48);
       if (!($59)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      } else if ((($5|0) == 244)) {
       $60 = $54 & -16;
       $61 = ($60<<24>>24)==(-128);
       if (!($61)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      } else {
       $62 = $54 & -64;
       $63 = ($62<<24>>24)==(-128);
       if (!($63)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      }
      $64 = $56&255;
      $65 = $64 & 192;
      $66 = ($65|0)==(128);
      if (!($66)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $67 = $58&255;
      $68 = $67 & 192;
      $69 = ($68|0)==(128);
      if (!($69)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $70 = $5 << 18;
      $71 = $70 & 1835008;
      $72 = $54&255;
      $73 = $72 << 12;
      $74 = $73 & 258048;
      $75 = $74 | $71;
      $76 = $64 << 6;
      $77 = $76 & 4032;
      $78 = $75 | $77;
      $79 = $67 & 63;
      $80 = $78 | $79;
      $81 = ($80>>>0)>(1114111);
      if ($81) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      HEAP32[$_to_nxt$0>>2] = $80;
      $82 = (($_frm_nxt$0) + 4|0);
      $_frm_nxt$1 = $82;
     }
    } while(0);
    $83 = (($_to_nxt$0) + 4|0);
    $84 = ($_frm_nxt$1>>>0)<($frm_end>>>0);
    if ($84) {
     $_frm_nxt$0 = $_frm_nxt$1;$_to_nxt$0 = $83;
    } else {
     $_frm_nxt$2 = $_frm_nxt$1;$_to_nxt$1 = $83;
     label = 30;
     break;
    }
   }
  } else {
   $_frm_nxt$2 = $frm;$_to_nxt$1 = $to;
   label = 30;
  }
 } while(0);
 if ((label|0) == 30) {
  $85 = ($_frm_nxt$2>>>0)<($frm_end>>>0);
  $86 = $85&1;
  $$0$i = $86;$_frm_nxt$3 = $_frm_nxt$2;$_to_nxt$2 = $_to_nxt$1;
 }
 $87 = $_frm_nxt$3;
 $88 = $frm;
 $89 = (($87) - ($88))|0;
 $90 = (($frm) + ($89)|0);
 HEAP32[$frm_nxt>>2] = $90;
 $91 = $_to_nxt$2;
 $92 = $to;
 $93 = (($91) - ($92))|0;
 $94 = $93 >> 2;
 $95 = (($to) + ($94<<2)|0);
 HEAP32[$to_nxt>>2] = $95;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0;
 var $frm_nxt$1$lcssa$i = 0, $frm_nxt$115$i = 0, $frm_nxt$2$i = 0, $nchar32_t$014$i = 0, $or$cond$i = 0, $or$cond13$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 $2 = ($mx|0)!=(0);
 $or$cond13$i = $1 & $2;
 L1: do {
  if ($or$cond13$i) {
   $3 = $frm_end;
   $frm_nxt$115$i = $frm;$nchar32_t$014$i = 1;
   L3: while(1) {
    $4 = HEAP8[$frm_nxt$115$i>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      $7 = (($frm_nxt$115$i) + 1|0);
      $frm_nxt$2$i = $7;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $frm_nxt$115$i;
       $11 = (($3) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $13 = (($frm_nxt$115$i) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14 & -64;
       $16 = ($15<<24>>24)==(-128);
       if (!($16)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $17 = (($frm_nxt$115$i) + 2|0);
       $frm_nxt$2$i = $17;
       break;
      }
      $18 = ($4&255)<(240);
      if ($18) {
       $19 = $frm_nxt$115$i;
       $20 = (($3) - ($19))|0;
       $21 = ($20|0)<(3);
       if ($21) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $22 = (($frm_nxt$115$i) + 1|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = (($frm_nxt$115$i) + 2|0);
       $25 = HEAP8[$24>>0]|0;
       if ((($5|0) == 237)) {
        $30 = $23 & -32;
        $31 = ($30<<24>>24)==(-128);
        if (!($31)) {
         label = 16;
         break L3;
        }
       } else if ((($5|0) == 224)) {
        $26 = $23 & -32;
        $27 = ($26<<24>>24)==(-96);
        if (!($27)) {
         label = 14;
         break L3;
        }
       } else {
        $34 = $23 & -64;
        $35 = ($34<<24>>24)==(-128);
        if (!($35)) {
         label = 18;
         break L3;
        }
       }
       $38 = $25 & -64;
       $39 = ($38<<24>>24)==(-128);
       if (!($39)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $40 = (($frm_nxt$115$i) + 3|0);
       $frm_nxt$2$i = $40;
       break;
      }
      $41 = ($4&255)<(245);
      if (!($41)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $42 = $frm_nxt$115$i;
      $43 = (($3) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $45 = (($frm_nxt$115$i) + 1|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = (($frm_nxt$115$i) + 2|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = (($frm_nxt$115$i) + 3|0);
      $50 = HEAP8[$49>>0]|0;
      if ((($5|0) == 240)) {
       $$off$i = (($46) + 112)<<24>>24;
       $51 = ($$off$i&255)<(48);
       if (!($51)) {
        label = 25;
        break L3;
       }
      } else if ((($5|0) == 244)) {
       $54 = $46 & -16;
       $55 = ($54<<24>>24)==(-128);
       if (!($55)) {
        label = 27;
        break L3;
       }
      } else {
       $58 = $46 & -64;
       $59 = ($58<<24>>24)==(-128);
       if (!($59)) {
        label = 29;
        break L3;
       }
      }
      $62 = $48 & -64;
      $63 = ($62<<24>>24)==(-128);
      if (!($63)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $64 = $50 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $66 = $5 << 18;
      $67 = $66 & 1835008;
      $68 = $46&255;
      $69 = $68 << 12;
      $70 = $69 & 196608;
      $71 = $70 | $67;
      $72 = ($71>>>0)>(1114111);
      if ($72) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $73 = (($frm_nxt$115$i) + 4|0);
      $frm_nxt$2$i = $73;
     }
    } while(0);
    $74 = ($frm_nxt$2$i>>>0)<($frm_end>>>0);
    $75 = ($nchar32_t$014$i>>>0)<($mx>>>0);
    $or$cond$i = $74 & $75;
    if (!($or$cond$i)) {
     $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
     break L1;
    }
    $phitmp$i = (($nchar32_t$014$i) + 1)|0;
    $frm_nxt$115$i = $frm_nxt$2$i;$nchar32_t$014$i = $phitmp$i;
   }
   if ((label|0) == 14) {
    $28 = $frm;
    $29 = (($19) - ($28))|0;
    $$0$i = $29;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 16) {
    $32 = $frm;
    $33 = (($19) - ($32))|0;
    $$0$i = $33;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 18) {
    $36 = $frm;
    $37 = (($19) - ($36))|0;
    $$0$i = $37;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 25) {
    $52 = $frm;
    $53 = (($42) - ($52))|0;
    $$0$i = $53;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 27) {
    $56 = $frm;
    $57 = (($42) - ($56))|0;
    $$0$i = $57;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 29) {
    $60 = $frm;
    $61 = (($42) - ($60))|0;
    $$0$i = $61;
    STACKTOP = sp;return ($$0$i|0);
   }
  } else {
   $frm_nxt$1$lcssa$i = $frm;
  }
 } while(0);
 $76 = $frm_nxt$1$lcssa$i;
 $77 = $frm;
 $78 = (($76) - ($77))|0;
 $$0$i = $78;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11912 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  _free($this);
  STACKTOP = sp;return;
 }
 $4 = (($this) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11912 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($this) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11952 + 8|0));
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  _free($this);
  STACKTOP = sp;return;
 }
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11952 + 8|0));
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 8;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0]=1702195828&255;HEAP8[$0+1>>0]=(1702195828>>8)&255;HEAP8[$0+2>>0]=(1702195828>>16)&255;HEAP8[$0+3>>0]=1702195828>>24;
 $1 = (($agg$result) + 5|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = 11992;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = (($3) - (11992))|0;
 $5 = $4 >> 2;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,11992,$5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 10;
 $0 = (($agg$result) + 1|0);
 ;HEAP8[$0+0>>0]=HEAP8[12016+0>>0]|0;HEAP8[$0+1>>0]=HEAP8[12016+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[12016+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[12016+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[12016+4>>0]|0;
 $1 = (($agg$result) + 6|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = 12024;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = (($3) - (12024))|0;
 $5 = $4 >> 2;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,12024,$5);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12056>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[12048>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((12056|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[12048>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[19224>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((19224|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((19056|0),0,168)|0;
   (___cxa_atexit((611|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19224|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(612,(19056|0),(19232|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(612,(((19056 + 12|0))|0),(19240|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   invoke_vii(612,(((19056 + 24|0))|0),(19248|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vii(612,(((19056 + 36|0))|0),(19256|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vii(612,(((19056 + 48|0))|0),(19272|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      invoke_vii(612,(((19056 + 60|0))|0),(19288|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       invoke_vii(612,(((19056 + 72|0))|0),(19296|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        invoke_vii(612,(((19056 + 84|0))|0),(19312|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vii(612,(((19056 + 96|0))|0),(19320|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          invoke_vii(612,(((19056 + 108|0))|0),(19328|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           invoke_vii(612,(((19056 + 120|0))|0),(19336|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            invoke_vii(612,(((19056 + 132|0))|0),(19344|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             invoke_vii(612,(((19056 + 144|0))|0),(19352|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              invoke_vii(612,(((19056 + 156|0))|0),(19360|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[12048>>2] = 19056;
               ___cxa_guard_release((12056|0));
               $36 = HEAP32[12048>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((12056|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12072>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[12064>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((12072|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[12064>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[18688>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((18688|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((18520|0),0,168)|0;
   (___cxa_atexit((613|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((18688|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(614,(18520|0),(18696|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(614,(((18520 + 12|0))|0),(18728|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   invoke_vii(614,(((18520 + 24|0))|0),(18760|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vii(614,(((18520 + 36|0))|0),(18792|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vii(614,(((18520 + 48|0))|0),(18832|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      invoke_vii(614,(((18520 + 60|0))|0),(18872|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       invoke_vii(614,(((18520 + 72|0))|0),(18904|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        invoke_vii(614,(((18520 + 84|0))|0),(18944|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vii(614,(((18520 + 96|0))|0),(18960|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          invoke_vii(614,(((18520 + 108|0))|0),(18976|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           invoke_vii(614,(((18520 + 120|0))|0),(18992|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            invoke_vii(614,(((18520 + 132|0))|0),(19008|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             invoke_vii(614,(((18520 + 144|0))|0),(19024|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              invoke_vii(614,(((18520 + 156|0))|0),(19040|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[12064>>2] = 18520;
               ___cxa_guard_release((12072|0));
               $36 = HEAP32[12064>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((12072|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12088>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[12080>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((12088|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[12080>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[18296>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((18296|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((18008|0),0,288)|0;
   (___cxa_atexit((615|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((18296|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(612,(18008|0),(18304|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   invoke_vii(612,(((18008 + 12|0))|0),(18312|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    invoke_vii(612,(((18008 + 24|0))|0),(18328|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     invoke_vii(612,(((18008 + 36|0))|0),(18336|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      invoke_vii(612,(((18008 + 48|0))|0),(18344|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       invoke_vii(612,(((18008 + 60|0))|0),(18352|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        invoke_vii(612,(((18008 + 72|0))|0),(18360|0));
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         invoke_vii(612,(((18008 + 84|0))|0),(18368|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          invoke_vii(612,(((18008 + 96|0))|0),(18376|0));
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           invoke_vii(612,(((18008 + 108|0))|0),(18392|0));
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            invoke_vii(612,(((18008 + 120|0))|0),(18400|0));
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             invoke_vii(612,(((18008 + 132|0))|0),(18416|0));
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              invoke_vii(612,(((18008 + 144|0))|0),(18432|0));
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               invoke_vii(612,(((18008 + 156|0))|0),(18440|0));
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                invoke_vii(612,(((18008 + 168|0))|0),(18448|0));
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 invoke_vii(612,(((18008 + 180|0))|0),(18456|0));
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 192|0))|0),(18344|0));
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 204|0))|0),(18464|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 216|0))|0),(18472|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 228|0))|0),(18480|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 240|0))|0),(18488|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 252|0))|0),(18496|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 264|0))|0),(18504|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(612,(((18008 + 276|0))|0),(18512|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[12080>>2] = 18008;
                  ___cxa_guard_release((12088|0));
                  $56 = HEAP32[12080>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((12088|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12104>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[12096>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((12104|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[12096>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[17456>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17456|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((17168|0),0,288)|0;
   (___cxa_atexit((616|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17456|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(614,(17168|0),(17464|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   invoke_vii(614,(((17168 + 12|0))|0),(17496|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    invoke_vii(614,(((17168 + 24|0))|0),(17536|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     invoke_vii(614,(((17168 + 36|0))|0),(17560|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      invoke_vii(614,(((17168 + 48|0))|0),(17880|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       invoke_vii(614,(((17168 + 60|0))|0),(17584|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        invoke_vii(614,(((17168 + 72|0))|0),(17608|0));
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         invoke_vii(614,(((17168 + 84|0))|0),(17632|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          invoke_vii(614,(((17168 + 96|0))|0),(17664|0));
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           invoke_vii(614,(((17168 + 108|0))|0),(17704|0));
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            invoke_vii(614,(((17168 + 120|0))|0),(17736|0));
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             invoke_vii(614,(((17168 + 132|0))|0),(17776|0));
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              invoke_vii(614,(((17168 + 144|0))|0),(17816|0));
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               invoke_vii(614,(((17168 + 156|0))|0),(17832|0));
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                invoke_vii(614,(((17168 + 168|0))|0),(17848|0));
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 invoke_vii(614,(((17168 + 180|0))|0),(17864|0));
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 192|0))|0),(17880|0));
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 204|0))|0),(17896|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 216|0))|0),(17912|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 228|0))|0),(17928|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 240|0))|0),(17944|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 252|0))|0),(17960|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 264|0))|0),(17976|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(614,(((17168 + 276|0))|0),(17992|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[12096>>2] = 17168;
                  ___cxa_guard_release((12104|0));
                  $56 = HEAP32[12096>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((12104|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12120>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[12112>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((12120|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[12112>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[17144>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17144|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16856|0),0,288)|0;
   (___cxa_atexit((617|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17144|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(612,(16856|0),(17152|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12120|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(612,(((16856 + 12|0))|0),(17160|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12120|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[12112>>2] = 16856;
 ___cxa_guard_release((12120|0));
 $12 = HEAP32[12112>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12136>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[12128>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((12136|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[12128>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[16816>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((16816|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16528|0),0,288)|0;
   (___cxa_atexit((618|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16816|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(614,(16528|0),(16824|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12136|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(614,(((16528 + 12|0))|0),(16840|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12136|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[12128>>2] = 16528;
 ___cxa_guard_release((12136|0));
 $12 = HEAP32[12128>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12160>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12144|0);
 }
 $2 = (___cxa_guard_acquire((12160|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12144|0);
 }
 HEAP8[12144>>0] = 16;
 $4 = ((12144 + 1|0));
 $5 = $4;
 HEAP8[$5>>0]=623865125&255;HEAP8[$5+1>>0]=(623865125>>8)&255;HEAP8[$5+2>>0]=(623865125>>16)&255;HEAP8[$5+3>>0]=623865125>>24;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP8[$7>>0]=2032480100&255;HEAP8[$7+1>>0]=(2032480100>>8)&255;HEAP8[$7+2>>0]=(2032480100>>16)&255;HEAP8[$7+3>>0]=2032480100>>24;
 HEAP8[((12144 + 9|0))>>0] = 0;
 (___cxa_atexit((619|0),(12144|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12160|0));
 STACKTOP = sp;return (12144|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12184>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12168|0);
 }
 $2 = (___cxa_guard_acquire((12184|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12168|0);
 } else {
  $$0$i = 12192;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (12192))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(620,(12168|0),(12192|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((12184|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((621|0),(12168|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12184|0));
 STACKTOP = sp;return (12168|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12248>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12232|0);
 }
 $2 = (___cxa_guard_acquire((12248|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12232|0);
 }
 HEAP8[12232>>0] = 16;
 $4 = ((12232 + 1|0));
 $5 = $4;
 HEAP8[$5>>0]=624576549&255;HEAP8[$5+1>>0]=(624576549>>8)&255;HEAP8[$5+2>>0]=(624576549>>16)&255;HEAP8[$5+3>>0]=624576549>>24;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP8[$7>>0]=1394948685&255;HEAP8[$7+1>>0]=(1394948685>>8)&255;HEAP8[$7+2>>0]=(1394948685>>16)&255;HEAP8[$7+3>>0]=1394948685>>24;
 HEAP8[((12232 + 9|0))>>0] = 0;
 (___cxa_atexit((619|0),(12232|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12248|0));
 STACKTOP = sp;return (12232|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12272>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12256|0);
 }
 $2 = (___cxa_guard_acquire((12272|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12256|0);
 } else {
  $$0$i = 12280;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (12280))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(620,(12256|0),(12280|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((12272|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((621|0),(12256|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12272|0));
 STACKTOP = sp;return (12256|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP8[12336>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12320|0);
 }
 $2 = (___cxa_guard_acquire((12336|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12320|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(559,32)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  ___cxa_guard_abort((12336|0));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[((12320 + 8|0))>>2] = $4;
 HEAP32[12320>>2] = 33;
 HEAP32[((12320 + 4|0))>>2] = 20;
 dest=$4+0|0; src=12344+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = (($4) + 20|0);
 HEAP8[$7>>0] = 0;
 (___cxa_atexit((619|0),(12320|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12336|0));
 STACKTOP = sp;return (12320|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12384>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12368|0);
 }
 $2 = (___cxa_guard_acquire((12384|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12368|0);
 } else {
  $$0$i = 12392;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (12392))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(620,(12368|0),(12392|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((12384|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((621|0),(12368|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12384|0));
 STACKTOP = sp;return (12368|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP8[12496>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12480|0);
 }
 $2 = (___cxa_guard_acquire((12496|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12480|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(559,16)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  ___cxa_guard_abort((12496|0));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[((12480 + 8|0))>>2] = $4;
 HEAP32[12480>>2] = 17;
 HEAP32[((12480 + 4|0))>>2] = 11;
 dest=$4+0|0; src=12504+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = (($4) + 11|0);
 HEAP8[$7>>0] = 0;
 (___cxa_atexit((619|0),(12480|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12496|0));
 STACKTOP = sp;return (12480|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12536>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12520|0);
 }
 $2 = (___cxa_guard_acquire((12536|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12520|0);
 } else {
  $$0$i = 12544;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (12544))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(620,(12520|0),(12544|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((12536|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((621|0),(12520|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12536|0));
 STACKTOP = sp;return (12520|0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   (__ZNSt3__16__clocEv()|0);
   $3 = (+_strtold_l($__a,$__p2));
   $4 = HEAP32[$1>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$1>>2] = $2;
   }
   $6 = HEAP32[$__p2>>2]|0;
   $7 = ($6|0)==($__a_end|0);
   if (!($7)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $8 = ($4|0)==(34);
   if ($8) {
    HEAP32[$__err>>2] = 4;
    $$0 = $3;
   } else {
    $$0 = $3;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   (__ZNSt3__16__clocEv()|0);
   $3 = (+_strtold_l($__a,$__p2));
   $4 = HEAP32[$1>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$1>>2] = $2;
   }
   $6 = HEAP32[$__p2>>2]|0;
   $7 = ($6|0)==($__a_end|0);
   if (!($7)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $8 = ($4|0)==(34);
   if ($8) {
    HEAP32[$__err>>2] = 4;
    $$0 = $3;
   } else {
    $$0 = $3;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $3 = (+_strtold_l($__a,$__p2));
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$1>>2] = $2;
 }
 $6 = HEAP32[$__p2>>2]|0;
 $7 = ($6|0)==($__a_end|0);
 if (!($7)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $8 = ($4|0)==(34);
 if ($8) {
  HEAP32[$__err>>2] = 4;
 }
 $9 = $3;
 $$0 = $9;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $12 = 0;$13 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $12 = 0;$13 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   (__ZNSt3__16__clocEv()|0);
   $5 = (_strtoull_l($__a,$__p2,$__base)|0);
   $6 = tempRet0;
   $7 = HEAP32[$3>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    HEAP32[$3>>2] = $4;
   }
   $9 = HEAP32[$__p2>>2]|0;
   $10 = ($9|0)==($__a_end|0);
   if (!($10)) {
    HEAP32[$__err>>2] = 4;
    $12 = 0;$13 = 0;
    break;
   }
   $11 = ($7|0)==(34);
   if ($11) {
    HEAP32[$__err>>2] = 4;
    $12 = -1;$13 = -1;
   } else {
    $12 = $6;$13 = $5;
   }
  }
 } while(0);
 tempRet0 = $12;
 STACKTOP = sp;return ($13|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $5 = (_strtoull_l($__a,$__p2,$__base)|0);
 $6 = tempRet0;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$3>>2] = $4;
 }
 $9 = HEAP32[$__p2>>2]|0;
 $10 = ($9|0)==($__a_end|0);
 if (!($10)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($7|0)==(34);
 $12 = ($6>>>0)>(0);
 $13 = ($6|0)==(0);
 $14 = ($5>>>0)>(4294967295);
 $15 = $13 & $14;
 $16 = $12 | $15;
 $or$cond = $11 | $16;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $5 = (_strtoull_l($__a,$__p2,$__base)|0);
 $6 = tempRet0;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$3>>2] = $4;
 }
 $9 = HEAP32[$__p2>>2]|0;
 $10 = ($9|0)==($__a_end|0);
 if (!($10)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($7|0)==(34);
 $12 = ($6>>>0)>(0);
 $13 = ($6|0)==(0);
 $14 = ($5>>>0)>(4294967295);
 $15 = $13 & $14;
 $16 = $12 | $15;
 $or$cond = $11 | $16;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $5 = (_strtoull_l($__a,$__p2,$__base)|0);
 $6 = tempRet0;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$3>>2] = $4;
 }
 $9 = HEAP32[$__p2>>2]|0;
 $10 = ($9|0)==($__a_end|0);
 if (!($10)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($7|0)==(34);
 $12 = ($6>>>0)>(0);
 $13 = ($6|0)==(0);
 $14 = ($5>>>0)>(65535);
 $15 = $13 & $14;
 $16 = $12 | $15;
 $or$cond = $11 | $16;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $17 = $5&65535;
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $17 = 0;$18 = 0;
  tempRet0 = $17;
  STACKTOP = sp;return ($18|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $3 = (_strtoll_l($__a,$__p2,$__base)|0);
 $4 = tempRet0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $17 = 0;$18 = 0;
  tempRet0 = $17;
  STACKTOP = sp;return ($18|0);
 }
 $9 = ($5|0)==(34);
 if ($9) {
  HEAP32[$__err>>2] = 4;
  $10 = ($4|0)>(0);
  $11 = ($4|0)==(0);
  $12 = ($3>>>0)>(0);
  $13 = $11 & $12;
  $14 = $10 | $13;
  $15 = $14 ? -1 : 0;
  $16 = $14 ? 2147483647 : -2147483648;
  tempRet0 = $16;
  STACKTOP = sp;return ($15|0);
 } else {
  $17 = $4;$18 = $3;
  tempRet0 = $17;
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $3 = (_strtoll_l($__a,$__p2,$__base)|0);
 $4 = tempRet0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($5|0)==(34);
 do {
  if ($9) {
   HEAP32[$__err>>2] = 4;
   $20 = ($4|0)>(0);
   $21 = ($4|0)==(0);
   $22 = ($3>>>0)>(0);
   $23 = $21 & $22;
   $24 = $20 | $23;
   if ($24) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $10 = ($4|0)<(-1);
   $11 = ($4|0)==(-1);
   $12 = ($3>>>0)<(2147483648);
   $13 = $11 & $12;
   $14 = $10 | $13;
   if ($14) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $15 = ($4|0)>(0);
   $16 = ($4|0)==(0);
   $17 = ($3>>>0)>(2147483647);
   $18 = $16 & $17;
   $19 = $15 | $18;
   if ($19) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $3;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, $uglygep$i$i = 0, $uglygep3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $__new_last2$i$i = $0;
  $scevgep$i$i = (($3) + -4|0);
  $5 = (0 - ($__new_last2$i$i))|0;
  $uglygep$i$i = (($scevgep$i$i) + ($5)|0);
  $uglygep3$i$i = $uglygep$i$i;
  $6 = $uglygep3$i$i >>> 2;
  $7 = $6 ^ -1;
  $scevgep4$i$i = (($3) + ($7<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $8 = (($this) + 16|0);
 $9 = ($8|0)==($0|0);
 if ($9) {
  $10 = (($this) + 128|0);
  HEAP8[$10>>0] = 0;
  STACKTOP = sp;return;
 } else {
  _free($0);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((16528 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((16528 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((16528 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((16528 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((16528 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((16528 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((16528 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((16528 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((16528 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((16528 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((16528 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((16528 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((16528 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((16528 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((16528 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((16528 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((16528 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((16528 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((16528 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((16528 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((16528 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((16528 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((16528 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((16528 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((16528 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((16528 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((16528 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((16528 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((16528 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((16528 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((16528 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((16528 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((16528 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((16528 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((16528 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((16528 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((16528 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((16528 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((16528 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((16528 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((16528 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((16528 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((16528 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((16528 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((16528 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((16528 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[16528>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((16528 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((16856 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((16856 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((16856 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((16856 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((16856 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((16856 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((16856 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((16856 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((16856 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((16856 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((16856 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((16856 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((16856 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((16856 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((16856 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((16856 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((16856 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((16856 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((16856 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((16856 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((16856 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((16856 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((16856 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((16856 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((16856 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((16856 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((16856 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((16856 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((16856 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((16856 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((16856 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((16856 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((16856 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((16856 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((16856 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((16856 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((16856 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((16856 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((16856 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((16856 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((16856 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((16856 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((16856 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((16856 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((16856 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((16856 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[16856>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((16856 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((17168 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((17168 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((17168 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((17168 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((17168 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((17168 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((17168 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((17168 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((17168 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((17168 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((17168 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((17168 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((17168 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((17168 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((17168 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((17168 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((17168 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((17168 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((17168 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((17168 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((17168 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((17168 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((17168 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((17168 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((17168 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((17168 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((17168 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((17168 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((17168 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((17168 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((17168 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((17168 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((17168 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((17168 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((17168 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((17168 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((17168 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((17168 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((17168 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((17168 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((17168 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((17168 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((17168 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((17168 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((17168 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((17168 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[17168>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((17168 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((18008 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((18008 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((18008 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((18008 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((18008 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((18008 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((18008 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((18008 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((18008 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((18008 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((18008 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((18008 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((18008 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((18008 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((18008 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((18008 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((18008 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((18008 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((18008 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((18008 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((18008 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((18008 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((18008 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((18008 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((18008 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((18008 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((18008 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((18008 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((18008 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((18008 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((18008 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((18008 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((18008 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((18008 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((18008 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((18008 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((18008 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((18008 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((18008 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((18008 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((18008 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((18008 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((18008 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((18008 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((18008 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((18008 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[18008>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((18008 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((18520 + 156|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((18520 + 164|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((18520 + 144|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((18520 + 152|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((18520 + 132|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((18520 + 140|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((18520 + 120|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((18520 + 128|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((18520 + 108|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((18520 + 116|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((18520 + 96|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((18520 + 104|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((18520 + 84|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((18520 + 92|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((18520 + 72|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((18520 + 80|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((18520 + 60|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((18520 + 68|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((18520 + 48|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((18520 + 56|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((18520 + 36|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((18520 + 44|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((18520 + 24|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((18520 + 32|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((18520 + 12|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((18520 + 20|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[18520>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if ($55) {
  STACKTOP = sp;return;
 }
 $56 = HEAP32[((18520 + 8|0))>>2]|0;
 _free($56);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((19056 + 156|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((19056 + 164|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((19056 + 144|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((19056 + 152|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((19056 + 132|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((19056 + 140|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((19056 + 120|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((19056 + 128|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((19056 + 108|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((19056 + 116|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((19056 + 96|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((19056 + 104|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((19056 + 84|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((19056 + 92|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((19056 + 72|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((19056 + 80|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((19056 + 60|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((19056 + 68|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((19056 + 48|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((19056 + 56|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((19056 + 36|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((19056 + 44|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((19056 + 24|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((19056 + 32|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((19056 + 12|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((19056 + 20|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[19056>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if ($55) {
  STACKTOP = sp;return;
 }
 $56 = HEAP32[((19056 + 8|0))>>2]|0;
 _free($56);
 STACKTOP = sp;return;
}
function _strtoull_l($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 HEAP32[$f$i$i>>2] = 0;
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i$i) + 8|0);
  HEAP32[$3>>2] = (-1);
  $9 = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i$i) + 8|0);
  HEAP32[$5>>2] = $4;
  $9 = $4;
 }
 $6 = (($f$i$i) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = (($f$i$i) + 104|0);
 HEAP32[$7>>2] = 0;
 $8 = $9;
 $10 = $s;
 $11 = (($8) - ($10))|0;
 $12 = (($f$i$i) + 108|0);
 HEAP32[$12>>2] = $11;
 $13 = (($f$i$i) + 100|0);
 HEAP32[$13>>2] = $9;
 $14 = (___intscan($f$i$i,$base,1,-1,-1)|0);
 $15 = tempRet0;
 $16 = ($p|0)==(0|0);
 if ($16) {
  tempRet0 = $15;
  STACKTOP = sp;return ($14|0);
 }
 $17 = (($f$i$i) + 8|0);
 $18 = HEAP32[$12>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP32[$17>>2]|0;
 $21 = $19;
 $22 = $20;
 $23 = (($21) + ($18))|0;
 $24 = (($23) - ($22))|0;
 $25 = (($s) + ($24)|0);
 HEAP32[$p>>2] = $25;
 tempRet0 = $15;
 STACKTOP = sp;return ($14|0);
}
function _strtoll_l($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 HEAP32[$f$i$i>>2] = 0;
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i$i) + 8|0);
  HEAP32[$3>>2] = (-1);
  $9 = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i$i) + 8|0);
  HEAP32[$5>>2] = $4;
  $9 = $4;
 }
 $6 = (($f$i$i) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = (($f$i$i) + 104|0);
 HEAP32[$7>>2] = 0;
 $8 = $9;
 $10 = $s;
 $11 = (($8) - ($10))|0;
 $12 = (($f$i$i) + 108|0);
 HEAP32[$12>>2] = $11;
 $13 = (($f$i$i) + 100|0);
 HEAP32[$13>>2] = $9;
 $14 = (___intscan($f$i$i,$base,1,0,-2147483648)|0);
 $15 = tempRet0;
 $16 = ($p|0)==(0|0);
 if ($16) {
  tempRet0 = $15;
  STACKTOP = sp;return ($14|0);
 }
 $17 = (($f$i$i) + 8|0);
 $18 = HEAP32[$12>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP32[$17>>2]|0;
 $21 = $19;
 $22 = $20;
 $23 = (($21) + ($18))|0;
 $24 = (($23) - ($22))|0;
 $25 = (($s) + ($24)|0);
 HEAP32[$p>>2] = $25;
 tempRet0 = $15;
 STACKTOP = sp;return ($14|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 19584 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (19368 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$443 = 0, $$444 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$842 = 0, $$in1 = 0, $$pre = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0;
 var $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1045 = 0, $s$1046 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $66 = HEAP8[$s$524>>0]|0;
    $67 = $66&255;
    $68 = (($67) + -1)|0;
    $69 = ($68>>>0)<(127);
    L12: do {
     if ($69) {
      $70 = $s$524;
      $71 = $70 & 3;
      $72 = ($71|0)==(0);
      $73 = ($$4622>>>0)>(4);
      $or$cond = $72 & $73;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $74 = HEAP32[$s$614>>2]|0;
        $75 = (($74) + -16843009)|0;
        $76 = $75 | $74;
        $77 = $76 & -2139062144;
        $78 = ($77|0)==(0);
        $79 = $74&255;
        if (!($78)) {
         $$2 = $$113;$$6 = $$512;$98 = $79;$s$7 = $s$614;
         break L12;
        }
        $80 = (($s$614) + 1|0);
        $81 = $74 & 255;
        $82 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $81;
        $83 = (($s$614) + 2|0);
        $84 = HEAP8[$80>>0]|0;
        $85 = $84&255;
        $86 = (($$113) + 8|0);
        HEAP32[$82>>2] = $85;
        $87 = (($s$614) + 3|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = (($$113) + 12|0);
        HEAP32[$86>>2] = $89;
        $91 = (($s$614) + 4|0);
        $92 = HEAP8[$87>>0]|0;
        $93 = $92&255;
        $94 = (($$113) + 16|0);
        HEAP32[$90>>2] = $93;
        $95 = (($$512) + -4)|0;
        $96 = ($95>>>0)>(4);
        if ($96) {
         $$113 = $94;$$512 = $95;$s$614 = $91;
        } else {
         break;
        }
       }
       $$pre$pre = HEAP8[$91>>0]|0;
       $$2 = $94;$$6 = $95;$98 = $$pre$pre;$s$7 = $91;
      } else {
       $$2 = $$0123;$$6 = $$4622;$98 = $66;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$98 = $66;$s$7 = $s$524;
     }
    } while(0);
    $97 = $98&255;
    $99 = (($97) + -1)|0;
    $100 = ($99>>>0)<(127);
    if (!($100)) {
     break;
    }
    $101 = (($s$7) + 1|0);
    $102 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $97;
    $103 = (($$6) + -1)|0;
    $104 = ($103|0)==(0);
    if ($104) {
     $s$5$lcssa = $101;
     label = 26;
     break L7;
    } else {
     $$0123 = $102;$$4622 = $103;$s$524 = $101;
    }
   }
   $105 = (($97) + -194)|0;
   $106 = ($105>>>0)>(50);
   if ($106) {
    $$444 = $$2;$$842 = $$6;$145 = $98;$s$1046 = $s$7;
    label = 48;
    break;
   }
   $107 = (($s$7) + 1|0);
   $108 = (19368 + ($105<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $109;$s$8 = $107;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in1 = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in1 = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in1&255;
     $27 = $$in1&255;
     $$24 = $$13$lcssa;$150 = $26;$29 = $27;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$150 = $7;$29 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$150 = $7;$29 = $7;$s$2 = $s$0;
   }
   $28 = $29&255;
   $30 = (($28) + -1)|0;
   $31 = ($30>>>0)<(127);
   if ($31) {
    $32 = (($s$2) + 1|0);
    $33 = (($$24) + -1)|0;
    $$02 = $33;$s$0 = $32;
    label = 7;
    continue;
   }
   $34 = (($28) + -194)|0;
   $35 = ($34>>>0)>(50);
   if ($35) {
    $$444 = $ws;$$842 = $$24;$145 = $150;$s$1046 = $s$2;
    label = 48;
    break;
   }
   $36 = (($s$2) + 1|0);
   $37 = (19368 + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $$35 = $$24;$c$2 = $38;$s$3 = $36;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $39 = HEAP8[$s$3>>0]|0;
   $40 = $39&255;
   $41 = $40 >>> 3;
   $42 = (($41) + -16)|0;
   $43 = $c$2 >> 26;
   $44 = (($41) + ($43))|0;
   $45 = $42 | $44;
   $46 = ($45>>>0)>(7);
   if ($46) {
    label = 17;
    break;
   }
   $48 = (($s$3) + 1|0);
   $49 = $c$2 & 33554432;
   $50 = ($49|0)==(0);
   if ($50) {
    $s$4 = $48;
   } else {
    $51 = HEAP8[$48>>0]|0;
    $52 = $51&255;
    $53 = (($52) + -128)|0;
    $54 = ($53>>>0)>(63);
    if ($54) {
     label = 20;
     break;
    }
    $56 = (($s$3) + 2|0);
    $57 = $c$2 & 524288;
    $58 = ($57|0)==(0);
    if ($58) {
     $s$4 = $56;
    } else {
     $59 = HEAP8[$56>>0]|0;
     $60 = $59&255;
     $61 = (($60) + -128)|0;
     $62 = ($61>>>0)>(63);
     if ($62) {
      label = 23;
      break;
     }
     $64 = (($s$3) + 3|0);
     $s$4 = $64;
    }
   }
   $65 = (($$35) + -1)|0;
   $$02 = $65;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $110 = HEAP8[$s$8>>0]|0;
   $111 = $110&255;
   $112 = $111 >>> 3;
   $113 = (($112) + -16)|0;
   $114 = $c$4 >> 26;
   $115 = (($112) + ($114))|0;
   $116 = $113 | $115;
   $117 = ($116>>>0)>(7);
   if ($117) {
    label = 37;
    break;
   }
   $119 = $c$4 << 6;
   $120 = (($s$8) + 1|0);
   $121 = (($111) + -128)|0;
   $122 = $121 | $119;
   $123 = ($122|0)<(0);
   if ($123) {
    $124 = HEAP8[$120>>0]|0;
    $125 = $124&255;
    $126 = (($125) + -128)|0;
    $127 = ($126>>>0)>(63);
    if ($127) {
     label = 40;
     break;
    }
    $129 = $122 << 6;
    $130 = (($s$8) + 2|0);
    $131 = $126 | $129;
    $132 = ($131|0)<(0);
    if ($132) {
     $133 = HEAP8[$130>>0]|0;
     $134 = $133&255;
     $135 = (($134) + -128)|0;
     $136 = ($135>>>0)>(63);
     if ($136) {
      label = 43;
      break;
     }
     $138 = $131 << 6;
     $139 = (($s$8) + 3|0);
     $140 = $135 | $138;
     $c$5 = $140;$s$9 = $139;
    } else {
     $c$5 = $131;$s$9 = $130;
    }
   } else {
    $c$5 = $122;$s$9 = $120;
   }
   $141 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $142 = (($$7) + -1)|0;
   $$01$ph = $141;$$46$ph = $142;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $47 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $47;
  label = 46;
 }
 else if ((label|0) == 20) {
  $55 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $55;
  label = 46;
 }
 else if ((label|0) == 23) {
  $63 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $63;
  label = 46;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 37) {
  $118 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $118;
  label = 46;
 }
 else if ((label|0) == 40) {
  $128 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $122;$s$10 = $128;
  label = 46;
 }
 else if ((label|0) == 43) {
  $137 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $131;$s$10 = $137;
  label = 46;
 }
 if ((label|0) == 46) {
  $143 = ($c$6|0)==(0);
  if ($143) {
   $$pre = HEAP8[$s$10>>0]|0;
   $$444 = $$4;$$842 = $$8;$145 = $$pre;$s$1046 = $s$10;
   label = 48;
  } else {
   $$443 = $$4;$s$1045 = $s$10;
  }
 }
 if ((label|0) == 48) {
  $144 = ($145<<24>>24)==(0);
  if ($144) {
   $146 = ($$444|0)==(0|0);
   if (!($146)) {
    HEAP32[$$444>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $147 = (($wn) - ($$842))|0;
   $$0 = $147;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$443 = $$444;$s$1045 = $s$1046;
  }
 }
 $148 = (___errno_location()|0);
 HEAP32[$148>>2] = 84;
 $149 = ($$443|0)==(0|0);
 if ($149) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1045;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$i = 0, $$10$i = 0, $$4$i = 0, $$7$i = 0, $$8$i = 0, $$9$i = 0, $$lcssa18$i = 0, $$matches$0$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi241$iZ2D = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre221$i = 0, $$pre234$i = 0, $$pre235$i = 0, $$pre236$i = 0, $$pre237$i = 0;
 var $$pre238$i = 0, $$pre239$i = 0, $$pre240$i = 0, $$size$0$i = 0, $$width$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0$i = 0;
 var $alloc$1$i = 0, $alloc$2$i = 0, $ap2$i$i = 0, $arglist_current = 0, $arglist_current23 = 0, $arglist_next = 0, $arglist_next24 = 0, $base$0$i = 0, $c$027$i = 0, $dest$0$i = 0, $f = 0, $factor$i = 0, $factor14$i = 0, $i$0$i$i = 0, $i$0$ph$i = 0, $i$0$ph46$i = 0, $i$0$ph46$lcssa$i = 0, $i$0$ph46$us53$i = 0, $i$1$lcssa$i = 0, $i$2$i = 0;
 var $i$2$ph$i = 0, $i$2$ph$i$phi = 0, $i$3$i = 0, $i$4$i = 0, $invert$0$i = 0, $isdigit$i = 0, $isdigit3$i = 0, $isdigit320$i = 0, $isdigittmp$i = 0, $isdigittmp2$i = 0, $isdigittmp219$i = 0, $k$0$ph$i = 0, $k$1$ph$i = 0, $matches$0$$i = 0, $matches$0130$i = 0, $matches$1$i = 0, $matches$2$i = 0, $matches$3$i = 0, $not$$i = 0, $or$cond = 0;
 var $or$cond$i$i = 0, $or$cond$us$i = 0, $or$cond21 = 0, $or$cond5$i = 0, $or$cond6$i = 0, $p$0136$i = 0, $p$1$i = 0, $p$10$i = 0, $p$11$i = 0, $p$2$i = 0, $p$3$lcssa$i = 0, $p$321$i = 0, $p$4$i = 0, $p$5$i = 0, $p$6$i = 0, $p$7$i = 0, $p$7$ph$i = 0, $p$8$i = 0, $p$9$i = 0, $pos$0135$i = 0;
 var $pos$1$i = 0, $pos$2$i = 0, $s$0128$i = 0, $s$1$i = 0, $s$2$ph$i = 0, $s$3$i = 0, $s$4$i = 0, $s$5$i = 0, $s$6$i = 0, $s$7$i = 0, $scanset$i = 0, $size$0$i = 0, $st$i = 0, $storemerge = 0, $vacopy_currentptr = 0, $wc$i = 0, $wcs$0129$i = 0, $wcs$1$i = 0, $wcs$2$i = 0, $wcs$3$ph$i = 0;
 var $wcs$3$ph160$i = 0, $wcs$4$i = 0, $wcs$5$i = 0, $wcs$6$i = 0, $wcs$7$i = 0, $wcs$8$i = 0, $width$0$lcssa$i = 0, $width$022$i = 0, $width$1$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i$i = sp + 128|0;
 $st$i = sp;
 $scanset$i = sp + 145|0;
 $wc$i = sp + 120|0;
 $0 = sp + 144|0;
 $f = sp + 8|0;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = (($f) + 32|0);
 HEAP32[$1>>2] = 622;
 $2 = (($f) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f) + 76|0);
 HEAP32[$3>>2] = -1;
 $4 = (($f) + 84|0);
 HEAP32[$4>>2] = $s;
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $matches$3$i = 0;
  STACKTOP = sp;return ($matches$3$i|0);
 }
 $7 = (($f) + 4|0);
 $8 = (($f) + 100|0);
 $9 = (($f) + 108|0);
 $10 = (($f) + 8|0);
 $11 = (($scanset$i) + 10|0);
 $12 = (($scanset$i) + 33|0);
 $13 = (($st$i) + 4|0);
 $14 = (($scanset$i) + 46|0);
 $15 = (($scanset$i) + 94|0);
 $16 = (($f) + 104|0);
 $18 = $5;$matches$0130$i = 0;$p$0136$i = $fmt;$pos$0135$i = 0;$s$0128$i = 0;$wcs$0129$i = 0;
 L4: while(1) {
  $17 = ($18<<24>>24)==(32);
  L6: do {
   if ($17) {
    $p$1$i = $p$0136$i;
    label = 5;
   } else {
    $19 = $18&255;
    $20 = (($19) + -9)|0;
    $21 = ($20>>>0)<(5);
    if ($21) {
     $p$1$i = $p$0136$i;
     label = 5;
    } else {
     $55 = ($18<<24>>24)==(37);
     L9: do {
      if ($55) {
       $56 = (($p$0136$i) + 1|0);
       $57 = HEAP8[$56>>0]|0;
       do {
        if ((($57<<24>>24) == 42)) {
         $80 = (($p$0136$i) + 2|0);
         $dest$0$i = 0;$p$2$i = $80;
        } else if ((($57<<24>>24) == 37)) {
         break L9;
        } else {
         $81 = $57&255;
         $isdigittmp$i = (($81) + -48)|0;
         $isdigit$i = ($isdigittmp$i>>>0)<(10);
         if ($isdigit$i) {
          $82 = (($p$0136$i) + 2|0);
          $83 = HEAP8[$82>>0]|0;
          $84 = ($83<<24>>24)==(36);
          if ($84) {
           $vacopy_currentptr = HEAP32[$ap>>2]|0;
           HEAP32[$ap2$i$i>>2] = $vacopy_currentptr;
           $i$0$i$i = $isdigittmp$i;
           while(1) {
            $85 = ($i$0$i$i>>>0)>(1);
            $arglist_current = HEAP32[$ap2$i$i>>2]|0;
            $86 = HEAP32[$arglist_current>>2]|0;
            $arglist_next = (($arglist_current) + 4|0);
            HEAP32[$ap2$i$i>>2] = $arglist_next;
            $87 = (($i$0$i$i) + -1)|0;
            if ($85) {
             $i$0$i$i = $87;
            } else {
             break;
            }
           }
           $88 = (($p$0136$i) + 3|0);
           $dest$0$i = $86;$p$2$i = $88;
           break;
          }
         }
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $89 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $dest$0$i = $89;$p$2$i = $56;
        }
       } while(0);
       $90 = HEAP8[$p$2$i>>0]|0;
       $91 = $90&255;
       $isdigittmp219$i = (($91) + -48)|0;
       $isdigit320$i = ($isdigittmp219$i>>>0)<(10);
       if ($isdigit320$i) {
        $95 = $91;$p$321$i = $p$2$i;$width$022$i = 0;
        while(1) {
         $92 = ($width$022$i*10)|0;
         $93 = (($92) + -48)|0;
         $94 = (($93) + ($95))|0;
         $96 = (($p$321$i) + 1|0);
         $97 = HEAP8[$96>>0]|0;
         $98 = $97&255;
         $isdigittmp2$i = (($98) + -48)|0;
         $isdigit3$i = ($isdigittmp2$i>>>0)<(10);
         if ($isdigit3$i) {
          $95 = $98;$p$321$i = $96;$width$022$i = $94;
         } else {
          $$lcssa18$i = $97;$p$3$lcssa$i = $96;$width$0$lcssa$i = $94;
          break;
         }
        }
       } else {
        $$lcssa18$i = $90;$p$3$lcssa$i = $p$2$i;$width$0$lcssa$i = 0;
       }
       $99 = ($$lcssa18$i<<24>>24)==(109);
       if ($99) {
        $100 = ($dest$0$i|0)!=(0|0);
        $101 = $100&1;
        $102 = (($p$3$lcssa$i) + 1|0);
        $$pre$i = HEAP8[$102>>0]|0;
        $105 = $$pre$i;$alloc$0$i = $101;$p$4$i = $102;$s$1$i = 0;$wcs$1$i = 0;
       } else {
        $105 = $$lcssa18$i;$alloc$0$i = 0;$p$4$i = $p$3$lcssa$i;$s$1$i = $s$0128$i;$wcs$1$i = $wcs$0129$i;
       }
       $103 = (($p$4$i) + 1|0);
       $104 = $105&255;
       switch ($104|0) {
       case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
        $p$5$i = $p$4$i;$size$0$i = 0;
        break;
       }
       case 108:  {
        $109 = HEAP8[$103>>0]|0;
        $110 = ($109<<24>>24)==(108);
        $111 = (($p$4$i) + 2|0);
        $$9$i = $110 ? $111 : $103;
        $$10$i = $110 ? 3 : 1;
        $p$5$i = $$9$i;$size$0$i = $$10$i;
        break;
       }
       case 76:  {
        $p$5$i = $103;$size$0$i = 2;
        break;
       }
       case 106:  {
        $p$5$i = $103;$size$0$i = 3;
        break;
       }
       case 104:  {
        $106 = HEAP8[$103>>0]|0;
        $107 = ($106<<24>>24)==(104);
        $108 = (($p$4$i) + 2|0);
        $$7$i = $107 ? $108 : $103;
        $$8$i = $107 ? -2 : -1;
        $p$5$i = $$7$i;$size$0$i = $$8$i;
        break;
       }
       case 116: case 122:  {
        $p$5$i = $103;$size$0$i = 1;
        break;
       }
       default: {
        $alloc$1$i = $alloc$0$i;$s$6$i = $s$1$i;$wcs$7$i = $wcs$1$i;
        label = 169;
        break L4;
       }
       }
       $112 = HEAP8[$p$5$i>>0]|0;
       $113 = $112&255;
       $114 = $113 & 47;
       $115 = ($114|0)==(3);
       $116 = $113 | 32;
       $$$i = $115 ? $116 : $113;
       $$size$0$i = $115 ? 1 : $size$0$i;
       if ((($$$i|0) == 99)) {
        $117 = ($width$0$lcssa$i|0)<(1);
        $$width$0$i = $117 ? 1 : $width$0$lcssa$i;
        $pos$1$i = $pos$0135$i;$width$1$i = $$width$0$i;
       } else if ((($$$i|0) == 110)) {
        $118 = ($pos$0135$i|0)<(0);
        $119 = $118 << 31 >> 31;
        $120 = ($dest$0$i|0)==(0|0);
        if ($120) {
         $matches$1$i = $matches$0130$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0135$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
        }
        switch ($$size$0$i|0) {
        case 3:  {
         $123 = $dest$0$i;
         $124 = $123;
         HEAP32[$124>>2] = $pos$0135$i;
         $125 = (($123) + 4)|0;
         $126 = $125;
         HEAP32[$126>>2] = $119;
         $matches$1$i = $matches$0130$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0135$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case 0:  {
         HEAP32[$dest$0$i>>2] = $pos$0135$i;
         $matches$1$i = $matches$0130$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0135$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case 1:  {
         HEAP32[$dest$0$i>>2] = $pos$0135$i;
         $matches$1$i = $matches$0130$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0135$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case -1:  {
         $122 = $pos$0135$i&65535;
         HEAP16[$dest$0$i>>1] = $122;
         $matches$1$i = $matches$0130$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0135$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case -2:  {
         $121 = $pos$0135$i&255;
         HEAP8[$dest$0$i>>0] = $121;
         $matches$1$i = $matches$0130$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0135$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        default: {
         $matches$1$i = $matches$0130$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0135$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
        }
        }
       } else if ((($$$i|0) == 91)) {
        $pos$1$i = $pos$0135$i;$width$1$i = $width$0$lcssa$i;
       } else {
        HEAP32[$16>>2] = 0;
        $127 = HEAP32[$10>>2]|0;
        $128 = HEAP32[$7>>2]|0;
        $129 = $127;
        $130 = $128;
        $131 = (($129) - ($130))|0;
        HEAP32[$9>>2] = $131;
        HEAP32[$8>>2] = $127;
        $133 = $128;$134 = $127;
        while(1) {
         $132 = ($133>>>0)<($134>>>0);
         if ($132) {
          $135 = (($133) + 1|0);
          HEAP32[$7>>2] = $135;
          $136 = HEAP8[$133>>0]|0;
          $137 = $136&255;
          $140 = $137;
         } else {
          $138 = (___shgetc($f)|0);
          $140 = $138;
         }
         $139 = ($140|0)==(32);
         $141 = (($140) + -9)|0;
         $142 = ($141>>>0)<(5);
         $or$cond21 = $139 | $142;
         if (!($or$cond21)) {
          break;
         }
         $$pre = HEAP32[$7>>2]|0;
         $$pre12 = HEAP32[$8>>2]|0;
         $133 = $$pre;$134 = $$pre12;
        }
        $143 = HEAP32[$8>>2]|0;
        $144 = ($143|0)==(0|0);
        $$pre234$i = HEAP32[$7>>2]|0;
        if ($144) {
         $149 = $$pre234$i;
        } else {
         $145 = (($$pre234$i) + -1|0);
         HEAP32[$7>>2] = $145;
         $149 = $145;
        }
        $146 = HEAP32[$9>>2]|0;
        $147 = HEAP32[$10>>2]|0;
        $148 = $149;
        $150 = $147;
        $151 = (($146) + ($pos$0135$i))|0;
        $152 = (($151) + ($148))|0;
        $153 = (($152) - ($150))|0;
        $pos$1$i = $153;$width$1$i = $width$0$lcssa$i;
       }
       HEAP32[$16>>2] = $width$1$i;
       $154 = HEAP32[$10>>2]|0;
       $155 = HEAP32[$7>>2]|0;
       $156 = $154;
       $157 = $155;
       $158 = (($156) - ($157))|0;
       HEAP32[$9>>2] = $158;
       $159 = ($width$1$i|0)!=(0);
       $160 = ($158|0)>($width$1$i|0);
       $or$cond$i$i = $159 & $160;
       if ($or$cond$i$i) {
        $161 = (($155) + ($width$1$i)|0);
        $storemerge = $161;
       } else {
        $storemerge = $154;
       }
       HEAP32[$8>>2] = $storemerge;
       $162 = ($155>>>0)<($storemerge>>>0);
       if ($162) {
        $163 = (($155) + 1|0);
        HEAP32[$7>>2] = $163;
        $167 = $storemerge;
       } else {
        $164 = (___shgetc($f)|0);
        $165 = ($164|0)<(0);
        if ($165) {
         $alloc$1$i = $alloc$0$i;$s$6$i = $s$1$i;$wcs$7$i = $wcs$1$i;
         label = 169;
         break L4;
        }
        $$pre235$i = HEAP32[$8>>2]|0;
        $167 = $$pre235$i;
       }
       $166 = ($167|0)==(0|0);
       if (!($166)) {
        $168 = HEAP32[$7>>2]|0;
        $169 = (($168) + -1|0);
        HEAP32[$7>>2] = $169;
       }
       L70: do {
        switch ($$$i|0) {
        case 91: case 99: case 115:  {
         $170 = ($$$i|0)==(99);
         $171 = $$$i & 239;
         $172 = ($171|0)==(99);
         L72: do {
          if ($172) {
           $173 = ($$$i|0)==(115);
           _memset(($scanset$i|0),-1,257)|0;
           HEAP8[$scanset$i>>0] = 0;
           if ($173) {
            HEAP8[$12>>0] = 0;
            ;HEAP8[$11+0>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
            $p$9$i = $p$5$i;
           } else {
            $p$9$i = $p$5$i;
           }
          } else {
           $174 = (($p$5$i) + 1|0);
           $175 = HEAP8[$174>>0]|0;
           $176 = ($175<<24>>24)==(94);
           $177 = (($p$5$i) + 2|0);
           $invert$0$i = $176&1;
           $p$6$i = $176 ? $177 : $174;
           $178 = $176&1;
           _memset(($scanset$i|0),($178|0),257)|0;
           HEAP8[$scanset$i>>0] = 0;
           $179 = HEAP8[$p$6$i>>0]|0;
           if ((($179<<24>>24) == 93)) {
            $183 = (($p$6$i) + 1|0);
            $184 = $invert$0$i ^ 1;
            $185 = $184&255;
            HEAP8[$15>>0] = $185;
            $$pre$phi241$iZ2D = $185;$p$7$ph$i = $183;
           } else if ((($179<<24>>24) == 45)) {
            $180 = (($p$6$i) + 1|0);
            $181 = $invert$0$i ^ 1;
            $182 = $181&255;
            HEAP8[$14>>0] = $182;
            $$pre$phi241$iZ2D = $182;$p$7$ph$i = $180;
           } else {
            $$pre239$i = $invert$0$i ^ 1;
            $$pre240$i = $$pre239$i&255;
            $$pre$phi241$iZ2D = $$pre240$i;$p$7$ph$i = $p$6$i;
           }
           $p$7$i = $p$7$ph$i;
           while(1) {
            $186 = HEAP8[$p$7$i>>0]|0;
            if ((($186<<24>>24) == 45)) {
             $187 = (($p$7$i) + 1|0);
             $188 = HEAP8[$187>>0]|0;
             if ((($188<<24>>24) == 93) | (($188<<24>>24) == 0)) {
              $199 = 45;$p$8$i = $p$7$i;
             } else {
              $189 = (($p$7$i) + -1|0);
              $190 = HEAP8[$189>>0]|0;
              $191 = ($190&255)<($188&255);
              if ($191) {
               $192 = $190&255;
               $c$027$i = $192;
               while(1) {
                $193 = (($c$027$i) + 1)|0;
                $194 = (($scanset$i) + ($193)|0);
                HEAP8[$194>>0] = $$pre$phi241$iZ2D;
                $195 = HEAP8[$187>>0]|0;
                $196 = $195&255;
                $197 = ($193|0)<($196|0);
                if ($197) {
                 $c$027$i = $193;
                } else {
                 $199 = $195;$p$8$i = $187;
                 break;
                }
               }
              } else {
               $199 = $188;$p$8$i = $187;
              }
             }
            } else if ((($186<<24>>24) == 93)) {
             $p$9$i = $p$7$i;
             break L72;
            } else if ((($186<<24>>24) == 0)) {
             $alloc$1$i = $alloc$0$i;$s$6$i = $s$1$i;$wcs$7$i = $wcs$1$i;
             label = 169;
             break L4;
            } else {
             $199 = $186;$p$8$i = $p$7$i;
            }
            $198 = $199&255;
            $200 = (($198) + 1)|0;
            $201 = (($scanset$i) + ($200)|0);
            HEAP8[$201>>0] = $$pre$phi241$iZ2D;
            $202 = (($p$8$i) + 1|0);
            $p$7$i = $202;
           }
          }
         } while(0);
         $203 = (($width$1$i) + 1)|0;
         $$4$i = $170 ? $203 : 31;
         $204 = ($$size$0$i|0)==(1);
         $205 = ($alloc$0$i|0)!=(0);
         L91: do {
          if ($204) {
           if ($205) {
            $206 = $$4$i << 2;
            $207 = (_malloc($206)|0);
            $208 = ($207|0)==(0|0);
            if ($208) {
             $alloc$1$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $207;
             label = 169;
             break L4;
            } else {
             $wcs$2$i = $207;
            }
           } else {
            $wcs$2$i = $dest$0$i;
           }
           HEAP32[$st$i>>2] = 0;
           HEAP32[$13>>2] = 0;
           $i$0$ph$i = 0;$k$0$ph$i = $$4$i;$wcs$3$ph$i = $wcs$2$i;
           L97: while(1) {
            $209 = ($wcs$3$ph$i|0)==(0|0);
            if ($209) {
             $210 = ($i$0$ph$i|0)==($k$0$ph$i|0);
             $or$cond$us$i = $205 & $210;
             while(1) {
              $213 = HEAP32[$7>>2]|0;
              $223 = HEAP32[$8>>2]|0;
              $224 = ($213>>>0)<($223>>>0);
              if ($224) {
               $212 = (($213) + 1|0);
               HEAP32[$7>>2] = $212;
               $214 = HEAP8[$213>>0]|0;
               $215 = $214&255;
               $217 = $215;
              } else {
               $211 = (___shgetc($f)|0);
               $217 = $211;
              }
              $216 = (($217) + 1)|0;
              $218 = (($scanset$i) + ($216)|0);
              $219 = HEAP8[$218>>0]|0;
              $220 = ($219<<24>>24)==(0);
              if ($220) {
               $i$0$ph46$lcssa$i = $i$0$ph$i;$wcs$3$ph160$i = 0;
               break L97;
              }
              $221 = $217&255;
              HEAP8[$0>>0] = $221;
              $222 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
              if ((($222|0) == -2)) {
               continue;
              } else if ((($222|0) == -1)) {
               $alloc$1$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = 0;
               label = 169;
               break L4;
              }
              if ($or$cond$us$i) {
               $i$1$lcssa$i = $i$0$ph$i;
               break;
              }
             }
            } else {
             if ($205) {
              $i$0$ph46$us53$i = $i$0$ph$i;
             } else {
              $i$0$ph46$i = $i$0$ph$i;
              label = 105;
              break;
             }
             while(1) {
              while(1) {
               $227 = HEAP32[$7>>2]|0;
               $241 = HEAP32[$8>>2]|0;
               $242 = ($227>>>0)<($241>>>0);
               if ($242) {
                $226 = (($227) + 1|0);
                HEAP32[$7>>2] = $226;
                $228 = HEAP8[$227>>0]|0;
                $229 = $228&255;
                $231 = $229;
               } else {
                $225 = (___shgetc($f)|0);
                $231 = $225;
               }
               $230 = (($231) + 1)|0;
               $232 = (($scanset$i) + ($230)|0);
               $233 = HEAP8[$232>>0]|0;
               $234 = ($233<<24>>24)==(0);
               if ($234) {
                $i$0$ph46$lcssa$i = $i$0$ph46$us53$i;$wcs$3$ph160$i = $wcs$3$ph$i;
                break L97;
               }
               $235 = $231&255;
               HEAP8[$0>>0] = $235;
               $236 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
               if ((($236|0) == -1)) {
                $alloc$1$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $wcs$3$ph$i;
                label = 169;
                break L4;
               } else if (!((($236|0) == -2))) {
                break;
               }
              }
              $237 = HEAP32[$wc$i>>2]|0;
              $238 = (($i$0$ph46$us53$i) + 1)|0;
              $239 = (($wcs$3$ph$i) + ($i$0$ph46$us53$i<<2)|0);
              HEAP32[$239>>2] = $237;
              $240 = ($238|0)==($k$0$ph$i|0);
              if ($240) {
               $i$1$lcssa$i = $k$0$ph$i;
               break;
              } else {
               $i$0$ph46$us53$i = $238;
              }
             }
            }
            $factor$i = $k$0$ph$i << 1;
            $260 = $factor$i | 1;
            $261 = $260 << 2;
            $262 = (_realloc($wcs$3$ph$i,$261)|0);
            $263 = ($262|0)==(0|0);
            if ($263) {
             $alloc$1$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $wcs$3$ph$i;
             label = 169;
             break L4;
            }
            $i$0$ph$i = $i$1$lcssa$i;$k$0$ph$i = $260;$wcs$3$ph$i = $262;
           }
           L122: do {
            if ((label|0) == 105) {
             while(1) {
              label = 0;
              while(1) {
               $243 = HEAP32[$7>>2]|0;
               $244 = HEAP32[$8>>2]|0;
               $245 = ($243>>>0)<($244>>>0);
               if ($245) {
                $246 = (($243) + 1|0);
                HEAP32[$7>>2] = $246;
                $247 = HEAP8[$243>>0]|0;
                $248 = $247&255;
                $251 = $248;
               } else {
                $249 = (___shgetc($f)|0);
                $251 = $249;
               }
               $250 = (($251) + 1)|0;
               $252 = (($scanset$i) + ($250)|0);
               $253 = HEAP8[$252>>0]|0;
               $254 = ($253<<24>>24)==(0);
               if ($254) {
                $i$0$ph46$lcssa$i = $i$0$ph46$i;$wcs$3$ph160$i = $wcs$3$ph$i;
                break L122;
               }
               $255 = $251&255;
               HEAP8[$0>>0] = $255;
               $256 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
               if ((($256|0) == -1)) {
                $alloc$1$i = 0;$s$6$i = 0;$wcs$7$i = $wcs$3$ph$i;
                label = 169;
                break L4;
               } else if (!((($256|0) == -2))) {
                break;
               }
              }
              $257 = HEAP32[$wc$i>>2]|0;
              $258 = (($i$0$ph46$i) + 1)|0;
              $259 = (($wcs$3$ph$i) + ($i$0$ph46$i<<2)|0);
              HEAP32[$259>>2] = $257;
              $i$0$ph46$i = $258;
              label = 105;
             }
            }
           } while(0);
           $264 = HEAP32[$st$i>>2]|0;
           $265 = ($264|0)==(0);
           if ($265) {
            $i$4$i = $i$0$ph46$lcssa$i;$s$3$i = 0;$wcs$4$i = $wcs$3$ph160$i;
           } else {
            $alloc$1$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $wcs$3$ph160$i;
            label = 169;
            break L4;
           }
          } else {
           if ($205) {
            $266 = (_malloc($$4$i)|0);
            $267 = ($266|0)==(0|0);
            if ($267) {
             $alloc$1$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = 0;
             label = 169;
             break L4;
            } else {
             $i$2$ph$i = 0;$k$1$ph$i = $$4$i;$s$2$ph$i = $266;
            }
            while(1) {
             $i$2$i = $i$2$ph$i;
             while(1) {
              $268 = HEAP32[$7>>2]|0;
              $269 = HEAP32[$8>>2]|0;
              $270 = ($268>>>0)<($269>>>0);
              if ($270) {
               $271 = (($268) + 1|0);
               HEAP32[$7>>2] = $271;
               $272 = HEAP8[$268>>0]|0;
               $273 = $272&255;
               $276 = $273;
              } else {
               $274 = (___shgetc($f)|0);
               $276 = $274;
              }
              $275 = (($276) + 1)|0;
              $277 = (($scanset$i) + ($275)|0);
              $278 = HEAP8[$277>>0]|0;
              $279 = ($278<<24>>24)==(0);
              if ($279) {
               $i$4$i = $i$2$i;$s$3$i = $s$2$ph$i;$wcs$4$i = 0;
               break L91;
              }
              $280 = $276&255;
              $281 = (($i$2$i) + 1)|0;
              $282 = (($s$2$ph$i) + ($i$2$i)|0);
              HEAP8[$282>>0] = $280;
              $283 = ($281|0)==($k$1$ph$i|0);
              if ($283) {
               break;
              } else {
               $i$2$i = $281;
              }
             }
             $factor14$i = $k$1$ph$i << 1;
             $284 = $factor14$i | 1;
             $285 = (_realloc($s$2$ph$i,$284)|0);
             $286 = ($285|0)==(0|0);
             if ($286) {
              $alloc$1$i = $alloc$0$i;$s$6$i = $s$2$ph$i;$wcs$7$i = 0;
              label = 169;
              break L4;
             } else {
              $i$2$ph$i$phi = $k$1$ph$i;$k$1$ph$i = $284;$s$2$ph$i = $285;$i$2$ph$i = $i$2$ph$i$phi;
             }
            }
           }
           $287 = ($dest$0$i|0)==(0|0);
           if ($287) {
            $305 = $167;
            while(1) {
             $303 = HEAP32[$7>>2]|0;
             $304 = ($303>>>0)<($305>>>0);
             if ($304) {
              $306 = (($303) + 1|0);
              HEAP32[$7>>2] = $306;
              $307 = HEAP8[$303>>0]|0;
              $308 = $307&255;
              $311 = $308;
             } else {
              $309 = (___shgetc($f)|0);
              $311 = $309;
             }
             $310 = (($311) + 1)|0;
             $312 = (($scanset$i) + ($310)|0);
             $313 = HEAP8[$312>>0]|0;
             $314 = ($313<<24>>24)==(0);
             if ($314) {
              $i$4$i = 0;$s$3$i = 0;$wcs$4$i = 0;
              break L91;
             }
             $$pre237$i = HEAP32[$8>>2]|0;
             $305 = $$pre237$i;
            }
           } else {
            $290 = $167;$i$3$i = 0;
            while(1) {
             $288 = HEAP32[$7>>2]|0;
             $289 = ($288>>>0)<($290>>>0);
             if ($289) {
              $291 = (($288) + 1|0);
              HEAP32[$7>>2] = $291;
              $292 = HEAP8[$288>>0]|0;
              $293 = $292&255;
              $296 = $293;
             } else {
              $294 = (___shgetc($f)|0);
              $296 = $294;
             }
             $295 = (($296) + 1)|0;
             $297 = (($scanset$i) + ($295)|0);
             $298 = HEAP8[$297>>0]|0;
             $299 = ($298<<24>>24)==(0);
             if ($299) {
              $i$4$i = $i$3$i;$s$3$i = $dest$0$i;$wcs$4$i = 0;
              break L91;
             }
             $300 = $296&255;
             $301 = (($i$3$i) + 1)|0;
             $302 = (($dest$0$i) + ($i$3$i)|0);
             HEAP8[$302>>0] = $300;
             $$pre221$i = HEAP32[$8>>2]|0;
             $290 = $$pre221$i;$i$3$i = $301;
            }
           }
          }
         } while(0);
         $315 = HEAP32[$8>>2]|0;
         $316 = ($315|0)==(0|0);
         $$pre236$i = HEAP32[$7>>2]|0;
         if ($316) {
          $321 = $$pre236$i;
         } else {
          $317 = (($$pre236$i) + -1|0);
          HEAP32[$7>>2] = $317;
          $321 = $317;
         }
         $318 = HEAP32[$9>>2]|0;
         $319 = HEAP32[$10>>2]|0;
         $320 = $321;
         $322 = $319;
         $323 = (($320) - ($322))|0;
         $324 = (($323) + ($318))|0;
         $325 = ($324|0)==(0);
         if ($325) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0130$i;$s$7$i = $s$3$i;$wcs$8$i = $wcs$4$i;
          break L4;
         }
         $$not$i = $170 ^ 1;
         $326 = ($324|0)==($width$1$i|0);
         $or$cond5$i = $326 | $$not$i;
         if (!($or$cond5$i)) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0130$i;$s$7$i = $s$3$i;$wcs$8$i = $wcs$4$i;
          break L4;
         }
         do {
          if ($205) {
           if ($204) {
            HEAP32[$dest$0$i>>2] = $wcs$4$i;
            break;
           } else {
            HEAP32[$dest$0$i>>2] = $s$3$i;
            break;
           }
          }
         } while(0);
         if ($170) {
          $p$10$i = $p$9$i;$s$4$i = $s$3$i;$wcs$5$i = $wcs$4$i;
         } else {
          $327 = ($wcs$4$i|0)==(0|0);
          if (!($327)) {
           $328 = (($wcs$4$i) + ($i$4$i<<2)|0);
           HEAP32[$328>>2] = 0;
          }
          $329 = ($s$3$i|0)==(0|0);
          if ($329) {
           $p$10$i = $p$9$i;$s$4$i = 0;$wcs$5$i = $wcs$4$i;
           break L70;
          }
          $330 = (($s$3$i) + ($i$4$i)|0);
          HEAP8[$330>>0] = 0;
          $p$10$i = $p$9$i;$s$4$i = $s$3$i;$wcs$5$i = $wcs$4$i;
         }
         break;
        }
        case 120: case 88: case 112:  {
         $base$0$i = 16;
         label = 151;
         break;
        }
        case 117: case 100:  {
         $base$0$i = 10;
         label = 151;
         break;
        }
        case 105:  {
         $base$0$i = 0;
         label = 151;
         break;
        }
        case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
         $349 = (+___floatscan($f,$$size$0$i,0));
         $350 = HEAP32[$9>>2]|0;
         $351 = HEAP32[$7>>2]|0;
         $352 = HEAP32[$10>>2]|0;
         $353 = $351;
         $354 = $352;
         $355 = (($354) - ($353))|0;
         $356 = ($350|0)==($355|0);
         if ($356) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0130$i;$s$7$i = $s$1$i;$wcs$8$i = $wcs$1$i;
          break L4;
         }
         $357 = ($dest$0$i|0)==(0|0);
         if ($357) {
          $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
         } else {
          if ((($$size$0$i|0) == 1)) {
           HEAPF64[$dest$0$i>>3] = $349;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          } else if ((($$size$0$i|0) == 2)) {
           HEAPF64[$dest$0$i>>3] = $349;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          } else if ((($$size$0$i|0) == 0)) {
           $358 = $349;
           HEAPF32[$dest$0$i>>2] = $358;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          } else {
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          }
         }
         break;
        }
        case 111:  {
         $base$0$i = 8;
         label = 151;
         break;
        }
        default: {
         $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
        }
        }
       } while(0);
       L190: do {
        if ((label|0) == 151) {
         label = 0;
         $331 = (___intscan($f,$base$0$i,0,-1,-1)|0);
         $332 = tempRet0;
         $333 = HEAP32[$9>>2]|0;
         $334 = HEAP32[$7>>2]|0;
         $335 = HEAP32[$10>>2]|0;
         $336 = $334;
         $337 = $335;
         $338 = (($337) - ($336))|0;
         $339 = ($333|0)==($338|0);
         if ($339) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0130$i;$s$7$i = $s$1$i;$wcs$8$i = $wcs$1$i;
          break L4;
         }
         $340 = ($$$i|0)!=(112);
         $341 = ($dest$0$i|0)==(0|0);
         $or$cond6$i = $340 | $341;
         if (!($or$cond6$i)) {
          $342 = $331;
          HEAP32[$dest$0$i>>2] = $342;
          $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
          break;
         }
         if ($341) {
          $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
         } else {
          switch ($$size$0$i|0) {
          case -2:  {
           $343 = $331&255;
           HEAP8[$dest$0$i>>0] = $343;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case -1:  {
           $344 = $331&65535;
           HEAP16[$dest$0$i>>1] = $344;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case 3:  {
           $345 = $dest$0$i;
           $346 = $345;
           HEAP32[$346>>2] = $331;
           $347 = (($345) + 4)|0;
           $348 = $347;
           HEAP32[$348>>2] = $332;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case 0:  {
           HEAP32[$dest$0$i>>2] = $331;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case 1:  {
           HEAP32[$dest$0$i>>2] = $331;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          default: {
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
          }
          }
         }
        }
       } while(0);
       $359 = HEAP32[$9>>2]|0;
       $360 = HEAP32[$7>>2]|0;
       $361 = HEAP32[$10>>2]|0;
       $362 = $360;
       $363 = $361;
       $364 = (($359) + ($pos$1$i))|0;
       $365 = (($364) + ($362))|0;
       $366 = (($365) - ($363))|0;
       $not$$i = ($dest$0$i|0)!=(0|0);
       $367 = $not$$i&1;
       $matches$0$$i = (($367) + ($matches$0130$i))|0;
       $matches$1$i = $matches$0$$i;$p$11$i = $p$10$i;$pos$2$i = $366;$s$5$i = $s$4$i;$wcs$6$i = $wcs$5$i;
       break L6;
      }
     } while(0);
     $58 = $55&1;
     $59 = (($p$0136$i) + ($58)|0);
     HEAP32[$16>>2] = 0;
     $60 = HEAP32[$10>>2]|0;
     $61 = HEAP32[$7>>2]|0;
     $62 = $60;
     $63 = $61;
     $64 = (($62) - ($63))|0;
     HEAP32[$9>>2] = $64;
     HEAP32[$8>>2] = $60;
     $65 = ($61>>>0)<($60>>>0);
     if ($65) {
      $66 = (($61) + 1|0);
      HEAP32[$7>>2] = $66;
      $67 = HEAP8[$61>>0]|0;
      $68 = $67&255;
      $73 = $68;
     } else {
      $69 = (___shgetc($f)|0);
      $73 = $69;
     }
     $70 = HEAP8[$59>>0]|0;
     $71 = $70&255;
     $72 = ($73|0)==($71|0);
     if (!($72)) {
      label = 22;
      break L4;
     }
     $79 = (($pos$0135$i) + 1)|0;
     $matches$1$i = $matches$0130$i;$p$11$i = $59;$pos$2$i = $79;$s$5$i = $s$0128$i;$wcs$6$i = $wcs$0129$i;
    }
   }
  } while(0);
  if ((label|0) == 5) {
   while(1) {
    label = 0;
    $22 = (($p$1$i) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(32);
    if ($24) {
     $p$1$i = $22;
     label = 5;
     continue;
    }
    $25 = $23&255;
    $26 = (($25) + -9)|0;
    $27 = ($26>>>0)<(5);
    if ($27) {
     $p$1$i = $22;
     label = 5;
    } else {
     break;
    }
   }
   HEAP32[$16>>2] = 0;
   $28 = HEAP32[$10>>2]|0;
   $29 = HEAP32[$7>>2]|0;
   $30 = $28;
   $31 = $29;
   $32 = (($30) - ($31))|0;
   HEAP32[$9>>2] = $32;
   HEAP32[$8>>2] = $28;
   $34 = $29;$35 = $28;
   while(1) {
    $33 = ($34>>>0)<($35>>>0);
    if ($33) {
     $36 = (($34) + 1|0);
     HEAP32[$7>>2] = $36;
     $37 = HEAP8[$34>>0]|0;
     $38 = $37&255;
     $41 = $38;
    } else {
     $39 = (___shgetc($f)|0);
     $41 = $39;
    }
    $40 = ($41|0)==(32);
    $42 = (($41) + -9)|0;
    $43 = ($42>>>0)<(5);
    $or$cond = $40 | $43;
    if (!($or$cond)) {
     break;
    }
    $$pre13 = HEAP32[$7>>2]|0;
    $$pre14 = HEAP32[$8>>2]|0;
    $34 = $$pre13;$35 = $$pre14;
   }
   $44 = HEAP32[$8>>2]|0;
   $45 = ($44|0)==(0|0);
   $$pre238$i = HEAP32[$7>>2]|0;
   if ($45) {
    $50 = $$pre238$i;
   } else {
    $46 = (($$pre238$i) + -1|0);
    HEAP32[$7>>2] = $46;
    $50 = $46;
   }
   $47 = HEAP32[$9>>2]|0;
   $48 = HEAP32[$10>>2]|0;
   $49 = $50;
   $51 = $48;
   $52 = (($47) + ($pos$0135$i))|0;
   $53 = (($52) + ($49))|0;
   $54 = (($53) - ($51))|0;
   $matches$1$i = $matches$0130$i;$p$11$i = $p$1$i;$pos$2$i = $54;$s$5$i = $s$0128$i;$wcs$6$i = $wcs$0129$i;
  }
  $368 = (($p$11$i) + 1|0);
  $369 = HEAP8[$368>>0]|0;
  $370 = ($369<<24>>24)==(0);
  if ($370) {
   $matches$3$i = $matches$1$i;
   label = 172;
   break;
  } else {
   $18 = $369;$matches$0130$i = $matches$1$i;$p$0136$i = $368;$pos$0135$i = $pos$2$i;$s$0128$i = $s$5$i;$wcs$0129$i = $wcs$6$i;
  }
 }
 if ((label|0) == 172) {
  STACKTOP = sp;return ($matches$3$i|0);
 }
 if ((label|0) == 22) {
  $74 = HEAP32[$8>>2]|0;
  $75 = ($74|0)==(0|0);
  if (!($75)) {
   $76 = HEAP32[$7>>2]|0;
   $77 = (($76) + -1|0);
   HEAP32[$7>>2] = $77;
  }
  $78 = ($73|0)<(0);
  if ($78) {
   $alloc$1$i = 0;$s$6$i = $s$0128$i;$wcs$7$i = $wcs$0129$i;
   label = 169;
  } else {
   $matches$3$i = $matches$0130$i;
   STACKTOP = sp;return ($matches$3$i|0);
  }
 }
 if ((label|0) == 169) {
  $371 = ($matches$0130$i|0)==(0);
  $372 = $371 << 31 >> 31;
  $$matches$0$i = (($372) + ($matches$0130$i))|0;
  $alloc$2$i = $alloc$1$i;$matches$2$i = $$matches$0$i;$s$7$i = $s$6$i;$wcs$8$i = $wcs$7$i;
 }
 $373 = ($alloc$2$i|0)==(0);
 if ($373) {
  $matches$3$i = $matches$2$i;
  STACKTOP = sp;return ($matches$3$i|0);
 }
 _free($s$7$i);
 _free($wcs$8$i);
 $matches$3$i = $matches$2$i;
 STACKTOP = sp;return ($matches$3$i|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0$lcssa$i = 0, $$013$i = 0, $$1$lcssa$i = 0, $$17$i = 0, $$24$i = 0, $$3$i = 0, $$lcssa$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0$i = 0, $k$0$len$i = 0, $or$cond$i = 0, $or$cond12$i = 0, $phitmp = 0, $s$0$lcssa$i = 0, $s$014$i = 0, $s$15$i = 0, $s$2$i = 0, $w$0$lcssa$i = 0, $w$08$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = $1;
 $4 = $3 & 3;
 $5 = ($4|0)==(0);
 $6 = ($2|0)==(0);
 $or$cond12$i = $5 | $6;
 L1: do {
  if ($or$cond12$i) {
   $$0$lcssa$i = $2;$$lcssa$i = $6;$s$0$lcssa$i = $1;
   label = 4;
  } else {
   $$013$i = $2;$s$014$i = $1;
   while(1) {
    $7 = HEAP8[$s$014$i>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $$3$i = $$013$i;$s$2$i = $s$014$i;
     break L1;
    }
    $9 = (($s$014$i) + 1|0);
    $10 = (($$013$i) + -1)|0;
    $11 = $9;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    $14 = ($10|0)==(0);
    $or$cond$i = $13 | $14;
    if ($or$cond$i) {
     $$0$lcssa$i = $10;$$lcssa$i = $14;$s$0$lcssa$i = $9;
     label = 4;
     break;
    } else {
     $$013$i = $10;$s$014$i = $9;
    }
   }
  }
 } while(0);
 L5: do {
  if ((label|0) == 4) {
   if ($$lcssa$i) {
    $$3$i = 0;$s$2$i = $s$0$lcssa$i;
   } else {
    $$pre = HEAP8[$s$0$lcssa$i>>0]|0;
    $phitmp = ($$pre<<24>>24)==(0);
    if ($phitmp) {
     $$3$i = $$0$lcssa$i;$s$2$i = $s$0$lcssa$i;
    } else {
     $15 = ($$0$lcssa$i>>>0)>(3);
     L9: do {
      if ($15) {
       $$17$i = $$0$lcssa$i;$w$08$i = $s$0$lcssa$i;
       while(1) {
        $16 = HEAP32[$w$08$i>>2]|0;
        $17 = (($16) + -16843009)|0;
        $18 = $16 & -2139062144;
        $19 = $18 ^ -2139062144;
        $20 = $19 & $17;
        $21 = ($20|0)==(0);
        if (!($21)) {
         $$1$lcssa$i = $$17$i;$w$0$lcssa$i = $w$08$i;
         break L9;
        }
        $22 = (($w$08$i) + 4|0);
        $23 = (($$17$i) + -4)|0;
        $24 = ($23>>>0)>(3);
        if ($24) {
         $$17$i = $23;$w$08$i = $22;
        } else {
         $$1$lcssa$i = $23;$w$0$lcssa$i = $22;
         break;
        }
       }
      } else {
       $$1$lcssa$i = $$0$lcssa$i;$w$0$lcssa$i = $s$0$lcssa$i;
      }
     } while(0);
     $25 = ($$1$lcssa$i|0)==(0);
     if ($25) {
      $$3$i = 0;$s$2$i = $w$0$lcssa$i;
     } else {
      $$24$i = $$1$lcssa$i;$s$15$i = $w$0$lcssa$i;
      while(1) {
       $26 = HEAP8[$s$15$i>>0]|0;
       $27 = ($26<<24>>24)==(0);
       if ($27) {
        $$3$i = $$24$i;$s$2$i = $s$15$i;
        break L5;
       }
       $28 = (($s$15$i) + 1|0);
       $29 = (($$24$i) + -1)|0;
       $30 = ($29|0)==(0);
       if ($30) {
        $$3$i = 0;$s$2$i = $28;
        break;
       } else {
        $$24$i = $29;$s$15$i = $28;
       }
      }
     }
    }
   }
  }
 } while(0);
 $31 = ($$3$i|0)!=(0);
 $32 = $31 ? $s$2$i : 0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $k$0$i = $2;
 } else {
  $34 = $32;
  $35 = (($34) - ($3))|0;
  $k$0$i = $35;
 }
 $36 = ($k$0$i>>>0)<($len>>>0);
 $k$0$len$i = $36 ? $k$0$i : $len;
 _memcpy(($buf|0),($1|0),($k$0$len$i|0))|0;
 $37 = (($1) + ($k$0$len$i)|0);
 $38 = (($f) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = (($1) + ($k$0$i)|0);
 $40 = (($f) + 8|0);
 HEAP32[$40>>2] = $39;
 HEAP32[$0>>2] = $39;
 STACKTOP = sp;return ($k$0$len$i|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 32|0;
 $thrown_object = sp + 44|0;
 $0 = (_pthread_once((19776|0),(623|0))|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _abort_message(19784,$vararg_buffer);
  // unreachable;
 }
 $2 = HEAP32[19768>>2]|0;
 $3 = (_pthread_getspecific(($2|0))|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _abort_message(19752,$vararg_buffer12);
  // unreachable;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _abort_message(19752,$vararg_buffer12);
  // unreachable;
 }
 $7 = (($5) + 80|0);
 $8 = (($5) + 48|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 & -256;
 $16 = ($15|0)==(1126902528);
 $17 = ($14|0)==(1129074247);
 $18 = $16 & $17;
 if (!($18)) {
  HEAP32[$vararg_buffer9>>2] = 19600;
  _abort_message(19712,$vararg_buffer9);
  // unreachable;
 }
 $19 = ($11|0)==(1126902529);
 $20 = ($14|0)==(1129074247);
 $21 = $19 & $20;
 if ($21) {
  $22 = (($5) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
 } else {
  $24 = $7;
 }
 HEAP32[$thrown_object>>2] = $24;
 $25 = HEAP32[$5>>2]|0;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(20144,$25,$thrown_object)|0);
 if ($28) {
  $29 = HEAP32[$thrown_object>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (FUNCTION_TABLE_ii[$32 & 1023]($29)|0);
  HEAP32[$vararg_buffer1>>2] = 19600;
  $vararg_ptr3 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $27;
  $vararg_ptr4 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $33;
  _abort_message(19616,$vararg_buffer1);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer5>>2] = 19600;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $27;
  _abort_message(19664,$vararg_buffer5);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((19768|0),(624|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(19840,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[19768>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(19896,$vararg_buffer);
  // unreachable;
 }
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = HEAP32[20120>>2]|0;HEAP32[20120>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 4;
   break;
  }
  $5 = $3;
  FUNCTION_TABLE_v[$5 & 1023]();
  $6 = (_malloc($$size)|0);
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $$lcssa = $6;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = (___cxa_allocate_exception(4)|0);
  HEAP32[$8>>2] = ((19952 + 8|0));
  ___cxa_throw(($8|0),(20008|0),(386|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return 0|0;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (19976|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(625,(20024|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(625,(20064|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(427);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 __THREW__ = 0;
 $0 = (invoke_iii(626,(19776|0),(623|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $3 = ($0|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_vii(625,(19784|0),($vararg_buffer|0));
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     break;
    }
    // unreachable;
   }
   $6 = HEAP32[19768>>2]|0;
   __THREW__ = 0;
   $7 = (invoke_ii(627,($6|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    $10 = ($7|0)==(0|0);
    if (!($10)) {
     $11 = HEAP32[$7>>2]|0;
     $12 = ($11|0)==(0|0);
     if (!($12)) {
      $13 = (($11) + 48|0);
      $14 = $13;
      $15 = $14;
      $16 = HEAP32[$15>>2]|0;
      $17 = (($14) + 4)|0;
      $18 = $17;
      $19 = HEAP32[$18>>2]|0;
      $20 = $16 & -256;
      $21 = ($20|0)==(1126902528);
      $22 = ($19|0)==(1129074247);
      $23 = $21 & $22;
      if ($23) {
       $24 = (($11) + 12|0);
       $25 = HEAP32[$24>>2]|0;
       __ZSt11__terminatePFvvE($25);
       // unreachable;
      }
     }
    }
    $26 = HEAP32[4898]|0;HEAP32[4898] = (($26+0)|0);
    $27 = $26;
    __ZSt11__terminatePFvvE($27);
    // unreachable;
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch(0|0)|0;
 $29 = tempRet0;
 ___clang_call_terminate($28);
 // unreachable;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20152 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20152 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20176 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20176 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20152 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20152 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (20424|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv116__enum_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,20592)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below) {
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $info = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $2 = ($this|0)==($thrown_type|0);
 $3 = ($thrown_type|0)==(20904|0);
 $$$i = $2 | $3;
 if ($$$i) {
  $$1 = 1;
 } else {
  $4 = ($thrown_type|0)==(0|0);
  if ($4) {
   $$1 = 0;
  } else {
   $5 = (___dynamic_cast($thrown_type,20704)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$1 = 0;
   } else {
    $7 = (($5) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($this) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 ^ -1;
    $12 = $8 & $11;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = (($this) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)==($17|0);
     $19 = ($15|0)==(20888|0);
     $or$cond = $18 | $19;
     if ($or$cond) {
      $$1 = 1;
     } else {
      $20 = ($15|0)==(0|0);
      if ($20) {
       $$1 = 0;
      } else {
       $21 = (___dynamic_cast($15,20592)|0);
       $22 = ($21|0)==(0|0);
       if ($22) {
        $$1 = 0;
       } else {
        $23 = HEAP32[$16>>2]|0;
        $24 = ($23|0)==(0|0);
        if ($24) {
         $$1 = 0;
        } else {
         $25 = (___dynamic_cast($23,20592)|0);
         $26 = ($25|0)==(0|0);
         if ($26) {
          $$1 = 0;
         } else {
          dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$info>>2] = $25;
          $27 = (($info) + 8|0);
          HEAP32[$27>>2] = $21;
          $28 = (($info) + 12|0);
          HEAP32[$28>>2] = -1;
          $29 = (($info) + 48|0);
          HEAP32[$29>>2] = 1;
          $30 = HEAP32[$25>>2]|0;
          $31 = (($30) + 28|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = HEAP32[$adjustedPtr>>2]|0;
          FUNCTION_TABLE_viiii[$32 & 511]($25,$info,$33,1);
          $34 = (($info) + 24|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = ($35|0)==(1);
          if ($36) {
           $37 = (($info) + 16|0);
           $38 = HEAP32[$37>>2]|0;
           HEAP32[$adjustedPtr>>2] = $38;
           $$1 = 1;
          } else {
           $$1 = 0;
          }
         }
        }
       }
      }
     }
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function ___dynamic_cast($static_ptr,$dst_type) {
 $static_ptr = $static_ptr|0;
 $dst_type = $dst_type|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = 20536;
 $9 = (($info) + 12|0);
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$9+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+40>>1]=0|0;HEAP8[$9+42>>0]=0|0;
 do {
  if ($16) {
   $17 = (($info) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$6>>2]|0;
   $19 = (($18) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 1023]($6,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = (($info) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = (($24) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    if (!($29)) {
     $dst_ptr$0 = 0;
     break;
    }
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    if (!($31)) {
     $dst_ptr$0 = 0;
     break;
    }
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$11>>2]|0;
    $$1 = $33 ? $34 : 0;
    $dst_ptr$0 = $$1;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $dst_ptr$0 = 0;
     break;
    }
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    if (!($40)) {
     $dst_ptr$0 = 0;
     break;
    }
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    if (!($42)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below) {
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = ($23|0)==(1);
 $or$cond1 = $21 & $22;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 1023]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 1023]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 1023]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if (!($4)) {
  STACKTOP = sp;return ($5|0);
 }
 $6 = HEAP32[$temp>>2]|0;
 HEAP32[$thrown>>2] = $6;
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,20704)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[21376>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((21376 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((21376 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[21376>>2] = $22;
     } else {
      $23 = HEAP32[((21376 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((21376 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((21376 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((21376 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[21376>>2] = $74;
      } else {
       $75 = HEAP32[((21376 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((21376 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((21376 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((21376 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[21376>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[21376>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((21376 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((21376 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((21376 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((21376 + 8|0))>>2] = $81;
     HEAP32[((21376 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((21376 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((21376 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((21376 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((21376 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((21376 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((21376 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((21376 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((21376 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((21376 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((21376 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((21376 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((21376 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((21376 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[21376>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[21376>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((21376 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((21376 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((21376 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((21376 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((21376 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((21376 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((21376 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((21376 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((21376 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((21376 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((21376 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((21376 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((21376 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((21376 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((21376 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((21376 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((21376 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((21376 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[21376>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[21376>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((21376 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((21376 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((21376 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((21376 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((21376 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((21376 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((21376 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((21376 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((21376 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((21376 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((21376 + 20|0))>>2] = $516;
   HEAP32[((21376 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((21376 + 8|0))>>2] = 0;
   HEAP32[((21376 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((21376 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((21376 + 12|0))>>2] = $530;
  $531 = HEAP32[((21376 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((21376 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[21848>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((21848 + 8|0))>>2] = $540;
    HEAP32[((21848 + 4|0))>>2] = $540;
    HEAP32[((21848 + 12|0))>>2] = -1;
    HEAP32[((21848 + 16|0))>>2] = -1;
    HEAP32[((21848 + 20|0))>>2] = 0;
    HEAP32[((21376 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[21848>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((21848 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((21376 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((21376 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((21376 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((21376 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((21376 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((21376 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((21848 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((21376 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((21376 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((21848 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((21376 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((21376 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((21376 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((21376 + 432|0))>>2] = $633;
  $634 = HEAP32[((21376 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((21376 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((21376 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((21376 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((21376 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((21376 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((21376 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((21376 + 460|0))>>2] = 0;
    $641 = HEAP32[21848>>2]|0;
    HEAP32[((21376 + 36|0))>>2] = $641;
    HEAP32[((21376 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((21376 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((21376 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((21376 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((21376 + 24|0))>>2] = $654;
    HEAP32[((21376 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((21848 + 16|0))>>2]|0;
    HEAP32[((21376 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((21376 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((21376 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((21376 + 24|0))>>2] = $684;
       HEAP32[((21376 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((21848 + 16|0))>>2]|0;
       HEAP32[((21376 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((21376 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((21376 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((21376 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((21376 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L338: do {
       if ($730) {
        $731 = HEAP32[((21376 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((21376 + 12|0))>>2] = $732;
        HEAP32[((21376 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((21376 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((21376 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((21376 + 8|0))>>2] = $738;
         HEAP32[((21376 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L345: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((21376 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((21376 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[21376>>2]|0;
            $765 = $764 & $763;
            HEAP32[21376>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((21376 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((21376 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((21376 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((21376 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((21376 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((21376 + 4|0))>>2] = $811;
             break L345;
            } else {
             $812 = HEAP32[((21376 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L345;
             }
            }
           } while(0);
           $819 = HEAP32[((21376 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((21376 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((21376 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((21376 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[21376>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[21376>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((21376 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((21376 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((21376 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((21376 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((21376 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((21376 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L434: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L434;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((21376 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L338;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((21376 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((21376 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((21376 + 24|0))>>2] = $958;
    HEAP32[((21376 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((21848 + 16|0))>>2]|0;
    HEAP32[((21376 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((21376 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((21376 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((21376 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((21376 + 448|0))+12>>2]|0;
    HEAP32[((21376 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((21376 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((21376 + 460|0))>>2] = 0;
    HEAP32[((21376 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((21376 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[21376>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[21376>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((21376 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((21376 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((21376 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((21376 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((21376 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((21376 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L489: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((21376 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((21376 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((21376 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((21376 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((21376 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((21376 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((21376 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((21376 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((21376 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((21376 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[21376>>2]|0;
     $36 = $35 & $34;
     HEAP32[21376>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((21376 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((21376 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((21376 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((21376 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((21376 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((21376 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((21376 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((21376 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((21376 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((21376 + 12|0))>>2] = $122;
   HEAP32[((21376 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((21376 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((21376 + 20|0))>>2] = 0;
   HEAP32[((21376 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((21376 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((21376 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((21376 + 8|0))>>2] = $130;
   HEAP32[((21376 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((21376 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((21376 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[21376>>2]|0;
     $154 = $153 & $152;
     HEAP32[21376>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((21376 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((21376 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((21376 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((21376 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((21376 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((21376 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((21376 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((21376 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((21376 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((21376 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((21376 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((21376 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((21376 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[21376>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[21376>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((21376 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((21376 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((21376 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((21376 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((21376 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((21376 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((21376 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((21376 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((21376 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((21376 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((21376 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((21376 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19$i25 = 0, $$sum2 = 0, $$sum22 = 0, $$sum22$i29 = 0, $$sum23 = 0, $$sum23$i3 = 0, $$sum24 = 0, $$sum26 = 0;
 var $$sum27 = 0, $$sum2728$i = 0, $$sum28 = 0, $$sum30 = 0, $$sum4 = 0, $$sum5 = 0, $$sum5$i13 = 0, $$sum78$i = 0, $$sum9 = 0, $$sum910$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0$i = 0, $R$1$i = 0, $RP$0$i = 0, $cond$i = 0, $mem$0 = 0, $or$cond = 0, $or$cond$i = 0, $storemerge$i = 0, $storemerge21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  STACKTOP = sp;return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $23 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $23 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $8 = (($oldmem) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & -8;
 $$sum = (($10) + -8)|0;
 $11 = (($oldmem) + ($$sum)|0);
 $12 = HEAP32[((21376 + 16|0))>>2]|0;
 $13 = ($7>>>0)<($12>>>0);
 if ($13) {
  _abort();
  // unreachable;
 }
 $14 = $9 & 3;
 $15 = ($14|0)!=(1);
 $16 = ($$sum|0)>(-8);
 $or$cond$i = $15 & $16;
 if (!($or$cond$i)) {
  _abort();
  // unreachable;
 }
 $$sum2728$i = $10 | 4;
 $$sum1 = (($$sum2728$i) + -8)|0;
 $17 = (($oldmem) + ($$sum1)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 1;
 $20 = ($19|0)==(0);
 if ($20) {
  _abort();
  // unreachable;
 }
 $21 = ($14|0)==(0);
 do {
  if ($21) {
   $22 = ($23>>>0)<(256);
   $24 = $23 | 4;
   $25 = ($10>>>0)<($24>>>0);
   $or$cond = $22 | $25;
   if (!($or$cond)) {
    $26 = (($10) - ($23))|0;
    $27 = HEAP32[((21848 + 8|0))>>2]|0;
    $28 = $27 << 1;
    $29 = ($26>>>0)>($28>>>0);
    if (!($29)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
   }
  } else {
   $30 = ($10>>>0)<($23>>>0);
   if (!($30)) {
    $31 = (($10) - ($23))|0;
    $32 = ($31>>>0)>(15);
    if (!($32)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
    $$sum2 = (($23) + -8)|0;
    $33 = (($oldmem) + ($$sum2)|0);
    $34 = $9 & 1;
    $35 = $34 | $23;
    $36 = $35 | 2;
    HEAP32[$8>>2] = $36;
    $$sum23$i3 = $23 | 4;
    $$sum4 = (($$sum23$i3) + -8)|0;
    $37 = (($oldmem) + ($$sum4)|0);
    $38 = $31 | 3;
    HEAP32[$37>>2] = $38;
    $39 = HEAP32[$17>>2]|0;
    $40 = $39 | 1;
    HEAP32[$17>>2] = $40;
    _dispose_chunk($33,$31);
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $41 = HEAP32[((21376 + 24|0))>>2]|0;
   $42 = ($11|0)==($41|0);
   if ($42) {
    $43 = HEAP32[((21376 + 12|0))>>2]|0;
    $44 = (($43) + ($10))|0;
    $45 = ($44>>>0)>($23>>>0);
    if (!($45)) {
     break;
    }
    $46 = (($44) - ($23))|0;
    $$sum28 = (($23) + -8)|0;
    $47 = (($oldmem) + ($$sum28)|0);
    $48 = $9 & 1;
    $49 = $48 | $23;
    $50 = $49 | 2;
    HEAP32[$8>>2] = $50;
    $$sum22$i29 = $23 | 4;
    $$sum30 = (($$sum22$i29) + -8)|0;
    $51 = (($oldmem) + ($$sum30)|0);
    $52 = $46 | 1;
    HEAP32[$51>>2] = $52;
    HEAP32[((21376 + 24|0))>>2] = $47;
    HEAP32[((21376 + 12|0))>>2] = $46;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $53 = HEAP32[((21376 + 20|0))>>2]|0;
   $54 = ($11|0)==($53|0);
   if ($54) {
    $55 = HEAP32[((21376 + 8|0))>>2]|0;
    $56 = (($55) + ($10))|0;
    $57 = ($56>>>0)<($23>>>0);
    if ($57) {
     break;
    }
    $58 = (($56) - ($23))|0;
    $59 = ($58>>>0)>(15);
    if ($59) {
     $$sum23 = (($23) + -8)|0;
     $60 = (($oldmem) + ($$sum23)|0);
     $$sum24 = (($56) + -8)|0;
     $61 = (($oldmem) + ($$sum24)|0);
     $62 = $9 & 1;
     $63 = $62 | $23;
     $64 = $63 | 2;
     HEAP32[$8>>2] = $64;
     $$sum19$i25 = $23 | 4;
     $$sum26 = (($$sum19$i25) + -8)|0;
     $65 = (($oldmem) + ($$sum26)|0);
     $66 = $58 | 1;
     HEAP32[$65>>2] = $66;
     HEAP32[$61>>2] = $58;
     $$sum27 = (($56) + -4)|0;
     $67 = (($oldmem) + ($$sum27)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $68 & -2;
     HEAP32[$67>>2] = $69;
     $storemerge$i = $60;$storemerge21$i = $58;
    } else {
     $70 = $9 & 1;
     $71 = $70 | $56;
     $72 = $71 | 2;
     HEAP32[$8>>2] = $72;
     $$sum22 = (($56) + -4)|0;
     $73 = (($oldmem) + ($$sum22)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 | 1;
     HEAP32[$73>>2] = $75;
     $storemerge$i = 0;$storemerge21$i = 0;
    }
    HEAP32[((21376 + 8|0))>>2] = $storemerge21$i;
    HEAP32[((21376 + 20|0))>>2] = $storemerge$i;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $76 = $18 & 2;
   $77 = ($76|0)==(0);
   if ($77) {
    $78 = $18 & -8;
    $79 = (($78) + ($10))|0;
    $80 = ($79>>>0)<($23>>>0);
    if (!($80)) {
     $81 = (($79) - ($23))|0;
     $82 = $18 >>> 3;
     $83 = ($18>>>0)<(256);
     do {
      if ($83) {
       $84 = (($oldmem) + ($10)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (($oldmem) + ($$sum2728$i)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $82 << 1;
       $89 = ((21376 + ($88<<2)|0) + 40|0);
       $90 = ($85|0)==($89|0);
       if (!($90)) {
        $91 = ($85>>>0)<($12>>>0);
        if ($91) {
         _abort();
         // unreachable;
        }
        $92 = (($85) + 12|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($93|0)==($11|0);
        if (!($94)) {
         _abort();
         // unreachable;
        }
       }
       $95 = ($87|0)==($85|0);
       if ($95) {
        $96 = 1 << $82;
        $97 = $96 ^ -1;
        $98 = HEAP32[21376>>2]|0;
        $99 = $98 & $97;
        HEAP32[21376>>2] = $99;
        break;
       }
       $100 = ($87|0)==($89|0);
       do {
        if ($100) {
         $$pre$i = (($87) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;
        } else {
         $101 = ($87>>>0)<($12>>>0);
         if ($101) {
          _abort();
          // unreachable;
         }
         $102 = (($87) + 8|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($103|0)==($11|0);
         if ($104) {
          $$pre$phi$iZ2D = $102;
          break;
         }
         _abort();
         // unreachable;
        }
       } while(0);
       $105 = (($85) + 12|0);
       HEAP32[$105>>2] = $87;
       HEAP32[$$pre$phi$iZ2D>>2] = $85;
      } else {
       $$sum5 = (($10) + 16)|0;
       $106 = (($oldmem) + ($$sum5)|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($oldmem) + ($$sum2728$i)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==($11|0);
       do {
        if ($110) {
         $$sum17 = (($10) + 12)|0;
         $120 = (($oldmem) + ($$sum17)|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==(0|0);
         if ($122) {
          $$sum18 = (($10) + 8)|0;
          $123 = (($oldmem) + ($$sum18)|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = ($124|0)==(0|0);
          if ($125) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $124;$RP$0$i = $123;
          }
         } else {
          $R$0$i = $121;$RP$0$i = $120;
         }
         while(1) {
          $126 = (($R$0$i) + 20|0);
          $127 = HEAP32[$126>>2]|0;
          $128 = ($127|0)==(0|0);
          if (!($128)) {
           $R$0$i = $127;$RP$0$i = $126;
           continue;
          }
          $129 = (($R$0$i) + 16|0);
          $130 = HEAP32[$129>>2]|0;
          $131 = ($130|0)==(0|0);
          if ($131) {
           break;
          } else {
           $R$0$i = $130;$RP$0$i = $129;
          }
         }
         $132 = ($RP$0$i>>>0)<($12>>>0);
         if ($132) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i>>2] = 0;
          $R$1$i = $R$0$i;
          break;
         }
        } else {
         $111 = (($oldmem) + ($10)|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ($112>>>0)<($12>>>0);
         if ($113) {
          _abort();
          // unreachable;
         }
         $114 = (($112) + 12|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($115|0)==($11|0);
         if (!($116)) {
          _abort();
          // unreachable;
         }
         $117 = (($109) + 8|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($118|0)==($11|0);
         if ($119) {
          HEAP32[$114>>2] = $109;
          HEAP32[$117>>2] = $112;
          $R$1$i = $109;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $133 = ($107|0)==(0|0);
       if (!($133)) {
        $$sum9 = (($10) + 20)|0;
        $134 = (($oldmem) + ($$sum9)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ((21376 + ($135<<2)|0) + 304|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($11|0)==($137|0);
        if ($138) {
         HEAP32[$136>>2] = $R$1$i;
         $cond$i = ($R$1$i|0)==(0|0);
         if ($cond$i) {
          $139 = 1 << $135;
          $140 = $139 ^ -1;
          $141 = HEAP32[((21376 + 4|0))>>2]|0;
          $142 = $141 & $140;
          HEAP32[((21376 + 4|0))>>2] = $142;
          break;
         }
        } else {
         $143 = HEAP32[((21376 + 16|0))>>2]|0;
         $144 = ($107>>>0)<($143>>>0);
         if ($144) {
          _abort();
          // unreachable;
         }
         $145 = (($107) + 16|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = ($146|0)==($11|0);
         if ($147) {
          HEAP32[$145>>2] = $R$1$i;
         } else {
          $148 = (($107) + 20|0);
          HEAP32[$148>>2] = $R$1$i;
         }
         $149 = ($R$1$i|0)==(0|0);
         if ($149) {
          break;
         }
        }
        $150 = HEAP32[((21376 + 16|0))>>2]|0;
        $151 = ($R$1$i>>>0)<($150>>>0);
        if ($151) {
         _abort();
         // unreachable;
        }
        $152 = (($R$1$i) + 24|0);
        HEAP32[$152>>2] = $107;
        $$sum10 = (($10) + 8)|0;
        $153 = (($oldmem) + ($$sum10)|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(0|0);
        do {
         if (!($155)) {
          $156 = HEAP32[((21376 + 16|0))>>2]|0;
          $157 = ($154>>>0)<($156>>>0);
          if ($157) {
           _abort();
           // unreachable;
          } else {
           $158 = (($R$1$i) + 16|0);
           HEAP32[$158>>2] = $154;
           $159 = (($154) + 24|0);
           HEAP32[$159>>2] = $R$1$i;
           break;
          }
         }
        } while(0);
        $$sum11 = (($10) + 12)|0;
        $160 = (($oldmem) + ($$sum11)|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($161|0)==(0|0);
        if ($162) {
         break;
        }
        $163 = HEAP32[((21376 + 16|0))>>2]|0;
        $164 = ($161>>>0)<($163>>>0);
        if ($164) {
         _abort();
         // unreachable;
        } else {
         $165 = (($R$1$i) + 20|0);
         HEAP32[$165>>2] = $161;
         $166 = (($161) + 24|0);
         HEAP32[$166>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $167 = ($81>>>0)<(16);
     if ($167) {
      $168 = HEAP32[$8>>2]|0;
      $169 = $168 & 1;
      $170 = $79 | $169;
      $171 = $170 | 2;
      HEAP32[$8>>2] = $171;
      $$sum910$i = $79 | 4;
      $$sum16 = (($$sum910$i) + -8)|0;
      $172 = (($oldmem) + ($$sum16)|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $173 | 1;
      HEAP32[$172>>2] = $174;
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     } else {
      $$sum12 = (($23) + -8)|0;
      $175 = (($oldmem) + ($$sum12)|0);
      $176 = HEAP32[$8>>2]|0;
      $177 = $176 & 1;
      $178 = $177 | $23;
      $179 = $178 | 2;
      HEAP32[$8>>2] = $179;
      $$sum5$i13 = $23 | 4;
      $$sum14 = (($$sum5$i13) + -8)|0;
      $180 = (($oldmem) + ($$sum14)|0);
      $181 = $81 | 3;
      HEAP32[$180>>2] = $181;
      $$sum78$i = $79 | 4;
      $$sum15 = (($$sum78$i) + -8)|0;
      $182 = (($oldmem) + ($$sum15)|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = $183 | 1;
      HEAP32[$182>>2] = $184;
      _dispose_chunk($175,$81);
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
   }
  }
 } while(0);
 $185 = (_malloc($bytes)|0);
 $186 = ($185|0)==(0|0);
 if ($186) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $187 = HEAP32[$8>>2]|0;
 $188 = $187 & -8;
 $189 = $187 & 3;
 $190 = ($189|0)==(0);
 $191 = $190 ? 8 : 4;
 $192 = (($188) - ($191))|0;
 $193 = ($192>>>0)<($bytes>>>0);
 $194 = $193 ? $192 : $bytes;
 _memcpy(($185|0),($oldmem|0),($194|0))|0;
 _free($oldmem);
 $mem$0 = $185;
 STACKTOP = sp;return ($mem$0|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((21376 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((21376 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((21376 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((21376 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[21376>>2]|0;
     $32 = $31 & $30;
     HEAP32[21376>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((21376 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((21376 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((21376 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((21376 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((21376 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((21376 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((21376 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((21376 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((21376 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((21376 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((21376 + 12|0))>>2] = $117;
   HEAP32[((21376 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((21376 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((21376 + 20|0))>>2] = 0;
   HEAP32[((21376 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((21376 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((21376 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((21376 + 8|0))>>2] = $125;
   HEAP32[((21376 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((21376 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[21376>>2]|0;
     $148 = $147 & $146;
     HEAP32[21376>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((21376 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((21376 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((21376 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((21376 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((21376 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((21376 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((21376 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((21376 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((21376 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((21376 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[21376>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[21376>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((21376 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((21376 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((21376 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((21376 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((21376 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((21376 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((21376 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((21376 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$pre = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0;
 var $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $or$cond7 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $294 = 0;$295 = 0;
  tempRet0 = $294;
  STACKTOP = sp;return ($295|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $14 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $14 = $12;
  }
  $13 = ($14|0)==(32);
  $15 = (($14) + -9)|0;
  $16 = ($15>>>0)<(5);
  $or$cond7 = $13 | $16;
  if (!($or$cond7)) {
   break;
  }
 }
 $17 = ($14|0)==(45);
 do {
  if ((($14|0) == 43) | (($14|0) == 45)) {
   $18 = $17 << 31 >> 31;
   $19 = HEAP32[$3>>2]|0;
   $20 = HEAP32[$4>>2]|0;
   $21 = ($19>>>0)<($20>>>0);
   if ($21) {
    $22 = (($19) + 1|0);
    HEAP32[$3>>2] = $22;
    $23 = HEAP8[$19>>0]|0;
    $24 = $23&255;
    $c$0 = $24;$neg$0 = $18;
    break;
   } else {
    $25 = (___shgetc($f)|0);
    $c$0 = $25;$neg$0 = $18;
    break;
   }
  } else {
   $c$0 = $14;$neg$0 = 0;
  }
 } while(0);
 $26 = ($base|0)==(0);
 $27 = $base & -17;
 $28 = ($27|0)==(0);
 $29 = ($c$0|0)==(48);
 $or$cond = $28 & $29;
 do {
  if ($or$cond) {
   $30 = HEAP32[$3>>2]|0;
   $31 = HEAP32[$4>>2]|0;
   $32 = ($30>>>0)<($31>>>0);
   if ($32) {
    $33 = (($30) + 1|0);
    HEAP32[$3>>2] = $33;
    $34 = HEAP8[$30>>0]|0;
    $35 = $34&255;
    $38 = $35;
   } else {
    $36 = (___shgetc($f)|0);
    $38 = $36;
   }
   $37 = $38 | 32;
   $39 = ($37|0)==(120);
   if (!($39)) {
    $$base = $26 ? 8 : $base;
    $$1 = $$base;$c$1 = $38;
    label = 32;
    break;
   }
   $40 = HEAP32[$3>>2]|0;
   $41 = HEAP32[$4>>2]|0;
   $42 = ($40>>>0)<($41>>>0);
   if ($42) {
    $43 = (($40) + 1|0);
    HEAP32[$3>>2] = $43;
    $44 = HEAP8[$40>>0]|0;
    $45 = $44&255;
    $47 = $45;
   } else {
    $46 = (___shgetc($f)|0);
    $47 = $46;
   }
   $$sum15 = (($47) + 1)|0;
   $48 = (21872 + ($$sum15)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($49&255)>(15);
   if ($50) {
    $51 = HEAP32[$4>>2]|0;
    $52 = ($51|0)==(0|0);
    if (!($52)) {
     $53 = HEAP32[$3>>2]|0;
     $54 = (($53) + -1|0);
     HEAP32[$3>>2] = $54;
    }
    $55 = ($pok|0)==(0);
    if ($55) {
     $58 = (($f) + 104|0);
     HEAP32[$58>>2] = 0;
     $59 = (($f) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = HEAP32[$3>>2]|0;
     $62 = $60;
     $63 = $61;
     $64 = (($62) - ($63))|0;
     $65 = (($f) + 108|0);
     HEAP32[$65>>2] = $64;
     HEAP32[$4>>2] = $60;
     $294 = 0;$295 = 0;
     tempRet0 = $294;
     STACKTOP = sp;return ($295|0);
    }
    if ($52) {
     $294 = 0;$295 = 0;
     tempRet0 = $294;
     STACKTOP = sp;return ($295|0);
    }
    $56 = HEAP32[$3>>2]|0;
    $57 = (($56) + -1|0);
    HEAP32[$3>>2] = $57;
    $294 = 0;$295 = 0;
    tempRet0 = $294;
    STACKTOP = sp;return ($295|0);
   } else {
    $$122 = 16;$c$123 = $47;
    label = 47;
   }
  } else {
   $$base16 = $26 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $66 = (21872 + ($$sum)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = ($68>>>0)<($$base16>>>0);
   if ($69) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $70 = HEAP32[$4>>2]|0;
    $71 = ($70|0)==(0|0);
    $$pre = HEAP32[$3>>2]|0;
    if ($71) {
     $78 = $$pre;
    } else {
     $72 = (($$pre) + -1|0);
     HEAP32[$3>>2] = $72;
     $78 = $72;
    }
    $73 = (($f) + 104|0);
    HEAP32[$73>>2] = 0;
    $74 = (($f) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75;
    $77 = $78;
    $79 = (($76) - ($77))|0;
    $80 = (($f) + 108|0);
    HEAP32[$80>>2] = $79;
    HEAP32[$4>>2] = $75;
    $81 = (___errno_location()|0);
    HEAP32[$81>>2] = 22;
    $294 = 0;$295 = 0;
    tempRet0 = $294;
    STACKTOP = sp;return ($295|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $82 = ($$1|0)==(10);
  if ($82) {
   $83 = (($c$1) + -48)|0;
   $84 = ($83>>>0)<(10);
   if ($84) {
    $86 = $83;$x$068 = 0;
    while(1) {
     $85 = (($x$068) + ($86))|0;
     $87 = HEAP32[$3>>2]|0;
     $88 = HEAP32[$4>>2]|0;
     $89 = ($87>>>0)<($88>>>0);
     if ($89) {
      $90 = (($87) + 1|0);
      HEAP32[$3>>2] = $90;
      $91 = HEAP8[$87>>0]|0;
      $92 = $91&255;
      $c$2$be = $92;
     } else {
      $93 = (___shgetc($f)|0);
      $c$2$be = $93;
     }
     $94 = (($c$2$be) + -48)|0;
     $95 = ($94>>>0)<(10);
     $96 = ($85>>>0)<(429496729);
     $$ = $95 & $96;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($85*10)|0;
     $86 = $94;$x$068 = $phitmp93;
    }
    $296 = $85;$297 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $296 = 0;$297 = 0;$c$2$lcssa = $c$1;
   }
   $97 = (($c$2$lcssa) + -48)|0;
   $98 = ($97>>>0)<(10);
   if ($98) {
    $100 = $297;$104 = $97;$99 = $296;$c$359 = $c$2$lcssa;
    while(1) {
     $101 = (___muldi3(($99|0),($100|0),10,0)|0);
     $102 = tempRet0;
     $103 = ($104|0)<(0);
     $105 = $103 << 31 >> 31;
     $106 = $104 ^ -1;
     $107 = $105 ^ -1;
     $108 = ($102>>>0)>($107>>>0);
     $109 = ($102|0)==($107|0);
     $110 = ($101>>>0)>($106>>>0);
     $111 = $109 & $110;
     $112 = $108 | $111;
     if ($112) {
      $$lcssa = $104;$298 = $99;$299 = $100;$c$3$lcssa = $c$359;
      break;
     }
     $113 = (_i64Add(($101|0),($102|0),($104|0),($105|0))|0);
     $114 = tempRet0;
     $115 = HEAP32[$3>>2]|0;
     $116 = HEAP32[$4>>2]|0;
     $117 = ($115>>>0)<($116>>>0);
     if ($117) {
      $118 = (($115) + 1|0);
      HEAP32[$3>>2] = $118;
      $119 = HEAP8[$115>>0]|0;
      $120 = $119&255;
      $c$3$be = $120;
     } else {
      $121 = (___shgetc($f)|0);
      $c$3$be = $121;
     }
     $122 = (($c$3$be) + -48)|0;
     $123 = ($122>>>0)<(10);
     $124 = ($114>>>0)<(429496729);
     $125 = ($114|0)==(429496729);
     $126 = ($113>>>0)<(2576980378);
     $127 = $125 & $126;
     $128 = $124 | $127;
     $or$cond17 = $123 & $128;
     if ($or$cond17) {
      $100 = $114;$104 = $122;$99 = $113;$c$359 = $c$3$be;
     } else {
      $$lcssa = $122;$298 = $113;$299 = $114;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $129 = ($$lcssa>>>0)>(9);
    if ($129) {
     $268 = $299;$271 = $298;
    } else {
     $$121 = 10;$300 = $298;$301 = $299;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $268 = $297;$271 = $296;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $130 = (($$122) + -1)|0;
   $131 = $130 & $$122;
   $132 = ($131|0)==(0);
   if ($132) {
    $137 = ($$122*23)|0;
    $138 = $137 >>> 5;
    $139 = $138 & 7;
    $140 = (22136 + ($139)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $143 = (21872 + ($$sum934)|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = ($145>>>0)<($$122>>>0);
    if ($146) {
     $149 = $145;$x$135 = 0;
     while(1) {
      $147 = $x$135 << $142;
      $148 = $149 | $147;
      $150 = HEAP32[$3>>2]|0;
      $151 = HEAP32[$4>>2]|0;
      $152 = ($150>>>0)<($151>>>0);
      if ($152) {
       $153 = (($150) + 1|0);
       HEAP32[$3>>2] = $153;
       $154 = HEAP8[$150>>0]|0;
       $155 = $154&255;
       $c$4$be = $155;
      } else {
       $156 = (___shgetc($f)|0);
       $c$4$be = $156;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $157 = (21872 + ($$sum9)|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $158&255;
      $160 = ($159>>>0)<($$122>>>0);
      $161 = ($148>>>0)<(134217728);
      $$18 = $160 & $161;
      if ($$18) {
       $149 = $159;$x$135 = $148;
      } else {
       break;
      }
     }
     $165 = $158;$168 = 0;$171 = $148;$c$4$lcssa = $c$4$be;
    } else {
     $165 = $144;$168 = 0;$171 = 0;$c$4$lcssa = $c$123;
    }
    $162 = (_bitshift64Lshr(-1,-1,($142|0))|0);
    $163 = tempRet0;
    $164 = $165&255;
    $166 = ($164>>>0)>=($$122>>>0);
    $167 = ($168>>>0)>($163>>>0);
    $169 = ($168|0)==($163|0);
    $170 = ($171>>>0)>($162>>>0);
    $172 = $169 & $170;
    $173 = $167 | $172;
    $or$cond2628 = $166 | $173;
    if ($or$cond2628) {
     $$121 = $$122;$300 = $171;$301 = $168;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $174 = $171;$175 = $168;$179 = $165;
    }
    while(1) {
     $176 = (_bitshift64Shl(($174|0),($175|0),($142|0))|0);
     $177 = tempRet0;
     $178 = $179&255;
     $180 = $178 | $176;
     $181 = HEAP32[$3>>2]|0;
     $182 = HEAP32[$4>>2]|0;
     $183 = ($181>>>0)<($182>>>0);
     if ($183) {
      $184 = (($181) + 1|0);
      HEAP32[$3>>2] = $184;
      $185 = HEAP8[$181>>0]|0;
      $186 = $185&255;
      $c$5$be = $186;
     } else {
      $187 = (___shgetc($f)|0);
      $c$5$be = $187;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $188 = (21872 + ($$sum10)|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = ($190>>>0)>=($$122>>>0);
     $192 = ($177>>>0)>($163>>>0);
     $193 = ($177|0)==($163|0);
     $194 = ($180>>>0)>($162>>>0);
     $195 = $193 & $194;
     $196 = $192 | $195;
     $or$cond26 = $191 | $196;
     if ($or$cond26) {
      $$121 = $$122;$300 = $180;$301 = $177;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $174 = $180;$175 = $177;$179 = $189;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $133 = (21872 + ($$sum1352)|0);
   $134 = HEAP8[$133>>0]|0;
   $135 = $134&255;
   $136 = ($135>>>0)<($$122>>>0);
   if ($136) {
    $199 = $135;$x$253 = 0;
    while(1) {
     $197 = Math_imul($x$253, $$122)|0;
     $198 = (($199) + ($197))|0;
     $200 = HEAP32[$3>>2]|0;
     $201 = HEAP32[$4>>2]|0;
     $202 = ($200>>>0)<($201>>>0);
     if ($202) {
      $203 = (($200) + 1|0);
      HEAP32[$3>>2] = $203;
      $204 = HEAP8[$200>>0]|0;
      $205 = $204&255;
      $c$6$be = $205;
     } else {
      $206 = (___shgetc($f)|0);
      $c$6$be = $206;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $207 = (21872 + ($$sum13)|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = ($209>>>0)<($$122>>>0);
     $211 = ($198>>>0)<(119304647);
     $$19 = $210 & $211;
     if ($$19) {
      $199 = $209;$x$253 = $198;
     } else {
      break;
     }
    }
    $213 = $208;$302 = $198;$303 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $213 = $134;$302 = 0;$303 = 0;$c$6$lcssa = $c$123;
   }
   $212 = $213&255;
   $214 = ($212>>>0)<($$122>>>0);
   if ($214) {
    $215 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $216 = tempRet0;
    $218 = $303;$221 = $302;$227 = $213;$c$744 = $c$6$lcssa;
    while(1) {
     $217 = ($218>>>0)>($216>>>0);
     $219 = ($218|0)==($216|0);
     $220 = ($221>>>0)>($215>>>0);
     $222 = $219 & $220;
     $223 = $217 | $222;
     if ($223) {
      $$121 = $$122;$300 = $221;$301 = $218;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $224 = (___muldi3(($221|0),($218|0),($$122|0),0)|0);
     $225 = tempRet0;
     $226 = $227&255;
     $228 = $226 ^ -1;
     $229 = ($225>>>0)>(4294967295);
     $230 = ($225|0)==(-1);
     $231 = ($224>>>0)>($228>>>0);
     $232 = $230 & $231;
     $233 = $229 | $232;
     if ($233) {
      $$121 = $$122;$300 = $221;$301 = $218;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $234 = (_i64Add(($226|0),0,($224|0),($225|0))|0);
     $235 = tempRet0;
     $236 = HEAP32[$3>>2]|0;
     $237 = HEAP32[$4>>2]|0;
     $238 = ($236>>>0)<($237>>>0);
     if ($238) {
      $239 = (($236) + 1|0);
      HEAP32[$3>>2] = $239;
      $240 = HEAP8[$236>>0]|0;
      $241 = $240&255;
      $c$7$be = $241;
     } else {
      $242 = (___shgetc($f)|0);
      $c$7$be = $242;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $243 = (21872 + ($$sum14)|0);
     $244 = HEAP8[$243>>0]|0;
     $245 = $244&255;
     $246 = ($245>>>0)<($$122>>>0);
     if ($246) {
      $218 = $235;$221 = $234;$227 = $244;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$300 = $234;$301 = $235;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$300 = $302;$301 = $303;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $247 = (21872 + ($$sum11)|0);
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = ($249>>>0)<($$121>>>0);
  if ($250) {
   while(1) {
    $251 = HEAP32[$3>>2]|0;
    $252 = HEAP32[$4>>2]|0;
    $253 = ($251>>>0)<($252>>>0);
    if ($253) {
     $254 = (($251) + 1|0);
     HEAP32[$3>>2] = $254;
     $255 = HEAP8[$251>>0]|0;
     $256 = $255&255;
     $c$9$be = $256;
    } else {
     $257 = (___shgetc($f)|0);
     $c$9$be = $257;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $258 = (21872 + ($$sum12)|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = ($260>>>0)<($$121>>>0);
    if (!($261)) {
     break;
    }
   }
   $262 = (___errno_location()|0);
   HEAP32[$262>>2] = 34;
   $268 = $1;$271 = $0;
  } else {
   $268 = $301;$271 = $300;
  }
 }
 $263 = HEAP32[$4>>2]|0;
 $264 = ($263|0)==(0|0);
 if (!($264)) {
  $265 = HEAP32[$3>>2]|0;
  $266 = (($265) + -1|0);
  HEAP32[$3>>2] = $266;
 }
 $267 = ($268>>>0)<($1>>>0);
 $269 = ($268|0)==($1|0);
 $270 = ($271>>>0)<($0>>>0);
 $272 = $269 & $270;
 $273 = $267 | $272;
 if (!($273)) {
  $274 = $0 & 1;
  $275 = ($274|0)==(0);
  $276 = (0)==(0);
  $277 = $275 & $276;
  $278 = ($neg$0|0)==(0);
  $or$cond20 = $277 & $278;
  if ($or$cond20) {
   $279 = (___errno_location()|0);
   HEAP32[$279>>2] = 34;
   $280 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $281 = tempRet0;
   $294 = $281;$295 = $280;
   tempRet0 = $294;
   STACKTOP = sp;return ($295|0);
  }
  $282 = ($268>>>0)>($1>>>0);
  $283 = ($268|0)==($1|0);
  $284 = ($271>>>0)>($0>>>0);
  $285 = $283 & $284;
  $286 = $282 | $285;
  if ($286) {
   $287 = (___errno_location()|0);
   HEAP32[$287>>2] = 34;
   $294 = $1;$295 = $0;
   tempRet0 = $294;
   STACKTOP = sp;return ($295|0);
  }
 }
 $288 = ($neg$0|0)<(0);
 $289 = $288 << 31 >> 31;
 $290 = $271 ^ $neg$0;
 $291 = $268 ^ $289;
 $292 = (_i64Subtract(($290|0),($291|0),($neg$0|0),($289|0))|0);
 $293 = tempRet0;
 $294 = $293;$295 = $292;
 tempRet0 = $294;
 STACKTOP = sp;return ($295|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i$i = 0, $$$i$i13 = 0, $$$i1 = 0, $$$i22 = 0, $$$i3 = 0, $$$i8 = 0, $$0 = 0.0, $$0$i = 0, $$0$i$i = 0, $$0$i$i15 = 0, $$0$i10 = 0, $$0$i5 = 0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$i = 0, $$1$i$i = 0, $$1$i$i14 = 0;
 var $$1$i4 = 0, $$1$i9 = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0, $$neg20$i = 0, $$pn$i = 0.0, $$pre = 0, $$pre$i = 0.0, $$pre$i17 = 0;
 var $$pre$phi$iZ2D = 0.0, $$promoted = 0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0;
 var $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0;
 var $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0;
 var $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0.0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0.0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0.0, $776 = 0.0;
 var $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0, $788 = 0, $789 = 0.0, $79 = 0, $790 = 0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0.0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0.0, $811 = 0;
 var $812 = 0, $813 = 0.0, $814 = 0, $815 = 0, $816 = 0, $817 = 0.0, $818 = 0, $819 = 0, $82 = 0, $820 = 0.0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0.0, $827 = 0.0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0.0, $833 = 0, $834 = 0, $835 = 0.0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0;
 var $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0;
 var $c$364 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0;
 var $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0;
 var $k$0$lcssa$i = 0, $k$084$i = 0, $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i15 = 0, $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond34 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0;
 var $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0, $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0;
 var $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$i = 0.0, $y$0$i$i16 = 0.0, $y$0$i11 = 0.0, $y$0$i2 = 0.0, $y$0$i6 = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0;
 var $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $10 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $10 = $8;
  }
  $9 = ($10|0)==(32);
  $11 = (($10) + -9)|0;
  $12 = ($11>>>0)<(5);
  $or$cond34 = $9 | $12;
  if (!($or$cond34)) {
   break;
  }
 }
 $13 = ($10|0)==(45);
 do {
  if ((($10|0) == 43) | (($10|0) == 45)) {
   $14 = $13&1;
   $15 = $14 << 1;
   $16 = (1 - ($15))|0;
   $17 = HEAP32[$0>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = ($17>>>0)<($18>>>0);
   if ($19) {
    $20 = (($17) + 1|0);
    HEAP32[$0>>2] = $20;
    $21 = HEAP8[$17>>0]|0;
    $22 = $21&255;
    $c$0 = $22;$sign$0 = $16;
    break;
   } else {
    $23 = (___shgetc($f)|0);
    $c$0 = $23;$sign$0 = $16;
    break;
   }
  } else {
   $c$0 = $10;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $24 = $c$169 | 32;
  $25 = (22152 + ($i$068)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($24|0)==($27|0);
  if (!($28)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $29 = ($i$068>>>0)<(7);
  do {
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$1>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = (($30) + 1|0);
     HEAP32[$0>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $c$2 = $35;
     break;
    } else {
     $36 = (___shgetc($f)|0);
     $c$2 = $36;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $37 = (($i$068) + 1)|0;
  $38 = ($37>>>0)<(8);
  if ($38) {
   $c$169 = $c$2;$i$068 = $37;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $37;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $39 = ($i$0$lcssa>>>0)<(4);
   $40 = ($pok|0)==(0);
   $or$cond = $39 | $40;
   if (!($or$cond)) {
    $41 = ($i$0$lcssa|0)==(8);
    if ($41) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $53 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($53) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $54 = $c$364 | 32;
      $55 = (22744 + ($i$263)|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56 << 24 >> 24;
      $58 = ($54|0)==($57|0);
      if (!($58)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $59 = ($i$263>>>0)<(2);
      do {
       if ($59) {
        $60 = HEAP32[$0>>2]|0;
        $61 = HEAP32[$1>>2]|0;
        $62 = ($60>>>0)<($61>>>0);
        if ($62) {
         $63 = (($60) + 1|0);
         HEAP32[$0>>2] = $63;
         $64 = HEAP8[$60>>0]|0;
         $65 = $64&255;
         $c$4 = $65;
         break;
        } else {
         $66 = (___shgetc($f)|0);
         $c$4 = $66;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $67 = (($i$263) + 1)|0;
      $68 = ($67>>>0)<(3);
      if ($68) {
       $c$364 = $c$4;$i$263 = $67;
      } else {
       $c$5 = $c$4;$i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $69 = HEAP32[$0>>2]|0;
    $70 = HEAP32[$1>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    if ($71) {
     $72 = (($69) + 1|0);
     HEAP32[$0>>2] = $72;
     $73 = HEAP8[$69>>0]|0;
     $74 = $73&255;
     $77 = $74;
    } else {
     $75 = (___shgetc($f)|0);
     $77 = $75;
    }
    $76 = ($77|0)==(40);
    if ($76) {
     $i$4 = 1;
    } else {
     $78 = HEAP32[$1>>2]|0;
     $79 = ($78|0)==(0|0);
     if ($79) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $80 = HEAP32[$0>>2]|0;
     $81 = (($80) + -1|0);
     HEAP32[$0>>2] = $81;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $82 = HEAP32[$0>>2]|0;
     $83 = HEAP32[$1>>2]|0;
     $84 = ($82>>>0)<($83>>>0);
     if ($84) {
      $85 = (($82) + 1|0);
      HEAP32[$0>>2] = $85;
      $86 = HEAP8[$82>>0]|0;
      $87 = $86&255;
      $90 = $87;
     } else {
      $88 = (___shgetc($f)|0);
      $90 = $88;
     }
     $89 = (($90) + -48)|0;
     $91 = ($89>>>0)<(10);
     $92 = (($90) + -65)|0;
     $93 = ($92>>>0)<(26);
     $or$cond8 = $91 | $93;
     if (!($or$cond8)) {
      $94 = (($90) + -97)|0;
      $95 = ($94>>>0)<(26);
      $96 = ($90|0)==(95);
      $or$cond5 = $95 | $96;
      if (!($or$cond5)) {
       break;
      }
     }
     $116 = (($i$4) + 1)|0;
     $i$4 = $116;
    }
    $97 = ($90|0)==(41);
    if ($97) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $98 = HEAP32[$1>>2]|0;
    $99 = ($98|0)==(0|0);
    if (!($99)) {
     $100 = HEAP32[$0>>2]|0;
     $101 = (($100) + -1|0);
     HEAP32[$0>>2] = $101;
    }
    if ($40) {
     $103 = (___errno_location()|0);
     HEAP32[$103>>2] = 22;
     $104 = (($f) + 104|0);
     HEAP32[$104>>2] = 0;
     $105 = (($f) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = HEAP32[$0>>2]|0;
     $108 = $106;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = (($f) + 108|0);
     HEAP32[$111>>2] = $110;
     HEAP32[$1>>2] = $106;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $102 = ($i$4|0)==(0);
    $brmerge107 = $102 | $99;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$promoted = HEAP32[$0>>2]|0;
    $$in = $i$4;$114 = $$promoted;
    while(1) {
     $112 = (($$in) + -1)|0;
     $113 = (($114) + -1|0);
     $115 = ($112|0)==(0);
     if ($115) {
      break;
     } else {
      $$in = $112;$114 = $113;
     }
    }
    HEAP32[$0>>2] = $113;
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $129 = ($c$5|0)==(48);
    do {
     if ($129) {
      $130 = HEAP32[$0>>2]|0;
      $131 = HEAP32[$1>>2]|0;
      $132 = ($130>>>0)<($131>>>0);
      if ($132) {
       $133 = (($130) + 1|0);
       HEAP32[$0>>2] = $133;
       $134 = HEAP8[$130>>0]|0;
       $135 = $134&255;
       $138 = $135;
      } else {
       $136 = (___shgetc($f)|0);
       $138 = $136;
      }
      $137 = $138 | 32;
      $139 = ($137|0)==(120);
      if (!($139)) {
       $385 = HEAP32[$1>>2]|0;
       $386 = ($385|0)==(0|0);
       if ($386) {
        $c$6 = 48;
        break;
       }
       $387 = HEAP32[$0>>2]|0;
       $388 = (($387) + -1|0);
       HEAP32[$0>>2] = $388;
       $c$6 = 48;
       break;
      }
      $140 = HEAP32[$0>>2]|0;
      $141 = HEAP32[$1>>2]|0;
      $142 = ($140>>>0)<($141>>>0);
      if ($142) {
       $143 = (($140) + 1|0);
       HEAP32[$0>>2] = $143;
       $144 = HEAP8[$140>>0]|0;
       $145 = $144&255;
       $c$0$i = $145;$gotdig$0$i = 0;
      } else {
       $146 = (___shgetc($f)|0);
       $c$0$i = $146;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 71;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $185 = 0;$188 = 0;$236 = 0;$238 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $147 = HEAP32[$0>>2]|0;
       $148 = HEAP32[$1>>2]|0;
       $149 = ($147>>>0)<($148>>>0);
       if ($149) {
        $150 = (($147) + 1|0);
        HEAP32[$0>>2] = $150;
        $151 = HEAP8[$147>>0]|0;
        $152 = $151&255;
        $c$0$i = $152;$gotdig$0$i = 1;
        continue;
       } else {
        $153 = (___shgetc($f)|0);
        $c$0$i = $153;$gotdig$0$i = 1;
        continue;
       }
      }
      L109: do {
       if ((label|0) == 71) {
        $154 = HEAP32[$0>>2]|0;
        $155 = HEAP32[$1>>2]|0;
        $156 = ($154>>>0)<($155>>>0);
        if ($156) {
         $157 = (($154) + 1|0);
         HEAP32[$0>>2] = $157;
         $158 = HEAP8[$154>>0]|0;
         $159 = $158&255;
         $c$1$ph$i = $159;
        } else {
         $160 = (___shgetc($f)|0);
         $c$1$ph$i = $160;
        }
        $161 = ($c$1$ph$i|0)==(48);
        if ($161) {
         $171 = -1;$172 = -1;
         while(1) {
          $162 = HEAP32[$0>>2]|0;
          $163 = HEAP32[$1>>2]|0;
          $164 = ($162>>>0)<($163>>>0);
          if ($164) {
           $165 = (($162) + 1|0);
           HEAP32[$0>>2] = $165;
           $166 = HEAP8[$162>>0]|0;
           $167 = $166&255;
           $170 = $167;
          } else {
           $168 = (___shgetc($f)|0);
           $170 = $168;
          }
          $169 = ($170|0)==(48);
          if (!($169)) {
           $185 = 0;$188 = 0;$236 = $171;$238 = $172;$c$2$i = $170;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L109;
          }
          $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
          $174 = tempRet0;
          $171 = $173;$172 = $174;
         }
        } else {
         $185 = 0;$188 = 0;$236 = 0;$238 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L122: while(1) {
       $175 = (($c$2$i) + -48)|0;
       $176 = ($175>>>0)<(10);
       do {
        if ($176) {
         $d$0$i = $175;
         label = 85;
        } else {
         $177 = $c$2$i | 32;
         $178 = (($177) + -97)|0;
         $179 = ($178>>>0)<(6);
         $180 = ($c$2$i|0)==(46);
         $or$cond$i = $179 | $180;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L122;
         }
         if ($180) {
          $181 = ($gotrad$0$i|0)==(0);
          if ($181) {
           $838 = $188;$839 = $185;$840 = $188;$841 = $185;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L122;
          }
         } else {
          $182 = ($c$2$i|0)>(57);
          $183 = (($177) + -87)|0;
          $$38$i = $182 ? $183 : $175;
          $d$0$i = $$38$i;
          label = 85;
          break;
         }
        }
       } while(0);
       if ((label|0) == 85) {
        label = 0;
        $184 = ($185|0)<(0);
        $186 = ($185|0)==(0);
        $187 = ($188>>>0)<(8);
        $189 = $186 & $187;
        $190 = $184 | $189;
        do {
         if ($190) {
          $191 = $x$0$i << 4;
          $192 = (($d$0$i) + ($191))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $192;$y$1$i = $y$0$i;
         } else {
          $193 = ($185|0)<(0);
          $194 = ($185|0)==(0);
          $195 = ($188>>>0)<(14);
          $196 = $194 & $195;
          $197 = $193 | $196;
          if ($197) {
           $198 = (+($d$0$i|0));
           $199 = $scale$0$i * 0.0625;
           $200 = $199 * $198;
           $201 = $y$0$i + $200;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $199;$x$1$i = $x$0$i;$y$1$i = $201;
           break;
          }
          $202 = ($d$0$i|0)!=(0);
          $203 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $202 & $203;
          if ($or$cond3$i) {
           $204 = $scale$0$i * 0.5;
           $205 = $y$0$i + $204;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $205;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $206 = (_i64Add(($188|0),($185|0),1,0)|0);
        $207 = tempRet0;
        $838 = $236;$839 = $238;$840 = $206;$841 = $207;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $208 = HEAP32[$0>>2]|0;
       $209 = HEAP32[$1>>2]|0;
       $210 = ($208>>>0)<($209>>>0);
       if ($210) {
        $211 = (($208) + 1|0);
        HEAP32[$0>>2] = $211;
        $212 = HEAP8[$208>>0]|0;
        $213 = $212&255;
        $185 = $841;$188 = $840;$236 = $838;$238 = $839;$c$2$i = $213;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $214 = (___shgetc($f)|0);
        $185 = $841;$188 = $840;$236 = $838;$238 = $839;$c$2$i = $214;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $215 = ($gotdig$2$i|0)==(0);
      if ($215) {
       $216 = HEAP32[$1>>2]|0;
       $217 = ($216|0)==(0|0);
       if (!($217)) {
        $218 = HEAP32[$0>>2]|0;
        $219 = (($218) + -1|0);
        HEAP32[$0>>2] = $219;
       }
       if ($40) {
        $224 = (($f) + 104|0);
        HEAP32[$224>>2] = 0;
        $225 = (($f) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = HEAP32[$0>>2]|0;
        $228 = $226;
        $229 = $227;
        $230 = (($228) - ($229))|0;
        $231 = (($f) + 108|0);
        HEAP32[$231>>2] = $230;
        HEAP32[$1>>2] = $226;
       } else {
        if (!($217)) {
         $220 = HEAP32[$0>>2]|0;
         $221 = (($220) + -1|0);
         HEAP32[$0>>2] = $221;
         $222 = ($gotrad$0$i|0)==(0);
         if (!($222)) {
          $223 = (($220) + -2|0);
          HEAP32[$0>>2] = $223;
         }
        }
       }
       $232 = (+($sign$0|0));
       $233 = $232 * 0.0;
       $$0 = $233;
       STACKTOP = sp;return (+$$0);
      }
      $234 = ($gotrad$0$i|0)==(0);
      $235 = $234 ? $188 : $236;
      $237 = $234 ? $185 : $238;
      $239 = ($185|0)<(0);
      $240 = ($185|0)==(0);
      $241 = ($188>>>0)<(8);
      $242 = $240 & $241;
      $243 = $239 | $242;
      if ($243) {
       $245 = $188;$246 = $185;$x$313$i = $x$0$i;
       while(1) {
        $244 = $x$313$i << 4;
        $247 = (_i64Add(($245|0),($246|0),1,0)|0);
        $248 = tempRet0;
        $249 = ($248|0)<(0);
        $250 = ($248|0)==(0);
        $251 = ($247>>>0)<(8);
        $252 = $250 & $251;
        $253 = $249 | $252;
        if ($253) {
         $245 = $247;$246 = $248;$x$313$i = $244;
        } else {
         $x$3$lcssa$i = $244;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $254 = $c$2$lcssa$i | 32;
      $255 = ($254|0)==(112);
      do {
       if ($255) {
        $256 = (_scanexp($f,$pok)|0);
        $257 = tempRet0;
        $258 = ($256|0)==(0);
        $259 = ($257|0)==(-2147483648);
        $260 = $258 & $259;
        if ($260) {
         if ($40) {
          $265 = (($f) + 104|0);
          HEAP32[$265>>2] = 0;
          $266 = (($f) + 8|0);
          $267 = HEAP32[$266>>2]|0;
          $268 = HEAP32[$0>>2]|0;
          $269 = $267;
          $270 = $268;
          $271 = (($269) - ($270))|0;
          $272 = (($f) + 108|0);
          HEAP32[$272>>2] = $271;
          HEAP32[$1>>2] = $267;
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $261 = HEAP32[$1>>2]|0;
          $262 = ($261|0)==(0|0);
          if ($262) {
           $281 = 0;$282 = 0;
           break;
          }
          $263 = HEAP32[$0>>2]|0;
          $264 = (($263) + -1|0);
          HEAP32[$0>>2] = $264;
          $281 = 0;$282 = 0;
          break;
         }
        } else {
         $281 = $256;$282 = $257;
        }
       } else {
        $273 = HEAP32[$1>>2]|0;
        $274 = ($273|0)==(0|0);
        if ($274) {
         $281 = 0;$282 = 0;
        } else {
         $275 = HEAP32[$0>>2]|0;
         $276 = (($275) + -1|0);
         HEAP32[$0>>2] = $276;
         $281 = 0;$282 = 0;
        }
       }
      } while(0);
      $277 = (_bitshift64Shl(($235|0),($237|0),2)|0);
      $278 = tempRet0;
      $279 = (_i64Add(($277|0),($278|0),-32,-1)|0);
      $280 = tempRet0;
      $283 = (_i64Add(($279|0),($280|0),($281|0),($282|0))|0);
      $284 = tempRet0;
      $285 = ($x$3$lcssa$i|0)==(0);
      if ($285) {
       $286 = (+($sign$0|0));
       $287 = $286 * 0.0;
       $$0 = $287;
       STACKTOP = sp;return (+$$0);
      }
      $288 = (0 - ($emin$0$ph))|0;
      $289 = ($284|0)>(0);
      $290 = ($284|0)==(0);
      $291 = ($283>>>0)>($288>>>0);
      $292 = $290 & $291;
      $293 = $289 | $292;
      if ($293) {
       $294 = (___errno_location()|0);
       HEAP32[$294>>2] = 34;
       $295 = (+($sign$0|0));
       $296 = $295 * 1.79769313486231570815E+308;
       $297 = $296 * 1.79769313486231570815E+308;
       $$0 = $297;
       STACKTOP = sp;return (+$$0);
      }
      $298 = (($emin$0$ph) + -106)|0;
      $299 = ($298|0)<(0);
      $300 = $299 << 31 >> 31;
      $301 = ($284|0)<($300|0);
      $302 = ($284|0)==($300|0);
      $303 = ($283>>>0)<($298>>>0);
      $304 = $302 & $303;
      $305 = $301 | $304;
      if ($305) {
       $307 = (___errno_location()|0);
       HEAP32[$307>>2] = 34;
       $308 = (+($sign$0|0));
       $309 = $308 * 2.22507385850720138309E-308;
       $310 = $309 * 2.22507385850720138309E-308;
       $$0 = $310;
       STACKTOP = sp;return (+$$0);
      }
      $306 = ($x$3$lcssa$i|0)>(-1);
      if ($306) {
       $315 = $283;$316 = $284;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $311 = !($y$39$i >= 0.5);
        $312 = $x$48$i << 1;
        if ($311) {
         $$pn$i = $y$39$i;$x$5$i = $312;
        } else {
         $313 = $312 | 1;
         $314 = $y$39$i + -1.0;
         $$pn$i = $314;$x$5$i = $313;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $317 = (_i64Add(($315|0),($316|0),-1,-1)|0);
        $318 = tempRet0;
        $319 = ($x$5$i|0)>(-1);
        if ($319) {
         $315 = $317;$316 = $318;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $324 = $317;$325 = $318;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $324 = $283;$325 = $284;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $320 = ($emin$0$ph|0)<(0);
      $321 = $320 << 31 >> 31;
      $322 = (_i64Subtract(32,0,($emin$0$ph|0),($321|0))|0);
      $323 = tempRet0;
      $326 = (_i64Add(($324|0),($325|0),($322|0),($323|0))|0);
      $327 = tempRet0;
      $328 = (0)>($327|0);
      $329 = (0)==($327|0);
      $330 = ($bits$0$ph>>>0)>($326>>>0);
      $331 = $329 & $330;
      $332 = $328 | $331;
      if ($332) {
       $333 = ($326|0)<(0);
       $$$i = $333 ? 0 : $326;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $334 = ($$02$i|0)<(53);
      do {
       if ($334) {
        $335 = (84 - ($$02$i))|0;
        $336 = ($335|0)>(1023);
        do {
         if ($336) {
          $337 = (($335) + -1023)|0;
          $338 = ($337|0)>(1023);
          if (!($338)) {
           $$0$i10 = $337;$y$0$i11 = 8.98846567431157953864E+307;
           break;
          }
          $339 = (($335) + -2046)|0;
          $340 = ($339|0)>(1023);
          $$$i8 = $340 ? 1023 : $339;
          $$0$i10 = $$$i8;$y$0$i11 = inf;
         } else {
          $341 = ($335|0)<(-1022);
          if (!($341)) {
           $$0$i10 = $335;$y$0$i11 = 1.0;
           break;
          }
          $342 = (($335) + 1022)|0;
          $343 = ($342|0)<(-1022);
          if (!($343)) {
           $$0$i10 = $342;$y$0$i11 = 2.22507385850720138309E-308;
           break;
          }
          $344 = (($335) + 2044)|0;
          $345 = ($344|0)<(-1022);
          $$1$i9 = $345 ? -1022 : $344;
          $$0$i10 = $$1$i9;$y$0$i11 = 0.0;
         }
        } while(0);
        $346 = (($$0$i10) + 1023)|0;
        $347 = (_bitshift64Shl(($346|0),0,52)|0);
        $348 = tempRet0;
        HEAP32[tempDoublePtr>>2] = $347;HEAP32[tempDoublePtr+4>>2] = $348;$349 = +HEAPF64[tempDoublePtr>>3];
        $350 = $y$0$i11 * $349;
        $351 = (+($sign$0|0));
        $352 = (+_copysignl((+$350),(+$351)));
        $353 = ($$02$i|0)<(32);
        $354 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $353 & $354;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $351;$bias$07$i = $352;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $355 = $x$4$lcssa$i & 1;
        $356 = ($355|0)==(0);
        $357 = $355 ^ 1;
        $$x$4$i = (($357) + ($x$4$lcssa$i))|0;
        $$y$3$i = $356 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $351;$bias$07$i = $352;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $358 = (+($x$6$i>>>0));
      $359 = $$pre$phi$iZ2D * $358;
      $360 = $bias$07$i + $359;
      $361 = $$pre$phi$iZ2D * $y$5$i;
      $362 = $361 + $360;
      $363 = $362 - $bias$07$i;
      $364 = $363 != 0.0;
      if (!($364)) {
       $365 = (___errno_location()|0);
       HEAP32[$365>>2] = 34;
      }
      $366 = ($324|0)>(1023);
      do {
       if ($366) {
        $367 = $363 * 8.98846567431157953864E+307;
        $368 = (($324) + -1023)|0;
        $369 = ($368|0)>(1023);
        if (!($369)) {
         $$0$i$i15 = $368;$y$0$i$i16 = $367;
         break;
        }
        $370 = $367 * 8.98846567431157953864E+307;
        $371 = (($324) + -2046)|0;
        $372 = ($371|0)>(1023);
        $$$i$i13 = $372 ? 1023 : $371;
        $$0$i$i15 = $$$i$i13;$y$0$i$i16 = $370;
       } else {
        $373 = ($324|0)<(-1022);
        if (!($373)) {
         $$0$i$i15 = $324;$y$0$i$i16 = $363;
         break;
        }
        $374 = $363 * 2.22507385850720138309E-308;
        $375 = (($324) + 1022)|0;
        $376 = ($375|0)<(-1022);
        if (!($376)) {
         $$0$i$i15 = $375;$y$0$i$i16 = $374;
         break;
        }
        $377 = $374 * 2.22507385850720138309E-308;
        $378 = (($324) + 2044)|0;
        $379 = ($378|0)<(-1022);
        $$1$i$i14 = $379 ? -1022 : $378;
        $$0$i$i15 = $$1$i$i14;$y$0$i$i16 = $377;
       }
      } while(0);
      $380 = (($$0$i$i15) + 1023)|0;
      $381 = (_bitshift64Shl(($380|0),0,52)|0);
      $382 = tempRet0;
      HEAP32[tempDoublePtr>>2] = $381;HEAP32[tempDoublePtr+4>>2] = $382;$383 = +HEAPF64[tempDoublePtr>>3];
      $384 = $y$0$i$i16 * $383;
      $$0 = $384;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $389 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 152;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$842 = 0;$843 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $390 = HEAP32[$0>>2]|0;
     $391 = HEAP32[$1>>2]|0;
     $392 = ($390>>>0)<($391>>>0);
     if ($392) {
      $393 = (($390) + 1|0);
      HEAP32[$0>>2] = $393;
      $394 = HEAP8[$390>>0]|0;
      $395 = $394&255;
      $$08$i = $395;$gotdig$0$i9 = 1;
      continue;
     } else {
      $396 = (___shgetc($f)|0);
      $$08$i = $396;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L225: do {
     if ((label|0) == 152) {
      $397 = HEAP32[$0>>2]|0;
      $398 = HEAP32[$1>>2]|0;
      $399 = ($397>>>0)<($398>>>0);
      if ($399) {
       $400 = (($397) + 1|0);
       HEAP32[$0>>2] = $400;
       $401 = HEAP8[$397>>0]|0;
       $402 = $401&255;
       $$1$ph$i = $402;
      } else {
       $403 = (___shgetc($f)|0);
       $$1$ph$i = $403;
      }
      $404 = ($$1$ph$i|0)==(48);
      if ($404) {
       $413 = -1;$414 = -1;
       while(1) {
        $405 = HEAP32[$0>>2]|0;
        $406 = HEAP32[$1>>2]|0;
        $407 = ($405>>>0)<($406>>>0);
        if ($407) {
         $408 = (($405) + 1|0);
         HEAP32[$0>>2] = $408;
         $409 = HEAP8[$405>>0]|0;
         $410 = $409&255;
         $$1$be$i = $410;
        } else {
         $411 = (___shgetc($f)|0);
         $$1$be$i = $411;
        }
        $412 = ($$1$be$i|0)==(48);
        if (!($412)) {
         $$2$i = $$1$be$i;$842 = $413;$843 = $414;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L225;
        }
        $415 = (_i64Add(($413|0),($414|0),-1,-1)|0);
        $416 = tempRet0;
        $413 = $415;$414 = $416;
       }
      } else {
       $$2$i = $$1$ph$i;$842 = 0;$843 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $417 = (($$2$i) + -48)|0;
    $418 = ($417>>>0)<(10);
    $419 = ($$2$i|0)==(46);
    $or$cond789$i = $418 | $419;
    L239: do {
     if ($or$cond789$i) {
      $420 = (($x$i) + 496|0);
      $$397$i = $$2$i;$422 = 0;$423 = 0;$844 = $419;$845 = $417;$846 = $842;$847 = $843;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($844) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $848 = $422;$849 = $423;$850 = $422;$851 = $423;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$477 = $846;$478 = $847;$501 = $422;$504 = $423;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L239;
         }
        } else {
         $421 = ($k$095$i|0)<(125);
         $424 = (_i64Add(($422|0),($423|0),1,0)|0);
         $425 = tempRet0;
         $426 = ($$397$i|0)!=(48);
         if (!($421)) {
          if (!($426)) {
           $848 = $846;$849 = $847;$850 = $424;$851 = $425;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $436 = HEAP32[$420>>2]|0;
          $437 = $436 | 1;
          HEAP32[$420>>2] = $437;
          $848 = $846;$849 = $847;$850 = $424;$851 = $425;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $426 ? $424 : $lnz$092$i;
         $427 = ($j$096$i|0)==(0);
         $428 = (($x$i) + ($k$095$i<<2)|0);
         if ($427) {
          $storemerge$i = $845;
         } else {
          $429 = HEAP32[$428>>2]|0;
          $430 = ($429*10)|0;
          $431 = (($$397$i) + -48)|0;
          $432 = (($431) + ($430))|0;
          $storemerge$i = $432;
         }
         HEAP32[$428>>2] = $storemerge$i;
         $433 = (($j$096$i) + 1)|0;
         $434 = ($433|0)==(9);
         $435 = $434&1;
         $$k$0$i = (($435) + ($k$095$i))|0;
         $$10$i = $434 ? 0 : $433;
         $848 = $846;$849 = $847;$850 = $424;$851 = $425;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $438 = HEAP32[$0>>2]|0;
       $439 = HEAP32[$1>>2]|0;
       $440 = ($438>>>0)<($439>>>0);
       if ($440) {
        $441 = (($438) + 1|0);
        HEAP32[$0>>2] = $441;
        $442 = HEAP8[$438>>0]|0;
        $443 = $442&255;
        $$3$be$i = $443;
       } else {
        $444 = (___shgetc($f)|0);
        $$3$be$i = $444;
       }
       $445 = (($$3$be$i) + -48)|0;
       $446 = ($445>>>0)<(10);
       $447 = ($$3$be$i|0)==(46);
       $or$cond7$i = $446 | $447;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$422 = $850;$423 = $851;$844 = $447;$845 = $445;$846 = $848;$847 = $849;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$450 = $850;$451 = $848;$453 = $851;$454 = $849;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 175;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$450 = 0;$451 = $842;$453 = 0;$454 = $843;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 175;
     }
    } while(0);
    if ((label|0) == 175) {
     $448 = ($gotrad$1$lcssa$i|0)==(0);
     $449 = $448 ? $450 : $451;
     $452 = $448 ? $453 : $454;
     $$388$i = $$3$lcssa$i;$477 = $449;$478 = $452;$501 = $450;$504 = $453;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $455 = ($gotdig$381$i|0)!=(0);
    if ($455) {
     $456 = $$388$i | 32;
     $457 = ($456|0)==(101);
     if ($457) {
      $458 = (_scanexp($f,$pok)|0);
      $459 = tempRet0;
      $460 = ($458|0)==(0);
      $461 = ($459|0)==(-2147483648);
      $462 = $460 & $461;
      do {
       if ($462) {
        if ($40) {
         $467 = (($f) + 104|0);
         HEAP32[$467>>2] = 0;
         $468 = (($f) + 8|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = HEAP32[$0>>2]|0;
         $471 = $469;
         $472 = $470;
         $473 = (($471) - ($472))|0;
         $474 = (($f) + 108|0);
         HEAP32[$474>>2] = $473;
         HEAP32[$1>>2] = $469;
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $463 = HEAP32[$1>>2]|0;
         $464 = ($463|0)==(0|0);
         if ($464) {
          $475 = 0;$476 = 0;
          break;
         }
         $465 = HEAP32[$0>>2]|0;
         $466 = (($465) + -1|0);
         HEAP32[$0>>2] = $466;
         $475 = 0;$476 = 0;
         break;
        }
       } else {
        $475 = $458;$476 = $459;
       }
      } while(0);
      $479 = (_i64Add(($475|0),($476|0),($477|0),($478|0))|0);
      $480 = tempRet0;
      $500 = $479;$503 = $480;
     } else {
      label = 184;
     }
    } else {
     label = 184;
    }
    if ((label|0) == 184) {
     $481 = ($$388$i|0)>(-1);
     if ($481) {
      $482 = HEAP32[$1>>2]|0;
      $483 = ($482|0)==(0|0);
      if ($483) {
       $500 = $477;$503 = $478;
      } else {
       $484 = HEAP32[$0>>2]|0;
       $485 = (($484) + -1|0);
       HEAP32[$0>>2] = $485;
       $500 = $477;$503 = $478;
      }
     } else {
      $500 = $477;$503 = $478;
     }
    }
    if (!($455)) {
     $486 = (___errno_location()|0);
     HEAP32[$486>>2] = 22;
     $487 = (($f) + 104|0);
     HEAP32[$487>>2] = 0;
     $488 = (($f) + 8|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = HEAP32[$0>>2]|0;
     $491 = $489;
     $492 = $490;
     $493 = (($491) - ($492))|0;
     $494 = (($f) + 108|0);
     HEAP32[$494>>2] = $493;
     HEAP32[$1>>2] = $489;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $495 = HEAP32[$x$i>>2]|0;
    $496 = ($495|0)==(0);
    if ($496) {
     $497 = (+($sign$0|0));
     $498 = $497 * 0.0;
     $$0 = $498;
     STACKTOP = sp;return (+$$0);
    }
    $499 = ($500|0)==($501|0);
    $502 = ($503|0)==($504|0);
    $505 = $499 & $502;
    $506 = ($504|0)<(0);
    $507 = ($504|0)==(0);
    $508 = ($501>>>0)<(10);
    $509 = $507 & $508;
    $510 = $506 | $509;
    $or$cond$i15 = $505 & $510;
    do {
     if ($or$cond$i15) {
      $511 = ($bits$0$ph>>>0)>(30);
      if (!($511)) {
       $512 = $495 >>> $bits$0$ph;
       $513 = ($512|0)==(0);
       if (!($513)) {
        break;
       }
      }
      $514 = (+($sign$0|0));
      $515 = (+($495>>>0));
      $516 = $514 * $515;
      $$0 = $516;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $517 = (($emin$0$ph|0) / -2)&-1;
    $518 = ($517|0)<(0);
    $519 = $518 << 31 >> 31;
    $520 = ($503|0)>($519|0);
    $521 = ($503|0)==($519|0);
    $522 = ($500>>>0)>($517>>>0);
    $523 = $521 & $522;
    $524 = $520 | $523;
    if ($524) {
     $525 = (___errno_location()|0);
     HEAP32[$525>>2] = 34;
     $526 = (+($sign$0|0));
     $527 = $526 * 1.79769313486231570815E+308;
     $528 = $527 * 1.79769313486231570815E+308;
     $$0 = $528;
     STACKTOP = sp;return (+$$0);
    }
    $529 = (($emin$0$ph) + -106)|0;
    $530 = ($529|0)<(0);
    $531 = $530 << 31 >> 31;
    $532 = ($503|0)<($531|0);
    $533 = ($503|0)==($531|0);
    $534 = ($500>>>0)<($529>>>0);
    $535 = $533 & $534;
    $536 = $532 | $535;
    if ($536) {
     $537 = (___errno_location()|0);
     HEAP32[$537>>2] = 34;
     $538 = (+($sign$0|0));
     $539 = $538 * 2.22507385850720138309E-308;
     $540 = $539 * 2.22507385850720138309E-308;
     $$0 = $540;
     STACKTOP = sp;return (+$$0);
    }
    $541 = ($j$086$i|0)==(0);
    if ($541) {
     $k$3$i = $k$084$i;
    } else {
     $542 = ($j$086$i|0)<(9);
     if ($542) {
      $543 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$543>>2]|0;
      $545 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $544 = ($545*10)|0;
       $546 = (($j$371$i) + 1)|0;
       $exitcond$i = ($546|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $545 = $544;$j$371$i = $546;
       }
      }
      HEAP32[$543>>2] = $544;
     }
     $547 = (($k$084$i) + 1)|0;
     $k$3$i = $547;
    }
    $548 = ($lnz$079$i|0)<(9);
    do {
     if ($548) {
      $549 = ($lnz$079$i|0)<=($500|0);
      $550 = ($500|0)<(18);
      $or$cond3$i16 = $549 & $550;
      if ($or$cond3$i16) {
       $551 = ($500|0)==(9);
       if ($551) {
        $552 = (+($sign$0|0));
        $553 = HEAP32[$x$i>>2]|0;
        $554 = (+($553>>>0));
        $555 = $552 * $554;
        $$0 = $555;
        STACKTOP = sp;return (+$$0);
       }
       $556 = ($500|0)<(9);
       if ($556) {
        $557 = (+($sign$0|0));
        $558 = HEAP32[$x$i>>2]|0;
        $559 = (+($558>>>0));
        $560 = $557 * $559;
        $561 = (8 - ($500))|0;
        $562 = (22176 + ($561<<2)|0);
        $563 = HEAP32[$562>>2]|0;
        $564 = (+($563|0));
        $565 = $560 / $564;
        $$0 = $565;
        STACKTOP = sp;return (+$$0);
       }
       $566 = Math_imul($500, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $567 = (($$neg20$i) + ($566))|0;
       $568 = ($567|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($568)) {
        $569 = $$pre$i17 >>> $567;
        $570 = ($569|0)==(0);
        if (!($570)) {
         break;
        }
       }
       $571 = (+($sign$0|0));
       $572 = (+($$pre$i17>>>0));
       $573 = $571 * $572;
       $574 = (($500) + -10)|0;
       $575 = (22176 + ($574<<2)|0);
       $576 = HEAP32[$575>>2]|0;
       $577 = (+($576|0));
       $578 = $573 * $577;
       $$0 = $578;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $579 = (($500|0) % 9)&-1;
    $580 = ($579|0)==(0);
    if ($580) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $500;$z$1$ph39$i = $k$3$i;
    } else {
     $581 = ($500|0)>(-1);
     $582 = (($579) + 9)|0;
     $583 = $581 ? $579 : $582;
     $584 = (8 - ($583))|0;
     $585 = (22176 + ($584<<2)|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = ($k$3$i|0)==(0);
     if ($587) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $500;$z$0$i = 0;
     } else {
      $588 = (1000000000 / ($586|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $500;
      while(1) {
       $589 = (($x$i) + ($k$462$i<<2)|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = (($590>>>0) % ($586>>>0))&-1;
       $592 = (($590>>>0) / ($586>>>0))&-1;
       $593 = (($592) + ($carry$063$i))|0;
       HEAP32[$589>>2] = $593;
       $594 = Math_imul($591, $588)|0;
       $595 = ($k$462$i|0)==($a$061$i|0);
       $596 = ($593|0)==(0);
       $or$cond11$i = $595 & $596;
       $597 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $598 = $597 & 127;
        $599 = (($rp$060$i) + -9)|0;
        $a$1$i = $598;$rp$1$i18 = $599;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $600 = ($597|0)==($k$3$i|0);
       if ($600) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $594;$k$462$i = $597;$rp$060$i = $rp$1$i18;
       }
      }
      $601 = ($594|0)==(0);
      if ($601) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $602 = (($k$3$i) + 1)|0;
       $603 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$603>>2] = $594;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $602;
      }
     }
     $604 = (9 - ($583))|0;
     $605 = (($604) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $605;$z$1$ph39$i = $z$0$i;
    }
    L337: while(1) {
     $606 = ($rp$2$ph38$i|0)<(18);
     $607 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($606) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $609 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $609;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $610 = (($x$i) + ($k$5$us$i<<2)|0);
        $611 = HEAP32[$610>>2]|0;
        $612 = (_bitshift64Shl(($611|0),0,29)|0);
        $613 = tempRet0;
        $614 = (_i64Add(($612|0),($613|0),($carry1$0$us$i|0),0)|0);
        $615 = tempRet0;
        $616 = ($615>>>0)>(0);
        $617 = ($615|0)==(0);
        $618 = ($614>>>0)>(1000000000);
        $619 = $617 & $618;
        $620 = $616 | $619;
        if ($620) {
         $621 = (___udivdi3(($614|0),($615|0),1000000000,0)|0);
         $622 = tempRet0;
         $623 = (___uremdi3(($614|0),($615|0),1000000000,0)|0);
         $624 = tempRet0;
         $$sink$off0$us$i = $623;$carry1$1$us$i = $621;
        } else {
         $$sink$off0$us$i = $614;$carry1$1$us$i = 0;
        }
        HEAP32[$610>>2] = $$sink$off0$us$i;
        $625 = (($z$2$us$i) + 127)|0;
        $626 = $625 & 127;
        $627 = ($k$5$us$i|0)!=($626|0);
        $628 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $627 | $628;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $629 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $629 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $630 = (($k$5$us$i) + -1)|0;
        if ($628) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $630;$z$2$us$i = $z$3$us$i;
        }
       }
       $631 = (($e2$0$us$i) + -29)|0;
       $632 = ($carry1$1$us$i|0)==(0);
       if ($632) {
        $e2$0$us$i = $631;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $631;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $608 = ($rp$2$ph38$i|0)==(18);
      if ($608) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $633 = HEAP32[$607>>2]|0;
       $634 = ($633>>>0)<(9007199);
       if (!($634)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L337;
       }
       $635 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $635;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $636 = (($x$i) + ($k$5$us50$i<<2)|0);
        $637 = HEAP32[$636>>2]|0;
        $638 = (_bitshift64Shl(($637|0),0,29)|0);
        $639 = tempRet0;
        $640 = (_i64Add(($638|0),($639|0),($carry1$0$us49$i|0),0)|0);
        $641 = tempRet0;
        $642 = ($641>>>0)>(0);
        $643 = ($641|0)==(0);
        $644 = ($640>>>0)>(1000000000);
        $645 = $643 & $644;
        $646 = $642 | $645;
        if ($646) {
         $647 = (___udivdi3(($640|0),($641|0),1000000000,0)|0);
         $648 = tempRet0;
         $649 = (___uremdi3(($640|0),($641|0),1000000000,0)|0);
         $650 = tempRet0;
         $$sink$off0$us53$i = $649;$carry1$1$us54$i = $647;
        } else {
         $$sink$off0$us53$i = $640;$carry1$1$us54$i = 0;
        }
        HEAP32[$636>>2] = $$sink$off0$us53$i;
        $651 = (($z$2$us47$i) + 127)|0;
        $652 = $651 & 127;
        $653 = ($k$5$us50$i|0)!=($652|0);
        $654 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $653 | $654;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $655 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $655 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $656 = (($k$5$us50$i) + -1)|0;
        if ($654) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $656;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $657 = (($e2$0$us44$i) + -29)|0;
       $658 = ($carry1$1$us54$i|0)==(0);
       if ($658) {
        $e2$0$us44$i = $657;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $657;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $659 = (($rp$2$ph38$i) + 9)|0;
     $660 = (($a$2$ph40$i) + 127)|0;
     $661 = $660 & 127;
     $662 = ($661|0)==($z$3$lcssa$lcssa$i|0);
     if ($662) {
      $663 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $664 = $663 & 127;
      $665 = (($x$i) + ($664<<2)|0);
      $666 = HEAP32[$665>>2]|0;
      $667 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $668 = $667 & 127;
      $669 = (($x$i) + ($668<<2)|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = $670 | $666;
      HEAP32[$669>>2] = $671;
      $z$4$i = $664;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $672 = (($x$i) + ($661<<2)|0);
     HEAP32[$672>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $661;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $659;$z$1$ph39$i = $z$4$i;
    }
    L368: while(1) {
     $709 = (($z$5$ph$i) + 1)|0;
     $707 = $709 & 127;
     $710 = (($z$5$ph$i) + 127)|0;
     $711 = $710 & 127;
     $712 = (($x$i) + ($711<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $685 = ($rp$3$i$ph|0)==(18);
      $713 = ($rp$3$i$ph|0)>(27);
      $$14$i = $713 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $675 = (($i$025$i) + ($a$3$i))|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$5$ph$i|0);
        if ($677) {
         $i$1$i = 2;
         break;
        }
        $678 = (($x$i) + ($676<<2)|0);
        $679 = HEAP32[$678>>2]|0;
        $680 = (22168 + ($i$025$i<<2)|0);
        $681 = HEAP32[$680>>2]|0;
        $682 = ($679>>>0)<($681>>>0);
        if ($682) {
         $i$1$i = 2;
         break;
        }
        $683 = ($679>>>0)>($681>>>0);
        $674 = (($i$025$i) + 1)|0;
        if ($683) {
         $i$1$i = $i$025$i;
         break;
        }
        $673 = ($674|0)<(2);
        if ($673) {
         $i$025$i = $674;
        } else {
         $i$1$i = $674;
         break;
        }
       }
       $684 = ($i$1$i|0)==(2);
       $or$cond13$i = $684 & $685;
       if ($or$cond13$i) {
        break L368;
       }
       $688 = (($$14$i) + ($e2$1$i))|0;
       $689 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($689) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $688;
       } else {
        break;
       }
      }
      $690 = 1 << $$14$i;
      $691 = (($690) + -1)|0;
      $692 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $693 = (($x$i) + ($k$628$i<<2)|0);
       $694 = HEAP32[$693>>2]|0;
       $695 = $694 & $691;
       $696 = $694 >>> $$14$i;
       $697 = (($696) + ($carry3$030$i))|0;
       HEAP32[$693>>2] = $697;
       $698 = Math_imul($695, $692)|0;
       $699 = ($k$628$i|0)==($a$427$i|0);
       $700 = ($697|0)==(0);
       $or$cond15$i = $699 & $700;
       $701 = (($k$628$i) + 1)|0;
       $702 = $701 & 127;
       $703 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $703 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $702 : $a$427$i;
       $704 = ($702|0)==($z$5$ph$i|0);
       if ($704) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $698;$k$628$i = $702;$rp$426$i = $rp$5$i;
       }
      }
      $705 = ($698|0)==(0);
      if ($705) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $688;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $706 = ($707|0)==($a$5$i|0);
      if (!($706)) {
       break;
      }
      $714 = HEAP32[$712>>2]|0;
      $715 = $714 | 1;
      HEAP32[$712>>2] = $715;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $688;$rp$3$i$ph = $rp$5$i;
     }
     $708 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$708>>2] = $698;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $688;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $707;
    }
    $686 = $a$3$i & 127;
    $687 = ($686|0)==($z$5$ph$i|0);
    if ($687) {
     $716 = (($707) + -1)|0;
     $717 = (($x$i) + ($716<<2)|0);
     HEAP32[$717>>2] = 0;
     $z$7$i = $707;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $718 = (($x$i) + ($686<<2)|0);
    $719 = HEAP32[$718>>2]|0;
    $720 = (+($719>>>0));
    $721 = (($a$3$i) + 1)|0;
    $722 = $721 & 127;
    $723 = ($722|0)==($z$7$i|0);
    if ($723) {
     $828 = (($z$7$i) + 1)|0;
     $829 = $828 & 127;
     $830 = (($829) + -1)|0;
     $831 = (($x$i) + ($830<<2)|0);
     HEAP32[$831>>2] = 0;
     $z$7$1$i = $829;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $832 = $720 * 1.0E+9;
    $833 = (($x$i) + ($722<<2)|0);
    $834 = HEAP32[$833>>2]|0;
    $835 = (+($834>>>0));
    $836 = $832 + $835;
    $775 = (+($sign$0|0));
    $743 = $775 * $836;
    $795 = (($e2$1$i) + 53)|0;
    $725 = (($795) - ($emin$0$ph))|0;
    $837 = ($725|0)<($bits$0$ph|0);
    if ($837) {
     $724 = ($725|0)<(0);
     $$$i22 = $724 ? 0 : $725;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $726 = ($$09$i|0)<(53);
    if ($726) {
     $727 = (105 - ($$09$i))|0;
     $728 = ($727|0)>(1023);
     do {
      if ($728) {
       $729 = (($727) + -1023)|0;
       $730 = ($729|0)>(1023);
       if (!($730)) {
        $$0$i5 = $729;$y$0$i6 = 8.98846567431157953864E+307;
        break;
       }
       $731 = (($727) + -2046)|0;
       $732 = ($731|0)>(1023);
       $$$i3 = $732 ? 1023 : $731;
       $$0$i5 = $$$i3;$y$0$i6 = inf;
      } else {
       $733 = ($727|0)<(-1022);
       if (!($733)) {
        $$0$i5 = $727;$y$0$i6 = 1.0;
        break;
       }
       $734 = (($727) + 1022)|0;
       $735 = ($734|0)<(-1022);
       if (!($735)) {
        $$0$i5 = $734;$y$0$i6 = 2.22507385850720138309E-308;
        break;
       }
       $736 = (($727) + 2044)|0;
       $737 = ($736|0)<(-1022);
       $$1$i4 = $737 ? -1022 : $736;
       $$0$i5 = $$1$i4;$y$0$i6 = 0.0;
      }
     } while(0);
     $738 = (($$0$i5) + 1023)|0;
     $739 = (_bitshift64Shl(($738|0),0,52)|0);
     $740 = tempRet0;
     HEAP32[tempDoublePtr>>2] = $739;HEAP32[tempDoublePtr+4>>2] = $740;$741 = +HEAPF64[tempDoublePtr>>3];
     $742 = $y$0$i6 * $741;
     $744 = (+_copysignl((+$742),(+$743)));
     $745 = (53 - ($$09$i))|0;
     $746 = ($745|0)>(1023);
     do {
      if ($746) {
       $747 = (($745) + -1023)|0;
       $748 = ($747|0)>(1023);
       if (!($748)) {
        $$0$i = $747;$y$0$i2 = 8.98846567431157953864E+307;
        break;
       }
       $749 = (($745) + -2046)|0;
       $750 = ($749|0)>(1023);
       $$$i1 = $750 ? 1023 : $749;
       $$0$i = $$$i1;$y$0$i2 = inf;
      } else {
       $751 = ($745|0)<(-1022);
       if (!($751)) {
        $$0$i = $745;$y$0$i2 = 1.0;
        break;
       }
       $752 = (($745) + 1022)|0;
       $753 = ($752|0)<(-1022);
       if (!($753)) {
        $$0$i = $752;$y$0$i2 = 2.22507385850720138309E-308;
        break;
       }
       $754 = (($745) + 2044)|0;
       $755 = ($754|0)<(-1022);
       $$1$i = $755 ? -1022 : $754;
       $$0$i = $$1$i;$y$0$i2 = 0.0;
      }
     } while(0);
     $756 = (($$0$i) + 1023)|0;
     $757 = (_bitshift64Shl(($756|0),0,52)|0);
     $758 = tempRet0;
     HEAP32[tempDoublePtr>>2] = $757;HEAP32[tempDoublePtr+4>>2] = $758;$759 = +HEAPF64[tempDoublePtr>>3];
     $760 = $y$0$i2 * $759;
     $761 = (+_fmodl((+$743),(+$760)));
     $762 = $743 - $761;
     $763 = $744 + $762;
     $bias$0$i = $744;$frac$0$i = $761;$y$1$i23 = $763;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $743;
    }
    $764 = (($a$3$i) + 2)|0;
    $765 = $764 & 127;
    $766 = ($765|0)==($z$7$1$i|0);
    do {
     if ($766) {
      $frac$2$i = $frac$0$i;
     } else {
      $767 = (($x$i) + ($765<<2)|0);
      $768 = HEAP32[$767>>2]|0;
      $769 = ($768>>>0)<(500000000);
      do {
       if ($769) {
        $770 = ($768|0)==(0);
        if ($770) {
         $771 = (($a$3$i) + 3)|0;
         $772 = $771 & 127;
         $773 = ($772|0)==($z$7$1$i|0);
         if ($773) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $774 = $775 * 0.25;
        $776 = $774 + $frac$0$i;
        $frac$1$i = $776;
       } else {
        $777 = ($768>>>0)>(500000000);
        if ($777) {
         $778 = $775 * 0.75;
         $779 = $778 + $frac$0$i;
         $frac$1$i = $779;
         break;
        }
        $780 = (($a$3$i) + 3)|0;
        $781 = $780 & 127;
        $782 = ($781|0)==($z$7$1$i|0);
        if ($782) {
         $783 = $775 * 0.5;
         $784 = $783 + $frac$0$i;
         $frac$1$i = $784;
         break;
        } else {
         $785 = $775 * 0.75;
         $786 = $785 + $frac$0$i;
         $frac$1$i = $786;
         break;
        }
       }
      } while(0);
      $787 = (53 - ($$09$i))|0;
      $788 = ($787|0)>(1);
      if (!($788)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $789 = (+_fmodl((+$frac$1$i),1.0));
      $790 = $789 != 0.0;
      if ($790) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $791 = $frac$1$i + 1.0;
      $frac$2$i = $791;
     }
    } while(0);
    $792 = $y$1$i23 + $frac$2$i;
    $793 = $792 - $bias$0$i;
    $794 = $795 & 2147483647;
    $796 = (-2 - ($sum$i))|0;
    $797 = ($794|0)>($796|0);
    do {
     if ($797) {
      $798 = (+Math_abs((+$793)));
      $799 = !($798 >= 9007199254740992.0);
      if ($799) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $793;
      } else {
       $800 = ($denormal$0$i|0)!=(0);
       $801 = ($$09$i|0)==($725|0);
       $or$cond16$i = $800 & $801;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $802 = $793 * 0.5;
       $803 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $803;$y$2$i24 = $802;
      }
      $804 = (($e2$2$i) + 50)|0;
      $805 = ($804|0)>($389|0);
      if (!($805)) {
       $806 = ($denormal$2$i|0)!=(0);
       $807 = $frac$2$i != 0.0;
       $or$cond17$i = $806 & $807;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $808 = (___errno_location()|0);
      HEAP32[$808>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $793;
     }
    } while(0);
    $809 = ($e2$3$i|0)>(1023);
    do {
     if ($809) {
      $810 = $y$3$i * 8.98846567431157953864E+307;
      $811 = (($e2$3$i) + -1023)|0;
      $812 = ($811|0)>(1023);
      if (!($812)) {
       $$0$i$i = $811;$y$0$i$i = $810;
       break;
      }
      $813 = $810 * 8.98846567431157953864E+307;
      $814 = (($e2$3$i) + -2046)|0;
      $815 = ($814|0)>(1023);
      $$$i$i = $815 ? 1023 : $814;
      $$0$i$i = $$$i$i;$y$0$i$i = $813;
     } else {
      $816 = ($e2$3$i|0)<(-1022);
      if (!($816)) {
       $$0$i$i = $e2$3$i;$y$0$i$i = $y$3$i;
       break;
      }
      $817 = $y$3$i * 2.22507385850720138309E-308;
      $818 = (($e2$3$i) + 1022)|0;
      $819 = ($818|0)<(-1022);
      if (!($819)) {
       $$0$i$i = $818;$y$0$i$i = $817;
       break;
      }
      $820 = $817 * 2.22507385850720138309E-308;
      $821 = (($e2$3$i) + 2044)|0;
      $822 = ($821|0)<(-1022);
      $$1$i$i = $822 ? -1022 : $821;
      $$0$i$i = $$1$i$i;$y$0$i$i = $820;
     }
    } while(0);
    $823 = (($$0$i$i) + 1023)|0;
    $824 = (_bitshift64Shl(($823|0),0,52)|0);
    $825 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $824;HEAP32[tempDoublePtr+4>>2] = $825;$826 = +HEAPF64[tempDoublePtr>>3];
    $827 = $y$0$i$i * $826;
    $$0 = $827;
    STACKTOP = sp;return (+$$0);
   } else {
    $117 = HEAP32[$1>>2]|0;
    $118 = ($117|0)==(0|0);
    $$pre = HEAP32[$0>>2]|0;
    if ($118) {
     $126 = $$pre;
    } else {
     $119 = (($$pre) + -1|0);
     HEAP32[$0>>2] = $119;
     $126 = $119;
    }
    $120 = (___errno_location()|0);
    HEAP32[$120>>2] = 22;
    $121 = (($f) + 104|0);
    HEAP32[$121>>2] = 0;
    $122 = (($f) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $123;
    $125 = $126;
    $127 = (($124) - ($125))|0;
    $128 = (($f) + 108|0);
    HEAP32[$128>>2] = $127;
    HEAP32[$1>>2] = $123;
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $42 = HEAP32[$1>>2]|0;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   $44 = HEAP32[$0>>2]|0;
   $45 = (($44) + -1|0);
   HEAP32[$0>>2] = $45;
   $notlhs = ($pok|0)==(0);
   $notrhs = ($i$0$lcssa>>>0)<(4);
   $or$cond106$not = $notrhs | $notlhs;
   if (!($or$cond106$not)) {
    $47 = $45;$i$166 = $i$0$lcssa;
    while(1) {
     $46 = (($47) + -1|0);
     $48 = (($i$166) + -1)|0;
     $49 = ($48>>>0)>(3);
     if ($49) {
      $47 = $46;$i$166 = $48;
     } else {
      break;
     }
    }
    HEAP32[$0>>2] = $46;
   }
  }
 }
 $50 = (+($sign$0|0));
 $51 = $50 * inf;
 $52 = $51;
 $$0 = $52;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $c$0 = 0, $c$1$be = 0, $c$18 = 0, $c$2$be = 0;
 var $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $93 = -2147483648;$94 = 0;
   tempRet0 = $93;
   STACKTOP = sp;return ($94|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $93 = -2147483648;$94 = 0;
  tempRet0 = $93;
  STACKTOP = sp;return ($94|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 if ($43) {
  $49 = $34;$50 = $46;$c$23 = $c$1$be;
  while(1) {
   $51 = (___muldi3(($49|0),($50|0),10,0)|0);
   $52 = tempRet0;
   $53 = ($c$23|0)<(0);
   $54 = $53 << 31 >> 31;
   $55 = (_i64Add(($c$23|0),($54|0),-48,-1)|0);
   $56 = tempRet0;
   $57 = (_i64Add(($55|0),($56|0),($51|0),($52|0))|0);
   $58 = tempRet0;
   $59 = HEAP32[$0>>2]|0;
   $60 = HEAP32[$2>>2]|0;
   $61 = ($59>>>0)<($60>>>0);
   if ($61) {
    $62 = (($59) + 1|0);
    HEAP32[$0>>2] = $62;
    $63 = HEAP8[$59>>0]|0;
    $64 = $63&255;
    $c$2$be = $64;
   } else {
    $65 = (___shgetc($f)|0);
    $c$2$be = $65;
   }
   $66 = (($c$2$be) + -48)|0;
   $67 = ($66>>>0)<(10);
   $68 = ($58|0)<(21474836);
   $69 = ($58|0)==(21474836);
   $70 = ($57>>>0)<(2061584302);
   $71 = $69 & $70;
   $72 = $68 | $71;
   $or$cond2 = $67 & $72;
   if ($or$cond2) {
    $49 = $57;$50 = $58;$c$23 = $c$2$be;
   } else {
    $87 = $57;$88 = $58;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $87 = $34;$88 = $46;$c$2$lcssa = $c$1$be;
 }
 $47 = (($c$2$lcssa) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  while(1) {
   $73 = HEAP32[$0>>2]|0;
   $74 = HEAP32[$2>>2]|0;
   $75 = ($73>>>0)<($74>>>0);
   if ($75) {
    $76 = (($73) + 1|0);
    HEAP32[$0>>2] = $76;
    $77 = HEAP8[$73>>0]|0;
    $78 = $77&255;
    $c$3$be = $78;
   } else {
    $79 = (___shgetc($f)|0);
    $c$3$be = $79;
   }
   $80 = (($c$3$be) + -48)|0;
   $81 = ($80>>>0)<(10);
   if (!($81)) {
    break;
   }
  }
 }
 $82 = HEAP32[$2>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $84 = HEAP32[$0>>2]|0;
  $85 = (($84) + -1|0);
  HEAP32[$0>>2] = $85;
 }
 $86 = ($neg$0|0)!=(0);
 $89 = (_i64Subtract(0,0,($87|0),($88|0))|0);
 $90 = tempRet0;
 $91 = $86 ? $89 : $87;
 $92 = $86 ? $90 : $88;
 $93 = $92;$94 = $91;
 tempRet0 = $93;
 STACKTOP = sp;return ($94|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2$phi$trans$insert$phi$trans$insert = 0, $$pre = 0, $$pre3 = 0, $$pre3$pre = 0, $$pre3$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$phi$trans$insert2$phi$trans$insert$phi$trans$insert = (($f) + 4|0);
   $$pre3$pre$pre = HEAP32[$$phi$trans$insert2$phi$trans$insert$phi$trans$insert>>2]|0;
   if ($10) {
    $$pre3$pre = $$pre3$pre$pre;
    label = 8;
   } else {
    $11 = $$pre;
    $12 = $$pre3$pre$pre;
    $13 = (($11) - ($12))|0;
    $14 = (($f) + 108|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($9) - ($15))|0;
    $17 = (($16) + -1)|0;
    $18 = ($13|0)>($17|0);
    if ($18) {
     $19 = (($$pre3$pre$pre) + ($17)|0);
     $20 = (($f) + 100|0);
     HEAP32[$20>>2] = $19;
     $$pre3 = $$pre3$pre$pre;
    } else {
     $$pre3$pre = $$pre3$pre$pre;
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $21 = (($f) + 100|0);
    HEAP32[$21>>2] = $$pre;
    $$pre3 = $$pre3$pre;
   }
   $22 = ($$pre|0)==(0|0);
   if (!($22)) {
    $23 = $$pre;
    $24 = $$pre3;
    $25 = (($f) + 108|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 1)|0;
    $28 = (($27) - ($24))|0;
    $29 = (($28) + ($26))|0;
    HEAP32[$25>>2] = $29;
   }
   $30 = (($$pre3) + -1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = ($32|0)==($6|0);
   if ($33) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = $6&255;
   HEAP8[$30>>0] = $34;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _wcrtomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 22208;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (($f) + 74|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = (($5) + 255)|0;
   $7 = $6 | $5;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = (($f) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($f) + 44|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10>>>0)>($12>>>0);
   if ($13) {
    $14 = (($f) + 36|0);
    $15 = HEAP32[$14>>2]|0;
    (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   }
   $16 = (($f) + 16|0);
   HEAP32[$16>>2] = 0;
   $17 = (($f) + 28|0);
   HEAP32[$17>>2] = 0;
   HEAP32[$9>>2] = 0;
   $18 = HEAP32[$f>>2]|0;
   $19 = $18 & 20;
   $20 = ($19|0)==(0);
   if ($20) {
    $24 = HEAP32[$11>>2]|0;
    HEAP32[$0>>2] = $24;
    $25 = (($f) + 4|0);
    HEAP32[$25>>2] = $24;
    break;
   }
   $21 = $18 & 4;
   $22 = ($21|0)==(0);
   if ($22) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = $18 | 32;
   HEAP32[$f>>2] = $23;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $26 = (($f) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($f,$c,1)|0);
 $29 = ($28|0)==(1);
 if (!($29)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP8[$c>>0]|0;
 $31 = $30&255;
 $$0 = $31;
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$01 = 0, $$02 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (($f) + 74|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = (($5) + 255)|0;
   $7 = $6 | $5;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = HEAP32[$f>>2]|0;
   $10 = $9 & 8;
   $11 = ($10|0)==(0);
   if ($11) {
    $13 = (($f) + 8|0);
    HEAP32[$13>>2] = 0;
    $14 = (($f) + 4|0);
    HEAP32[$14>>2] = 0;
    $15 = (($f) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($f) + 28|0);
    HEAP32[$17>>2] = $16;
    $18 = (($f) + 20|0);
    HEAP32[$18>>2] = $16;
    $19 = (($f) + 48|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($16) + ($20)|0);
    HEAP32[$0>>2] = $21;
    $24 = $21;$26 = $16;
    break;
   }
   $12 = $9 | 32;
   HEAP32[$f>>2] = $12;
   STACKTOP = sp;return;
  } else {
   $$phi$trans$insert = (($f) + 20|0);
   $$pre2 = HEAP32[$$phi$trans$insert>>2]|0;
   $24 = $1;$26 = $$pre2;
  }
 } while(0);
 $22 = (($f) + 20|0);
 $23 = $24;
 $25 = $26;
 $27 = (($23) - ($25))|0;
 $28 = ($27>>>0)<($l>>>0);
 if ($28) {
  $29 = (($f) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  (FUNCTION_TABLE_iiii[$30 & 1023]($f,$s,$l)|0);
  STACKTOP = sp;return;
 }
 $31 = (($f) + 75|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)>(-1);
 L13: do {
  if ($33) {
   $i$0 = $l;
   while(1) {
    $34 = ($i$0|0)==(0);
    if ($34) {
     $$01 = $l;$$02 = $s;$45 = $26;
     break L13;
    }
    $35 = (($i$0) + -1)|0;
    $36 = (($s) + ($35)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)==(10);
    if ($38) {
     break;
    } else {
     $i$0 = $35;
    }
   }
   $39 = (($f) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_iiii[$40 & 1023]($f,$s,$i$0)|0);
   $42 = ($41>>>0)<($i$0>>>0);
   if ($42) {
    STACKTOP = sp;return;
   } else {
    $43 = (($s) + ($i$0)|0);
    $44 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$22>>2]|0;
    $$01 = $44;$$02 = $43;$45 = $$pre;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$45 = $26;
  }
 } while(0);
 _memcpy(($45|0),($$02|0),($$01|0))|0;
 $46 = HEAP32[$22>>2]|0;
 $47 = (($46) + ($$01)|0);
 HEAP32[$22>>2] = $47;
 STACKTOP = sp;return;
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i3 = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0;
 var $$0$lcssa$i62$i = 0, $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0;
 var $$01$i66$i = 0, $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$013$i1 = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0;
 var $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$17$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0;
 var $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$24$i = 0, $$25$i = 0, $$3$i = 0.0, $$3$i7 = 0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0;
 var $$lcssa$i = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0, $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre23 = 0, $$pre24 = 0;
 var $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0.0, $1065 = 0.0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1070$phi = 0, $1071 = 0, $1071$phi = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0.0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0.0, $754 = 0.0, $755 = 0, $756 = 0.0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0;
 var $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current27 = 0, $arglist_current30 = 0, $arglist_current33 = 0, $arglist_current36 = 0, $arglist_current39 = 0, $arglist_current42 = 0, $arglist_current45 = 0, $arglist_current48 = 0, $arglist_current51 = 0, $arglist_current54 = 0;
 var $arglist_current57 = 0, $arglist_current60 = 0, $arglist_current63 = 0, $arglist_current66 = 0, $arglist_current69 = 0, $arglist_current72 = 0, $arglist_current75 = 0, $arglist_current78 = 0, $arglist_current81 = 0, $arglist_current84 = 0, $arglist_current87 = 0, $arglist_next = 0, $arglist_next28 = 0, $arglist_next31 = 0, $arglist_next34 = 0, $arglist_next37 = 0, $arglist_next40 = 0, $arglist_next43 = 0, $arglist_next46 = 0, $arglist_next49 = 0;
 var $arglist_next52 = 0, $arglist_next55 = 0, $arglist_next58 = 0, $arglist_next61 = 0, $arglist_next64 = 0, $arglist_next67 = 0, $arglist_next70 = 0, $arglist_next73 = 0, $arglist_next76 = 0, $arglist_next79 = 0, $arglist_next82 = 0, $arglist_next85 = 0, $arglist_next88 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0;
 var $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0;
 var $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0, $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0;
 var $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0;
 var $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0;
 var $or$cond$i100$i = 0, $or$cond$i2 = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond12$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0, $p$0 = 0, $p$1 = 0;
 var $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $phitmp = 0, $phitmp25 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$lcssa$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$014$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s$15$i = 0, $s$2$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0;
 var $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0, $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$0$lcssa$i = 0, $w$08$i = 0, $w$1 = 0, $w$18$i = 0;
 var $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0;
 var $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1070 = 0;$1071 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 357;
   break;
  } else {
   $1072 = $21;$25 = $22;
  }
  while(1) {
   if ((($1072<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   } else if ((($1072<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1072 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   ___fwritex($22,$36,$f);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1071$phi = $1071;$1070$phi = $1070;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1071 = $1071$phi;$1070 = $1070$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $65 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 376;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 376;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1073 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1073 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1073 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 376;
     break L1;
    }
    if ($1) {
     $arglist_current27 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current27>>2]|0;
     $arglist_next28 = (($arglist_current27) + 4|0);
     HEAP32[$ap>>2] = $arglist_next28;
     $1073 = $105;$p$0 = $124;
    } else {
     $1073 = $105;$p$0 = 0;
    }
   } else {
    $1073 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1073;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 376;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((22216 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 376;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 376;
     break L1;
    } else {
     $1074 = $1070;$1075 = $1071;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1074 = $155;$1075 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 376;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1071;$229 = $1070;
    } else {
     do {
      switch ($142|0) {
      case 17:  {
       $arglist_current54 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current54>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current54+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next55 = (($arglist_current54) + 8|0);
       HEAP32[$ap>>2] = $arglist_next55;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1076 = $193;$1077 = $192;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current30 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current30>>2]|0;
       $arglist_next31 = (($arglist_current30) + 4|0);
       HEAP32[$ap>>2] = $arglist_next31;
       $1076 = $158;$1077 = $1070;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current33 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current33>>2]|0;
       $arglist_next34 = (($arglist_current33) + 4|0);
       HEAP32[$ap>>2] = $arglist_next34;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1076 = $162;$1077 = $161;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current36 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current36>>2]|0;
       $arglist_next37 = (($arglist_current36) + 4|0);
       HEAP32[$ap>>2] = $arglist_next37;
       $164 = $163;
       $1076 = $164;$1077 = 0;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current39 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current39;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next40 = (($arglist_current39) + 8|0);
       HEAP32[$ap>>2] = $arglist_next40;
       $171 = $167;
       $1076 = $171;$1077 = $170;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current42 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current42>>2]|0;
       $arglist_next43 = (($arglist_current42) + 4|0);
       HEAP32[$ap>>2] = $arglist_next43;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1076 = $178;$1077 = $176;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current45 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current45>>2]|0;
       $arglist_next46 = (($arglist_current45) + 4|0);
       HEAP32[$ap>>2] = $arglist_next46;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1076 = $180;$1077 = 0;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current48 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current48>>2]|0;
       $arglist_next49 = (($arglist_current48) + 4|0);
       HEAP32[$ap>>2] = $arglist_next49;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1076 = $187;$1077 = $185;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current51 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current51>>2]|0;
       $arglist_next52 = (($arglist_current51) + 4|0);
       HEAP32[$ap>>2] = $arglist_next52;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1076 = $189;$1077 = 0;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current57 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current57>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current57+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next58 = (($arglist_current57) + 8|0);
       HEAP32[$ap>>2] = $arglist_next58;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1076 = $197;$1077 = $196;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1076 = $1071;$1077 = $1070;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1076 = $1075;$1077 = $1074;
    label = 64;
   } else {
    $1070 = $1074;$1071 = $1075;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1076;$229 = $1077;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 22680;
    label = 89;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 22696 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1078 = $229;$1079 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 22680;$z$2 = $2;
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 22680;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 22680 : ((22680 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((22680 + 1|0));
     label = 89;
    }
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 22680;
     label = 94;
    } else {
     $$13 = $252 ? 22680 : ((22680 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 83:  {
    $360 = ($p$0|0)==(0);
    if ($360) {
     $1082 = $207;$1083 = $207;$i$0166 = 0;
     label = 122;
    } else {
     $1080 = $207;$1081 = $207;$p$4296 = $p$0;
     label = 115;
    }
    break;
   }
   case 67:  {
    $359 = $207;
    HEAP32[$wc>>2] = $359;
    HEAP32[$5>>2] = 0;
    $1080 = $wc;$1081 = $wc;$p$4296 = -1;
    label = 115;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $396 = $207;
    HEAP32[tempDoublePtr>>2] = $396;HEAP32[tempDoublePtr+4>>2] = $229;$397 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $398 = ($229|0)<(0);
    if ($398) {
     $399 = -$397;
     $$07$i = $399;$pl$0$i = 1;$prefix$0$i = 22704;
    } else {
     $400 = $fl$1$ & 2048;
     $401 = ($400|0)==(0);
     if ($401) {
      $402 = $fl$1$ & 1;
      $403 = ($402|0)==(0);
      $$$i = $403 ? ((22704 + 1|0)) : ((22704 + 6|0));
      $$07$i = $397;$pl$0$i = $402;$prefix$0$i = $$$i;
     } else {
      $$07$i = $397;$pl$0$i = 1;$prefix$0$i = ((22704 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$404 = HEAP32[tempDoublePtr>>2]|0;
    $405 = HEAP32[tempDoublePtr+4>>2]|0;
    $406 = $405 & 2146435072;
    $407 = ($406>>>0)<(2146435072);
    $408 = ($406|0)==(2146435072);
    $409 = (0)<(0);
    $410 = $408 & $409;
    $411 = $407 | $410;
    if (!($411)) {
     $412 = $t$0 & 32;
     $413 = ($412|0)!=(0);
     $414 = $413 ? 22728 : 22736;
     $415 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($415) {
      $416 = $413 ? 22744 : 22752;
      $pl$1$i = 0;$s1$0$i = $416;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $414;
     }
     $417 = (($pl$1$i) + 3)|0;
     $418 = $fl$1$ & 8192;
     $419 = ($418|0)==(0);
     $420 = ($417|0)<($w$1|0);
     $or$cond$i35$i = $419 & $420;
     if ($or$cond$i35$i) {
      $421 = (($w$1) - ($417))|0;
      $422 = ($421>>>0)>(256);
      $423 = $422 ? 256 : $421;
      _memset(($pad$i|0),32,($423|0))|0;
      $424 = ($421>>>0)>(255);
      if ($424) {
       $$01$i36$i = $421;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $425 = (($$01$i36$i) + -256)|0;
        $426 = ($425>>>0)>(255);
        if ($426) {
         $$01$i36$i = $425;
        } else {
         $$0$lcssa$i38$i = $425;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $421;
      }
      ___fwritex($pad$i,$$0$lcssa$i38$i,$f);
     }
     ___fwritex($prefix$0$i,$pl$1$i,$f);
     ___fwritex($s1$0$i,3,$f);
     $427 = $fl$1$ & 73728;
     $428 = ($427|0)==(8192);
     $or$cond$i42$i = $428 & $420;
     if ($or$cond$i42$i) {
      $429 = (($w$1) - ($417))|0;
      $430 = ($429>>>0)>(256);
      $431 = $430 ? 256 : $429;
      _memset(($pad$i|0),32,($431|0))|0;
      $432 = ($429>>>0)>(255);
      if ($432) {
       $$01$i43$i = $429;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $433 = (($$01$i43$i) + -256)|0;
        $434 = ($433>>>0)>(255);
        if ($434) {
         $$01$i43$i = $433;
        } else {
         $$0$lcssa$i45$i = $433;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $429;
      }
      ___fwritex($pad$i,$$0$lcssa$i45$i,$f);
     }
     $w$$i = $420 ? $w$1 : $417;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $435 = (+_frexp($$07$i,$e2$i));
    $436 = $435 * 2.0;
    $437 = $436 != 0.0;
    if ($437) {
     $438 = HEAP32[$e2$i>>2]|0;
     $439 = (($438) + -1)|0;
     HEAP32[$e2$i>>2] = $439;
    }
    $440 = $t$0 | 32;
    $441 = ($440|0)==(97);
    if ($441) {
     $442 = $t$0 & 32;
     $443 = ($442|0)==(0);
     $444 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $443 ? $prefix$0$i : $444;
     $445 = $pl$0$i | 2;
     $446 = ($p$0>>>0)>(11);
     $447 = (12 - ($p$0))|0;
     $re$0$i = $446 ? 0 : $447;
     $448 = ($re$0$i|0)==(0);
     do {
      if ($448) {
       $$1$i = $436;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $449 = (($re$1165$i) + -1)|0;
        $450 = $round$0164$i * 16.0;
        $451 = ($449|0)==(0);
        if ($451) {
         break;
        } else {
         $re$1165$i = $449;$round$0164$i = $450;
        }
       }
       $452 = HEAP8[$prefix$0$$i>>0]|0;
       $453 = ($452<<24>>24)==(45);
       if ($453) {
        $454 = -$436;
        $455 = $454 - $450;
        $456 = $450 + $455;
        $457 = -$456;
        $$1$i = $457;
        break;
       } else {
        $458 = $436 + $450;
        $459 = $458 - $450;
        $$1$i = $459;
        break;
       }
      }
     } while(0);
     $460 = HEAP32[$e2$i>>2]|0;
     $461 = ($460|0)<(0);
     $462 = (0 - ($460))|0;
     $463 = $461 ? $462 : $460;
     $464 = ($463|0)<(0);
     if ($464) {
      $465 = ($463|0)<(0);
      $466 = $465 << 31 >> 31;
      $$05$i$i = $6;$467 = $463;$468 = $466;
      while(1) {
       $469 = (___uremdi3(($467|0),($468|0),10,0)|0);
       $470 = tempRet0;
       $471 = $469 | 48;
       $472 = $471&255;
       $473 = (($$05$i$i) + -1|0);
       HEAP8[$473>>0] = $472;
       $474 = (___udivdi3(($467|0),($468|0),10,0)|0);
       $475 = tempRet0;
       $476 = ($468>>>0)>(9);
       $477 = ($468|0)==(9);
       $478 = ($467>>>0)>(4294967295);
       $479 = $477 & $478;
       $480 = $476 | $479;
       if ($480) {
        $$05$i$i = $473;$467 = $474;$468 = $475;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $473;$$01$lcssa$off0$i$i = $474;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $463;
     }
     $481 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($481) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $482 = (($y$03$i$i>>>0) % 10)&-1;
       $483 = $482 | 48;
       $484 = $483&255;
       $485 = (($$12$i$i) + -1|0);
       HEAP8[$485>>0] = $484;
       $486 = (($y$03$i$i>>>0) / 10)&-1;
       $487 = ($y$03$i$i>>>0)<(10);
       if ($487) {
        $$1$lcssa$i$i = $485;
        break;
       } else {
        $$12$i$i = $485;$y$03$i$i = $486;
       }
      }
     }
     $488 = ($$1$lcssa$i$i|0)==($6|0);
     if ($488) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $489 = HEAP32[$e2$i>>2]|0;
     $490 = $489 >> 31;
     $491 = $490 & 2;
     $492 = (($491) + 43)|0;
     $493 = $492&255;
     $494 = (($estr$0$i) + -1|0);
     HEAP8[$494>>0] = $493;
     $495 = (($t$0) + 15)|0;
     $496 = $495&255;
     $497 = (($estr$0$i) + -2|0);
     HEAP8[$497>>0] = $496;
     $498 = ($p$0|0)>(0);
     $499 = $fl$1$ & 8;
     $500 = ($499|0)==(0);
     if ($498) {
      if ($500) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $501 = (~~(($$2$us$us$i)));
        $502 = (22760 + ($501)|0);
        $503 = HEAP8[$502>>0]|0;
        $504 = $503&255;
        $505 = $504 | $442;
        $506 = $505&255;
        $507 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $506;
        $508 = (+($501|0));
        $509 = $$2$us$us$i - $508;
        $510 = $509 * 16.0;
        $511 = $507;
        $512 = (($511) - ($0))|0;
        $513 = ($512|0)==(1);
        if ($513) {
         $514 = (($s$0$us$us$i) + 2|0);
         HEAP8[$507>>0] = 46;
         $s$1$us$us$i = $514;
        } else {
         $s$1$us$us$i = $507;
        }
        $515 = $510 != 0.0;
        if ($515) {
         $$2$us$us$i = $510;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $516 = (~~(($$2$us$i)));
        $517 = (22760 + ($516)|0);
        $518 = HEAP8[$517>>0]|0;
        $519 = $518&255;
        $520 = $519 | $442;
        $521 = $520&255;
        $522 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $521;
        $523 = (+($516|0));
        $524 = $$2$us$i - $523;
        $525 = $524 * 16.0;
        $526 = $522;
        $527 = (($526) - ($0))|0;
        $528 = ($527|0)==(1);
        if ($528) {
         $529 = (($s$0$us$i) + 2|0);
         HEAP8[$522>>0] = 46;
         $s$1$us$i = $529;
        } else {
         $s$1$us$i = $522;
        }
        $530 = $525 != 0.0;
        if ($530) {
         $$2$us$i = $525;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($500) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $531 = (~~(($$2$us159$i)));
        $532 = (22760 + ($531)|0);
        $533 = HEAP8[$532>>0]|0;
        $534 = $533&255;
        $535 = $534 | $442;
        $536 = $535&255;
        $537 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $536;
        $538 = (+($531|0));
        $539 = $$2$us159$i - $538;
        $540 = $539 * 16.0;
        $541 = $537;
        $542 = (($541) - ($0))|0;
        $543 = ($542|0)==(1);
        $544 = $540 != 0.0;
        $or$cond$i71 = $543 & $544;
        if ($or$cond$i71) {
         $545 = (($s$0$us158$i) + 2|0);
         HEAP8[$537>>0] = 46;
         $s$1$us160$i = $545;
        } else {
         $s$1$us160$i = $537;
        }
        if ($544) {
         $$2$us159$i = $540;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $546 = (~~(($$2$i)));
        $547 = (22760 + ($546)|0);
        $548 = HEAP8[$547>>0]|0;
        $549 = $548&255;
        $550 = $549 | $442;
        $551 = $550&255;
        $552 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $551;
        $553 = (+($546|0));
        $554 = $$2$i - $553;
        $555 = $554 * 16.0;
        $556 = $552;
        $557 = (($556) - ($0))|0;
        $558 = ($557|0)==(1);
        if ($558) {
         $559 = (($s$0$i) + 2|0);
         HEAP8[$552>>0] = 46;
         $s$1$i = $559;
        } else {
         $s$1$i = $552;
        }
        $560 = $555 != 0.0;
        if ($560) {
         $$2$i = $555;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $561 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($561) {
       label = 186;
      } else {
       $562 = (($10) + ($$pre319$i))|0;
       $563 = ($562|0)<($p$0|0);
       if (!($563)) {
        label = 186;
        break;
       }
       $564 = $497;
       $565 = (($11) + ($p$0))|0;
       $566 = (($565) - ($564))|0;
       $l$0$i = $566;
      }
     } while(0);
     if ((label|0) == 186) {
      label = 0;
      $567 = $497;
      $568 = (($9) - ($567))|0;
      $569 = (($568) + ($$pre319$i))|0;
      $l$0$i = $569;
     }
     $570 = (($l$0$i) + ($445))|0;
     $571 = $fl$1$ & 73728;
     $572 = ($571|0)==(0);
     $573 = ($570|0)<($w$1|0);
     $or$cond$i52$i = $572 & $573;
     if ($or$cond$i52$i) {
      $574 = (($w$1) - ($570))|0;
      $575 = ($574>>>0)>(256);
      $576 = $575 ? 256 : $574;
      _memset(($pad$i|0),32,($576|0))|0;
      $577 = ($574>>>0)>(255);
      if ($577) {
       $$01$i53$i = $574;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $578 = (($$01$i53$i) + -256)|0;
        $579 = ($578>>>0)>(255);
        if ($579) {
         $$01$i53$i = $578;
        } else {
         $$0$lcssa$i55$i = $578;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $574;
      }
      ___fwritex($pad$i,$$0$lcssa$i55$i,$f);
     }
     ___fwritex($prefix$0$$i,$445,$f);
     $580 = ($571|0)==(65536);
     $or$cond$i59$i = $580 & $573;
     if ($or$cond$i59$i) {
      $581 = (($w$1) - ($570))|0;
      $582 = ($581>>>0)>(256);
      $583 = $582 ? 256 : $581;
      _memset(($pad$i|0),48,($583|0))|0;
      $584 = ($581>>>0)>(255);
      if ($584) {
       $$01$i60$i = $581;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $585 = (($$01$i60$i) + -256)|0;
        $586 = ($585>>>0)>(255);
        if ($586) {
         $$01$i60$i = $585;
        } else {
         $$0$lcssa$i62$i = $585;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $581;
      }
      ___fwritex($pad$i,$$0$lcssa$i62$i,$f);
     }
     $587 = (($$pre319$i) - ($0))|0;
     ___fwritex($buf$i,$587,$f);
     $588 = $497;
     $589 = (($8) - ($588))|0;
     $590 = (($l$0$i) - ($589))|0;
     $591 = (($590) - ($587))|0;
     $592 = ($591|0)>(0);
     if ($592) {
      $593 = ($591>>>0)>(256);
      $594 = $593 ? 256 : $591;
      _memset(($pad$i|0),48,($594|0))|0;
      $595 = ($591>>>0)>(255);
      if ($595) {
       $$01$i66$i = $591;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $596 = (($$01$i66$i) + -256)|0;
        $597 = ($596>>>0)>(255);
        if ($597) {
         $$01$i66$i = $596;
        } else {
         $$0$lcssa$i68$i = $596;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $591;
      }
      ___fwritex($pad$i,$$0$lcssa$i68$i,$f);
     }
     ___fwritex($497,$589,$f);
     $598 = ($571|0)==(8192);
     $or$cond$i72$i = $598 & $573;
     if ($or$cond$i72$i) {
      $599 = (($w$1) - ($570))|0;
      $600 = ($599>>>0)>(256);
      $601 = $600 ? 256 : $599;
      _memset(($pad$i|0),32,($601|0))|0;
      $602 = ($599>>>0)>(255);
      if ($602) {
       $$01$i73$i = $599;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $603 = (($$01$i73$i) + -256)|0;
        $604 = ($603>>>0)>(255);
        if ($604) {
         $$01$i73$i = $603;
        } else {
         $$0$lcssa$i75$i = $603;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $599;
      }
      ___fwritex($pad$i,$$0$lcssa$i75$i,$f);
     }
     $w$18$i = $573 ? $w$1 : $570;
     $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $605 = ($p$0|0)<(0);
    $$p$i = $605 ? 6 : $p$0;
    if ($437) {
     $606 = $436 * 268435456.0;
     $607 = HEAP32[$e2$i>>2]|0;
     $608 = (($607) + -28)|0;
     HEAP32[$e2$i>>2] = $608;
     $$3$i = $606;$610 = $608;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $436;$610 = $$pre$i;
    }
    $609 = ($610|0)<(0);
    $$31$i = $609 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $611 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $611;
     $612 = (($z$0$i) + 4|0);
     $613 = (+($611>>>0));
     $614 = $$4$i - $613;
     $615 = $614 * 1.0E+9;
     $616 = $615 != 0.0;
     if ($616) {
      $$4$i = $615;$z$0$i = $612;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $617 = ($$pr$i|0)>(0);
    if ($617) {
     $619 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $612;
     while(1) {
      $618 = ($619|0)>(29);
      $620 = $618 ? 29 : $619;
      $d$0254$i = (($z$1262$i) + -4|0);
      $621 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($621) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $622 = HEAP32[$d$0256$i>>2]|0;
         $623 = (_bitshift64Shl(($622|0),0,($620|0))|0);
         $624 = tempRet0;
         $625 = (_i64Add(($623|0),($624|0),($carry$0255$i|0),0)|0);
         $626 = tempRet0;
         $627 = (___uremdi3(($625|0),($626|0),1000000000,0)|0);
         $628 = tempRet0;
         HEAP32[$d$0256$i>>2] = $627;
         $629 = (___udivdi3(($625|0),($626|0),1000000000,0)|0);
         $630 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $631 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($631) {
          break;
         } else {
          $carry$0255$i = $629;$d$0256$i = $d$0$i;
         }
        }
        $632 = ($629|0)==(0);
        if ($632) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $633 = (($a$1263$i) + -4|0);
        HEAP32[$633>>2] = $629;
        $a$2$ph$i = $633;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $634 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($634)) {
        break;
       }
       $635 = (($z$2$i) + -4|0);
       $636 = HEAP32[$635>>2]|0;
       $637 = ($636|0)==(0);
       if ($637) {
        $z$2$i = $635;
       } else {
        break;
       }
      }
      $638 = HEAP32[$e2$i>>2]|0;
      $639 = (($638) - ($620))|0;
      HEAP32[$e2$i>>2] = $639;
      $640 = ($639|0)>(0);
      if ($640) {
       $619 = $639;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $639;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $612;
    }
    $641 = ($$pr146$i|0)<(0);
    L254: do {
     if ($641) {
      $642 = (($$p$i) + 25)|0;
      $643 = (($642|0) / 9)&-1;
      $644 = (($643) + 1)|0;
      $645 = ($440|0)==(102);
      if ($645) {
       $646 = $$31$i;
       $647 = (($$31$i) + ($644<<2)|0);
       $649 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $648 = (0 - ($649))|0;
        $650 = ($648|0)>(9);
        $$20$us$i = $650 ? 9 : $648;
        $651 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($651) {
          $676 = 1 << $$20$us$i;
          $670 = (($676) + -1)|0;
          $673 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $668 = HEAP32[$d$1242$us$i>>2]|0;
           $669 = $668 & $670;
           $671 = $668 >>> $$20$us$i;
           $672 = (($671) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $672;
           $659 = Math_imul($669, $673)|0;
           $674 = (($d$1242$us$i) + 4|0);
           $675 = ($674>>>0)<($z$3248$us$i>>>0);
           if ($675) {
            $carry3$0243$us$i = $659;$d$1242$us$i = $674;
           } else {
            break;
           }
          }
          $655 = HEAP32[$a$3249$us$i>>2]|0;
          $656 = ($655|0)==(0);
          $657 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $656 ? $657 : $a$3249$us$i;
          $658 = ($659|0)==(0);
          if ($658) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $660 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $659;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $660;
         } else {
          $652 = HEAP32[$a$3249$us$i>>2]|0;
          $653 = ($652|0)==(0);
          $654 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $653 ? $654 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $661 = $z$4$us$i;
        $662 = (($661) - ($646))|0;
        $663 = $662 >> 2;
        $664 = ($663|0)>($644|0);
        $$z$4$us$i = $664 ? $647 : $z$4$us$i;
        $665 = HEAP32[$e2$i>>2]|0;
        $666 = (($665) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $666;
        $667 = ($666|0)<(0);
        if ($667) {
         $649 = $666;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L254;
        }
       }
      } else {
       $678 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $677 = (0 - ($678))|0;
       $679 = ($677|0)>(9);
       $$20$i = $679 ? 9 : $677;
       $680 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($680) {
         $684 = 1 << $$20$i;
         $685 = (($684) + -1)|0;
         $686 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $687 = HEAP32[$d$1242$i>>2]|0;
          $688 = $687 & $685;
          $689 = $687 >>> $$20$i;
          $690 = (($689) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $690;
          $691 = Math_imul($688, $686)|0;
          $692 = (($d$1242$i) + 4|0);
          $693 = ($692>>>0)<($z$3248$i>>>0);
          if ($693) {
           $carry3$0243$i = $691;$d$1242$i = $692;
          } else {
           break;
          }
         }
         $694 = HEAP32[$a$3249$i>>2]|0;
         $695 = ($694|0)==(0);
         $696 = (($a$3249$i) + 4|0);
         $$a$3$i = $695 ? $696 : $a$3249$i;
         $697 = ($691|0)==(0);
         if ($697) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $698 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $691;
         $$a$3325$i = $$a$3$i;$z$4$i = $698;
        } else {
         $681 = HEAP32[$a$3249$i>>2]|0;
         $682 = ($681|0)==(0);
         $683 = (($a$3249$i) + 4|0);
         $$a$3324$i = $682 ? $683 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $699 = $z$4$i;
       $700 = $$a$3325$i;
       $701 = (($699) - ($700))|0;
       $702 = $701 >> 2;
       $703 = ($702|0)>($644|0);
       if ($703) {
        $704 = (($$a$3325$i) + ($644<<2)|0);
        $z$5$i = $704;
       } else {
        $z$5$i = $z$4$i;
       }
       $705 = HEAP32[$e2$i>>2]|0;
       $706 = (($705) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $706;
       $707 = ($706|0)<(0);
       if ($707) {
        $678 = $706;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $708 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $709 = $$31$i;
    do {
     if ($708) {
      $710 = $a$3$lcssa$i;
      $711 = (($709) - ($710))|0;
      $712 = $711 >> 2;
      $713 = ($712*9)|0;
      $714 = HEAP32[$a$3$lcssa$i>>2]|0;
      $715 = ($714>>>0)<(10);
      if ($715) {
       $e$1$i = $713;
       break;
      } else {
       $e$0238$i = $713;$i$0237$i = 10;
      }
      while(1) {
       $716 = ($i$0237$i*10)|0;
       $717 = (($e$0238$i) + 1)|0;
       $718 = ($714>>>0)<($716>>>0);
       if ($718) {
        $e$1$i = $717;
        break;
       } else {
        $e$0238$i = $717;$i$0237$i = $716;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $719 = ($440|0)!=(102);
    $720 = $719 ? $e$1$i : 0;
    $721 = (($$p$i) - ($720))|0;
    $722 = ($440|0)==(103);
    $723 = ($$p$i|0)!=(0);
    $$21$i = $722 & $723;
    $$neg151$i = $$21$i << 31 >> 31;
    $724 = (($721) + ($$neg151$i))|0;
    $725 = $z$3$lcssa$i;
    $726 = (($725) - ($709))|0;
    $727 = $726 >> 2;
    $728 = ($727*9)|0;
    $729 = (($728) + -9)|0;
    $730 = ($724|0)<($729|0);
    if ($730) {
     $731 = (($724) + 9216)|0;
     $732 = (($731|0) / 9)&-1;
     $$sum$i = (($732) + -1023)|0;
     $733 = (($$31$i) + ($$sum$i<<2)|0);
     $734 = (($731|0) % 9)&-1;
     $j$0229$i = (($734) + 1)|0;
     $735 = ($j$0229$i|0)<(9);
     if ($735) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $736 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $736;
        break;
       } else {
        $i$1230$i = $736;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $737 = HEAP32[$733>>2]|0;
     $738 = (($737>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $739 = ($738|0)==(0);
     if ($739) {
      $$sum15$i = (($732) + -1022)|0;
      $740 = (($$31$i) + ($$sum15$i<<2)|0);
      $741 = ($740|0)==($z$3$lcssa$i|0);
      if ($741) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $733;$e$3$i = $e$1$i;
      } else {
       label = 246;
      }
     } else {
      label = 246;
     }
     do {
      if ((label|0) == 246) {
       label = 0;
       $742 = (($737>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $743 = $742 & 1;
       $744 = ($743|0)==(0);
       $$22$i = $744 ? 9007199254740992.0 : 9007199254740994.0;
       $745 = (($i$1$lcssa$i|0) / 2)&-1;
       $746 = ($738>>>0)<($745>>>0);
       do {
        if ($746) {
         $small$0$i = 0.5;
        } else {
         $747 = ($738|0)==($745|0);
         if ($747) {
          $$sum16$i = (($732) + -1022)|0;
          $748 = (($$31$i) + ($$sum16$i<<2)|0);
          $749 = ($748|0)==($z$3$lcssa$i|0);
          if ($749) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $750 = ($pl$0$i|0)==(0);
       do {
        if ($750) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $751 = HEAP8[$prefix$0$i>>0]|0;
         $752 = ($751<<24>>24)==(45);
         if (!($752)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $753 = $$22$i * -1.0;
         $754 = $small$0$i * -1.0;
         $round6$1$i = $753;$small$1$i = $754;
        }
       } while(0);
       $755 = (($737) - ($738))|0;
       HEAP32[$733>>2] = $755;
       $756 = $round6$1$i + $small$1$i;
       $757 = $756 != $round6$1$i;
       if (!($757)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $733;$e$3$i = $e$1$i;
        break;
       }
       $758 = (($755) + ($i$1$lcssa$i))|0;
       HEAP32[$733>>2] = $758;
       $759 = ($758>>>0)>(999999999);
       if ($759) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $733;
        while(1) {
         $760 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $761 = ($760>>>0)<($a$5223$i>>>0);
         if ($761) {
          $762 = (($a$5223$i) + -4|0);
          HEAP32[$762>>2] = 0;
          $a$6$i = $762;
         } else {
          $a$6$i = $a$5223$i;
         }
         $763 = HEAP32[$760>>2]|0;
         $764 = (($763) + 1)|0;
         HEAP32[$760>>2] = $764;
         $765 = ($764>>>0)>(999999999);
         if ($765) {
          $a$5223$i = $a$6$i;$d$2222$i = $760;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $760;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $733;
       }
       $766 = $a$5$lcssa$i;
       $767 = (($709) - ($766))|0;
       $768 = $767 >> 2;
       $769 = ($768*9)|0;
       $770 = HEAP32[$a$5$lcssa$i>>2]|0;
       $771 = ($770>>>0)<(10);
       if ($771) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $769;
        break;
       } else {
        $e$2218$i = $769;$i$2217$i = 10;
       }
       while(1) {
        $772 = ($i$2217$i*10)|0;
        $773 = (($e$2218$i) + 1)|0;
        $774 = ($770>>>0)<($772>>>0);
        if ($774) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $773;
         break;
        } else {
         $e$2218$i = $773;$i$2217$i = $772;
        }
       }
      }
     } while(0);
     $775 = (($d$3$i) + 4|0);
     $776 = ($z$3$lcssa$i>>>0)>($775>>>0);
     $$z$3$i = $776 ? $775 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $777 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $778 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($778)) {
      $$lcssa300$i = 0;
      break;
     }
     $779 = (($z$6$i) + -4|0);
     $780 = HEAP32[$779>>2]|0;
     $781 = ($780|0)==(0);
     if ($781) {
      $z$6$i = $779;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($722) {
      $782 = ($$p$i|0)==(0);
      $783 = $782&1;
      $$$p$i = (($783) + ($$p$i))|0;
      $784 = ($$$p$i|0)>($e$4$ph$i|0);
      $785 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $784 & $785;
      if ($or$cond4$i) {
       $786 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $787 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $786;$$210$i = $787;
      } else {
       $788 = (($t$0) + -2)|0;
       $789 = (($$$p$i) + -1)|0;
       $$013$i = $788;$$210$i = $789;
      }
      $790 = $fl$1$ & 8;
      $791 = ($790|0)==(0);
      if (!($791)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $792 = (($z$6$i) + -4|0);
        $793 = HEAP32[$792>>2]|0;
        $794 = ($793|0)==(0);
        if ($794) {
         $j$2$i = 9;
         break;
        }
        $795 = (($793>>>0) % 10)&-1;
        $796 = ($795|0)==(0);
        if ($796) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $797 = ($i$3209$i*10)|0;
         $798 = (($j$1210$i) + 1)|0;
         $799 = (($793>>>0) % ($797>>>0))&-1;
         $800 = ($799|0)==(0);
         if ($800) {
          $i$3209$i = $797;$j$1210$i = $798;
         } else {
          $j$2$i = $798;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $801 = $$013$i | 32;
      $802 = ($801|0)==(102);
      $803 = $z$6$i;
      $804 = (($803) - ($709))|0;
      $805 = $804 >> 2;
      $806 = ($805*9)|0;
      $807 = (($806) + -9)|0;
      if ($802) {
       $808 = (($807) - ($j$2$i))|0;
       $809 = ($808|0)<(0);
       $$23$i = $809 ? 0 : $808;
       $810 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $810 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $811 = (($807) + ($e$4$ph$i))|0;
       $812 = (($811) - ($j$2$i))|0;
       $813 = ($812|0)<(0);
       $$25$i = $813 ? 0 : $812;
       $814 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $814 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $815 = ($$311$i|0)!=(0);
    if ($815) {
     $819 = 1;
    } else {
     $816 = $fl$1$ & 8;
     $817 = ($816|0)!=(0);
     $819 = $817;
    }
    $818 = $819&1;
    $820 = $$114$i | 32;
    $821 = ($820|0)==(102);
    if ($821) {
     $822 = ($e$4$ph$i|0)>(0);
     $823 = $822 ? $e$4$ph$i : 0;
     $$pn$i = $823;$estr$2$i = 0;
    } else {
     $824 = ($e$4$ph$i|0)<(0);
     $825 = $824 ? $777 : $e$4$ph$i;
     $826 = ($825|0)<(0);
     if ($826) {
      $827 = ($825|0)<(0);
      $828 = $827 << 31 >> 31;
      $$05$i79$i = $6;$829 = $825;$830 = $828;
      while(1) {
       $831 = (___uremdi3(($829|0),($830|0),10,0)|0);
       $832 = tempRet0;
       $833 = $831 | 48;
       $834 = $833&255;
       $835 = (($$05$i79$i) + -1|0);
       HEAP8[$835>>0] = $834;
       $836 = (___udivdi3(($829|0),($830|0),10,0)|0);
       $837 = tempRet0;
       $838 = ($830>>>0)>(9);
       $839 = ($830|0)==(9);
       $840 = ($829>>>0)>(4294967295);
       $841 = $839 & $840;
       $842 = $838 | $841;
       if ($842) {
        $$05$i79$i = $835;$829 = $836;$830 = $837;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $835;$$01$lcssa$off0$i85$i = $836;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $825;
     }
     $843 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($843) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $844 = (($y$03$i86$i>>>0) % 10)&-1;
       $845 = $844 | 48;
       $846 = $845&255;
       $847 = (($$12$i87$i) + -1|0);
       HEAP8[$847>>0] = $846;
       $848 = (($y$03$i86$i>>>0) / 10)&-1;
       $849 = ($y$03$i86$i>>>0)<(10);
       if ($849) {
        $estr$1$ph$i = $847;
        break;
       } else {
        $$12$i87$i = $847;$y$03$i86$i = $848;
       }
      }
     }
     $850 = $estr$1$ph$i;
     $851 = (($8) - ($850))|0;
     $852 = ($851|0)<(2);
     if ($852) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $853 = (($estr$1200$i) + -1|0);
       HEAP8[$853>>0] = 48;
       $854 = $853;
       $855 = (($8) - ($854))|0;
       $856 = ($855|0)<(2);
       if ($856) {
        $estr$1200$i = $853;
       } else {
        $estr$1$lcssa$i = $853;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $857 = $e$4$ph$i >> 31;
     $858 = $857 & 2;
     $859 = (($858) + 43)|0;
     $860 = $859&255;
     $861 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$861>>0] = $860;
     $862 = $$114$i&255;
     $863 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$863>>0] = $862;
     $864 = $863;
     $865 = (($8) - ($864))|0;
     $$pn$i = $865;$estr$2$i = $863;
    }
    $866 = (($pl$0$i) + 1)|0;
    $867 = (($866) + ($$311$i))|0;
    $l$1$i = (($867) + ($818))|0;
    $868 = (($l$1$i) + ($$pn$i))|0;
    $869 = $fl$1$ & 73728;
    $870 = ($869|0)==(0);
    $871 = ($868|0)<($w$1|0);
    $or$cond$i93$i = $870 & $871;
    if ($or$cond$i93$i) {
     $872 = (($w$1) - ($868))|0;
     $873 = ($872>>>0)>(256);
     $874 = $873 ? 256 : $872;
     _memset(($pad$i|0),32,($874|0))|0;
     $875 = ($872>>>0)>(255);
     if ($875) {
      $$01$i94$i = $872;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $876 = (($$01$i94$i) + -256)|0;
       $877 = ($876>>>0)>(255);
       if ($877) {
        $$01$i94$i = $876;
       } else {
        $$0$lcssa$i96$i = $876;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $872;
     }
     ___fwritex($pad$i,$$0$lcssa$i96$i,$f);
    }
    ___fwritex($prefix$0$i,$pl$0$i,$f);
    $878 = ($869|0)==(65536);
    $or$cond$i100$i = $878 & $871;
    if ($or$cond$i100$i) {
     $879 = (($w$1) - ($868))|0;
     $880 = ($879>>>0)>(256);
     $881 = $880 ? 256 : $879;
     _memset(($pad$i|0),48,($881|0))|0;
     $882 = ($879>>>0)>(255);
     if ($882) {
      $$01$i101$i = $879;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $883 = (($$01$i101$i) + -256)|0;
       $884 = ($883>>>0)>(255);
       if ($884) {
        $$01$i101$i = $883;
       } else {
        $$0$lcssa$i103$i = $883;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $879;
     }
     ___fwritex($pad$i,$$0$lcssa$i103$i,$f);
    }
    do {
     if ($821) {
      $885 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $885 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $886 = HEAP32[$d$4183$i>>2]|0;
       $887 = ($886|0)==(0);
       if ($887) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $886;
        while(1) {
         $888 = (($y$03$i109$i>>>0) % 10)&-1;
         $889 = $888 | 48;
         $890 = $889&255;
         $891 = (($$12$i110$i) + -1|0);
         HEAP8[$891>>0] = $890;
         $892 = (($y$03$i109$i>>>0) / 10)&-1;
         $893 = ($y$03$i109$i>>>0)<(10);
         if ($893) {
          $$1$lcssa$i112$i = $891;
          break;
         } else {
          $$12$i110$i = $891;$y$03$i109$i = $892;
         }
        }
       }
       $894 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($894) {
         $898 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($898)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $895 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($895) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $896 = (($s7$0180$i) + -1|0);
          HEAP8[$896>>0] = 48;
          $897 = ($896>>>0)>($buf$i>>>0);
          if ($897) {
           $s7$0180$i = $896;
          } else {
           $s7$1$i = $896;
           break;
          }
         }
        }
       } while(0);
       $899 = $s7$1$i;
       $900 = (($14) - ($899))|0;
       ___fwritex($s7$1$i,$900,$f);
       $901 = (($d$4183$i) + 4|0);
       $902 = ($901>>>0)>($$31$i>>>0);
       if ($902) {
        break;
       } else {
        $d$4183$i = $901;
       }
      }
      if (!($815)) {
       $903 = $fl$1$ & 8;
       $904 = ($903|0)==(0);
       if ($904) {
        break;
       }
      }
      ___fwritex(22776,1,$f);
      $905 = ($901>>>0)<($z$6$i>>>0);
      $906 = ($$311$i|0)>(0);
      $or$cond28173$i = $905 & $906;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $901;
       while(1) {
        $907 = HEAP32[$d$5174$i>>2]|0;
        $908 = ($907|0)==(0);
        if ($908) {
         $s8$0169$i = $13;
         label = 313;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $907;
         while(1) {
          $909 = (($y$03$i118$i>>>0) % 10)&-1;
          $910 = $909 | 48;
          $911 = $910&255;
          $912 = (($$12$i119$i) + -1|0);
          HEAP8[$912>>0] = $911;
          $913 = (($y$03$i118$i>>>0) / 10)&-1;
          $914 = ($y$03$i118$i>>>0)<(10);
          if ($914) {
           break;
          } else {
           $$12$i119$i = $912;$y$03$i118$i = $913;
          }
         }
         $915 = ($912>>>0)>($buf$i>>>0);
         if ($915) {
          $s8$0169$i = $912;
          label = 313;
         } else {
          $s8$0$lcssa$i = $912;
         }
        }
        if ((label|0) == 313) {
         while(1) {
          label = 0;
          $916 = (($s8$0169$i) + -1|0);
          HEAP8[$916>>0] = 48;
          $917 = ($916>>>0)>($buf$i>>>0);
          if ($917) {
           $s8$0169$i = $916;
           label = 313;
          } else {
           $s8$0$lcssa$i = $916;
           break;
          }
         }
        }
        $918 = ($$412175$i|0)>(9);
        $919 = $918 ? 9 : $$412175$i;
        ___fwritex($s8$0$lcssa$i,$919,$f);
        $920 = (($d$5174$i) + 4|0);
        $921 = (($$412175$i) + -9)|0;
        $922 = ($920>>>0)<($z$6$i>>>0);
        $923 = ($921|0)>(0);
        $or$cond28$i = $922 & $923;
        if ($or$cond28$i) {
         $$412175$i = $921;$d$5174$i = $920;
        } else {
         $$412$lcssa$i = $921;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $924 = ($$412$lcssa$i|0)>(0);
      if (!($924)) {
       break;
      }
      $925 = ($$412$lcssa$i>>>0)>(256);
      $926 = $925 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($926|0))|0;
      $927 = ($$412$lcssa$i>>>0)>(255);
      if ($927) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $928 = (($$01$i125$i) + -256)|0;
        $929 = ($928>>>0)>(255);
        if ($929) {
         $$01$i125$i = $928;
        } else {
         $$0$lcssa$i127$i = $928;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      ___fwritex($pad$i,$$0$lcssa$i127$i,$f);
     } else {
      $930 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $930;
      $931 = ($$311$i|0)>(-1);
      do {
       if ($931) {
        $932 = $fl$1$ & 8;
        $$not$i = ($932|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $933 = HEAP32[$d$6192$i>>2]|0;
         $934 = ($933|0)==(0);
         if ($934) {
          label = 324;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $933;
          while(1) {
           $935 = (($y$03$i133$i>>>0) % 10)&-1;
           $936 = $935 | 48;
           $937 = $936&255;
           $938 = (($$12$i134$i) + -1|0);
           HEAP8[$938>>0] = $937;
           $939 = (($y$03$i133$i>>>0) / 10)&-1;
           $940 = ($y$03$i133$i>>>0)<(10);
           if ($940) {
            break;
           } else {
            $$12$i134$i = $938;$y$03$i133$i = $939;
           }
          }
          $941 = ($938|0)==($13|0);
          if ($941) {
           label = 324;
          } else {
           $s9$0$i = $938;
          }
         }
         if ((label|0) == 324) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $942 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($942) {
           $946 = (($s9$0$i) + 1|0);
           ___fwritex($s9$0$i,1,$f);
           $947 = ($$5193$i|0)>(0);
           $brmerge$i = $947 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $946;
            break;
           }
           ___fwritex(22776,1,$f);
           $s9$2$i = $946;
          } else {
           $943 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($943) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $944 = (($s9$1188$i) + -1|0);
            HEAP8[$944>>0] = 48;
            $945 = ($944>>>0)>($buf$i>>>0);
            if ($945) {
             $s9$1188$i = $944;
            } else {
             $s9$2$i = $944;
             break;
            }
           }
          }
         } while(0);
         $948 = $s9$2$i;
         $949 = (($14) - ($948))|0;
         $950 = ($949|0)<($$5193$i|0);
         $$$5$i = $950 ? $949 : $$5193$i;
         ___fwritex($s9$2$i,$$$5$i,$f);
         $951 = (($$5193$i) - ($949))|0;
         $952 = (($d$6192$i) + 4|0);
         $953 = ($952>>>0)<($z$6$$i>>>0);
         $954 = ($951|0)>(-1);
         $or$cond29$i = $953 & $954;
         if ($or$cond29$i) {
          $$5193$i = $951;$d$6192$i = $952;
         } else {
          break;
         }
        }
        $955 = ($951|0)>(0);
        if (!($955)) {
         break;
        }
        $956 = ($951>>>0)>(256);
        $957 = $956 ? 256 : $951;
        _memset(($pad$i|0),48,($957|0))|0;
        $958 = ($951>>>0)>(255);
        if ($958) {
         $$01$i140$i = $951;
         while(1) {
          ___fwritex($pad$i,256,$f);
          $959 = (($$01$i140$i) + -256)|0;
          $960 = ($959>>>0)>(255);
          if ($960) {
           $$01$i140$i = $959;
          } else {
           $$0$lcssa$i142$i = $959;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $951;
        }
        ___fwritex($pad$i,$$0$lcssa$i142$i,$f);
       }
      } while(0);
      $961 = $estr$2$i;
      $962 = (($8) - ($961))|0;
      ___fwritex($estr$2$i,$962,$f);
     }
    } while(0);
    $963 = ($869|0)==(8192);
    $or$cond$i$i = $963 & $871;
    if ($or$cond$i$i) {
     $964 = (($w$1) - ($868))|0;
     $965 = ($964>>>0)>(256);
     $966 = $965 ? 256 : $964;
     _memset(($pad$i|0),32,($966|0))|0;
     $967 = ($964>>>0)>(255);
     if ($967) {
      $$01$i$i = $964;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $968 = (($$01$i$i) + -256)|0;
       $969 = ($968>>>0)>(255);
       if ($969) {
        $$01$i$i = $968;
       } else {
        $$0$lcssa$i$i = $968;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $964;
     }
     ___fwritex($pad$i,$$0$lcssa$i$i,$f);
    }
    $w$30$i = $871 ? $w$1 : $868;
    $1070 = $229;$1071 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1078 = $229;$1079 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 22680;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22680;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (22760 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22680;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (22680 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = $a$1;
    $326 = $325 & 3;
    $327 = ($326|0)==(0);
    $328 = ($p$0|0)==(0);
    $or$cond12$i = $327 | $328;
    L455: do {
     if ($or$cond12$i) {
      $$0$lcssa$i3 = $p$0;$$lcssa$i = $328;$s$0$lcssa$i = $a$1;
      label = 102;
     } else {
      $$013$i1 = $p$0;$s$014$i = $a$1;
      while(1) {
       $329 = HEAP8[$s$014$i>>0]|0;
       $330 = ($329<<24>>24)==(0);
       if ($330) {
        $$3$i7 = $$013$i1;$s$2$i = $s$014$i;
        break L455;
       }
       $331 = (($s$014$i) + 1|0);
       $332 = (($$013$i1) + -1)|0;
       $333 = $331;
       $334 = $333 & 3;
       $335 = ($334|0)==(0);
       $336 = ($332|0)==(0);
       $or$cond$i2 = $335 | $336;
       if ($or$cond$i2) {
        $$0$lcssa$i3 = $332;$$lcssa$i = $336;$s$0$lcssa$i = $331;
        label = 102;
        break;
       } else {
        $$013$i1 = $332;$s$014$i = $331;
       }
      }
     }
    } while(0);
    L459: do {
     if ((label|0) == 102) {
      label = 0;
      if ($$lcssa$i) {
       $$3$i7 = 0;$s$2$i = $s$0$lcssa$i;
      } else {
       $$pre24 = HEAP8[$s$0$lcssa$i>>0]|0;
       $phitmp = ($$pre24<<24>>24)==(0);
       if ($phitmp) {
        $$3$i7 = $$0$lcssa$i3;$s$2$i = $s$0$lcssa$i;
       } else {
        $337 = ($$0$lcssa$i3>>>0)>(3);
        L463: do {
         if ($337) {
          $$17$i = $$0$lcssa$i3;$w$08$i = $s$0$lcssa$i;
          while(1) {
           $338 = HEAP32[$w$08$i>>2]|0;
           $339 = (($338) + -16843009)|0;
           $340 = $338 & -2139062144;
           $341 = $340 ^ -2139062144;
           $342 = $341 & $339;
           $343 = ($342|0)==(0);
           if (!($343)) {
            $$1$lcssa$i = $$17$i;$w$0$lcssa$i = $w$08$i;
            break L463;
           }
           $344 = (($w$08$i) + 4|0);
           $345 = (($$17$i) + -4)|0;
           $346 = ($345>>>0)>(3);
           if ($346) {
            $$17$i = $345;$w$08$i = $344;
           } else {
            $$1$lcssa$i = $345;$w$0$lcssa$i = $344;
            break;
           }
          }
         } else {
          $$1$lcssa$i = $$0$lcssa$i3;$w$0$lcssa$i = $s$0$lcssa$i;
         }
        } while(0);
        $347 = ($$1$lcssa$i|0)==(0);
        if ($347) {
         $$3$i7 = 0;$s$2$i = $w$0$lcssa$i;
        } else {
         $$24$i = $$1$lcssa$i;$s$15$i = $w$0$lcssa$i;
         while(1) {
          $348 = HEAP8[$s$15$i>>0]|0;
          $349 = ($348<<24>>24)==(0);
          if ($349) {
           $$3$i7 = $$24$i;$s$2$i = $s$15$i;
           break L459;
          }
          $350 = (($s$15$i) + 1|0);
          $351 = (($$24$i) + -1)|0;
          $352 = ($351|0)==(0);
          if ($352) {
           $$3$i7 = 0;$s$2$i = $350;
           break;
          } else {
           $$24$i = $351;$s$15$i = $350;
          }
         }
        }
       }
      }
     }
    } while(0);
    $353 = ($$3$i7|0)!=(0);
    $354 = $353 ? $s$2$i : 0;
    $355 = ($354|0)==(0|0);
    if ($355) {
     $356 = (($a$1) + ($p$0)|0);
     $1078 = $229;$1079 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 22680;$z$2 = $356;
     break;
    } else {
     $357 = $354;
     $358 = (($357) - ($325))|0;
     $1078 = $229;$1079 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $358;$pl$2 = 0;$prefix$2 = 22680;$z$2 = $354;
     break;
    }
   }
   else if ((label|0) == 115) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1080;
    while(1) {
     $364 = HEAP32[$ws$0169>>2]|0;
     $365 = ($364|0)==(0);
     if ($365) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $366 = (_wcrtomb($mb,$364)|0);
     $367 = ($366|0)>(-1);
     if (!($367)) {
      $$0 = -1;
      label = 376;
      break L1;
     }
     $368 = (($p$4296) - ($i$0168))|0;
     $369 = ($366>>>0)>($368>>>0);
     $362 = (($366) + ($i$0168))|0;
     if ($369) {
      $1082 = $1080;$1083 = $1081;$i$0166 = $i$0168;
      label = 122;
      break L445;
     }
     $361 = ($362>>>0)<($p$4296>>>0);
     if (!($361)) {
      $i$0$lcssa = $362;$l$1$lcssa = $366;
      break;
     }
     $363 = (($ws$0169) + 4|0);
     $i$0168 = $362;$l$1167 = $366;$ws$0169 = $363;
    }
    $370 = ($l$1$lcssa|0)<(0);
    if ($370) {
     $$0 = -1;
     label = 376;
     break L1;
    } else {
     $1082 = $1080;$1083 = $1081;$i$0166 = $i$0$lcssa;
     label = 122;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1078 = $311;$1079 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1078 = $311;$1079 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 122) {
   label = 0;
   $371 = $fl$1$ & 73728;
   $372 = ($371|0)==(0);
   $373 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $372 & $373;
   if ($or$cond$i56) {
    $374 = (($w$1) - ($i$0166))|0;
    $375 = ($374>>>0)>(256);
    $376 = $375 ? 256 : $374;
    _memset(($pad$i|0),32,($376|0))|0;
    $377 = ($374>>>0)>(255);
    if ($377) {
     $$01$i57 = $374;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $378 = (($$01$i57) + -256)|0;
      $379 = ($378>>>0)>(255);
      if ($379) {
       $$01$i57 = $378;
      } else {
       $$0$lcssa$i59 = $378;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $374;
    }
    ___fwritex($pad$i,$$0$lcssa$i59,$f);
   }
   $380 = ($i$0166|0)==(0);
   L499: do {
    if (!($380)) {
     $i$1174 = 0;$ws$1175 = $1082;
     while(1) {
      $381 = HEAP32[$ws$1175>>2]|0;
      $382 = ($381|0)==(0);
      if ($382) {
       break L499;
      }
      $383 = (_wcrtomb($mb,$381)|0);
      $384 = (($383) + ($i$1174))|0;
      $385 = ($384|0)>($i$0166|0);
      if ($385) {
       break L499;
      }
      ___fwritex($mb,$383,$f);
      $386 = ($384>>>0)<($i$0166>>>0);
      if (!($386)) {
       break L499;
      }
      $387 = (($ws$1175) + 4|0);
      $i$1174 = $384;$ws$1175 = $387;
     }
    }
   } while(0);
   $388 = ($371|0)==(8192);
   $or$cond$i63 = $388 & $373;
   if ($or$cond$i63) {
    $389 = (($w$1) - ($i$0166))|0;
    $390 = ($389>>>0)>(256);
    $391 = $390 ? 256 : $389;
    _memset(($pad$i|0),32,($391|0))|0;
    $392 = ($389>>>0)>(255);
    if ($392) {
     $$01$i64 = $389;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $393 = (($$01$i64) + -256)|0;
      $394 = ($393>>>0)>(255);
      if ($394) {
       $$01$i64 = $393;
      } else {
       $$0$lcssa$i66 = $393;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $389;
    }
    ___fwritex($pad$i,$$0$lcssa$i66,$f);
   }
   $395 = $373 ? $w$1 : $i$0166;
   $1070 = $229;$1071 = $1083;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $395;$l10n$0 = $l10n$3;
   continue;
  }
  $970 = $z$2;
  $971 = $a$2;
  $972 = (($970) - ($971))|0;
  $973 = ($p$5|0)<($972|0);
  $$p$5 = $973 ? $972 : $p$5;
  $974 = (($pl$2) + ($$p$5))|0;
  $975 = ($w$1|0)<($974|0);
  $w$2 = $975 ? $974 : $w$1;
  $976 = $fl$6 & 73728;
  $977 = ($976|0)==(0);
  $978 = ($974|0)<($w$2|0);
  $or$cond$i73 = $977 & $978;
  if ($or$cond$i73) {
   $979 = (($w$2) - ($974))|0;
   $980 = ($979>>>0)>(256);
   $981 = $980 ? 256 : $979;
   _memset(($pad$i|0),32,($981|0))|0;
   $982 = ($979>>>0)>(255);
   if ($982) {
    $$01$i74 = $979;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $983 = (($$01$i74) + -256)|0;
     $984 = ($983>>>0)>(255);
     if ($984) {
      $$01$i74 = $983;
     } else {
      $$0$lcssa$i76 = $983;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $979;
   }
   ___fwritex($pad$i,$$0$lcssa$i76,$f);
  }
  ___fwritex($prefix$2,$pl$2,$f);
  $985 = ($976|0)==(65536);
  $or$cond$i49 = $985 & $978;
  if ($or$cond$i49) {
   $986 = (($w$2) - ($974))|0;
   $987 = ($986>>>0)>(256);
   $988 = $987 ? 256 : $986;
   _memset(($pad$i|0),48,($988|0))|0;
   $989 = ($986>>>0)>(255);
   if ($989) {
    $$01$i50 = $986;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $990 = (($$01$i50) + -256)|0;
     $991 = ($990>>>0)>(255);
     if ($991) {
      $$01$i50 = $990;
     } else {
      $$0$lcssa$i52 = $990;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $986;
   }
   ___fwritex($pad$i,$$0$lcssa$i52,$f);
  }
  $992 = ($972|0)<($$p$5|0);
  if ($992) {
   $993 = (($$p$5) - ($972))|0;
   $994 = ($993>>>0)>(256);
   $995 = $994 ? 256 : $993;
   _memset(($pad$i|0),48,($995|0))|0;
   $996 = ($993>>>0)>(255);
   if ($996) {
    $$01$i35 = $993;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $997 = (($$01$i35) + -256)|0;
     $998 = ($997>>>0)>(255);
     if ($998) {
      $$01$i35 = $997;
     } else {
      $$0$lcssa$i37 = $997;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $993;
   }
   ___fwritex($pad$i,$$0$lcssa$i37,$f);
  }
  ___fwritex($a$2,$972,$f);
  $999 = ($976|0)==(8192);
  $or$cond$i = $999 & $978;
  if (!($or$cond$i)) {
   $1070 = $1078;$1071 = $1079;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $1000 = (($w$2) - ($974))|0;
  $1001 = ($1000>>>0)>(256);
  $1002 = $1001 ? 256 : $1000;
  _memset(($pad$i|0),32,($1002|0))|0;
  $1003 = ($1000>>>0)>(255);
  if ($1003) {
   $$01$i = $1000;
   while(1) {
    ___fwritex($pad$i,256,$f);
    $1004 = (($$01$i) + -256)|0;
    $1005 = ($1004>>>0)>(255);
    if ($1005) {
     $$01$i = $1004;
    } else {
     $$0$lcssa$i = $1004;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $1000;
  }
  ___fwritex($pad$i,$$0$lcssa$i,$f);
  $1070 = $1078;$1071 = $1079;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 357) {
  $1006 = ($f|0)==(0|0);
  if (!($1006)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $1007 = ($l10n$0|0)==(0);
  if ($1007) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $1008 = (($nl_type) + ($i$289<<2)|0);
   $1009 = HEAP32[$1008>>2]|0;
   $1010 = ($1009|0)==(0);
   if ($1010) {
    $1084 = 1;$i$388 = $i$289;
    break;
   }
   $1011 = (($nl_arg) + ($i$289<<3)|0);
   $1012 = ($1009>>>0)>(20);
   L550: do {
    if (!($1012)) {
     do {
      switch ($1009|0) {
      case 9:  {
       $arglist_current60 = HEAP32[$ap>>2]|0;
       $1013 = HEAP32[$arglist_current60>>2]|0;
       $arglist_next61 = (($arglist_current60) + 4|0);
       HEAP32[$ap>>2] = $arglist_next61;
       HEAP32[$1011>>2] = $1013;
       break L550;
       break;
      }
      case 12:  {
       $arglist_current69 = HEAP32[$ap>>2]|0;
       $1026 = $arglist_current69;
       $1027 = $1026;
       $1028 = HEAP32[$1027>>2]|0;
       $1029 = (($1026) + 4)|0;
       $1030 = $1029;
       $1031 = HEAP32[$1030>>2]|0;
       $arglist_next70 = (($arglist_current69) + 8|0);
       HEAP32[$ap>>2] = $arglist_next70;
       $1032 = $1011;
       $1033 = $1032;
       HEAP32[$1033>>2] = $1028;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = $1031;
       break L550;
       break;
      }
      case 13:  {
       $arglist_current72 = HEAP32[$ap>>2]|0;
       $1036 = HEAP32[$arglist_current72>>2]|0;
       $arglist_next73 = (($arglist_current72) + 4|0);
       HEAP32[$ap>>2] = $arglist_next73;
       $1037 = $1036&65535;
       $1038 = $1037 << 16 >> 16;
       $1039 = ($1038|0)<(0);
       $1040 = $1039 << 31 >> 31;
       $1041 = $1011;
       $1042 = $1041;
       HEAP32[$1042>>2] = $1038;
       $1043 = (($1041) + 4)|0;
       $1044 = $1043;
       HEAP32[$1044>>2] = $1040;
       break L550;
       break;
      }
      case 14:  {
       $arglist_current75 = HEAP32[$ap>>2]|0;
       $1045 = HEAP32[$arglist_current75>>2]|0;
       $arglist_next76 = (($arglist_current75) + 4|0);
       HEAP32[$ap>>2] = $arglist_next76;
       $$mask1$i = $1045 & 65535;
       $1046 = $1011;
       $1047 = $1046;
       HEAP32[$1047>>2] = $$mask1$i;
       $1048 = (($1046) + 4)|0;
       $1049 = $1048;
       HEAP32[$1049>>2] = 0;
       break L550;
       break;
      }
      case 15:  {
       $arglist_current78 = HEAP32[$ap>>2]|0;
       $1050 = HEAP32[$arglist_current78>>2]|0;
       $arglist_next79 = (($arglist_current78) + 4|0);
       HEAP32[$ap>>2] = $arglist_next79;
       $1051 = $1050&255;
       $1052 = $1051 << 24 >> 24;
       $1053 = ($1052|0)<(0);
       $1054 = $1053 << 31 >> 31;
       $1055 = $1011;
       $1056 = $1055;
       HEAP32[$1056>>2] = $1052;
       $1057 = (($1055) + 4)|0;
       $1058 = $1057;
       HEAP32[$1058>>2] = $1054;
       break L550;
       break;
      }
      case 16:  {
       $arglist_current81 = HEAP32[$ap>>2]|0;
       $1059 = HEAP32[$arglist_current81>>2]|0;
       $arglist_next82 = (($arglist_current81) + 4|0);
       HEAP32[$ap>>2] = $arglist_next82;
       $$mask$i = $1059 & 255;
       $1060 = $1011;
       $1061 = $1060;
       HEAP32[$1061>>2] = $$mask$i;
       $1062 = (($1060) + 4)|0;
       $1063 = $1062;
       HEAP32[$1063>>2] = 0;
       break L550;
       break;
      }
      case 17:  {
       $arglist_current84 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current84>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current84+4>>2];$1064 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next85 = (($arglist_current84) + 8|0);
       HEAP32[$ap>>2] = $arglist_next85;
       HEAPF64[$1011>>3] = $1064;
       break L550;
       break;
      }
      case 18:  {
       $arglist_current87 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current87>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current87+4>>2];$1065 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next88 = (($arglist_current87) + 8|0);
       HEAP32[$ap>>2] = $arglist_next88;
       HEAPF64[$1011>>3] = $1065;
       break L550;
       break;
      }
      case 10:  {
       $arglist_current63 = HEAP32[$ap>>2]|0;
       $1014 = HEAP32[$arglist_current63>>2]|0;
       $arglist_next64 = (($arglist_current63) + 4|0);
       HEAP32[$ap>>2] = $arglist_next64;
       $1015 = ($1014|0)<(0);
       $1016 = $1015 << 31 >> 31;
       $1017 = $1011;
       $1018 = $1017;
       HEAP32[$1018>>2] = $1014;
       $1019 = (($1017) + 4)|0;
       $1020 = $1019;
       HEAP32[$1020>>2] = $1016;
       break L550;
       break;
      }
      case 11:  {
       $arglist_current66 = HEAP32[$ap>>2]|0;
       $1021 = HEAP32[$arglist_current66>>2]|0;
       $arglist_next67 = (($arglist_current66) + 4|0);
       HEAP32[$ap>>2] = $arglist_next67;
       $1022 = $1011;
       $1023 = $1022;
       HEAP32[$1023>>2] = $1021;
       $1024 = (($1022) + 4)|0;
       $1025 = $1024;
       HEAP32[$1025>>2] = 0;
       break L550;
       break;
      }
      default: {
       break L550;
      }
      }
     } while(0);
    }
   } while(0);
   $1066 = (($i$289) + 1)|0;
   $1067 = ($1066|0)<(10);
   if ($1067) {
    $i$289 = $1066;
   } else {
    $$0 = 1;
    label = 376;
    break;
   }
  }
  if ((label|0) == 376) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1069 = (($i$388) + 1)|0;
   if (!($1084)) {
    $$0 = -1;
    label = 376;
    break;
   }
   $1068 = ($1069|0)<(10);
   if (!($1068)) {
    $$0 = 1;
    label = 376;
    break;
   }
   $$phi$trans$insert = (($nl_type) + ($1069<<2)|0);
   $$pre23 = HEAP32[$$phi$trans$insert>>2]|0;
   $phitmp25 = ($$pre23|0)==(0);
   $1084 = $phitmp25;$i$388 = $1069;
  }
  if ((label|0) == 376) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 376) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2$i = 0, $b = 0;
 var $f = 0, $internal_buf$i = 0, $nl_arg$i = 0, $nl_type$i = 0, $ret$1$i = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 232|0;
 $nl_type$i = sp + 80|0;
 $nl_arg$i = sp;
 $internal_buf$i = sp + 256|0;
 $b = sp + 248|0;
 $f = sp + 120|0;
 dest=$f+0|0; src=22784+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 dest=$nl_type$i+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2$i>>2] = $vacopy_currentptr;
 $13 = (_printf_core(0,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
 $14 = ($13|0)<(0);
 if ($14) {
  $$0$i = -1;
 } else {
  $15 = HEAP32[$7>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $18 = HEAP32[$9>>2]|0;
   HEAP32[$9>>2] = $internal_buf$i;
   HEAP32[$12>>2] = $internal_buf$i;
   HEAP32[$8>>2] = $internal_buf$i;
   HEAP32[$7>>2] = 80;
   $19 = (($internal_buf$i) + 80|0);
   HEAP32[$11>>2] = $19;
   $20 = (_printf_core($f,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
   $21 = ($18|0)==(0|0);
   if ($21) {
    $ret$1$i = $20;
   } else {
    $22 = (($f) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    (FUNCTION_TABLE_iiii[$23 & 1023]($f,0,0)|0);
    $24 = HEAP32[$8>>2]|0;
    $25 = ($24|0)==(0|0);
    $$$i = $25 ? -1 : $20;
    HEAP32[$9>>2] = $18;
    HEAP32[$7>>2] = 0;
    HEAP32[$11>>2] = 0;
    HEAP32[$12>>2] = 0;
    HEAP32[$8>>2] = 0;
    $ret$1$i = $$$i;
   }
  } else {
   $17 = (_printf_core($f,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
   $ret$1$i = $17;
  }
  $$0$i = $ret$1$i;
 }
 $26 = ($$$02|0)==(0);
 if ($26) {
  $$0 = $$0$i;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = HEAP32[$8>>2]|0;
 $28 = HEAP32[$11>>2]|0;
 $29 = ($27|0)==($28|0);
 $30 = $29 << 31 >> 31;
 $31 = (($27) + ($30)|0);
 HEAP8[$31>>0] = 0;
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _strtold_l($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, $f$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 $4 = (($f$i$i) + 104|0);
 HEAP32[$4>>2] = 0;
 $5 = $s;
 $6 = $5 ^ -1;
 $7 = (($f$i$i) + 108|0);
 HEAP32[$7>>2] = $6;
 $8 = (($f$i$i) + 100|0);
 HEAP32[$8>>2] = (-1);
 $9 = (+___floatscan($f$i$i,2,1));
 $10 = HEAP32[$7>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = (($15) + ($10))|0;
 $17 = ($p|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return (+$9);
 }
 $18 = ($16|0)==(0);
 if ($18) {
  $20 = $s;
 } else {
  $19 = (($s) + ($16)|0);
  $20 = $19;
 }
 HEAP32[$p>>2] = $20;
 STACKTOP = sp;return (+$9);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }
  

    function jsCall_iiiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_5(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_6(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_7(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_8(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function jsCall_iiiiiiii_9(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
    }

  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function jsCall_viiiii_0(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_1(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_2(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_3(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_4(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_5(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_6(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_7(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_8(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function jsCall_viiiii_9(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0);
    }

  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&1023](a1|0);
    }
  

    function jsCall_vi_0(a1) {
      a1=a1|0;
      jsCall(0,a1|0);
    }

  

    function jsCall_vi_1(a1) {
      a1=a1|0;
      jsCall(1,a1|0);
    }

  

    function jsCall_vi_2(a1) {
      a1=a1|0;
      jsCall(2,a1|0);
    }

  

    function jsCall_vi_3(a1) {
      a1=a1|0;
      jsCall(3,a1|0);
    }

  

    function jsCall_vi_4(a1) {
      a1=a1|0;
      jsCall(4,a1|0);
    }

  

    function jsCall_vi_5(a1) {
      a1=a1|0;
      jsCall(5,a1|0);
    }

  

    function jsCall_vi_6(a1) {
      a1=a1|0;
      jsCall(6,a1|0);
    }

  

    function jsCall_vi_7(a1) {
      a1=a1|0;
      jsCall(7,a1|0);
    }

  

    function jsCall_vi_8(a1) {
      a1=a1|0;
      jsCall(8,a1|0);
    }

  

    function jsCall_vi_9(a1) {
      a1=a1|0;
      jsCall(9,a1|0);
    }

  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
    }
  

    function jsCall_vii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(0,a1|0,a2|0);
    }

  

    function jsCall_vii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(1,a1|0,a2|0);
    }

  

    function jsCall_vii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(2,a1|0,a2|0);
    }

  

    function jsCall_vii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(3,a1|0,a2|0);
    }

  

    function jsCall_vii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(4,a1|0,a2|0);
    }

  

    function jsCall_vii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(5,a1|0,a2|0);
    }

  

    function jsCall_vii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(6,a1|0,a2|0);
    }

  

    function jsCall_vii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(7,a1|0,a2|0);
    }

  

    function jsCall_vii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(8,a1|0,a2|0);
    }

  

    function jsCall_vii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(9,a1|0,a2|0);
    }

  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
    }
  

    function jsCall_ii_0(a1) {
      a1=a1|0;
      return jsCall(0,a1|0)|0;
    }

  

    function jsCall_ii_1(a1) {
      a1=a1|0;
      return jsCall(1,a1|0)|0;
    }

  

    function jsCall_ii_2(a1) {
      a1=a1|0;
      return jsCall(2,a1|0)|0;
    }

  

    function jsCall_ii_3(a1) {
      a1=a1|0;
      return jsCall(3,a1|0)|0;
    }

  

    function jsCall_ii_4(a1) {
      a1=a1|0;
      return jsCall(4,a1|0)|0;
    }

  

    function jsCall_ii_5(a1) {
      a1=a1|0;
      return jsCall(5,a1|0)|0;
    }

  

    function jsCall_ii_6(a1) {
      a1=a1|0;
      return jsCall(6,a1|0)|0;
    }

  

    function jsCall_ii_7(a1) {
      a1=a1|0;
      return jsCall(7,a1|0)|0;
    }

  

    function jsCall_ii_8(a1) {
      a1=a1|0;
      return jsCall(8,a1|0)|0;
    }

  

    function jsCall_ii_9(a1) {
      a1=a1|0;
      return jsCall(9,a1|0)|0;
    }

  

    function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }
  

    function jsCall_iiiiiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function jsCall_iiiiiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
    }

  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
    }
  

    function jsCall_iiii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(0,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(1,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(2,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(3,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(4,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(5,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(6,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(7,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(8,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(9,a1|0,a2|0,a3|0)|0;
    }

  

    function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }
  

    function jsCall_viiiiiiiiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function jsCall_viiiiiiiiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
    }

  

    function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }
  

    function jsCall_viiiiid_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_2(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_3(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_4(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_5(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_6(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_7(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_8(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function jsCall_viiiiid_9(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
    }

  

    function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      FUNCTION_TABLE_viiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }
  

    function jsCall_viiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function jsCall_viiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
    }

  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_5(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_6(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_7(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_8(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_9(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function dynCall_di(index,a1) {
      index = index|0;
      a1=a1|0;
      return +FUNCTION_TABLE_di[index&1023](a1|0);
    }
  

    function jsCall_di_0(a1) {
      a1=a1|0;
      return +jsCall(0,a1|0);
    }

  

    function jsCall_di_1(a1) {
      a1=a1|0;
      return +jsCall(1,a1|0);
    }

  

    function jsCall_di_2(a1) {
      a1=a1|0;
      return +jsCall(2,a1|0);
    }

  

    function jsCall_di_3(a1) {
      a1=a1|0;
      return +jsCall(3,a1|0);
    }

  

    function jsCall_di_4(a1) {
      a1=a1|0;
      return +jsCall(4,a1|0);
    }

  

    function jsCall_di_5(a1) {
      a1=a1|0;
      return +jsCall(5,a1|0);
    }

  

    function jsCall_di_6(a1) {
      a1=a1|0;
      return +jsCall(6,a1|0);
    }

  

    function jsCall_di_7(a1) {
      a1=a1|0;
      return +jsCall(7,a1|0);
    }

  

    function jsCall_di_8(a1) {
      a1=a1|0;
      return +jsCall(8,a1|0);
    }

  

    function jsCall_di_9(a1) {
      a1=a1|0;
      return +jsCall(9,a1|0);
    }

  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function jsCall_viiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_5(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_6(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_7(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_8(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function jsCall_viiiiiii_9(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }

  

    function dynCall_iiddddddi(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return FUNCTION_TABLE_iiddddddi[index&1023](a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }
  

    function jsCall_iiddddddi_0(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(0,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_1(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(1,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_2(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(2,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_3(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(3,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_4(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(4,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_5(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(5,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_6(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(6,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_7(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(7,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_8(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(8,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function jsCall_iiddddddi_9(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0;
      return jsCall(9,a1|0,+a2,+a3,+a4,+a5,+a6,+a7,a8|0)|0;
    }

  

    function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }
  

    function jsCall_viiiiiid_0(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_1(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_2(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_3(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_4(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_5(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_6(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_7(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_8(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function jsCall_viiiiiid_9(a1,a2,a3,a4,a5,a6,a7) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
    }

  

    function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }
  

    function jsCall_viiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function jsCall_viiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
    }

  

    function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }
  

    function jsCall_viiiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function jsCall_viiiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
    }

  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
    }
  

    function jsCall_iii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(0,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(1,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(2,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(3,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(4,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(5,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(6,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(7,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(8,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(9,a1|0,a2|0)|0;
    }

  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_2(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_3(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_4(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_5(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_6(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_7(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_8(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_9(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function dynCall_diii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
    }
  

    function jsCall_diii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(0,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(1,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(2,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(3,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(4,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(5,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(6,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(7,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(8,a1|0,a2|0,a3|0);
    }

  

    function jsCall_diii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return +jsCall(9,a1|0,a2|0,a3|0);
    }

  

    function dynCall_dii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return +FUNCTION_TABLE_dii[index&1023](a1|0,a2|0);
    }
  

    function jsCall_dii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(0,a1|0,a2|0);
    }

  

    function jsCall_dii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(1,a1|0,a2|0);
    }

  

    function jsCall_dii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(2,a1|0,a2|0);
    }

  

    function jsCall_dii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(3,a1|0,a2|0);
    }

  

    function jsCall_dii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(4,a1|0,a2|0);
    }

  

    function jsCall_dii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(5,a1|0,a2|0);
    }

  

    function jsCall_dii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(6,a1|0,a2|0);
    }

  

    function jsCall_dii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(7,a1|0,a2|0);
    }

  

    function jsCall_dii_8(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(8,a1|0,a2|0);
    }

  

    function jsCall_dii_9(a1,a2) {
      a1=a1|0; a2=a2|0;
      return +jsCall(9,a1|0,a2|0);
    }

  

    function dynCall_i(index) {
      index = index|0;
      
      return FUNCTION_TABLE_i[index&1023]()|0;
    }
  

    function jsCall_i_0() {
      
      return jsCall(0)|0;
    }

  

    function jsCall_i_1() {
      
      return jsCall(1)|0;
    }

  

    function jsCall_i_2() {
      
      return jsCall(2)|0;
    }

  

    function jsCall_i_3() {
      
      return jsCall(3)|0;
    }

  

    function jsCall_i_4() {
      
      return jsCall(4)|0;
    }

  

    function jsCall_i_5() {
      
      return jsCall(5)|0;
    }

  

    function jsCall_i_6() {
      
      return jsCall(6)|0;
    }

  

    function jsCall_i_7() {
      
      return jsCall(7)|0;
    }

  

    function jsCall_i_8() {
      
      return jsCall(8)|0;
    }

  

    function jsCall_i_9() {
      
      return jsCall(9)|0;
    }

  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function jsCall_iiiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_8(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_9(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
    }
  

    function jsCall_viii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(0,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(1,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(2,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(3,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(4,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(5,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(6,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(7,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_8(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(8,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_9(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(9,a1|0,a2|0,a3|0);
    }

  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&1023]();
    }
  

    function jsCall_v_0() {
      
      jsCall(0);
    }

  

    function jsCall_v_1() {
      
      jsCall(1);
    }

  

    function jsCall_v_2() {
      
      jsCall(2);
    }

  

    function jsCall_v_3() {
      
      jsCall(3);
    }

  

    function jsCall_v_4() {
      
      jsCall(4);
    }

  

    function jsCall_v_5() {
      
      jsCall(5);
    }

  

    function jsCall_v_6() {
      
      jsCall(6);
    }

  

    function jsCall_v_7() {
      
      jsCall(7);
    }

  

    function jsCall_v_8() {
      
      jsCall(8);
    }

  

    function jsCall_v_9() {
      
      jsCall(9);
    }

  

    function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }
  

    function jsCall_iiiiiiiii_0(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_1(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_2(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_3(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_4(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_5(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_6(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_7(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_8(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(8,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function jsCall_iiiiiiiii_9(a1,a2,a3,a4,a5,a6,a7,a8) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
      return jsCall(9,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
    }

  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
    }
  

    function jsCall_viiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(2,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(3,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(4,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(5,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(6,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(7,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_8(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(8,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_9(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(9,a1|0,a2|0,a3|0,a4|0);
    }

  
function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _pthread_getspecific__wrapper(p0) { p0 = p0|0; return _pthread_getspecific(p0|0)|0; }
  function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(5);return 0; }
  function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(7); }
  function b8(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(8); }
  function b9(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(9); }
  function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10); }
  function b11(p0) { p0 = p0|0; nullFunc_di(11);return +0; }
  function b12(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(12); }
  function b13(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6;p7 = p7|0; nullFunc_iiddddddi(13);return 0; }
  function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(15); }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(16); }
  function b17(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0; }
  function _pthread_once__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _pthread_once(p0|0,p1|0)|0; }
  function b18(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(18);return 0; }
  function b19(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(19);return +0; }
  function b20(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_dii(20);return +0; }
  function b21() { ; nullFunc_i(21);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b22(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(22);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b24() { ; nullFunc_v(24); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function b25(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(25);return 0; }
  function b26(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(26); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,jsCall_iiiiiiii_0,b0,jsCall_iiiiiiii_1,b0,jsCall_iiiiiiii_2,b0,jsCall_iiiiiiii_3,b0,jsCall_iiiiiiii_4,b0,jsCall_iiiiiiii_5,b0,jsCall_iiiiiiii_6,b0,jsCall_iiiiiiii_7,b0,jsCall_iiiiiiii_8,b0,jsCall_iiiiiiii_9,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,__ZN10emscripten8internal12operator_newI4heroJffffff9sexualityEEEPT_DpOT0_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,jsCall_viiiii_0,b1,jsCall_viiiii_1,b1,jsCall_viiiii_2,b1,jsCall_viiiii_3,b1,jsCall_viiiii_4,b1,jsCall_viiiii_5,b1,jsCall_viiiii_6,b1,jsCall_viiiii_7,b1,jsCall_viiiii_8,b1,jsCall_viiiii_9,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1
  ,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,b2,jsCall_vi_0,b2,jsCall_vi_1,b2,jsCall_vi_2,b2,jsCall_vi_3,b2,jsCall_vi_4,b2,jsCall_vi_5,b2,jsCall_vi_6,b2,jsCall_vi_7,b2,jsCall_vi_8,b2,jsCall_vi_9,b2,__ZN4examD1Ev,__ZN4examD0Ev,b2,__ZN8festivalD1Ev,__ZN8festivalD0Ev,b2,__ZN6normalD1Ev
  ,__ZN6normalD0Ev,b2,__ZN7weekendD1Ev,__ZN7weekendD0Ev,b2,__ZN5marchD1Ev,__ZN5marchD0Ev,b2,__ZN11before_examD1Ev,__ZN11before_examD0Ev,b2,__ZN10after_examD1Ev,__ZN10after_examD0Ev,b2,__ZN5danceD1Ev,__ZN5danceD0Ev,b2,__ZN3popD1Ev,__ZN3popD0Ev,__ZN4pokaD1Ev,__ZN4pokaD0Ev,__ZN8vacationD1Ev,__ZN8vacationD0Ev,b2,__ZN11lecendpartyD1Ev,__ZN11lecendpartyD0Ev,b2,__ZN9facepartyD1Ev,__ZN9facepartyD0Ev,__ZN2mtD1Ev
  ,__ZN2mtD0Ev,__ZN13lecstartpartyD1Ev,__ZN13lecstartpartyD0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b2,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b2,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b2,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
  ,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,b2,b2,b2,b2,b2,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b2,b2
  ,b2,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b2,b2,b2,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2
  ,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2
  ,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b2,b2,b2,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b2,b2,b2,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2
  ,b2,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b2,b2,b2,b2,b2,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b2,b2,b2,b2,b2,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2
  ,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b2,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b2,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b2,__ZN10__cxxabiv116__enum_type_infoD0Ev,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b2
  ,b2,b2,b2,b2,b2,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,b2,b2,b2,b2,b2,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERK11TitleEffectNS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED1Ev,b2,b2,__ZN8MapTable16generate_defaultEv,b2,_srand,b2,__ZN10emscripten8internal14raw_destructorI8MonthDayEEvPT_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,__ZN10emscripten8internal14raw_destructorI10GameCenterEEvPT_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI8MapTableEEvPT_,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI4cellEEvPT_,b2,b2,b2,b2,b2
  ,__ZN10emscripten8internal14raw_destructorI6normalEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI7weekendEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI5marchEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI11before_examEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI4examEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI10after_examEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI5danceEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI8vacationEEvPT_,b2
  ,b2,b2,__ZN10emscripten8internal14raw_destructorI8festivalEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI4pokaEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI3popEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI7specialEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI13lecstartpartyEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI11lecendpartyEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorI2mtEEvPT_,b2,b2,b2
  ,__ZN10emscripten8internal14raw_destructorI9facepartyEEvPT_,b2,__ZN10emscripten8internal14raw_destructorI4heroEEvPT_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b2,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__18ios_base4InitD2Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_freelocale__wrapper,__ZNSt3__112__do_nothingEPv,b2,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b2,b2,b2,b2,_free,b2,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxx_global_array_dtor120,b2,___cxx_global_array_dtor105,b2,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b2,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b2,b2,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,jsCall_vii_0,b3,jsCall_vii_1,b3,jsCall_vii_2,b3,jsCall_vii_3,b3,jsCall_vii_4,b3,jsCall_vii_5,b3,jsCall_vii_6,b3,jsCall_vii_7,b3,jsCall_vii_8,b3,jsCall_vii_9,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b3,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv
  ,b3,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZNKSt3__18messagesIcE8do_closeEi,b3,b3,b3,b3,__ZNKSt3__18messagesIwE8do_closeEi,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b3,b3,b3,b3,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,__ZNSt3__18ios_base5clearEj,b3,b3,b3,b3,b3,__ZN8MapTableC1ERKS_,b3,b3,__ZN10emscripten8internal7InvokerIvJjEE6invokeEPFvjEj,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8MonthDay10from_indexEi,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8MapTable8generateERKNSt3__16vectorIP4cellNS0_9allocatorIS3_EEEE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b3,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_abort_message,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,jsCall_ii_0,b4,jsCall_ii_1,b4,jsCall_ii_2,b4,jsCall_ii_3,b4,jsCall_ii_4,b4,jsCall_ii_5,b4,jsCall_ii_6,b4,jsCall_ii_7,b4,jsCall_ii_8,b4,jsCall_ii_9,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b4,b4,b4,b4,b4,__ZNKSt13runtime_error4whatEv,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__119__iostream_category4nameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b4,b4,b4,b4,b4
  ,b4,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b4,b4,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b4,b4,b4,b4,b4,b4,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b4,b4,b4,b4,b4,b4
  ,b4,b4,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b4,b4,b4,b4
  ,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b4
  ,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b4,b4,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv
  ,b4,b4,__ZNKSt11logic_error4whatEv,b4,b4,b4,b4,b4,b4,__ZNKSt8bad_cast4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,__ZNSt3__16locale2id5__getEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal13getActualTypeI8MonthDayEEPKvPT_,b4,__ZNK8MonthDay9get_indexEv,b4,__ZNK8MonthDay9get_monthEv,b4,__ZNK8MonthDay7get_dayEv,b4,b4,b4,b4,b4,__ZN8MonthDay15containing_daysE5Month
  ,__ZN10emscripten8internal13getActualTypeI10GameCenterEEPKvPT_,b4,b4,__ZN10emscripten8internal12operator_newI10GameCenterJ9sexualityEEEPT_DpOT0_,__ZNK10GameCenter7get_mapEv,b4,__ZNK10GameCenter20get_current_positionEv,b4,__ZNK10GameCenter13get_characterEv,b4,__ZN10GameCenter4diceEv,b4,b4,b4,__ZN10emscripten8internal13getActualTypeI8MapTableEEPKvPT_,b4,b4,b4,__ZN10emscripten8internal7InvokerI8MapTableJEE6invokeEPFS2_vE,b4,b4,b4,b4,__ZN10emscripten8internal13getActualTypeI4cellEEPKvPT_,b4,__ZNK4cell9stop_cellEv,b4,__ZN10emscripten8internal13getActualTypeI6normalEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI6normalS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_6normalEEPT0_PT_
  ,b4,__ZN10emscripten8internal13getActualTypeI7weekendEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI7weekendS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_7weekendEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI5marchEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI5marchS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_5marchEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI11before_examEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI11before_examS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_11before_examEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI4examEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI4examS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_4examEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI10after_examEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI10after_examS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_10after_examEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI5danceEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI5danceS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_5danceEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI8vacationEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI8vacationS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_8vacationEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI8festivalEEPKvPT_
  ,__ZN10emscripten4baseI4cellE14convertPointerI8festivalS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_8festivalEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI4pokaEEPKvPT_,__ZN10emscripten4baseI8festivalE14convertPointerI4pokaS1_EEPT0_PT_,__ZN10emscripten4baseI8festivalE14convertPointerIS1_4pokaEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI3popEEPKvPT_,__ZN10emscripten4baseI8festivalE14convertPointerI3popS1_EEPT0_PT_,__ZN10emscripten4baseI8festivalE14convertPointerIS1_3popEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI7specialEEPKvPT_,__ZN10emscripten4baseI4cellE14convertPointerI7specialS1_EEPT0_PT_,__ZN10emscripten4baseI4cellE14convertPointerIS1_7specialEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI13lecstartpartyEEPKvPT_,__ZN10emscripten4baseI7specialE14convertPointerI13lecstartpartyS1_EEPT0_PT_,__ZN10emscripten4baseI7specialE14convertPointerIS1_13lecstartpartyEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI11lecendpartyEEPKvPT_,__ZN10emscripten4baseI7specialE14convertPointerI11lecendpartyS1_EEPT0_PT_,__ZN10emscripten4baseI7specialE14convertPointerIS1_11lecendpartyEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI2mtEEPKvPT_,__ZN10emscripten4baseI7specialE14convertPointerI2mtS1_EEPT0_PT_,__ZN10emscripten4baseI7specialE14convertPointerIS1_2mtEEPT0_PT_,b4,__ZN10emscripten8internal13getActualTypeI9facepartyEEPKvPT_,__ZN10emscripten4baseI7specialE14convertPointerI9facepartyS1_EEPT0_PT_,__ZN10emscripten4baseI7specialE14convertPointerIS1_9facepartyEEPT0_PT_
  ,b4,__ZN10emscripten8internal13getActualTypeI4heroEEPKvPT_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__Znwj,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_uselocale__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_pthread_getspecific__wrapper,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b5,b5,jsCall_iiiiiiiiiiii_0,b5,jsCall_iiiiiiiiiiii_1,b5,jsCall_iiiiiiiiiiii_2,b5,jsCall_iiiiiiiiiiii_3,b5,jsCall_iiiiiiiiiiii_4,b5,jsCall_iiiiiiiiiiii_5,b5,jsCall_iiiiiiiiiiii_6,b5,jsCall_iiiiiiiiiiii_7,b5,jsCall_iiiiiiiiiiii_8,b5,jsCall_iiiiiiiiiiii_9,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b5,b5,b5,b5,b5,b5,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_iiii = [b6,b6,jsCall_iiii_0,b6,jsCall_iiii_1,b6,jsCall_iiii_2,b6,jsCall_iiii_3,b6,jsCall_iiii_4,b6,jsCall_iiii_5,b6,jsCall_iiii_6,b6,jsCall_iiii_7,b6,jsCall_iiii_8,b6,jsCall_iiii_9,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b6,b6,b6,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci
  ,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b6,b6,b6,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b6,b6,b6,b6,b6,b6
  ,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b6,b6,b6,b6,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b6,b6,b6,b6,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b6,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b6,b6,__ZNKSt3__15ctypeIcE9do_narrowEcc,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__15ctypeIwE5do_isEtw,b6,b6,b6,b6,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b6,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b6,b6,__ZNKSt3__15ctypeIwE9do_narrowEwc,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,b6,b6,b6,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,b6,b6,b6,b6,b6
  ,b6,b6,_sn_write,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal7InvokerI8MonthDayJ5MonthiEE6invokeEPFS2_S3_iES3_i,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal13MethodInvokerIM10GameCenterFiiEiPS2_JiEE6invokeERKS4_S5_i,b6,b6,b6,b6,b6,__ZN8MapTable10check_stopEii,b6,b6,__ZN10emscripten8internal13MethodInvokerIM8MapTableFP4celliES4_PS2_JiEE6invokeERKS6_S7_i,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b6,_newlocale__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_do_read,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b7,b7,jsCall_viiiiiiiiiiiiiii_0,b7,jsCall_viiiiiiiiiiiiiii_1,b7,jsCall_viiiiiiiiiiiiiii_2,b7,jsCall_viiiiiiiiiiiiiii_3,b7,jsCall_viiiiiiiiiiiiiii_4,b7,jsCall_viiiiiiiiiiiiiii_5,b7,jsCall_viiiiiiiiiiiiiii_6,b7,jsCall_viiiiiiiiiiiiiii_7,b7,jsCall_viiiiiiiiiiiiiii_8,b7,jsCall_viiiiiiiiiiiiiii_9,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b7,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viiiiid = [b8,b8,jsCall_viiiiid_0,b8,jsCall_viiiiid_1,b8,jsCall_viiiiid_2,b8,jsCall_viiiiid_3,b8,jsCall_viiiiid_4,b8,jsCall_viiiiid_5,b8,jsCall_viiiiid_6,b8,jsCall_viiiiid_7,b8,jsCall_viiiiid_8,b8,jsCall_viiiiid_9,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiiiii = [b9,b9,jsCall_viiiiiiii_0,b9,jsCall_viiiiiiii_1,b9,jsCall_viiiiiiii_2,b9,jsCall_viiiiiiii_3,b9,jsCall_viiiiiiii_4,b9,jsCall_viiiiiiii_5,b9,jsCall_viiiiiiii_6,b9,jsCall_viiiiiiii_7,b9,jsCall_viiiiiiii_8,b9,jsCall_viiiiiiii_9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b9,b9,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b9,b9,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9];
  var FUNCTION_TABLE_viiiiii = [b10,b10,jsCall_viiiiii_0,b10,jsCall_viiiiii_1,b10,jsCall_viiiiii_2,b10,jsCall_viiiiii_3,b10,jsCall_viiiiii_4,b10,jsCall_viiiiii_5,b10,jsCall_viiiiii_6,b10,jsCall_viiiiii_7,b10,jsCall_viiiiii_8,b10,jsCall_viiiiii_9,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b10,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_di = [b11,b11,jsCall_di_0,b11,jsCall_di_1,b11,jsCall_di_2,b11,jsCall_di_3,b11,jsCall_di_4,b11,jsCall_di_5,b11,jsCall_di_6,b11,jsCall_di_7,b11,jsCall_di_8,b11,jsCall_di_9,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,__ZNK4hero8get_loveEv,b11,__ZNK4hero10get_energyEv,__ZNK4hero16get_relationshipEv,__ZNK4hero16get_self_developEv,__ZNK4hero9get_studyEv,__ZNK4hero10get_stressEv,__ZNK4hero14get_MAX_ENERGYEv,__ZNK4hero12get_MAX_LOVEEv,__ZNK4hero20get_MAX_RELATIONSHIPEv,__ZNK4hero20get_MAX_SELF_DEVELOPEv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_viiiiiii = [b12,b12,jsCall_viiiiiii_0,b12,jsCall_viiiiiii_1,b12,jsCall_viiiiiii_2,b12,jsCall_viiiiiii_3,b12,jsCall_viiiiiii_4,b12,jsCall_viiiiiii_5,b12,jsCall_viiiiiii_6,b12,jsCall_viiiiiii_7,b12,jsCall_viiiiiii_8,b12,jsCall_viiiiiii_9,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b12,b12,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd
  ,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b12,b12,b12,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b12,b12,b12,b12,b12,b12,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b12,b12,b12,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b12,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_iiddddddi = [b13,b13,jsCall_iiddddddi_0,b13,jsCall_iiddddddi_1,b13,jsCall_iiddddddi_2,b13,jsCall_iiddddddi_3,b13,jsCall_iiddddddi_4,b13,jsCall_iiddddddi_5,b13,jsCall_iiddddddi_6,b13,jsCall_iiddddddi_7,b13,jsCall_iiddddddi_8,b13,jsCall_iiddddddi_9,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,__ZN10emscripten8internal7InvokerIP4heroJOfS4_S4_S4_S4_S4_O9sexualityEE6invokeEPFS3_S4_S4_S4_S4_S4_S4_S6_EffffffS5_,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiid = [b14,b14,jsCall_viiiiiid_0,b14,jsCall_viiiiiid_1,b14,jsCall_viiiiiid_2,b14,jsCall_viiiiiid_3,b14,jsCall_viiiiiid_4,b14,jsCall_viiiiiid_5,b14,jsCall_viiiiiid_6,b14,jsCall_viiiiiid_7,b14,jsCall_viiiiiid_8,b14,jsCall_viiiiiid_9,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b14,b14,b14,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14];
  var FUNCTION_TABLE_viiiiiiiii = [b15,b15,jsCall_viiiiiiiii_0,b15,jsCall_viiiiiiiii_1,b15,jsCall_viiiiiiiii_2,b15,jsCall_viiiiiiiii_3,b15,jsCall_viiiiiiiii_4,b15,jsCall_viiiiiiiii_5,b15,jsCall_viiiiiiiii_6,b15,jsCall_viiiiiiiii_7,b15,jsCall_viiiiiiiii_8,b15,jsCall_viiiiiiiii_9,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15];
  var FUNCTION_TABLE_viiiiiiiiii = [b16,b16,jsCall_viiiiiiiiii_0,b16,jsCall_viiiiiiiiii_1,b16,jsCall_viiiiiiiiii_2,b16,jsCall_viiiiiiiiii_3,b16,jsCall_viiiiiiiiii_4,b16,jsCall_viiiiiiiiii_5,b16,jsCall_viiiiiiiiii_6,b16,jsCall_viiiiiiiiii_7,b16,jsCall_viiiiiiiiii_8,b16,jsCall_viiiiiiiiii_9,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b16,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16];
  var FUNCTION_TABLE_iii = [b17,b17,jsCall_iii_0,b17,jsCall_iii_1,b17,jsCall_iii_2,b17,jsCall_iii_3,b17,jsCall_iii_4,b17,jsCall_iii_5,b17,jsCall_iii_6,b17,jsCall_iii_7,b17,jsCall_iii_8,b17,jsCall_iii_9,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b17,__ZNSt3__111__stdoutbufIwE8overflowEj,b17,b17,b17,b17,b17,b17,__ZNSt3__110__stdinbufIwE9pbackfailEj,b17,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b17,__ZNSt3__111__stdoutbufIcE8overflowEi,b17,b17,b17,b17,b17,b17,__ZNSt3__110__stdinbufIcE9pbackfailEi,b17,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIcE10do_toupperEc,b17,__ZNKSt3__15ctypeIcE10do_tolowerEc,b17,__ZNKSt3__15ctypeIcE8do_widenEc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__15ctypeIwE10do_toupperEw,b17,__ZNKSt3__15ctypeIwE10do_tolowerEw,b17,__ZNKSt3__15ctypeIwE8do_widenEc,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10emscripten8internal12GetterPolicyIM8MonthDayKFivEE3getIS2_EEiRKS4_RKT_,b17,__ZN10emscripten8internal12GetterPolicyIM8MonthDayKF5MonthvEE3getIS2_EES3_RKS5_RKT_,b17,__ZN10emscripten8internal7InvokerI8MonthDayJiEE6invokeEPFS2_iEi,b17,b17,b17,__ZN10emscripten8internal7InvokerIiJ5MonthEE6invokeEPFiS2_ES2_,b17
  ,b17,b17,__ZN10emscripten8internal7InvokerIP10GameCenterJO9sexualityEE6invokeEPFS3_S5_ES4_,b17,b17,__ZN10emscripten8internal12GetterPolicyIM10GameCenterKFRK8MapTablevEE3getIS2_EEPS3_RKS7_RKT_,b17,__ZN10emscripten8internal12GetterPolicyIM10GameCenterKFivEE3getIS2_EEiRKS4_RKT_,b17,__ZN10emscripten8internal12GetterPolicyIM10GameCenterKFRK4herovEE3getIS2_EEPS3_RKS7_RKT_,b17,__ZN10emscripten8internal13MethodInvokerIM10GameCenterFivEiPS2_JEE6invokeERKS4_S5_,__ZN10GameCenter4moveEi,b17,b17,b17,__ZN10emscripten8internal7InvokerI8MapTableJRKNSt3__16vectorIP4cellNS3_9allocatorIS6_EEEEEE6invokeEPFS2_SB_EPS9_,b17,b17,b17,b17,__ZN8MapTable2atEi,b17,b17,b17,b17,__ZN10emscripten8internal12GetterPolicyIM4cellKFbvEE3getIS2_EEbRKS4_RKT_,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__16locale9use_facetERNS0_2idE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_pthread_once__wrapper,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17];
  var FUNCTION_TABLE_iiiiii = [b18,b18,jsCall_iiiiii_0,b18,jsCall_iiiiii_1,b18,jsCall_iiiiii_2,b18,jsCall_iiiiii_3,b18,jsCall_iiiiii_4,b18,jsCall_iiiiii_5,b18,jsCall_iiiiii_6,b18,jsCall_iiiiii_7,b18,jsCall_iiiiii_8,b18,jsCall_iiiiii_9,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b18
  ,b18,b18,b18,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b18,b18,b18,b18,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc
  ,b18,b18,b18,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b18,b18,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18];
  var FUNCTION_TABLE_diii = [b19,b19,jsCall_diii_0,b19,jsCall_diii_1,b19,jsCall_diii_2,b19,jsCall_diii_3,b19,jsCall_diii_4,b19,jsCall_diii_5,b19,jsCall_diii_6,b19,jsCall_diii_7,b19,jsCall_diii_8,b19,jsCall_diii_9,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19];
  var FUNCTION_TABLE_dii = [b20,b20,jsCall_dii_0,b20,jsCall_dii_1,b20,jsCall_dii_2,b20,jsCall_dii_3,b20,jsCall_dii_4,b20,jsCall_dii_5,b20,jsCall_dii_6,b20,jsCall_dii_7,b20,jsCall_dii_8,b20,jsCall_dii_9,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal12GetterPolicyIM4heroKFfvEE3getIS2_EEfRKS4_RKT_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20];
  var FUNCTION_TABLE_i = [b21,b21,jsCall_i_0,b21,jsCall_i_1,b21,jsCall_i_2,b21,jsCall_i_3,b21,jsCall_i_4,b21,jsCall_i_5,b21,jsCall_i_6,b21,jsCall_i_7,b21,jsCall_i_8,b21,jsCall_i_9,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,__ZNSt3__16__clocEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,___ctype_b_loc__wrapper,b21,b21,b21,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21];
  var FUNCTION_TABLE_iiiii = [b22,b22,jsCall_iiiii_0,b22,jsCall_iiiii_1,b22,jsCall_iiiii_2,b22,jsCall_iiiii_3,b22,jsCall_iiiii_4,b22,jsCall_iiiii_5,b22,jsCall_iiiii_6,b22,jsCall_iiiii_7,b22,jsCall_iiiii_8,b22,jsCall_iiiii_9,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN10emscripten8internal13MethodInvokerIM8MapTableFiiiEiPS2_JiiEE6invokeERKS4_S5_ii,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji
  ,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,_catgets__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22];
  var FUNCTION_TABLE_viii = [b23,b23,jsCall_viii_0,b23,jsCall_viii_1,b23,jsCall_viii_2,b23,jsCall_viii_3,b23,jsCall_viii_4,b23,jsCall_viii_5,b23,jsCall_viii_6,b23,jsCall_viii_7,b23,jsCall_viii_8,b23,jsCall_viii_9,b23,b23,b23,__ZN4exam11call_optionEP4heroi,b23,b23,__ZN8festival11call_optionEP4heroi,b23
  ,b23,__ZN6normal11call_optionEP4heroi,b23,b23,__ZN7weekend11call_optionEP4heroi,b23,b23,__ZN5march11call_optionEP4heroi,b23,b23,__ZN11before_exam11call_optionEP4heroi,b23,b23,__ZN10after_exam11call_optionEP4heroi,b23,b23,__ZN5dance11call_optionEP4heroi,b23,b23,b23,b23,b23,b23,__ZN8vacation11call_optionEP4heroi,b23,b23,__ZN7special11call_optionEP4heroi,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__114error_category23default_error_conditionEi,b23,b23,__ZNKSt3__119__iostream_category7messageEi,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,___cxa_throw__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN8MonthDay13from_calendarE5Monthi,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23,b23,b23,b23,b23,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23
  ,b23,b23,b23,b23,b23,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23];
  var FUNCTION_TABLE_v = [b24,b24,jsCall_v_0,b24,jsCall_v_1,b24,jsCall_v_2,b24,jsCall_v_3,b24,jsCall_v_4,b24,jsCall_v_5,b24,jsCall_v_6,b24,jsCall_v_7,b24,jsCall_v_8,b24,jsCall_v_9,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZL25default_terminate_handlerv,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b24,__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv,b24,b24,__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24];
  var FUNCTION_TABLE_iiiiiiiii = [b25,b25,jsCall_iiiiiiiii_0,b25,jsCall_iiiiiiiii_1,b25,jsCall_iiiiiiiii_2,b25,jsCall_iiiiiiiii_3,b25,jsCall_iiiiiiiii_4,b25,jsCall_iiiiiiiii_5,b25,jsCall_iiiiiiiii_6,b25,jsCall_iiiiiiiii_7,b25,jsCall_iiiiiiiii_8,b25,jsCall_iiiiiiiii_9,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25];
  var FUNCTION_TABLE_viiii = [b26,b26,jsCall_viiii_0,b26,jsCall_viiii_1,b26,jsCall_viiii_2,b26,jsCall_viiii_3,b26,jsCall_viiii_4,b26,jsCall_viiii_5,b26,jsCall_viiii_6,b26,jsCall_viiii_7,b26,jsCall_viiii_8,b26,jsCall_viiii_9,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__17collateIcE12do_transformEPKcS3_
  ,b26,b26,b26,b26,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26
  ,b26,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26];

    return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memset: _memset, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Subtract: _i64Subtract, _strlen: _strlen, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a87: __GLOBAL__I_a87, __GLOBAL__I_a125: __GLOBAL__I_a125, __GLOBAL__I_a209: __GLOBAL__I_a209, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_di: dynCall_di, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_iiddddddi: dynCall_iiddddddi, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "min": Math_min, "jsCall": jsCall, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_di": nullFunc_di, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_iiddddddi": nullFunc_iiddddddi, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_di": invoke_di, "invoke_viiiiiii": invoke_viiiiiii, "invoke_iiddddddi": invoke_iiddddddi, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "___cxa_guard_acquire": ___cxa_guard_acquire, "getLiveInheritedInstances": getLiveInheritedInstances, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "__addDays": __addDays, "_sbrk": _sbrk, "__embind_register_class_class_function": __embind_register_class_class_function, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "_sysconf": _sysconf, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "genericPointerToWireType": genericPointerToWireType, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "_fileno": _fileno, "flushPendingDeletes": flushPendingDeletes, "_fread": _fread, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_write": _write, "__isLeapYear": __isLeapYear, "__embind_register_class_constructor": __embind_register_class_constructor, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "init_ClassHandle": init_ClassHandle, "_catclose": _catclose, "_llvm_trap": _llvm_trap, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "_fmodl": _fmodl, "_send": _send, "RegisteredClass": RegisteredClass, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "__embind_register_emval": __embind_register_emval, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "___setErrNo": ___setErrNo, "readLatin1String": readLatin1String, "_newlocale": _newlocale, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "_freelocale": _freelocale, "createNamedFunction": createNamedFunction, "__embind_register_class_property": __embind_register_class_property, "embind_init_charCodes": embind_init_charCodes, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "_pthread_mutex_unlock": _pthread_mutex_unlock, "___ctype_toupper_loc": ___ctype_toupper_loc, "init_embind": init_embind, "ClassHandle_clone": ClassHandle_clone, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "_mkport": _mkport, "_read": _read, "RegisteredPointer_destructor": RegisteredPointer_destructor, "ensureOverloadTable": ensureOverloadTable, "_time": _time, "_fprintf": _fprintf, "new_": new_, "downcastPointer": downcastPointer, "_catopen": _catopen, "replacePublicSymbol": replacePublicSymbol, "___cxa_guard_abort": ___cxa_guard_abort, "__embind_register_class": __embind_register_class, "ClassHandle_deleteLater": ClassHandle_deleteLater, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "ClassHandle_isDeleted": ClassHandle_isDeleted, "_vfprintf": _vfprintf, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "_pwrite": _pwrite, "_uselocale": _uselocale, "___cxa_end_catch": ___cxa_end_catch, "enumReadValueFromPointer": enumReadValueFromPointer, "_embind_repr": _embind_repr, "_strftime": _strftime, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "_pthread_cond_broadcast": _pthread_cond_broadcast, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_recv": _recv, "_copysign": _copysign, "registerType": registerType, "_abort": _abort, "throwBindingError": throwBindingError, "getTypeName": getTypeName, "validateThis": validateThis, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "__embind_register_enum": __embind_register_enum, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "_ungetc": _ungetc, "_fwrite": _fwrite, "__embind_register_void": __embind_register_void, "__embind_register_function": __embind_register_function, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "_catgets": _catgets, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_class_function": __embind_register_class_function, "RegisteredPointer": RegisteredPointer, "__arraySum": __arraySum, "_calloc": _calloc, "___ctype_tolower_loc": ___ctype_tolower_loc, "getBasestPointer": getBasestPointer, "_pread": _pread, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "_getc": _getc, "__embind_register_enum_value": __embind_register_enum_value, "_fflush": _fflush, "___errno_location": ___errno_location, "___cxa_guard_release": ___cxa_guard_release, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_copysignl": _copysignl, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
  var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_a.apply(null, arguments);
};

var real___GLOBAL__I_a87 = asm["__GLOBAL__I_a87"]; asm["__GLOBAL__I_a87"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_a87.apply(null, arguments);
};

var real___GLOBAL__I_a125 = asm["__GLOBAL__I_a125"]; asm["__GLOBAL__I_a125"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_a125.apply(null, arguments);
};

var real___GLOBAL__I_a209 = asm["__GLOBAL__I_a209"]; asm["__GLOBAL__I_a209"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_a209.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a87 = Module["__GLOBAL__I_a87"] = asm["__GLOBAL__I_a87"];
var __GLOBAL__I_a125 = Module["__GLOBAL__I_a125"] = asm["__GLOBAL__I_a125"];
var __GLOBAL__I_a209 = Module["__GLOBAL__I_a209"] = asm["__GLOBAL__I_a209"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_iiddddddi = Module["dynCall_iiddddddi"] = asm["dynCall_iiddddddi"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



